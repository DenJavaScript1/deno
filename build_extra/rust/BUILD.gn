import("rust.gni")

# Dependencies between third party crates is mapped out here manually.  This is
# not so difficult and having it be tedious to add dependencies might help us
# avoid dependency hell later on.
# Versioning for third party rust crates is controlled in //gclient_config.py
# TODO(ry) Use Cargo for versioning?

# By compiling an empty file as crate-type=staticlib we get all the code
# for the rust stdlib, which are not included in the object file outputs
# of other libs.
# TODO(ry) This is not used and maybe should be removed along with empty.rs.
rust_staticlib("stdlib") {
  source_root = "empty.rs"
}

crates = "//third_party/rust_crates"

rust_component("libc") {
  source_root = "$crates/git/checkouts/libc-d1297d136f47e864/8a85d66/src/lib.rs"
  cfg = [ "feature=\"use_std\"" ]
}

rust_component("url") {
  source_root = "$crates/git/checkouts/rust-url-3ddac0958e207dae/fbe5e50/src/lib.rs"
  extern = [
    ":matches",
    ":idna",
    ":percent_encoding",
  ]
}

rust_component("percent_encoding") {
  source_root = "$crates/git/checkouts/rust-url-3ddac0958e207dae/fbe5e50/percent_encoding/lib.rs"
}

rust_component("matches") {
  source_root = "$crates/registry/src/github.com-1ecc6299db9ec823/matches-0.1.6/lib.rs"
}

rust_component("idna") {
  source_root = "$crates/git/checkouts/rust-url-3ddac0958e207dae/fbe5e50/idna/src/lib.rs"
  extern = [
    ":matches",
    ":unicode_bidi",
    ":unicode_normalization",
  ]
}

rust_component("unicode_bidi") {
  source_root = "$crates/registry/src/github.com-1ecc6299db9ec823/unicode-bidi-0.3.4/src/lib.rs"
  extern = [ ":matches" ]
}

rust_component("unicode_normalization") {
  source_root = "$crates/registry/src/github.com-1ecc6299db9ec823/unicode-normalization-0.1.7/src/lib.rs"
}

rust_component("log") {
  source_root = "$crates/git/checkouts/log-5758b9b68b030275/7a60286/src/lib.rs"
  extern = [ ":cfg_if" ]
}

rust_component("cfg_if") {
  source_root = "$crates/registry/src/github.com-1ecc6299db9ec823/cfg-if-0.1.4/src/lib.rs"
}
