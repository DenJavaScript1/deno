struct foo {
    _phantom: ::std::marker::PhantomData<()>,
}
impl foo {}
fn foo(
    _: v8::Local<v8::Object>,
    state: &mut OpState,
    a: u32,
    b: u32,
    fast_api_callback_options: *mut v8::fast_api::FastApiCallbackOptions,
) -> () {
    let opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
        &mut *fast_api_callback_options
    };
    let data = unsafe { opts.data.data };
    let ctx = unsafe {
        &*(v8::Local::<v8::External>::cast(data).value() as *const _ops::OpCtx)
    };
    let state = &mut std::cell::RefCell::borrow_mut(&ctx.state);
    let result = foo::call(state, a, b);
}
