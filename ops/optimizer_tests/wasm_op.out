struct op_wasm_fast {
    _phantom: ::std::marker::PhantomData<()>,
}
impl<'scope> deno_core::v8::fast_api::FastFunction for op_wasm_fast {
    fn function(&self) -> *const ::std::ffi::c_void {
        op_wasm_fast_fn as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value, CallbackOptions]
    }
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Void
    }
}
fn op_wasm_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    fast_api_callback_options: *mut deno_core::v8::fast_api::FastApiCallbackOptions,
) -> () {
    use deno_core::v8;
    use deno_core::_ops;
    let __opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
        &mut *fast_api_callback_options
    };
    let memory = unsafe {
        &*(__opts.wasm_memory as *const deno_core::v8::fast_api::FastApiTypedArray<u8>)
    }
        .get_storage_if_aligned();
    let result = op_wasm::call(memory);
    result
}
