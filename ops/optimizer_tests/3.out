struct op_foo<SP> {
    _phantom: ::std::marker::PhantomData<SP>,
}
impl op_foo {
    fn function(&self) -> *const ::std::ffi::c_void {
        op_name as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [v8::fast_api::Type] {
        &[]
    }
    fn return_type(&self) -> v8::fast_api::CType {
        v8::fast_api::CType::Void
    }
}
fn op_foo<'scope, SP>(
    _: v8::Local<v8::Object>,
    state: &mut OpState,
    fast_api_callback_options: *mut v8::fast_api::FastApiCallbackOptions,
) -> ()
where
    SP: SomePermission + 'static,
{
    let opts: &mut v8::fast_api::FastApiCallbackOptions = unsafe {
        &mut *fast_api_callback_options
    };
    let data = unsafe { opts.data.data };
    let ctx = unsafe {
        &*(v8::Local::<v8::External>::cast(data).value() as *const _ops::OpCtx)
    };
    let state = &mut std::cell::RefCell::borrow_mut(&ctx.state);
    let result = op_foo::call(state);
    result
}
