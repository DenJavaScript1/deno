struct op_string_length_fast {
    _phantom: ::std::marker::PhantomData<()>,
}
impl<'scope> deno_core::v8::fast_api::FastFunction for op_string_length_fast {
    fn function(&self) -> *const ::std::ffi::c_void {
        op_string_length_fast_fn as *const ::std::ffi::c_void
    }
    fn args(&self) -> &'static [deno_core::v8::fast_api::Type] {
        use deno_core::v8::fast_api::Type::*;
        use deno_core::v8::fast_api::CType;
        &[V8Value, SeqOneByteString]
    }
    fn return_type(&self) -> deno_core::v8::fast_api::CType {
        deno_core::v8::fast_api::CType::Uint32
    }
}
fn op_string_length_fast_fn<'scope>(
    _: deno_core::v8::Local<deno_core::v8::Object>,
    string: *const deno_core::v8::fast_api::FastApiOneByteString,
) -> u32 {
    use deno_core::v8;
    use deno_core::_ops;
    let string = unsafe { &*string }.as_str().to_owned();
    let result = op_string_length::call(string);
    result
}
