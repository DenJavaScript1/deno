# Copyright 2018 the Deno authors. All rights reserved. MIT license.
import("./deno.gni")
import("//third_party/v8/gni/v8.gni")

config("common_config") {
  if (is_debug) {
    defines = [ "DEBUG" ]
  }
  if (is_clang) {
    cflags = [
      "-fcolor-diagnostics",
      "-fansi-escape-codes",
    ]
  }
}

config("deno_config") {
  include_dirs = [ "//third_party/v8" ]  # This allows us to v8/src/base/ libraries.
  configs = [
    ":common_config",
    "//third_party/v8:external_config",
  ]
}

config("v8_config") {
  configs = [
    ":common_config",
    "//third_party/v8:internal_config",
  ]
}

config("win_crt_agnostic") {
  if (is_win) {
    cflags = [ "/Zl" ]
  }
}

v8_static_library("v8") {
  configs = [
    ":v8_config",
    ":win_crt_agnostic",
  ]
  deps = [
    "//third_party/v8:v8",
    "//third_party/v8:v8_libbase",
    "//third_party/v8:v8_libplatform",
    "//third_party/v8:v8_libsampler",
  ]
}

# Only functionality needed for libdeno_test and snapshot_creator
# In particular no flatbuffers, no assets, no rust, no msg handlers.
# Because snapshots are slow, it's important that snapshot_creator's
# dependencies are minimal.
# The cargo-driven build links with libdeno to pull in all non-rust code.
v8_static_library("libdeno") {
  configs = [
    ":deno_config",
    ":win_crt_agnostic",
  ]
  sources = [
    "api.cc",
    "binding.cc",
    "deno.h",
    "file_util.cc",
    "file_util.h",
    "internal.h",
  ]
  if (!use_prebuilt_v8 && is_win) {
    deps = [
      ":v8",
      "//build/config:shared_library_deps",
    ]
  } else {
    # TODO(ry) It would be nice to have a standalone target for the prebuilt
    # library that could simply be added to the deps here, but it wasn't
    # obvious how to accomplish that in gn.
    if (is_mac) {
      libs = [ "//prebuilt/mac/libv8.a" ]
    } else if (is_linux) {
      libs = [ "//prebuilt/linux64/libv8.a" ]
    } else {
      assert(false, "We don't have prebuilt binaries for this platform yet.")
    }
  }
}

v8_executable("snapshot_creator") {
  sources = [
    "snapshot_creator.cc",
  ]
  deps = [
    ":libdeno",
  ]
  configs = [ ":deno_config" ]
}

v8_executable("test_cc") {
  testonly = true
  sources = [
    "file_util_test.cc",
    "libdeno_test.cc",
    "test.cc",
  ]
  deps = [
    ":libdeno",
    ":snapshot_test",
    "//testing/gtest:gtest",
  ]
  data = [
    "$target_gen_dir/snapshot_test.bin",
  ]
  snapshot_path = rebase_path(data[0], root_build_dir)
  defines = [ "SNAPSHOT_PATH=\"$snapshot_path\"" ]
  configs = [ ":deno_config" ]
}

# Generates $target_gen_dir/snapshot_test.bin
snapshot("snapshot_test") {
  testonly = true
  source_root = "libdeno_test.js"
}
