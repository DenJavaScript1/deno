<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="14984"><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.03%)</title><rect x="0.0000%" y="597" width="0.0267%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="607.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11917 (4 samples, 0.03%)</title><rect x="0.0267%" y="597" width="0.0267%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="4"/><text x="0.2767%" y="607.50"></text></g><g><title>deno`OUTLINED_FUNCTION_16854 (4 samples, 0.03%)</title><rect x="0.0601%" y="597" width="0.0267%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="4"/><text x="0.3101%" y="607.50"></text></g><g><title>deno`OUTLINED_FUNCTION_19076 (3 samples, 0.02%)</title><rect x="0.0868%" y="597" width="0.0200%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="3"/><text x="0.3368%" y="607.50"></text></g><g><title>deno`OUTLINED_FUNCTION_229 (2 samples, 0.01%)</title><rect x="0.1068%" y="597" width="0.0133%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="2"/><text x="0.3568%" y="607.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3599 (5 samples, 0.03%)</title><rect x="0.1268%" y="597" width="0.0334%" height="15" fill="rgb(232,128,0)" fg:x="19" fg:w="5"/><text x="0.3768%" y="607.50"></text></g><g><title>deno`OUTLINED_FUNCTION_72 (2 samples, 0.01%)</title><rect x="0.1668%" y="597" width="0.0133%" height="15" fill="rgb(207,160,47)" fg:x="25" fg:w="2"/><text x="0.4168%" y="607.50"></text></g><g><title>deno`OUTLINED_FUNCTION_8302 (8 samples, 0.05%)</title><rect x="0.1802%" y="597" width="0.0534%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="8"/><text x="0.4302%" y="607.50"></text></g><g><title>deno`OUTLINED_FUNCTION_925 (6 samples, 0.04%)</title><rect x="0.2336%" y="597" width="0.0400%" height="15" fill="rgb(218,30,26)" fg:x="35" fg:w="6"/><text x="0.4836%" y="607.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9484 (6 samples, 0.04%)</title><rect x="0.2736%" y="597" width="0.0400%" height="15" fill="rgb(220,122,19)" fg:x="41" fg:w="6"/><text x="0.5236%" y="607.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.01%)</title><rect x="0.3137%" y="597" width="0.0133%" height="15" fill="rgb(250,228,42)" fg:x="47" fg:w="2"/><text x="0.5637%" y="607.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.6140%" y="565" width="0.0133%" height="15" fill="rgb(240,193,28)" fg:x="92" fg:w="2"/><text x="0.8640%" y="575.50"></text></g><g><title>deno`&lt;tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set::Reset as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="0.6273%" y="565" width="0.0400%" height="15" fill="rgb(216,20,37)" fg:x="94" fg:w="6"/><text x="0.8773%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.03%)</title><rect x="0.6407%" y="549" width="0.0267%" height="15" fill="rgb(206,188,39)" fg:x="96" fg:w="4"/><text x="0.8907%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_30409 (9 samples, 0.06%)</title><rect x="0.6741%" y="565" width="0.0601%" height="15" fill="rgb(217,207,13)" fg:x="101" fg:w="9"/><text x="0.9241%" y="575.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.01%)</title><rect x="0.7408%" y="565" width="0.0133%" height="15" fill="rgb(231,73,38)" fg:x="111" fg:w="2"/><text x="0.9908%" y="575.50"></text></g><g><title>deno`OUTLINED_FUNCTION_186 (2 samples, 0.01%)</title><rect x="0.9343%" y="533" width="0.0133%" height="15" fill="rgb(225,20,46)" fg:x="140" fg:w="2"/><text x="1.1843%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_7469 (2 samples, 0.01%)</title><rect x="0.9610%" y="533" width="0.0133%" height="15" fill="rgb(210,31,41)" fg:x="144" fg:w="2"/><text x="1.2110%" y="543.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.05%)</title><rect x="1.2080%" y="485" width="0.0467%" height="15" fill="rgb(221,200,47)" fg:x="181" fg:w="7"/><text x="1.4580%" y="495.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="1.2547%" y="485" width="0.0133%" height="15" fill="rgb(226,26,5)" fg:x="188" fg:w="2"/><text x="1.5047%" y="495.50"></text></g><g><title>deno`OUTLINED_FUNCTION_24886 (2 samples, 0.01%)</title><rect x="1.2680%" y="485" width="0.0133%" height="15" fill="rgb(249,33,26)" fg:x="190" fg:w="2"/><text x="1.5180%" y="495.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.01%)</title><rect x="1.2814%" y="485" width="0.0133%" height="15" fill="rgb(235,183,28)" fg:x="192" fg:w="2"/><text x="1.5314%" y="495.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="1.3014%" y="485" width="0.0334%" height="15" fill="rgb(221,5,38)" fg:x="195" fg:w="5"/><text x="1.5514%" y="495.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[v8::handle::Global&lt;v8::data::Function&gt;]&gt; (2 samples, 0.01%)</title><rect x="1.3348%" y="485" width="0.0133%" height="15" fill="rgb(247,18,42)" fg:x="200" fg:w="2"/><text x="1.5848%" y="495.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (2 samples, 0.01%)</title><rect x="1.3548%" y="485" width="0.0133%" height="15" fill="rgb(241,131,45)" fg:x="203" fg:w="2"/><text x="1.6048%" y="495.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (5 samples, 0.03%)</title><rect x="1.3748%" y="485" width="0.0334%" height="15" fill="rgb(249,31,29)" fg:x="206" fg:w="5"/><text x="1.6248%" y="495.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (2 samples, 0.01%)</title><rect x="1.4082%" y="485" width="0.0133%" height="15" fill="rgb(225,111,53)" fg:x="211" fg:w="2"/><text x="1.6582%" y="495.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="2.0555%" y="453" width="0.0133%" height="15" fill="rgb(238,160,17)" fg:x="308" fg:w="2"/><text x="2.3055%" y="463.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (2 samples, 0.01%)</title><rect x="2.0689%" y="453" width="0.0133%" height="15" fill="rgb(214,148,48)" fg:x="310" fg:w="2"/><text x="2.3189%" y="463.50"></text></g><g><title>deno`v8__Global__New (4 samples, 0.03%)</title><rect x="2.0822%" y="453" width="0.0267%" height="15" fill="rgb(232,36,49)" fg:x="312" fg:w="4"/><text x="2.3322%" y="463.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="2.0956%" y="437" width="0.0133%" height="15" fill="rgb(209,103,24)" fg:x="314" fg:w="2"/><text x="2.3456%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.07%)</title><rect x="2.1089%" y="453" width="0.0734%" height="15" fill="rgb(229,88,8)" fg:x="316" fg:w="11"/><text x="2.3589%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.04%)</title><rect x="2.1423%" y="437" width="0.0400%" height="15" fill="rgb(213,181,19)" fg:x="321" fg:w="6"/><text x="2.3923%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="2.1556%" y="421" width="0.0267%" height="15" fill="rgb(254,191,54)" fg:x="323" fg:w="4"/><text x="2.4056%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="2.1623%" y="405" width="0.0200%" height="15" fill="rgb(241,83,37)" fg:x="324" fg:w="3"/><text x="2.4123%" y="415.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.14%)</title><rect x="2.0555%" y="469" width="0.1401%" height="15" fill="rgb(233,36,39)" fg:x="308" fg:w="21"/><text x="2.3055%" y="479.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (11 samples, 0.07%)</title><rect x="2.2624%" y="453" width="0.0734%" height="15" fill="rgb(226,3,54)" fg:x="339" fg:w="11"/><text x="2.5124%" y="463.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (29 samples, 0.19%)</title><rect x="2.1957%" y="469" width="0.1935%" height="15" fill="rgb(245,192,40)" fg:x="329" fg:w="29"/><text x="2.4457%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.05%)</title><rect x="2.3425%" y="453" width="0.0467%" height="15" fill="rgb(238,167,29)" fg:x="351" fg:w="7"/><text x="2.5925%" y="463.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="2.3892%" y="469" width="0.0334%" height="15" fill="rgb(232,182,51)" fg:x="358" fg:w="5"/><text x="2.6392%" y="479.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.02%)</title><rect x="2.4293%" y="469" width="0.0200%" height="15" fill="rgb(231,60,39)" fg:x="364" fg:w="3"/><text x="2.6793%" y="479.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_lock (2 samples, 0.01%)</title><rect x="2.4626%" y="469" width="0.0133%" height="15" fill="rgb(208,69,12)" fg:x="369" fg:w="2"/><text x="2.7126%" y="479.50"></text></g><g><title>deno`__rust_alloc (2 samples, 0.01%)</title><rect x="2.4960%" y="469" width="0.0133%" height="15" fill="rgb(235,93,37)" fg:x="374" fg:w="2"/><text x="2.7460%" y="479.50"></text></g><g><title>deno`__rust_alloc (3 samples, 0.02%)</title><rect x="2.5227%" y="453" width="0.0200%" height="15" fill="rgb(213,116,39)" fg:x="378" fg:w="3"/><text x="2.7727%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.03%)</title><rect x="2.5694%" y="405" width="0.0334%" height="15" fill="rgb(222,207,29)" fg:x="385" fg:w="5"/><text x="2.8194%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.02%)</title><rect x="2.5828%" y="389" width="0.0200%" height="15" fill="rgb(206,96,30)" fg:x="387" fg:w="3"/><text x="2.8328%" y="399.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (10 samples, 0.07%)</title><rect x="2.5427%" y="453" width="0.0667%" height="15" fill="rgb(218,138,4)" fg:x="381" fg:w="10"/><text x="2.7927%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.06%)</title><rect x="2.5494%" y="437" width="0.0601%" height="15" fill="rgb(250,191,14)" fg:x="382" fg:w="9"/><text x="2.7994%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.04%)</title><rect x="2.5694%" y="421" width="0.0400%" height="15" fill="rgb(239,60,40)" fg:x="385" fg:w="6"/><text x="2.8194%" y="431.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.13%)</title><rect x="2.5093%" y="469" width="0.1268%" height="15" fill="rgb(206,27,48)" fg:x="376" fg:w="19"/><text x="2.7593%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="2.6095%" y="453" width="0.0267%" height="15" fill="rgb(225,35,8)" fg:x="391" fg:w="4"/><text x="2.8595%" y="463.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (20 samples, 0.13%)</title><rect x="2.6361%" y="469" width="0.1335%" height="15" fill="rgb(250,213,24)" fg:x="395" fg:w="20"/><text x="2.8861%" y="479.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (10 samples, 0.07%)</title><rect x="2.7696%" y="469" width="0.0667%" height="15" fill="rgb(247,123,22)" fg:x="415" fg:w="10"/><text x="3.0196%" y="479.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="2.8564%" y="469" width="0.0200%" height="15" fill="rgb(231,138,38)" fg:x="428" fg:w="3"/><text x="3.1064%" y="479.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_core::runtime::ModEvaluate&gt;&gt; (2 samples, 0.01%)</title><rect x="2.8897%" y="469" width="0.0133%" height="15" fill="rgb(231,145,46)" fg:x="433" fg:w="2"/><text x="3.1397%" y="479.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (7 samples, 0.05%)</title><rect x="3.0766%" y="453" width="0.0467%" height="15" fill="rgb(251,118,11)" fg:x="461" fg:w="7"/><text x="3.3266%" y="463.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (9 samples, 0.06%)</title><rect x="3.1233%" y="453" width="0.0601%" height="15" fill="rgb(217,147,25)" fg:x="468" fg:w="9"/><text x="3.3733%" y="463.50"></text></g><g><title>deno`futures_task::waker::clone_arc_raw (4 samples, 0.03%)</title><rect x="3.1834%" y="453" width="0.0267%" height="15" fill="rgb(247,81,37)" fg:x="477" fg:w="4"/><text x="3.4334%" y="463.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (48 samples, 0.32%)</title><rect x="2.9098%" y="469" width="0.3203%" height="15" fill="rgb(209,12,38)" fg:x="436" fg:w="48"/><text x="3.1598%" y="479.50"></text></g><g><title>deno`futures_task::waker::drop_arc_raw (3 samples, 0.02%)</title><rect x="3.2101%" y="453" width="0.0200%" height="15" fill="rgb(227,1,9)" fg:x="481" fg:w="3"/><text x="3.4601%" y="463.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::check_promise_exceptions (11 samples, 0.07%)</title><rect x="3.2301%" y="469" width="0.0734%" height="15" fill="rgb(248,47,43)" fg:x="484" fg:w="11"/><text x="3.4801%" y="479.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::evaluate_pending_module (5 samples, 0.03%)</title><rect x="3.3035%" y="469" width="0.0334%" height="15" fill="rgb(221,10,30)" fg:x="495" fg:w="5"/><text x="3.5535%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="3.3769%" y="437" width="0.0133%" height="15" fill="rgb(210,229,1)" fg:x="506" fg:w="2"/><text x="3.6269%" y="447.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (11 samples, 0.07%)</title><rect x="3.3369%" y="469" width="0.0734%" height="15" fill="rgb(222,148,37)" fg:x="500" fg:w="11"/><text x="3.5869%" y="479.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (5 samples, 0.03%)</title><rect x="3.3769%" y="453" width="0.0334%" height="15" fill="rgb(234,67,33)" fg:x="506" fg:w="5"/><text x="3.6269%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="3.3903%" y="437" width="0.0200%" height="15" fill="rgb(247,98,35)" fg:x="508" fg:w="3"/><text x="3.6403%" y="447.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (2 samples, 0.01%)</title><rect x="3.4103%" y="469" width="0.0133%" height="15" fill="rgb(247,138,52)" fg:x="511" fg:w="2"/><text x="3.6603%" y="479.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.02%)</title><rect x="3.5037%" y="437" width="0.0200%" height="15" fill="rgb(213,79,30)" fg:x="525" fg:w="3"/><text x="3.7537%" y="447.50"></text></g><g><title>deno`v8::Context::Exit (9 samples, 0.06%)</title><rect x="3.5972%" y="405" width="0.0601%" height="15" fill="rgb(246,177,23)" fg:x="539" fg:w="9"/><text x="3.8472%" y="415.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (10 samples, 0.07%)</title><rect x="3.6572%" y="405" width="0.0667%" height="15" fill="rgb(230,62,27)" fg:x="548" fg:w="10"/><text x="3.9072%" y="415.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (5 samples, 0.03%)</title><rect x="3.6906%" y="389" width="0.0334%" height="15" fill="rgb(216,154,8)" fg:x="553" fg:w="5"/><text x="3.9406%" y="399.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (24 samples, 0.16%)</title><rect x="3.5705%" y="421" width="0.1602%" height="15" fill="rgb(244,35,45)" fg:x="535" fg:w="24"/><text x="3.8205%" y="431.50"></text></g><g><title>deno`v8::Context::Exit (8 samples, 0.05%)</title><rect x="3.7306%" y="421" width="0.0534%" height="15" fill="rgb(251,115,12)" fg:x="559" fg:w="8"/><text x="3.9806%" y="431.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (42 samples, 0.28%)</title><rect x="3.5238%" y="437" width="0.2803%" height="15" fill="rgb(240,54,50)" fg:x="528" fg:w="42"/><text x="3.7738%" y="447.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (3 samples, 0.02%)</title><rect x="3.7840%" y="421" width="0.0200%" height="15" fill="rgb(233,84,52)" fg:x="567" fg:w="3"/><text x="4.0340%" y="431.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (54 samples, 0.36%)</title><rect x="3.4570%" y="453" width="0.3604%" height="15" fill="rgb(207,117,47)" fg:x="518" fg:w="54"/><text x="3.7070%" y="463.50"></text></g><g><title>deno`v8__Isolate__SetData (2 samples, 0.01%)</title><rect x="3.8041%" y="437" width="0.0133%" height="15" fill="rgb(249,43,39)" fg:x="570" fg:w="2"/><text x="4.0541%" y="447.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (5 samples, 0.03%)</title><rect x="3.9175%" y="437" width="0.0334%" height="15" fill="rgb(209,38,44)" fg:x="587" fg:w="5"/><text x="4.1675%" y="447.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (3 samples, 0.02%)</title><rect x="3.9576%" y="437" width="0.0200%" height="15" fill="rgb(236,212,23)" fg:x="593" fg:w="3"/><text x="4.2076%" y="447.50"></text></g><g><title>deno`v8__Global__New (4 samples, 0.03%)</title><rect x="3.9776%" y="437" width="0.0267%" height="15" fill="rgb(242,79,21)" fg:x="596" fg:w="4"/><text x="4.2276%" y="447.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="3.9842%" y="421" width="0.0200%" height="15" fill="rgb(211,96,35)" fg:x="597" fg:w="3"/><text x="4.2342%" y="431.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (29 samples, 0.19%)</title><rect x="3.8174%" y="453" width="0.1935%" height="15" fill="rgb(253,215,40)" fg:x="572" fg:w="29"/><text x="4.0674%" y="463.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (5 samples, 0.03%)</title><rect x="4.0176%" y="453" width="0.0334%" height="15" fill="rgb(211,81,21)" fg:x="602" fg:w="5"/><text x="4.2676%" y="463.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (3 samples, 0.02%)</title><rect x="4.0510%" y="453" width="0.0200%" height="15" fill="rgb(208,190,38)" fg:x="607" fg:w="3"/><text x="4.3010%" y="463.50"></text></g><g><title>deno`v8::handle::HandleHost::get_isolate (3 samples, 0.02%)</title><rect x="4.0710%" y="453" width="0.0200%" height="15" fill="rgb(235,213,38)" fg:x="610" fg:w="3"/><text x="4.3210%" y="463.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (3 samples, 0.02%)</title><rect x="4.0910%" y="453" width="0.0200%" height="15" fill="rgb(237,122,38)" fg:x="613" fg:w="3"/><text x="4.3410%" y="463.50"></text></g><g><title>deno`v8::Context::Enter (9 samples, 0.06%)</title><rect x="4.1444%" y="437" width="0.0601%" height="15" fill="rgb(244,218,35)" fg:x="621" fg:w="9"/><text x="4.3944%" y="447.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (3 samples, 0.02%)</title><rect x="4.1845%" y="421" width="0.0200%" height="15" fill="rgb(240,68,47)" fg:x="627" fg:w="3"/><text x="4.4345%" y="431.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (10 samples, 0.07%)</title><rect x="4.2045%" y="437" width="0.0667%" height="15" fill="rgb(210,16,53)" fg:x="630" fg:w="10"/><text x="4.4545%" y="447.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (7 samples, 0.05%)</title><rect x="4.2245%" y="421" width="0.0467%" height="15" fill="rgb(235,124,12)" fg:x="633" fg:w="7"/><text x="4.4745%" y="431.50"></text></g><g><title>deno`v8::HandleScope::HandleScope (2 samples, 0.01%)</title><rect x="4.2712%" y="437" width="0.0133%" height="15" fill="rgb(224,169,11)" fg:x="640" fg:w="2"/><text x="4.5212%" y="447.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (6 samples, 0.04%)</title><rect x="4.2846%" y="437" width="0.0400%" height="15" fill="rgb(250,166,2)" fg:x="642" fg:w="6"/><text x="4.5346%" y="447.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (35 samples, 0.23%)</title><rect x="4.1111%" y="453" width="0.2336%" height="15" fill="rgb(242,216,29)" fg:x="616" fg:w="35"/><text x="4.3611%" y="463.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (3 samples, 0.02%)</title><rect x="4.3246%" y="437" width="0.0200%" height="15" fill="rgb(230,116,27)" fg:x="648" fg:w="3"/><text x="4.5746%" y="447.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (2 samples, 0.01%)</title><rect x="4.3446%" y="453" width="0.0133%" height="15" fill="rgb(228,99,48)" fg:x="651" fg:w="2"/><text x="4.5946%" y="463.50"></text></g><g><title>deno`v8__Global__New (3 samples, 0.02%)</title><rect x="4.3580%" y="453" width="0.0200%" height="15" fill="rgb(253,11,6)" fg:x="653" fg:w="3"/><text x="4.6080%" y="463.50"></text></g><g><title>deno`v8__Isolate__GetData (4 samples, 0.03%)</title><rect x="4.3780%" y="453" width="0.0267%" height="15" fill="rgb(247,143,39)" fg:x="656" fg:w="4"/><text x="4.6280%" y="463.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (148 samples, 0.99%)</title><rect x="3.4237%" y="469" width="0.9877%" height="15" fill="rgb(236,97,10)" fg:x="513" fg:w="148"/><text x="3.6737%" y="479.50"></text></g><g><title>deno`&lt;T as core::any::Any&gt;::type_id (3 samples, 0.02%)</title><rect x="4.4381%" y="453" width="0.0200%" height="15" fill="rgb(233,208,19)" fg:x="665" fg:w="3"/><text x="4.6881%" y="463.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;()&gt;+Output = ()&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="4.4581%" y="453" width="0.0133%" height="15" fill="rgb(216,164,2)" fg:x="668" fg:w="2"/><text x="4.7081%" y="463.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (9 samples, 0.06%)</title><rect x="4.4714%" y="453" width="0.0601%" height="15" fill="rgb(220,129,5)" fg:x="670" fg:w="9"/><text x="4.7214%" y="463.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (20 samples, 0.13%)</title><rect x="4.4114%" y="469" width="0.1335%" height="15" fill="rgb(242,17,10)" fg:x="661" fg:w="20"/><text x="4.6614%" y="479.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (2 samples, 0.01%)</title><rect x="4.5315%" y="453" width="0.0133%" height="15" fill="rgb(242,107,0)" fg:x="679" fg:w="2"/><text x="4.7815%" y="463.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (7 samples, 0.05%)</title><rect x="4.5448%" y="469" width="0.0467%" height="15" fill="rgb(251,28,31)" fg:x="681" fg:w="7"/><text x="4.7948%" y="479.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (16 samples, 0.11%)</title><rect x="4.5916%" y="469" width="0.1068%" height="15" fill="rgb(233,223,10)" fg:x="688" fg:w="16"/><text x="4.8416%" y="479.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.02%)</title><rect x="4.7184%" y="453" width="0.0200%" height="15" fill="rgb(215,21,27)" fg:x="707" fg:w="3"/><text x="4.9684%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="4.7651%" y="437" width="0.0200%" height="15" fill="rgb(232,23,21)" fg:x="714" fg:w="3"/><text x="5.0151%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.05%)</title><rect x="4.7384%" y="453" width="0.0534%" height="15" fill="rgb(244,5,23)" fg:x="710" fg:w="8"/><text x="4.9884%" y="463.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (17 samples, 0.11%)</title><rect x="4.6983%" y="469" width="0.1135%" height="15" fill="rgb(226,81,46)" fg:x="704" fg:w="17"/><text x="4.9483%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="4.7985%" y="453" width="0.0133%" height="15" fill="rgb(247,70,30)" fg:x="719" fg:w="2"/><text x="5.0485%" y="463.50"></text></g><g><title>deno`std__shared_ptr__v8__Platform__reset (2 samples, 0.01%)</title><rect x="4.8185%" y="469" width="0.0133%" height="15" fill="rgb(212,68,19)" fg:x="722" fg:w="2"/><text x="5.0685%" y="479.50"></text></g><g><title>deno`tokio::util::wake::drop_arc_raw (7 samples, 0.05%)</title><rect x="4.8385%" y="469" width="0.0467%" height="15" fill="rgb(240,187,13)" fg:x="725" fg:w="7"/><text x="5.0885%" y="479.50"></text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (5 samples, 0.03%)</title><rect x="4.9052%" y="453" width="0.0334%" height="15" fill="rgb(223,113,26)" fg:x="735" fg:w="5"/><text x="5.1552%" y="463.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (280 samples, 1.87%)</title><rect x="4.8852%" y="469" width="1.8687%" height="15" fill="rgb(206,192,2)" fg:x="732" fg:w="280"/><text x="5.1352%" y="479.50">d..</text></g><g><title>libsystem_kernel.dylib`kevent (271 samples, 1.81%)</title><rect x="4.9453%" y="453" width="1.8086%" height="15" fill="rgb(241,108,4)" fg:x="741" fg:w="271"/><text x="5.1953%" y="463.50">l..</text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (9 samples, 0.06%)</title><rect x="6.9341%" y="453" width="0.0601%" height="15" fill="rgb(247,173,49)" fg:x="1039" fg:w="9"/><text x="7.1841%" y="463.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (3 samples, 0.02%)</title><rect x="6.9741%" y="437" width="0.0200%" height="15" fill="rgb(224,114,35)" fg:x="1045" fg:w="3"/><text x="7.2241%" y="447.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (3 samples, 0.02%)</title><rect x="6.9941%" y="453" width="0.0200%" height="15" fill="rgb(245,159,27)" fg:x="1048" fg:w="3"/><text x="7.2441%" y="463.50"></text></g><g><title>deno`Builtins_JSEntry (5 samples, 0.03%)</title><rect x="7.0675%" y="437" width="0.0334%" height="15" fill="rgb(245,172,44)" fg:x="1059" fg:w="5"/><text x="7.3175%" y="447.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (6 samples, 0.04%)</title><rect x="7.3211%" y="405" width="0.0400%" height="15" fill="rgb(236,23,11)" fg:x="1097" fg:w="6"/><text x="7.5711%" y="415.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (2 samples, 0.01%)</title><rect x="7.3612%" y="405" width="0.0133%" height="15" fill="rgb(205,117,38)" fg:x="1103" fg:w="2"/><text x="7.6112%" y="415.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (5 samples, 0.03%)</title><rect x="7.4813%" y="341" width="0.0334%" height="15" fill="rgb(237,72,25)" fg:x="1121" fg:w="5"/><text x="7.7313%" y="351.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (24 samples, 0.16%)</title><rect x="7.4546%" y="373" width="0.1602%" height="15" fill="rgb(244,70,9)" fg:x="1117" fg:w="24"/><text x="7.7046%" y="383.50"></text></g><g><title>deno`Builtins_ResolvePromise (20 samples, 0.13%)</title><rect x="7.4813%" y="357" width="0.1335%" height="15" fill="rgb(217,125,39)" fg:x="1121" fg:w="20"/><text x="7.7313%" y="367.50"></text></g><g><title>deno`Builtins_FulfillPromise (15 samples, 0.10%)</title><rect x="7.5147%" y="341" width="0.1001%" height="15" fill="rgb(235,36,10)" fg:x="1126" fg:w="15"/><text x="7.7647%" y="351.50"></text></g><g><title>0x110054300 (27 samples, 0.18%)</title><rect x="7.4479%" y="389" width="0.1802%" height="15" fill="rgb(251,123,47)" fg:x="1116" fg:w="27"/><text x="7.6979%" y="399.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.01%)</title><rect x="7.6148%" y="373" width="0.0133%" height="15" fill="rgb(221,13,13)" fg:x="1141" fg:w="2"/><text x="7.8648%" y="383.50"></text></g><g><title>0x11005431c (2 samples, 0.01%)</title><rect x="7.6281%" y="389" width="0.0133%" height="15" fill="rgb(238,131,9)" fg:x="1143" fg:w="2"/><text x="7.8781%" y="399.50"></text></g><g><title>0x110056b0c (2 samples, 0.01%)</title><rect x="7.6415%" y="389" width="0.0133%" height="15" fill="rgb(211,50,8)" fg:x="1145" fg:w="2"/><text x="7.8915%" y="399.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (3 samples, 0.02%)</title><rect x="7.6615%" y="389" width="0.0200%" height="15" fill="rgb(245,182,24)" fg:x="1148" fg:w="3"/><text x="7.9115%" y="399.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNotNullOrUndefined (4 samples, 0.03%)</title><rect x="7.6815%" y="389" width="0.0267%" height="15" fill="rgb(242,14,37)" fg:x="1151" fg:w="4"/><text x="7.9315%" y="399.50"></text></g><g><title>deno`Builtins_JSEntry (67 samples, 0.45%)</title><rect x="7.2744%" y="421" width="0.4471%" height="15" fill="rgb(246,228,12)" fg:x="1090" fg:w="67"/><text x="7.5244%" y="431.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (52 samples, 0.35%)</title><rect x="7.3745%" y="405" width="0.3470%" height="15" fill="rgb(213,55,15)" fg:x="1105" fg:w="52"/><text x="7.6245%" y="415.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (95 samples, 0.63%)</title><rect x="7.1009%" y="437" width="0.6340%" height="15" fill="rgb(209,9,3)" fg:x="1064" fg:w="95"/><text x="7.3509%" y="447.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (2 samples, 0.01%)</title><rect x="7.7216%" y="421" width="0.0133%" height="15" fill="rgb(230,59,30)" fg:x="1157" fg:w="2"/><text x="7.9716%" y="431.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (3 samples, 0.02%)</title><rect x="7.7349%" y="437" width="0.0200%" height="15" fill="rgb(209,121,21)" fg:x="1159" fg:w="3"/><text x="7.9849%" y="447.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (3 samples, 0.02%)</title><rect x="7.7549%" y="437" width="0.0200%" height="15" fill="rgb(220,109,13)" fg:x="1162" fg:w="3"/><text x="8.0049%" y="447.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (4 samples, 0.03%)</title><rect x="7.7750%" y="437" width="0.0267%" height="15" fill="rgb(232,18,1)" fg:x="1165" fg:w="4"/><text x="8.0250%" y="447.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (118 samples, 0.79%)</title><rect x="7.0208%" y="453" width="0.7875%" height="15" fill="rgb(215,41,42)" fg:x="1052" fg:w="118"/><text x="7.2708%" y="463.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (6 samples, 0.04%)</title><rect x="7.8083%" y="453" width="0.0400%" height="15" fill="rgb(224,123,36)" fg:x="1170" fg:w="6"/><text x="8.0583%" y="463.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (10 samples, 0.07%)</title><rect x="7.8817%" y="437" width="0.0667%" height="15" fill="rgb(240,125,3)" fg:x="1181" fg:w="10"/><text x="8.1317%" y="447.50"></text></g><g><title>deno`v8::Isolate::SuppressMicrotaskExecutionScope::SuppressMicrotaskExecutionScope (3 samples, 0.02%)</title><rect x="7.9952%" y="421" width="0.0200%" height="15" fill="rgb(205,98,50)" fg:x="1198" fg:w="3"/><text x="8.2452%" y="431.50"></text></g><g><title>deno`v8::Isolate::SuppressMicrotaskExecutionScope::~SuppressMicrotaskExecutionScope (3 samples, 0.02%)</title><rect x="8.0152%" y="421" width="0.0200%" height="15" fill="rgb(205,185,37)" fg:x="1201" fg:w="3"/><text x="8.2652%" y="431.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (2 samples, 0.01%)</title><rect x="8.1153%" y="405" width="0.0133%" height="15" fill="rgb(238,207,15)" fg:x="1216" fg:w="2"/><text x="8.3653%" y="415.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (14 samples, 0.09%)</title><rect x="8.1754%" y="389" width="0.0934%" height="15" fill="rgb(213,199,42)" fg:x="1225" fg:w="14"/><text x="8.4254%" y="399.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.01%)</title><rect x="8.2688%" y="389" width="0.0133%" height="15" fill="rgb(235,201,11)" fg:x="1239" fg:w="2"/><text x="8.5188%" y="399.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (4 samples, 0.03%)</title><rect x="8.7093%" y="325" width="0.0267%" height="15" fill="rgb(207,46,11)" fg:x="1305" fg:w="4"/><text x="8.9593%" y="335.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (12 samples, 0.08%)</title><rect x="8.7360%" y="325" width="0.0801%" height="15" fill="rgb(241,35,35)" fg:x="1309" fg:w="12"/><text x="8.9860%" y="335.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNullOrUndefined (4 samples, 0.03%)</title><rect x="8.8161%" y="325" width="0.0267%" height="15" fill="rgb(243,32,47)" fg:x="1321" fg:w="4"/><text x="9.0661%" y="335.50"></text></g><g><title>0x110052658 (2 samples, 0.01%)</title><rect x="8.9362%" y="309" width="0.0133%" height="15" fill="rgb(247,202,23)" fg:x="1339" fg:w="2"/><text x="9.1862%" y="319.50"></text></g><g><title>0x110048548 (2 samples, 0.01%)</title><rect x="9.1097%" y="245" width="0.0133%" height="15" fill="rgb(219,102,11)" fg:x="1365" fg:w="2"/><text x="9.3597%" y="255.50"></text></g><g><title>0x11004b954 (9 samples, 0.06%)</title><rect x="9.0697%" y="293" width="0.0601%" height="15" fill="rgb(243,110,44)" fg:x="1359" fg:w="9"/><text x="9.3197%" y="303.50"></text></g><g><title>0x11004a780 (9 samples, 0.06%)</title><rect x="9.0697%" y="277" width="0.0601%" height="15" fill="rgb(222,74,54)" fg:x="1359" fg:w="9"/><text x="9.3197%" y="287.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (9 samples, 0.06%)</title><rect x="9.0697%" y="261" width="0.0601%" height="15" fill="rgb(216,99,12)" fg:x="1359" fg:w="9"/><text x="9.3197%" y="271.50"></text></g><g><title>0x11004d06c (7 samples, 0.05%)</title><rect x="9.1364%" y="293" width="0.0467%" height="15" fill="rgb(226,22,26)" fg:x="1369" fg:w="7"/><text x="9.3864%" y="303.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (7 samples, 0.05%)</title><rect x="9.1364%" y="277" width="0.0467%" height="15" fill="rgb(217,163,10)" fg:x="1369" fg:w="7"/><text x="9.3864%" y="287.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (7 samples, 0.05%)</title><rect x="9.1364%" y="261" width="0.0467%" height="15" fill="rgb(213,25,53)" fg:x="1369" fg:w="7"/><text x="9.3864%" y="271.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (7 samples, 0.05%)</title><rect x="9.1364%" y="245" width="0.0467%" height="15" fill="rgb(252,105,26)" fg:x="1369" fg:w="7"/><text x="9.3864%" y="255.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::Call (7 samples, 0.05%)</title><rect x="9.1364%" y="229" width="0.0467%" height="15" fill="rgb(220,39,43)" fg:x="1369" fg:w="7"/><text x="9.3864%" y="239.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (7 samples, 0.05%)</title><rect x="9.1364%" y="213" width="0.0467%" height="15" fill="rgb(229,68,48)" fg:x="1369" fg:w="7"/><text x="9.3864%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (6 samples, 0.04%)</title><rect x="9.1431%" y="197" width="0.0400%" height="15" fill="rgb(252,8,32)" fg:x="1370" fg:w="6"/><text x="9.3931%" y="207.50"></text></g><g><title>0x1100516b0 (4 samples, 0.03%)</title><rect x="9.1831%" y="293" width="0.0267%" height="15" fill="rgb(223,20,43)" fg:x="1376" fg:w="4"/><text x="9.4331%" y="303.50"></text></g><g><title>0x1100516f0 (3 samples, 0.02%)</title><rect x="9.2232%" y="293" width="0.0200%" height="15" fill="rgb(229,81,49)" fg:x="1382" fg:w="3"/><text x="9.4732%" y="303.50"></text></g><g><title>0x110051750 (2 samples, 0.01%)</title><rect x="9.2432%" y="293" width="0.0133%" height="15" fill="rgb(236,28,36)" fg:x="1385" fg:w="2"/><text x="9.4932%" y="303.50"></text></g><g><title>0x110051754 (2 samples, 0.01%)</title><rect x="9.2565%" y="293" width="0.0133%" height="15" fill="rgb(249,185,26)" fg:x="1387" fg:w="2"/><text x="9.5065%" y="303.50"></text></g><g><title>0x110051848 (2 samples, 0.01%)</title><rect x="9.2899%" y="293" width="0.0133%" height="15" fill="rgb(249,174,33)" fg:x="1392" fg:w="2"/><text x="9.5399%" y="303.50"></text></g><g><title>0x11005184c (2 samples, 0.01%)</title><rect x="9.3033%" y="293" width="0.0133%" height="15" fill="rgb(233,201,37)" fg:x="1394" fg:w="2"/><text x="9.5533%" y="303.50"></text></g><g><title>0x110051850 (3 samples, 0.02%)</title><rect x="9.3166%" y="293" width="0.0200%" height="15" fill="rgb(221,78,26)" fg:x="1396" fg:w="3"/><text x="9.5666%" y="303.50"></text></g><g><title>0x110051924 (2 samples, 0.01%)</title><rect x="9.3633%" y="293" width="0.0133%" height="15" fill="rgb(250,127,30)" fg:x="1403" fg:w="2"/><text x="9.6133%" y="303.50"></text></g><g><title>0x1100519b8 (2 samples, 0.01%)</title><rect x="9.3967%" y="293" width="0.0133%" height="15" fill="rgb(230,49,44)" fg:x="1408" fg:w="2"/><text x="9.6467%" y="303.50"></text></g><g><title>0x110051a34 (3 samples, 0.02%)</title><rect x="9.4367%" y="293" width="0.0200%" height="15" fill="rgb(229,67,23)" fg:x="1414" fg:w="3"/><text x="9.6867%" y="303.50"></text></g><g><title>0x110051a78 (4 samples, 0.03%)</title><rect x="9.4568%" y="293" width="0.0267%" height="15" fill="rgb(249,83,47)" fg:x="1417" fg:w="4"/><text x="9.7068%" y="303.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (4 samples, 0.03%)</title><rect x="9.4568%" y="277" width="0.0267%" height="15" fill="rgb(215,43,3)" fg:x="1417" fg:w="4"/><text x="9.7068%" y="287.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (4 samples, 0.03%)</title><rect x="9.4568%" y="261" width="0.0267%" height="15" fill="rgb(238,154,13)" fg:x="1417" fg:w="4"/><text x="9.7068%" y="271.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (4 samples, 0.03%)</title><rect x="9.4568%" y="245" width="0.0267%" height="15" fill="rgb(219,56,2)" fg:x="1417" fg:w="4"/><text x="9.7068%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (4 samples, 0.03%)</title><rect x="9.4568%" y="229" width="0.0267%" height="15" fill="rgb(233,0,4)" fg:x="1417" fg:w="4"/><text x="9.7068%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (4 samples, 0.03%)</title><rect x="9.4568%" y="213" width="0.0267%" height="15" fill="rgb(235,30,7)" fg:x="1417" fg:w="4"/><text x="9.7068%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (4 samples, 0.03%)</title><rect x="9.4568%" y="197" width="0.0267%" height="15" fill="rgb(250,79,13)" fg:x="1417" fg:w="4"/><text x="9.7068%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (4 samples, 0.03%)</title><rect x="9.4568%" y="181" width="0.0267%" height="15" fill="rgb(211,146,34)" fg:x="1417" fg:w="4"/><text x="9.7068%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (3 samples, 0.02%)</title><rect x="9.4634%" y="165" width="0.0200%" height="15" fill="rgb(228,22,38)" fg:x="1418" fg:w="3"/><text x="9.7134%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (3 samples, 0.02%)</title><rect x="9.4634%" y="149" width="0.0200%" height="15" fill="rgb(235,168,5)" fg:x="1418" fg:w="3"/><text x="9.7134%" y="159.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.02%)</title><rect x="9.4634%" y="133" width="0.0200%" height="15" fill="rgb(221,155,16)" fg:x="1418" fg:w="3"/><text x="9.7134%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (3 samples, 0.02%)</title><rect x="9.4634%" y="117" width="0.0200%" height="15" fill="rgb(215,215,53)" fg:x="1418" fg:w="3"/><text x="9.7134%" y="127.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (2 samples, 0.01%)</title><rect x="9.4701%" y="101" width="0.0133%" height="15" fill="rgb(223,4,10)" fg:x="1419" fg:w="2"/><text x="9.7201%" y="111.50"></text></g><g><title>0x110051a80 (5 samples, 0.03%)</title><rect x="9.4834%" y="293" width="0.0334%" height="15" fill="rgb(234,103,6)" fg:x="1421" fg:w="5"/><text x="9.7334%" y="303.50"></text></g><g><title>0x110051aa0 (4 samples, 0.03%)</title><rect x="9.5235%" y="293" width="0.0267%" height="15" fill="rgb(227,97,0)" fg:x="1427" fg:w="4"/><text x="9.7735%" y="303.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (19 samples, 0.13%)</title><rect x="9.5502%" y="277" width="0.1268%" height="15" fill="rgb(234,150,53)" fg:x="1431" fg:w="19"/><text x="9.8002%" y="287.50"></text></g><g><title>0x110051aa8 (20 samples, 0.13%)</title><rect x="9.5502%" y="293" width="0.1335%" height="15" fill="rgb(228,201,54)" fg:x="1431" fg:w="20"/><text x="9.8002%" y="303.50"></text></g><g><title>0x110051b28 (2 samples, 0.01%)</title><rect x="9.6970%" y="293" width="0.0133%" height="15" fill="rgb(222,22,37)" fg:x="1453" fg:w="2"/><text x="9.9470%" y="303.50"></text></g><g><title>0x110051c08 (5 samples, 0.03%)</title><rect x="9.7237%" y="293" width="0.0334%" height="15" fill="rgb(237,53,32)" fg:x="1457" fg:w="5"/><text x="9.9737%" y="303.50"></text></g><g><title>deno`Builtins_ToString (5 samples, 0.03%)</title><rect x="9.7237%" y="277" width="0.0334%" height="15" fill="rgb(233,25,53)" fg:x="1457" fg:w="5"/><text x="9.9737%" y="287.50"></text></g><g><title>0x110051cd0 (2 samples, 0.01%)</title><rect x="9.7704%" y="293" width="0.0133%" height="15" fill="rgb(210,40,34)" fg:x="1464" fg:w="2"/><text x="10.0204%" y="303.50"></text></g><g><title>0x110051d1c (2 samples, 0.01%)</title><rect x="9.7838%" y="293" width="0.0133%" height="15" fill="rgb(241,220,44)" fg:x="1466" fg:w="2"/><text x="10.0338%" y="303.50"></text></g><g><title>0x110051d24 (2 samples, 0.01%)</title><rect x="9.7971%" y="293" width="0.0133%" height="15" fill="rgb(235,28,35)" fg:x="1468" fg:w="2"/><text x="10.0471%" y="303.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (2 samples, 0.01%)</title><rect x="9.7971%" y="277" width="0.0133%" height="15" fill="rgb(210,56,17)" fg:x="1468" fg:w="2"/><text x="10.0471%" y="287.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="9.7971%" y="261" width="0.0133%" height="15" fill="rgb(224,130,29)" fg:x="1468" fg:w="2"/><text x="10.0471%" y="271.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="9.7971%" y="245" width="0.0133%" height="15" fill="rgb(235,212,8)" fg:x="1468" fg:w="2"/><text x="10.0471%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="9.7971%" y="229" width="0.0133%" height="15" fill="rgb(223,33,50)" fg:x="1468" fg:w="2"/><text x="10.0471%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="9.7971%" y="213" width="0.0133%" height="15" fill="rgb(219,149,13)" fg:x="1468" fg:w="2"/><text x="10.0471%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="9.7971%" y="197" width="0.0133%" height="15" fill="rgb(250,156,29)" fg:x="1468" fg:w="2"/><text x="10.0471%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="9.7971%" y="181" width="0.0133%" height="15" fill="rgb(216,193,19)" fg:x="1468" fg:w="2"/><text x="10.0471%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="9.7971%" y="165" width="0.0133%" height="15" fill="rgb(216,135,14)" fg:x="1468" fg:w="2"/><text x="10.0471%" y="175.50"></text></g><g><title>0x110051d4c (2 samples, 0.01%)</title><rect x="9.8105%" y="293" width="0.0133%" height="15" fill="rgb(241,47,5)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="303.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (2 samples, 0.01%)</title><rect x="9.8105%" y="277" width="0.0133%" height="15" fill="rgb(233,42,35)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="287.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="9.8105%" y="261" width="0.0133%" height="15" fill="rgb(231,13,6)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="271.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="9.8105%" y="245" width="0.0133%" height="15" fill="rgb(207,181,40)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="9.8105%" y="229" width="0.0133%" height="15" fill="rgb(254,173,49)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="9.8105%" y="213" width="0.0133%" height="15" fill="rgb(221,1,38)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="9.8105%" y="197" width="0.0133%" height="15" fill="rgb(206,124,46)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="9.8105%" y="181" width="0.0133%" height="15" fill="rgb(249,21,11)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="9.8105%" y="165" width="0.0133%" height="15" fill="rgb(222,201,40)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="9.8105%" y="149" width="0.0133%" height="15" fill="rgb(235,61,29)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="159.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="9.8105%" y="133" width="0.0133%" height="15" fill="rgb(219,207,3)" fg:x="1470" fg:w="2"/><text x="10.0605%" y="143.50"></text></g><g><title>0x110051da4 (2 samples, 0.01%)</title><rect x="9.8438%" y="293" width="0.0133%" height="15" fill="rgb(222,56,46)" fg:x="1475" fg:w="2"/><text x="10.0938%" y="303.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.02%)</title><rect x="9.9106%" y="277" width="0.0200%" height="15" fill="rgb(239,76,54)" fg:x="1485" fg:w="3"/><text x="10.1606%" y="287.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (4 samples, 0.03%)</title><rect x="10.0707%" y="261" width="0.0267%" height="15" fill="rgb(231,124,27)" fg:x="1509" fg:w="4"/><text x="10.3207%" y="271.50"></text></g><g><title>deno`&lt;deno_flash::Stream as std::io::Write&gt;::write (5 samples, 0.03%)</title><rect x="10.0974%" y="261" width="0.0334%" height="15" fill="rgb(249,195,6)" fg:x="1513" fg:w="5"/><text x="10.3474%" y="271.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (6 samples, 0.04%)</title><rect x="10.3377%" y="245" width="0.0400%" height="15" fill="rgb(237,174,47)" fg:x="1549" fg:w="6"/><text x="10.5877%" y="255.50"></text></g><g><title>deno`&lt;T as core::any::Any&gt;::type_id (2 samples, 0.01%)</title><rect x="10.3777%" y="245" width="0.0133%" height="15" fill="rgb(206,201,31)" fg:x="1555" fg:w="2"/><text x="10.6277%" y="255.50"></text></g><g><title>deno`serde_v8::magic::v8slice::to_ranged_buffer (3 samples, 0.02%)</title><rect x="10.4511%" y="213" width="0.0200%" height="15" fill="rgb(231,57,52)" fg:x="1566" fg:w="3"/><text x="10.7011%" y="223.50"></text></g><g><title>deno`v8::Value::IsArrayBuffer (8 samples, 0.05%)</title><rect x="10.4712%" y="213" width="0.0534%" height="15" fill="rgb(248,177,22)" fg:x="1569" fg:w="8"/><text x="10.7212%" y="223.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (16 samples, 0.11%)</title><rect x="10.4445%" y="229" width="0.1068%" height="15" fill="rgb(215,211,37)" fg:x="1565" fg:w="16"/><text x="10.6945%" y="239.50"></text></g><g><title>deno`v8::Value::IsArrayBufferView (4 samples, 0.03%)</title><rect x="10.5246%" y="213" width="0.0267%" height="15" fill="rgb(241,128,51)" fg:x="1577" fg:w="4"/><text x="10.7746%" y="223.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="10.5513%" y="229" width="0.0133%" height="15" fill="rgb(227,165,31)" fg:x="1581" fg:w="2"/><text x="10.8013%" y="239.50"></text></g><g><title>deno`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="10.5646%" y="229" width="0.0133%" height="15" fill="rgb(228,167,24)" fg:x="1583" fg:w="2"/><text x="10.8146%" y="239.50"></text></g><g><title>deno`__rust_alloc (2 samples, 0.01%)</title><rect x="10.5779%" y="229" width="0.0133%" height="15" fill="rgb(228,143,12)" fg:x="1585" fg:w="2"/><text x="10.8279%" y="239.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="10.6247%" y="213" width="0.0133%" height="15" fill="rgb(249,149,8)" fg:x="1592" fg:w="2"/><text x="10.8747%" y="223.50"></text></g><g><title>deno`v8::String::WriteUtf8 (6 samples, 0.04%)</title><rect x="10.6380%" y="213" width="0.0400%" height="15" fill="rgb(243,35,44)" fg:x="1594" fg:w="6"/><text x="10.8880%" y="223.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (5 samples, 0.03%)</title><rect x="10.6847%" y="197" width="0.0334%" height="15" fill="rgb(246,89,9)" fg:x="1601" fg:w="5"/><text x="10.9347%" y="207.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawOneByteString (5 samples, 0.03%)</title><rect x="11.1719%" y="181" width="0.0334%" height="15" fill="rgb(233,213,13)" fg:x="1674" fg:w="5"/><text x="11.4219%" y="191.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (6 samples, 0.04%)</title><rect x="11.2053%" y="181" width="0.0400%" height="15" fill="rgb(233,141,41)" fg:x="1679" fg:w="6"/><text x="11.4553%" y="191.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (10 samples, 0.07%)</title><rect x="11.4188%" y="165" width="0.0667%" height="15" fill="rgb(239,167,4)" fg:x="1711" fg:w="10"/><text x="11.6688%" y="175.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawOneByteString (4 samples, 0.03%)</title><rect x="11.4856%" y="165" width="0.0267%" height="15" fill="rgb(209,217,16)" fg:x="1721" fg:w="4"/><text x="11.7356%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.01%)</title><rect x="11.6124%" y="37" width="0.0133%" height="15" fill="rgb(219,88,35)" fg:x="1740" fg:w="2"/><text x="11.8624%" y="47.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (19 samples, 0.13%)</title><rect x="11.5123%" y="165" width="0.1268%" height="15" fill="rgb(220,193,23)" fg:x="1725" fg:w="19"/><text x="11.7623%" y="175.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (15 samples, 0.10%)</title><rect x="11.5390%" y="149" width="0.1001%" height="15" fill="rgb(230,90,52)" fg:x="1729" fg:w="15"/><text x="11.7890%" y="159.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (4 samples, 0.03%)</title><rect x="11.6124%" y="133" width="0.0267%" height="15" fill="rgb(252,106,19)" fg:x="1740" fg:w="4"/><text x="11.8624%" y="143.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (4 samples, 0.03%)</title><rect x="11.6124%" y="117" width="0.0267%" height="15" fill="rgb(206,74,20)" fg:x="1740" fg:w="4"/><text x="11.8624%" y="127.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (4 samples, 0.03%)</title><rect x="11.6124%" y="101" width="0.0267%" height="15" fill="rgb(230,138,44)" fg:x="1740" fg:w="4"/><text x="11.8624%" y="111.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (4 samples, 0.03%)</title><rect x="11.6124%" y="85" width="0.0267%" height="15" fill="rgb(235,182,43)" fg:x="1740" fg:w="4"/><text x="11.8624%" y="95.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (4 samples, 0.03%)</title><rect x="11.6124%" y="69" width="0.0267%" height="15" fill="rgb(242,16,51)" fg:x="1740" fg:w="4"/><text x="11.8624%" y="79.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (4 samples, 0.03%)</title><rect x="11.6124%" y="53" width="0.0267%" height="15" fill="rgb(248,9,4)" fg:x="1740" fg:w="4"/><text x="11.8624%" y="63.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.01%)</title><rect x="11.6257%" y="37" width="0.0133%" height="15" fill="rgb(210,31,22)" fg:x="1742" fg:w="2"/><text x="11.8757%" y="47.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (136 samples, 0.91%)</title><rect x="11.2453%" y="181" width="0.9076%" height="15" fill="rgb(239,54,39)" fg:x="1685" fg:w="136"/><text x="11.4953%" y="191.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (77 samples, 0.51%)</title><rect x="11.6391%" y="165" width="0.5139%" height="15" fill="rgb(230,99,41)" fg:x="1744" fg:w="77"/><text x="11.8891%" y="175.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (38 samples, 0.25%)</title><rect x="11.8994%" y="149" width="0.2536%" height="15" fill="rgb(253,106,12)" fg:x="1783" fg:w="38"/><text x="12.1494%" y="159.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (4 samples, 0.03%)</title><rect x="12.1263%" y="133" width="0.0267%" height="15" fill="rgb(213,46,41)" fg:x="1817" fg:w="4"/><text x="12.3763%" y="143.50"></text></g><g><title>deno`v8::String::WriteUtf8 (218 samples, 1.45%)</title><rect x="10.7181%" y="197" width="1.4549%" height="15" fill="rgb(215,133,35)" fg:x="1606" fg:w="218"/><text x="10.9681%" y="207.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (3 samples, 0.02%)</title><rect x="12.1530%" y="181" width="0.0200%" height="15" fill="rgb(213,28,5)" fg:x="1821" fg:w="3"/><text x="12.4030%" y="191.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (6 samples, 0.04%)</title><rect x="12.1730%" y="197" width="0.0400%" height="15" fill="rgb(215,77,49)" fg:x="1824" fg:w="6"/><text x="12.4230%" y="207.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8 (268 samples, 1.79%)</title><rect x="10.6781%" y="213" width="1.7886%" height="15" fill="rgb(248,100,22)" fg:x="1600" fg:w="268"/><text x="10.9281%" y="223.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (38 samples, 0.25%)</title><rect x="12.2130%" y="197" width="0.2536%" height="15" fill="rgb(208,67,9)" fg:x="1830" fg:w="38"/><text x="12.4630%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.13%)</title><rect x="12.5667%" y="181" width="0.1335%" height="15" fill="rgb(219,133,21)" fg:x="1883" fg:w="20"/><text x="12.8167%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.05%)</title><rect x="12.6535%" y="165" width="0.0467%" height="15" fill="rgb(246,46,29)" fg:x="1896" fg:w="7"/><text x="12.9035%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (36 samples, 0.24%)</title><rect x="12.4666%" y="213" width="0.2403%" height="15" fill="rgb(246,185,52)" fg:x="1868" fg:w="36"/><text x="12.7166%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.15%)</title><rect x="12.5534%" y="197" width="0.1535%" height="15" fill="rgb(252,136,11)" fg:x="1881" fg:w="23"/><text x="12.8034%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="12.7069%" y="213" width="0.0133%" height="15" fill="rgb(219,138,53)" fg:x="1904" fg:w="2"/><text x="12.9569%" y="223.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (320 samples, 2.14%)</title><rect x="10.5913%" y="229" width="2.1356%" height="15" fill="rgb(211,51,23)" fg:x="1587" fg:w="320"/><text x="10.8413%" y="239.50">d..</text></g><g><title>deno`serde_v8::magic::v8slice::to_ranged_buffer (4 samples, 0.03%)</title><rect x="12.7269%" y="229" width="0.0267%" height="15" fill="rgb(247,221,28)" fg:x="1907" fg:w="4"/><text x="12.9769%" y="239.50"></text></g><g><title>deno`v8::String::Length (3 samples, 0.02%)</title><rect x="12.7536%" y="229" width="0.0200%" height="15" fill="rgb(251,222,45)" fg:x="1911" fg:w="3"/><text x="13.0036%" y="239.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8 (3 samples, 0.02%)</title><rect x="12.7736%" y="229" width="0.0200%" height="15" fill="rgb(217,162,53)" fg:x="1914" fg:w="3"/><text x="13.0236%" y="239.50"></text></g><g><title>deno`&lt;serde_v8::magic::string_or_buffer::StringOrBuffer as serde_v8::magic::transl8::FromV8&gt;::from_v8 (363 samples, 2.42%)</title><rect x="10.3911%" y="245" width="2.4226%" height="15" fill="rgb(229,93,14)" fg:x="1557" fg:w="363"/><text x="10.6411%" y="255.50">de..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="12.7936%" y="229" width="0.0200%" height="15" fill="rgb(209,67,49)" fg:x="1917" fg:w="3"/><text x="13.0436%" y="239.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (5 samples, 0.03%)</title><rect x="12.8137%" y="245" width="0.0334%" height="15" fill="rgb(213,87,29)" fg:x="1920" fg:w="5"/><text x="13.0637%" y="255.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="12.8470%" y="245" width="0.0267%" height="15" fill="rgb(205,151,52)" fg:x="1925" fg:w="4"/><text x="13.0970%" y="255.50"></text></g><g><title>deno`DYLD-STUB$$send (5 samples, 0.03%)</title><rect x="12.8737%" y="245" width="0.0334%" height="15" fill="rgb(253,215,39)" fg:x="1929" fg:w="5"/><text x="13.1237%" y="255.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (15 samples, 0.10%)</title><rect x="12.9071%" y="245" width="0.1001%" height="15" fill="rgb(221,220,41)" fg:x="1934" fg:w="15"/><text x="13.1571%" y="255.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (15 samples, 0.10%)</title><rect x="13.0072%" y="245" width="0.1001%" height="15" fill="rgb(218,133,21)" fg:x="1949" fg:w="15"/><text x="13.2572%" y="255.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (3 samples, 0.02%)</title><rect x="13.1140%" y="245" width="0.0200%" height="15" fill="rgb(221,193,43)" fg:x="1965" fg:w="3"/><text x="13.3640%" y="255.50"></text></g><g><title>deno`v8::Number::Value (3 samples, 0.02%)</title><rect x="13.1340%" y="245" width="0.0200%" height="15" fill="rgb(240,128,52)" fg:x="1968" fg:w="3"/><text x="13.3840%" y="255.50"></text></g><g><title>deno`v8::Value::IsNumber (4 samples, 0.03%)</title><rect x="13.1540%" y="245" width="0.0267%" height="15" fill="rgb(253,114,12)" fg:x="1971" fg:w="4"/><text x="13.4040%" y="255.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::get (10 samples, 0.07%)</title><rect x="13.1807%" y="245" width="0.0667%" height="15" fill="rgb(215,223,47)" fg:x="1975" fg:w="10"/><text x="13.4307%" y="255.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (2 samples, 0.01%)</title><rect x="13.2475%" y="245" width="0.0133%" height="15" fill="rgb(248,225,23)" fg:x="1985" fg:w="2"/><text x="13.4975%" y="255.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (8 samples, 0.05%)</title><rect x="13.2608%" y="245" width="0.0534%" height="15" fill="rgb(250,108,0)" fg:x="1987" fg:w="8"/><text x="13.5108%" y="255.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.02%)</title><rect x="13.2942%" y="229" width="0.0200%" height="15" fill="rgb(228,208,7)" fg:x="1992" fg:w="3"/><text x="13.5442%" y="239.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (5 samples, 0.03%)</title><rect x="13.3142%" y="245" width="0.0334%" height="15" fill="rgb(244,45,10)" fg:x="1995" fg:w="5"/><text x="13.5642%" y="255.50"></text></g><g><title>deno`v8__Value__IsString (5 samples, 0.03%)</title><rect x="13.3609%" y="245" width="0.0334%" height="15" fill="rgb(207,125,25)" fg:x="2002" fg:w="5"/><text x="13.6109%" y="255.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (3 samples, 0.02%)</title><rect x="13.3943%" y="245" width="0.0200%" height="15" fill="rgb(210,195,18)" fg:x="2007" fg:w="3"/><text x="13.6443%" y="255.50"></text></g><g><title>libsystem_c.dylib`send (6 samples, 0.04%)</title><rect x="13.4143%" y="245" width="0.0400%" height="15" fill="rgb(249,80,12)" fg:x="2010" fg:w="6"/><text x="13.6643%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (4,467 samples, 29.81%)</title><rect x="13.4544%" y="245" width="29.8118%" height="15" fill="rgb(221,65,9)" fg:x="2016" fg:w="4467"/><text x="13.7044%" y="255.50">libsystem_kernel.dylib`__sendto</text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.11%)</title><rect x="43.2662%" y="245" width="0.1135%" height="15" fill="rgb(235,49,36)" fg:x="6483" fg:w="17"/><text x="43.5162%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.03%)</title><rect x="43.3462%" y="229" width="0.0334%" height="15" fill="rgb(225,32,20)" fg:x="6495" fg:w="5"/><text x="43.5962%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.03%)</title><rect x="43.3796%" y="245" width="0.0334%" height="15" fill="rgb(215,141,46)" fg:x="6500" fg:w="5"/><text x="43.6296%" y="255.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (4,988 samples, 33.29%)</title><rect x="10.1308%" y="261" width="33.2888%" height="15" fill="rgb(250,160,47)" fg:x="1518" fg:w="4988"/><text x="10.3808%" y="271.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F..</text></g><g><title>deno`&lt;serde_v8::magic::string_or_buffer::StringOrBuffer as serde_v8::magic::transl8::FromV8&gt;::from_v8 (17 samples, 0.11%)</title><rect x="43.4263%" y="261" width="0.1135%" height="15" fill="rgb(216,222,40)" fg:x="6507" fg:w="17"/><text x="43.6763%" y="271.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (2 samples, 0.01%)</title><rect x="43.5464%" y="261" width="0.0133%" height="15" fill="rgb(234,217,39)" fg:x="6525" fg:w="2"/><text x="43.7964%" y="271.50"></text></g><g><title>deno`serde_v8::de::from_v8 (7 samples, 0.05%)</title><rect x="43.5598%" y="261" width="0.0467%" height="15" fill="rgb(207,178,40)" fg:x="6527" fg:w="7"/><text x="43.8098%" y="271.50"></text></g><g><title>deno`v8::External::Value (3 samples, 0.02%)</title><rect x="43.6065%" y="261" width="0.0200%" height="15" fill="rgb(221,136,13)" fg:x="6534" fg:w="3"/><text x="43.8565%" y="271.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (4 samples, 0.03%)</title><rect x="43.6332%" y="261" width="0.0267%" height="15" fill="rgb(249,199,10)" fg:x="6538" fg:w="4"/><text x="43.8832%" y="271.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (2 samples, 0.01%)</title><rect x="43.6666%" y="261" width="0.0133%" height="15" fill="rgb(249,222,13)" fg:x="6543" fg:w="2"/><text x="43.9166%" y="271.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetIsolate (4 samples, 0.03%)</title><rect x="43.6799%" y="261" width="0.0267%" height="15" fill="rgb(244,185,38)" fg:x="6545" fg:w="4"/><text x="43.9299%" y="271.50"></text></g><g><title>deno`v8__Value__IsNullOrUndefined (3 samples, 0.02%)</title><rect x="43.7066%" y="261" width="0.0200%" height="15" fill="rgb(236,202,9)" fg:x="6549" fg:w="3"/><text x="43.9566%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.03%)</title><rect x="43.7266%" y="261" width="0.0334%" height="15" fill="rgb(250,229,37)" fg:x="6552" fg:w="5"/><text x="43.9766%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="43.7600%" y="261" width="0.0133%" height="15" fill="rgb(206,174,23)" fg:x="6557" fg:w="2"/><text x="44.0100%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="43.7734%" y="261" width="0.0133%" height="15" fill="rgb(211,33,43)" fg:x="6559" fg:w="2"/><text x="44.0234%" y="271.50"></text></g><g><title>0x110051dd0 (5,085 samples, 33.94%)</title><rect x="9.8639%" y="293" width="33.9362%" height="15" fill="rgb(245,58,50)" fg:x="1478" fg:w="5085"/><text x="10.1139%" y="303.50">0x110051dd0</text></g><g><title>deno`Builtins_CallApiCallback (5,075 samples, 33.87%)</title><rect x="9.9306%" y="277" width="33.8695%" height="15" fill="rgb(244,68,36)" fg:x="1488" fg:w="5075"/><text x="10.1806%" y="287.50">deno`Builtins_CallApiCallback</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="43.7867%" y="261" width="0.0133%" height="15" fill="rgb(232,229,15)" fg:x="6561" fg:w="2"/><text x="44.0367%" y="271.50"></text></g><g><title>0x110051e00 (5 samples, 0.03%)</title><rect x="43.8067%" y="293" width="0.0334%" height="15" fill="rgb(254,30,23)" fg:x="6564" fg:w="5"/><text x="44.0567%" y="303.50"></text></g><g><title>0x110051e0c (15 samples, 0.10%)</title><rect x="43.8401%" y="293" width="0.1001%" height="15" fill="rgb(235,160,14)" fg:x="6569" fg:w="15"/><text x="44.0901%" y="303.50"></text></g><g><title>0x110051e20 (3 samples, 0.02%)</title><rect x="43.9402%" y="293" width="0.0200%" height="15" fill="rgb(212,155,44)" fg:x="6584" fg:w="3"/><text x="44.1902%" y="303.50"></text></g><g><title>0x1100521bc (2 samples, 0.01%)</title><rect x="43.9802%" y="293" width="0.0133%" height="15" fill="rgb(226,2,50)" fg:x="6590" fg:w="2"/><text x="44.2302%" y="303.50"></text></g><g><title>0x1100521d4 (3 samples, 0.02%)</title><rect x="43.9936%" y="293" width="0.0200%" height="15" fill="rgb(234,177,6)" fg:x="6592" fg:w="3"/><text x="44.2436%" y="303.50"></text></g><g><title>0x11005226c (3 samples, 0.02%)</title><rect x="44.0336%" y="293" width="0.0200%" height="15" fill="rgb(217,24,9)" fg:x="6598" fg:w="3"/><text x="44.2836%" y="303.50"></text></g><g><title>0x110053b08 (2 samples, 0.01%)</title><rect x="44.0537%" y="277" width="0.0133%" height="15" fill="rgb(220,13,46)" fg:x="6601" fg:w="2"/><text x="44.3037%" y="287.50"></text></g><g><title>0x110053b28 (9 samples, 0.06%)</title><rect x="44.0737%" y="277" width="0.0601%" height="15" fill="rgb(239,221,27)" fg:x="6604" fg:w="9"/><text x="44.3237%" y="287.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (8 samples, 0.05%)</title><rect x="44.0804%" y="261" width="0.0534%" height="15" fill="rgb(222,198,25)" fg:x="6605" fg:w="8"/><text x="44.3304%" y="271.50"></text></g><g><title>0x110053b60 (7 samples, 0.05%)</title><rect x="44.1404%" y="277" width="0.0467%" height="15" fill="rgb(211,99,13)" fg:x="6614" fg:w="7"/><text x="44.3904%" y="287.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (6 samples, 0.04%)</title><rect x="44.1471%" y="261" width="0.0400%" height="15" fill="rgb(232,111,31)" fg:x="6615" fg:w="6"/><text x="44.3971%" y="271.50"></text></g><g><title>0x110053b98 (2 samples, 0.01%)</title><rect x="44.1938%" y="277" width="0.0133%" height="15" fill="rgb(245,82,37)" fg:x="6622" fg:w="2"/><text x="44.4438%" y="287.50"></text></g><g><title>0x110053bd0 (7 samples, 0.05%)</title><rect x="44.2072%" y="277" width="0.0467%" height="15" fill="rgb(227,149,46)" fg:x="6624" fg:w="7"/><text x="44.4572%" y="287.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (5 samples, 0.03%)</title><rect x="44.2205%" y="261" width="0.0334%" height="15" fill="rgb(218,36,50)" fg:x="6626" fg:w="5"/><text x="44.4705%" y="271.50"></text></g><g><title>deno`Builtins_LoadIC (16 samples, 0.11%)</title><rect x="44.2872%" y="277" width="0.1068%" height="15" fill="rgb(226,80,48)" fg:x="6636" fg:w="16"/><text x="44.5372%" y="287.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (3 samples, 0.02%)</title><rect x="44.3940%" y="277" width="0.0200%" height="15" fill="rgb(238,224,15)" fg:x="6652" fg:w="3"/><text x="44.6440%" y="287.50"></text></g><g><title>0x110052274 (59 samples, 0.39%)</title><rect x="44.0537%" y="293" width="0.3938%" height="15" fill="rgb(241,136,10)" fg:x="6601" fg:w="59"/><text x="44.3037%" y="303.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (5 samples, 0.03%)</title><rect x="44.4140%" y="277" width="0.0334%" height="15" fill="rgb(208,32,45)" fg:x="6655" fg:w="5"/><text x="44.6640%" y="287.50"></text></g><g><title>0x11005231c (2 samples, 0.01%)</title><rect x="44.4608%" y="293" width="0.0133%" height="15" fill="rgb(207,135,9)" fg:x="6662" fg:w="2"/><text x="44.7108%" y="303.50"></text></g><g><title>0x110055594 (3 samples, 0.02%)</title><rect x="44.4808%" y="277" width="0.0200%" height="15" fill="rgb(206,86,44)" fg:x="6665" fg:w="3"/><text x="44.7308%" y="287.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.01%)</title><rect x="44.5008%" y="117" width="0.0133%" height="15" fill="rgb(245,177,15)" fg:x="6668" fg:w="2"/><text x="44.7508%" y="127.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.01%)</title><rect x="44.5008%" y="101" width="0.0133%" height="15" fill="rgb(206,64,50)" fg:x="6668" fg:w="2"/><text x="44.7508%" y="111.50"></text></g><g><title>0x110052324 (7 samples, 0.05%)</title><rect x="44.4741%" y="293" width="0.0467%" height="15" fill="rgb(234,36,40)" fg:x="6664" fg:w="7"/><text x="44.7241%" y="303.50"></text></g><g><title>0x1100555f8 (3 samples, 0.02%)</title><rect x="44.5008%" y="277" width="0.0200%" height="15" fill="rgb(213,64,8)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="287.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="44.5008%" y="261" width="0.0200%" height="15" fill="rgb(210,75,36)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="271.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.02%)</title><rect x="44.5008%" y="245" width="0.0200%" height="15" fill="rgb(229,88,21)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (3 samples, 0.02%)</title><rect x="44.5008%" y="229" width="0.0200%" height="15" fill="rgb(252,204,47)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (3 samples, 0.02%)</title><rect x="44.5008%" y="213" width="0.0200%" height="15" fill="rgb(208,77,27)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (3 samples, 0.02%)</title><rect x="44.5008%" y="197" width="0.0200%" height="15" fill="rgb(221,76,26)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (3 samples, 0.02%)</title><rect x="44.5008%" y="181" width="0.0200%" height="15" fill="rgb(225,139,18)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (3 samples, 0.02%)</title><rect x="44.5008%" y="165" width="0.0200%" height="15" fill="rgb(230,137,11)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (3 samples, 0.02%)</title><rect x="44.5008%" y="149" width="0.0200%" height="15" fill="rgb(212,28,1)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="159.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.02%)</title><rect x="44.5008%" y="133" width="0.0200%" height="15" fill="rgb(248,164,17)" fg:x="6668" fg:w="3"/><text x="44.7508%" y="143.50"></text></g><g><title>0x110052390 (2 samples, 0.01%)</title><rect x="44.5275%" y="293" width="0.0133%" height="15" fill="rgb(222,171,42)" fg:x="6672" fg:w="2"/><text x="44.7775%" y="303.50"></text></g><g><title>0x1100523cc (3 samples, 0.02%)</title><rect x="44.5475%" y="293" width="0.0200%" height="15" fill="rgb(243,84,45)" fg:x="6675" fg:w="3"/><text x="44.7975%" y="303.50"></text></g><g><title>0x110052430 (3 samples, 0.02%)</title><rect x="44.5809%" y="293" width="0.0200%" height="15" fill="rgb(252,49,23)" fg:x="6680" fg:w="3"/><text x="44.8309%" y="303.50"></text></g><g><title>0x1100524a8 (2 samples, 0.01%)</title><rect x="44.6076%" y="293" width="0.0133%" height="15" fill="rgb(215,19,7)" fg:x="6684" fg:w="2"/><text x="44.8576%" y="303.50"></text></g><g><title>0x1100524f0 (3 samples, 0.02%)</title><rect x="44.6209%" y="293" width="0.0200%" height="15" fill="rgb(238,81,41)" fg:x="6686" fg:w="3"/><text x="44.8709%" y="303.50"></text></g><g><title>0x110053f1c (15 samples, 0.10%)</title><rect x="44.6543%" y="277" width="0.1001%" height="15" fill="rgb(210,199,37)" fg:x="6691" fg:w="15"/><text x="44.9043%" y="287.50"></text></g><g><title>0x110053ffc (2 samples, 0.01%)</title><rect x="44.7944%" y="277" width="0.0133%" height="15" fill="rgb(244,192,49)" fg:x="6712" fg:w="2"/><text x="45.0444%" y="287.50"></text></g><g><title>0x110054098 (2 samples, 0.01%)</title><rect x="44.8211%" y="277" width="0.0133%" height="15" fill="rgb(226,211,11)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="287.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="44.8211%" y="261" width="0.0133%" height="15" fill="rgb(236,162,54)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="271.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="44.8211%" y="245" width="0.0133%" height="15" fill="rgb(220,229,9)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="44.8211%" y="229" width="0.0133%" height="15" fill="rgb(250,87,22)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="44.8211%" y="213" width="0.0133%" height="15" fill="rgb(239,43,17)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="44.8211%" y="197" width="0.0133%" height="15" fill="rgb(231,177,25)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="44.8211%" y="181" width="0.0133%" height="15" fill="rgb(219,179,1)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="44.8211%" y="165" width="0.0133%" height="15" fill="rgb(238,219,53)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="44.8211%" y="149" width="0.0133%" height="15" fill="rgb(232,167,36)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="159.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="44.8211%" y="133" width="0.0133%" height="15" fill="rgb(244,19,51)" fg:x="6716" fg:w="2"/><text x="45.0711%" y="143.50"></text></g><g><title>0x1100540b0 (2 samples, 0.01%)</title><rect x="44.8345%" y="277" width="0.0133%" height="15" fill="rgb(224,6,22)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="287.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="44.8345%" y="261" width="0.0133%" height="15" fill="rgb(224,145,5)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="271.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="44.8345%" y="245" width="0.0133%" height="15" fill="rgb(234,130,49)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="44.8345%" y="229" width="0.0133%" height="15" fill="rgb(254,6,2)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="44.8345%" y="213" width="0.0133%" height="15" fill="rgb(208,96,46)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="44.8345%" y="197" width="0.0133%" height="15" fill="rgb(239,3,39)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="44.8345%" y="181" width="0.0133%" height="15" fill="rgb(233,210,1)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="44.8345%" y="165" width="0.0133%" height="15" fill="rgb(244,137,37)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="44.8345%" y="149" width="0.0133%" height="15" fill="rgb(240,136,2)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="159.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="44.8345%" y="133" width="0.0133%" height="15" fill="rgb(239,18,37)" fg:x="6718" fg:w="2"/><text x="45.0845%" y="143.50"></text></g><g><title>0x1100524f8 (35 samples, 0.23%)</title><rect x="44.6410%" y="293" width="0.2336%" height="15" fill="rgb(218,185,22)" fg:x="6689" fg:w="35"/><text x="44.8910%" y="303.50"></text></g><g><title>deno`Builtins_SameValueNumbersOnly (4 samples, 0.03%)</title><rect x="44.8478%" y="277" width="0.0267%" height="15" fill="rgb(225,218,4)" fg:x="6720" fg:w="4"/><text x="45.0978%" y="287.50"></text></g><g><title>0x110052528 (2 samples, 0.01%)</title><rect x="44.8745%" y="293" width="0.0133%" height="15" fill="rgb(230,182,32)" fg:x="6724" fg:w="2"/><text x="45.1245%" y="303.50"></text></g><g><title>0x110053710 (2 samples, 0.01%)</title><rect x="44.8946%" y="277" width="0.0133%" height="15" fill="rgb(242,56,43)" fg:x="6727" fg:w="2"/><text x="45.1446%" y="287.50"></text></g><g><title>0x1100537d4 (2 samples, 0.01%)</title><rect x="44.9279%" y="277" width="0.0133%" height="15" fill="rgb(233,99,24)" fg:x="6732" fg:w="2"/><text x="45.1779%" y="287.50"></text></g><g><title>0x1100537e8 (3 samples, 0.02%)</title><rect x="44.9413%" y="277" width="0.0200%" height="15" fill="rgb(234,209,42)" fg:x="6734" fg:w="3"/><text x="45.1913%" y="287.50"></text></g><g><title>0x110053814 (2 samples, 0.01%)</title><rect x="44.9680%" y="277" width="0.0133%" height="15" fill="rgb(227,7,12)" fg:x="6738" fg:w="2"/><text x="45.2180%" y="287.50"></text></g><g><title>0x110053894 (2 samples, 0.01%)</title><rect x="44.9813%" y="277" width="0.0133%" height="15" fill="rgb(245,203,43)" fg:x="6740" fg:w="2"/><text x="45.2313%" y="287.50"></text></g><g><title>0x1100538e0 (3 samples, 0.02%)</title><rect x="44.9947%" y="277" width="0.0200%" height="15" fill="rgb(238,205,33)" fg:x="6742" fg:w="3"/><text x="45.2447%" y="287.50"></text></g><g><title>0x110052538 (19 samples, 0.13%)</title><rect x="44.8946%" y="293" width="0.1268%" height="15" fill="rgb(231,56,7)" fg:x="6727" fg:w="19"/><text x="45.1446%" y="303.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.01%)</title><rect x="45.2015%" y="117" width="0.0133%" height="15" fill="rgb(244,186,29)" fg:x="6773" fg:w="2"/><text x="45.4515%" y="127.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.01%)</title><rect x="45.2015%" y="101" width="0.0133%" height="15" fill="rgb(234,111,31)" fg:x="6773" fg:w="2"/><text x="45.4515%" y="111.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (4 samples, 0.03%)</title><rect x="45.1949%" y="261" width="0.0267%" height="15" fill="rgb(241,149,10)" fg:x="6772" fg:w="4"/><text x="45.4449%" y="271.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (4 samples, 0.03%)</title><rect x="45.1949%" y="245" width="0.0267%" height="15" fill="rgb(249,206,44)" fg:x="6772" fg:w="4"/><text x="45.4449%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (4 samples, 0.03%)</title><rect x="45.1949%" y="229" width="0.0267%" height="15" fill="rgb(251,153,30)" fg:x="6772" fg:w="4"/><text x="45.4449%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (3 samples, 0.02%)</title><rect x="45.2015%" y="213" width="0.0200%" height="15" fill="rgb(239,152,38)" fg:x="6773" fg:w="3"/><text x="45.4515%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (3 samples, 0.02%)</title><rect x="45.2015%" y="197" width="0.0200%" height="15" fill="rgb(249,139,47)" fg:x="6773" fg:w="3"/><text x="45.4515%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (3 samples, 0.02%)</title><rect x="45.2015%" y="181" width="0.0200%" height="15" fill="rgb(244,64,35)" fg:x="6773" fg:w="3"/><text x="45.4515%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (3 samples, 0.02%)</title><rect x="45.2015%" y="165" width="0.0200%" height="15" fill="rgb(216,46,15)" fg:x="6773" fg:w="3"/><text x="45.4515%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (3 samples, 0.02%)</title><rect x="45.2015%" y="149" width="0.0200%" height="15" fill="rgb(250,74,19)" fg:x="6773" fg:w="3"/><text x="45.4515%" y="159.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.02%)</title><rect x="45.2015%" y="133" width="0.0200%" height="15" fill="rgb(249,42,33)" fg:x="6773" fg:w="3"/><text x="45.4515%" y="143.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (3 samples, 0.02%)</title><rect x="45.2216%" y="261" width="0.0200%" height="15" fill="rgb(242,149,17)" fg:x="6776" fg:w="3"/><text x="45.4716%" y="271.50"></text></g><g><title>deno`Builtins_GetProperty (3 samples, 0.02%)</title><rect x="45.2416%" y="261" width="0.0200%" height="15" fill="rgb(244,29,21)" fg:x="6779" fg:w="3"/><text x="45.4916%" y="271.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (7 samples, 0.05%)</title><rect x="45.2616%" y="261" width="0.0467%" height="15" fill="rgb(220,130,37)" fg:x="6782" fg:w="7"/><text x="45.5116%" y="271.50"></text></g><g><title>deno`Builtins_FulfillPromise (9 samples, 0.06%)</title><rect x="45.3417%" y="245" width="0.0601%" height="15" fill="rgb(211,67,2)" fg:x="6794" fg:w="9"/><text x="45.5917%" y="255.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (114 samples, 0.76%)</title><rect x="45.0280%" y="277" width="0.7608%" height="15" fill="rgb(235,68,52)" fg:x="6747" fg:w="114"/><text x="45.2780%" y="287.50"></text></g><g><title>deno`Builtins_ResolvePromise (72 samples, 0.48%)</title><rect x="45.3083%" y="261" width="0.4805%" height="15" fill="rgb(246,142,3)" fg:x="6789" fg:w="72"/><text x="45.5583%" y="271.50"></text></g><g><title>deno`Builtins_GetProperty (58 samples, 0.39%)</title><rect x="45.4018%" y="245" width="0.3871%" height="15" fill="rgb(241,25,7)" fg:x="6803" fg:w="58"/><text x="45.6518%" y="255.50"></text></g><g><title>0x110052584 (118 samples, 0.79%)</title><rect x="45.0280%" y="293" width="0.7875%" height="15" fill="rgb(242,119,39)" fg:x="6747" fg:w="118"/><text x="45.2780%" y="303.50"></text></g><g><title>deno`Builtins_ResolvePromise (4 samples, 0.03%)</title><rect x="45.7888%" y="277" width="0.0267%" height="15" fill="rgb(241,98,45)" fg:x="6861" fg:w="4"/><text x="46.0388%" y="287.50"></text></g><g><title>0x1100525f0 (2 samples, 0.01%)</title><rect x="45.8289%" y="293" width="0.0133%" height="15" fill="rgb(254,28,30)" fg:x="6867" fg:w="2"/><text x="46.0789%" y="303.50"></text></g><g><title>0x110052608 (2 samples, 0.01%)</title><rect x="45.8489%" y="293" width="0.0133%" height="15" fill="rgb(241,142,54)" fg:x="6870" fg:w="2"/><text x="46.0989%" y="303.50"></text></g><g><title>0x110052614 (6 samples, 0.04%)</title><rect x="45.8623%" y="293" width="0.0400%" height="15" fill="rgb(222,85,15)" fg:x="6872" fg:w="6"/><text x="46.1123%" y="303.50"></text></g><g><title>0x110052648 (2 samples, 0.01%)</title><rect x="45.9223%" y="293" width="0.0133%" height="15" fill="rgb(210,85,47)" fg:x="6881" fg:w="2"/><text x="46.1723%" y="303.50"></text></g><g><title>0x110052690 (2 samples, 0.01%)</title><rect x="45.9357%" y="293" width="0.0133%" height="15" fill="rgb(224,206,25)" fg:x="6883" fg:w="2"/><text x="46.1857%" y="303.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="45.9624%" y="181" width="0.0133%" height="15" fill="rgb(243,201,19)" fg:x="6887" fg:w="2"/><text x="46.2124%" y="191.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (4 samples, 0.03%)</title><rect x="45.9624%" y="197" width="0.0267%" height="15" fill="rgb(236,59,4)" fg:x="6887" fg:w="4"/><text x="46.2124%" y="207.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (6 samples, 0.04%)</title><rect x="45.9624%" y="261" width="0.0400%" height="15" fill="rgb(254,179,45)" fg:x="6887" fg:w="6"/><text x="46.2124%" y="271.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (6 samples, 0.04%)</title><rect x="45.9624%" y="245" width="0.0400%" height="15" fill="rgb(226,14,10)" fg:x="6887" fg:w="6"/><text x="46.2124%" y="255.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (6 samples, 0.04%)</title><rect x="45.9624%" y="229" width="0.0400%" height="15" fill="rgb(244,27,41)" fg:x="6887" fg:w="6"/><text x="46.2124%" y="239.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::Call (6 samples, 0.04%)</title><rect x="45.9624%" y="213" width="0.0400%" height="15" fill="rgb(235,35,32)" fg:x="6887" fg:w="6"/><text x="46.2124%" y="223.50"></text></g><g><title>0x110050c78 (7 samples, 0.05%)</title><rect x="45.9624%" y="277" width="0.0467%" height="15" fill="rgb(218,68,31)" fg:x="6887" fg:w="7"/><text x="46.2124%" y="287.50"></text></g><g><title>0x1100557f8 (7 samples, 0.05%)</title><rect x="46.0291%" y="277" width="0.0467%" height="15" fill="rgb(207,120,37)" fg:x="6897" fg:w="7"/><text x="46.2791%" y="287.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (7 samples, 0.05%)</title><rect x="46.0291%" y="261" width="0.0467%" height="15" fill="rgb(227,98,0)" fg:x="6897" fg:w="7"/><text x="46.2791%" y="271.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::FunctionCallbackArguments (2 samples, 0.01%)</title><rect x="46.1092%" y="229" width="0.0133%" height="15" fill="rgb(207,7,3)" fg:x="6909" fg:w="2"/><text x="46.3592%" y="239.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.02%)</title><rect x="46.1292%" y="213" width="0.0200%" height="15" fill="rgb(206,98,19)" fg:x="6912" fg:w="3"/><text x="46.3792%" y="223.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (3 samples, 0.02%)</title><rect x="46.1492%" y="213" width="0.0200%" height="15" fill="rgb(217,5,26)" fg:x="6915" fg:w="3"/><text x="46.3992%" y="223.50"></text></g><g><title>deno`OUTLINED_FUNCTION_12701 (2 samples, 0.01%)</title><rect x="46.4162%" y="165" width="0.0133%" height="15" fill="rgb(235,190,38)" fg:x="6955" fg:w="2"/><text x="46.6662%" y="175.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (5 samples, 0.03%)</title><rect x="46.4295%" y="165" width="0.0334%" height="15" fill="rgb(247,86,24)" fg:x="6957" fg:w="5"/><text x="46.6795%" y="175.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="46.4896%" y="149" width="0.0334%" height="15" fill="rgb(205,101,16)" fg:x="6966" fg:w="5"/><text x="46.7396%" y="159.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (13 samples, 0.09%)</title><rect x="46.4696%" y="165" width="0.0868%" height="15" fill="rgb(246,168,33)" fg:x="6963" fg:w="13"/><text x="46.7196%" y="175.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="46.5230%" y="149" width="0.0334%" height="15" fill="rgb(231,114,1)" fg:x="6971" fg:w="5"/><text x="46.7730%" y="159.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.02%)</title><rect x="46.5563%" y="165" width="0.0200%" height="15" fill="rgb(207,184,53)" fg:x="6976" fg:w="3"/><text x="46.8063%" y="175.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (4 samples, 0.03%)</title><rect x="46.8033%" y="149" width="0.0267%" height="15" fill="rgb(224,95,51)" fg:x="7013" fg:w="4"/><text x="47.0533%" y="159.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (26 samples, 0.17%)</title><rect x="46.8366%" y="149" width="0.1735%" height="15" fill="rgb(212,188,45)" fg:x="7018" fg:w="26"/><text x="47.0866%" y="159.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (115 samples, 0.77%)</title><rect x="47.0101%" y="149" width="0.7675%" height="15" fill="rgb(223,154,38)" fg:x="7044" fg:w="115"/><text x="47.2601%" y="159.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (183 samples, 1.22%)</title><rect x="46.5763%" y="165" width="1.2213%" height="15" fill="rgb(251,22,52)" fg:x="6979" fg:w="183"/><text x="46.8263%" y="175.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (3 samples, 0.02%)</title><rect x="47.7776%" y="149" width="0.0200%" height="15" fill="rgb(229,209,22)" fg:x="7159" fg:w="3"/><text x="48.0276%" y="159.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.03%)</title><rect x="47.7977%" y="165" width="0.0267%" height="15" fill="rgb(234,138,34)" fg:x="7162" fg:w="4"/><text x="48.0477%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="47.8711%" y="149" width="0.0133%" height="15" fill="rgb(212,95,11)" fg:x="7173" fg:w="2"/><text x="48.1211%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.02%)</title><rect x="47.8844%" y="149" width="0.0200%" height="15" fill="rgb(240,179,47)" fg:x="7175" fg:w="3"/><text x="48.1344%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.31%)</title><rect x="47.8243%" y="165" width="0.3137%" height="15" fill="rgb(240,163,11)" fg:x="7166" fg:w="47"/><text x="48.0743%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (35 samples, 0.23%)</title><rect x="47.9044%" y="149" width="0.2336%" height="15" fill="rgb(236,37,12)" fg:x="7178" fg:w="35"/><text x="48.1544%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (30 samples, 0.20%)</title><rect x="47.9378%" y="133" width="0.2002%" height="15" fill="rgb(232,164,16)" fg:x="7183" fg:w="30"/><text x="48.1878%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (22 samples, 0.15%)</title><rect x="48.5051%" y="149" width="0.1468%" height="15" fill="rgb(244,205,15)" fg:x="7268" fg:w="22"/><text x="48.7551%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (3 samples, 0.02%)</title><rect x="48.6519%" y="149" width="0.0200%" height="15" fill="rgb(223,117,47)" fg:x="7290" fg:w="3"/><text x="48.9019%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="48.6719%" y="149" width="0.0133%" height="15" fill="rgb(244,107,35)" fg:x="7293" fg:w="2"/><text x="48.9219%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (95 samples, 0.63%)</title><rect x="48.1380%" y="165" width="0.6340%" height="15" fill="rgb(205,140,8)" fg:x="7213" fg:w="95"/><text x="48.3880%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.09%)</title><rect x="48.6853%" y="149" width="0.0868%" height="15" fill="rgb(228,84,46)" fg:x="7295" fg:w="13"/><text x="48.9353%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.04%)</title><rect x="48.7920%" y="165" width="0.0400%" height="15" fill="rgb(254,188,9)" fg:x="7311" fg:w="6"/><text x="49.0420%" y="175.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (379 samples, 2.53%)</title><rect x="46.3161%" y="181" width="2.5294%" height="15" fill="rgb(206,112,54)" fg:x="6940" fg:w="379"/><text x="46.5661%" y="191.50">de..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="48.8321%" y="165" width="0.0133%" height="15" fill="rgb(216,84,49)" fg:x="7317" fg:w="2"/><text x="49.0821%" y="175.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="48.8521%" y="181" width="0.0133%" height="15" fill="rgb(214,194,35)" fg:x="7320" fg:w="2"/><text x="49.1021%" y="191.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (2 samples, 0.01%)</title><rect x="48.8788%" y="181" width="0.0133%" height="15" fill="rgb(249,28,3)" fg:x="7324" fg:w="2"/><text x="49.1288%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="48.9389%" y="133" width="0.0200%" height="15" fill="rgb(222,56,52)" fg:x="7333" fg:w="3"/><text x="49.1889%" y="143.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (11 samples, 0.07%)</title><rect x="48.8922%" y="181" width="0.0734%" height="15" fill="rgb(245,217,50)" fg:x="7326" fg:w="11"/><text x="49.1422%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="48.9255%" y="165" width="0.0400%" height="15" fill="rgb(213,201,24)" fg:x="7331" fg:w="6"/><text x="49.1755%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="48.9322%" y="149" width="0.0334%" height="15" fill="rgb(248,116,28)" fg:x="7332" fg:w="5"/><text x="49.1822%" y="159.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.02%)</title><rect x="48.9656%" y="181" width="0.0200%" height="15" fill="rgb(219,72,43)" fg:x="7337" fg:w="3"/><text x="49.2156%" y="191.50"></text></g><g><title>deno`v8::Value::IsInt32 (2 samples, 0.01%)</title><rect x="48.9923%" y="181" width="0.0133%" height="15" fill="rgb(209,138,14)" fg:x="7341" fg:w="2"/><text x="49.2423%" y="191.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::get (2 samples, 0.01%)</title><rect x="49.0123%" y="181" width="0.0133%" height="15" fill="rgb(222,18,33)" fg:x="7344" fg:w="2"/><text x="49.2623%" y="191.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (3 samples, 0.02%)</title><rect x="49.0256%" y="181" width="0.0200%" height="15" fill="rgb(213,199,7)" fg:x="7346" fg:w="3"/><text x="49.2756%" y="191.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (5 samples, 0.03%)</title><rect x="49.0456%" y="181" width="0.0334%" height="15" fill="rgb(250,110,10)" fg:x="7349" fg:w="5"/><text x="49.2956%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.03%)</title><rect x="49.1124%" y="149" width="0.0334%" height="15" fill="rgb(248,123,6)" fg:x="7359" fg:w="5"/><text x="49.3624%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.01%)</title><rect x="49.1324%" y="133" width="0.0133%" height="15" fill="rgb(206,91,31)" fg:x="7362" fg:w="2"/><text x="49.3824%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.07%)</title><rect x="49.0857%" y="181" width="0.0667%" height="15" fill="rgb(211,154,13)" fg:x="7355" fg:w="10"/><text x="49.3357%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.05%)</title><rect x="49.1057%" y="165" width="0.0467%" height="15" fill="rgb(225,148,7)" fg:x="7358" fg:w="7"/><text x="49.3557%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.07%)</title><rect x="49.1591%" y="181" width="0.0734%" height="15" fill="rgb(220,160,43)" fg:x="7366" fg:w="11"/><text x="49.4091%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="49.2192%" y="165" width="0.0133%" height="15" fill="rgb(213,52,39)" fg:x="7375" fg:w="2"/><text x="49.4692%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="49.2392%" y="181" width="0.0133%" height="15" fill="rgb(243,137,7)" fg:x="7378" fg:w="2"/><text x="49.4892%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="49.2525%" y="181" width="0.0267%" height="15" fill="rgb(230,79,13)" fg:x="7380" fg:w="4"/><text x="49.5025%" y="191.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (460 samples, 3.07%)</title><rect x="46.2226%" y="197" width="3.0699%" height="15" fill="rgb(247,105,23)" fg:x="6926" fg:w="460"/><text x="46.4726%" y="207.50">den..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.01%)</title><rect x="49.2792%" y="181" width="0.0133%" height="15" fill="rgb(223,179,41)" fg:x="7384" fg:w="2"/><text x="49.5292%" y="191.50"></text></g><g><title>deno`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="49.2926%" y="197" width="0.0133%" height="15" fill="rgb(218,9,34)" fg:x="7386" fg:w="2"/><text x="49.5426%" y="207.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="49.3059%" y="197" width="0.0133%" height="15" fill="rgb(222,106,8)" fg:x="7388" fg:w="2"/><text x="49.5559%" y="207.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="49.3193%" y="197" width="0.0133%" height="15" fill="rgb(211,220,0)" fg:x="7390" fg:w="2"/><text x="49.5693%" y="207.50"></text></g><g><title>deno`futures_task::noop_waker::noop (3 samples, 0.02%)</title><rect x="49.3393%" y="197" width="0.0200%" height="15" fill="rgb(229,52,16)" fg:x="7393" fg:w="3"/><text x="49.5893%" y="207.50"></text></g><g><title>deno`v8::External::Value (2 samples, 0.01%)</title><rect x="49.3593%" y="197" width="0.0133%" height="15" fill="rgb(212,155,18)" fg:x="7396" fg:w="2"/><text x="49.6093%" y="207.50"></text></g><g><title>deno`v8::Integer::Value (4 samples, 0.03%)</title><rect x="49.3727%" y="197" width="0.0267%" height="15" fill="rgb(242,21,14)" fg:x="7398" fg:w="4"/><text x="49.6227%" y="207.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (4 samples, 0.03%)</title><rect x="49.4060%" y="197" width="0.0267%" height="15" fill="rgb(222,19,48)" fg:x="7403" fg:w="4"/><text x="49.6560%" y="207.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::~ExternalCallbackScope (5 samples, 0.03%)</title><rect x="49.4327%" y="197" width="0.0334%" height="15" fill="rgb(232,45,27)" fg:x="7407" fg:w="5"/><text x="49.6827%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="49.4861%" y="197" width="0.0133%" height="15" fill="rgb(249,103,42)" fg:x="7415" fg:w="2"/><text x="49.7361%" y="207.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (512 samples, 3.42%)</title><rect x="46.0892%" y="245" width="3.4170%" height="15" fill="rgb(246,81,33)" fg:x="6906" fg:w="512"/><text x="46.3392%" y="255.50">den..</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (507 samples, 3.38%)</title><rect x="46.1225%" y="229" width="3.3836%" height="15" fill="rgb(252,33,42)" fg:x="6911" fg:w="507"/><text x="46.3725%" y="239.50">den..</text></g><g><title>deno`v8::internal::FunctionCallbackArguments::Call (500 samples, 3.34%)</title><rect x="46.1692%" y="213" width="3.3369%" height="15" fill="rgb(209,212,41)" fg:x="6918" fg:w="500"/><text x="46.4192%" y="223.50">den..</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (515 samples, 3.44%)</title><rect x="46.0825%" y="261" width="3.4370%" height="15" fill="rgb(207,154,6)" fg:x="6905" fg:w="515"/><text x="46.3325%" y="271.50">den..</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2 samples, 0.01%)</title><rect x="49.5061%" y="245" width="0.0133%" height="15" fill="rgb(223,64,47)" fg:x="7418" fg:w="2"/><text x="49.7561%" y="255.50"></text></g><g><title>0x11005582c (519 samples, 3.46%)</title><rect x="46.0758%" y="277" width="3.4637%" height="15" fill="rgb(211,161,38)" fg:x="6904" fg:w="519"/><text x="46.3258%" y="287.50">0x1..</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.02%)</title><rect x="49.5195%" y="261" width="0.0200%" height="15" fill="rgb(219,138,40)" fg:x="7420" fg:w="3"/><text x="49.7695%" y="271.50"></text></g><g><title>0x110055a6c (2 samples, 0.01%)</title><rect x="49.5595%" y="277" width="0.0133%" height="15" fill="rgb(241,228,46)" fg:x="7426" fg:w="2"/><text x="49.8095%" y="287.50"></text></g><g><title>0x110055af0 (4 samples, 0.03%)</title><rect x="49.5796%" y="277" width="0.0267%" height="15" fill="rgb(223,209,38)" fg:x="7429" fg:w="4"/><text x="49.8296%" y="287.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (4 samples, 0.03%)</title><rect x="49.5796%" y="261" width="0.0267%" height="15" fill="rgb(236,164,45)" fg:x="7429" fg:w="4"/><text x="49.8296%" y="271.50"></text></g><g><title>0x110055c54 (2 samples, 0.01%)</title><rect x="49.6062%" y="277" width="0.0133%" height="15" fill="rgb(231,15,5)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="287.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="49.6062%" y="261" width="0.0133%" height="15" fill="rgb(252,35,15)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="271.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="49.6062%" y="245" width="0.0133%" height="15" fill="rgb(248,181,18)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="49.6062%" y="229" width="0.0133%" height="15" fill="rgb(233,39,42)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="49.6062%" y="213" width="0.0133%" height="15" fill="rgb(238,110,33)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="49.6062%" y="197" width="0.0133%" height="15" fill="rgb(233,195,10)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="49.6062%" y="181" width="0.0133%" height="15" fill="rgb(254,105,3)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="49.6062%" y="165" width="0.0133%" height="15" fill="rgb(221,225,9)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="49.6062%" y="149" width="0.0133%" height="15" fill="rgb(224,227,45)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="159.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="49.6062%" y="133" width="0.0133%" height="15" fill="rgb(229,198,43)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.01%)</title><rect x="49.6062%" y="117" width="0.0133%" height="15" fill="rgb(206,209,35)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="127.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.01%)</title><rect x="49.6062%" y="101" width="0.0133%" height="15" fill="rgb(245,195,53)" fg:x="7433" fg:w="2"/><text x="49.8562%" y="111.50"></text></g><g><title>0x110055dd4 (2 samples, 0.01%)</title><rect x="49.6196%" y="277" width="0.0133%" height="15" fill="rgb(240,92,26)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="287.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="49.6196%" y="261" width="0.0133%" height="15" fill="rgb(207,40,23)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="271.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="49.6196%" y="245" width="0.0133%" height="15" fill="rgb(223,111,35)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="49.6196%" y="229" width="0.0133%" height="15" fill="rgb(229,147,28)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="49.6196%" y="213" width="0.0133%" height="15" fill="rgb(211,29,28)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="49.6196%" y="197" width="0.0133%" height="15" fill="rgb(228,72,33)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="49.6196%" y="181" width="0.0133%" height="15" fill="rgb(205,214,31)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="49.6196%" y="165" width="0.0133%" height="15" fill="rgb(224,111,15)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="49.6196%" y="149" width="0.0133%" height="15" fill="rgb(253,21,26)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="159.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="49.6196%" y="133" width="0.0133%" height="15" fill="rgb(245,139,43)" fg:x="7435" fg:w="2"/><text x="49.8696%" y="143.50"></text></g><g><title>0x110055f38 (13 samples, 0.09%)</title><rect x="49.6396%" y="277" width="0.0868%" height="15" fill="rgb(252,170,7)" fg:x="7438" fg:w="13"/><text x="49.8896%" y="287.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (13 samples, 0.09%)</title><rect x="49.6396%" y="261" width="0.0868%" height="15" fill="rgb(231,118,14)" fg:x="7438" fg:w="13"/><text x="49.8896%" y="271.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (4 samples, 0.03%)</title><rect x="49.7264%" y="277" width="0.0267%" height="15" fill="rgb(238,83,0)" fg:x="7451" fg:w="4"/><text x="49.9764%" y="287.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (3 samples, 0.02%)</title><rect x="49.7531%" y="277" width="0.0200%" height="15" fill="rgb(221,39,39)" fg:x="7455" fg:w="3"/><text x="50.0031%" y="287.50"></text></g><g><title>deno`Builtins_KeyedLoadICTrampoline (3 samples, 0.02%)</title><rect x="49.7731%" y="277" width="0.0200%" height="15" fill="rgb(222,119,46)" fg:x="7458" fg:w="3"/><text x="50.0231%" y="287.50"></text></g><g><title>0x1100526f4 (589 samples, 3.93%)</title><rect x="45.9557%" y="293" width="3.9309%" height="15" fill="rgb(222,165,49)" fg:x="6886" fg:w="589"/><text x="46.2057%" y="303.50">0x11..</text></g><g><title>deno`Builtins_KeyedLoadIC_PolymorphicName (14 samples, 0.09%)</title><rect x="49.7931%" y="277" width="0.0934%" height="15" fill="rgb(219,113,52)" fg:x="7461" fg:w="14"/><text x="50.0431%" y="287.50"></text></g><g><title>0x110052708 (12 samples, 0.08%)</title><rect x="49.8865%" y="293" width="0.0801%" height="15" fill="rgb(214,7,15)" fg:x="7475" fg:w="12"/><text x="50.1365%" y="303.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (12 samples, 0.08%)</title><rect x="49.8865%" y="277" width="0.0801%" height="15" fill="rgb(235,32,4)" fg:x="7475" fg:w="12"/><text x="50.1365%" y="287.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (5 samples, 0.03%)</title><rect x="49.9333%" y="261" width="0.0334%" height="15" fill="rgb(238,90,54)" fg:x="7482" fg:w="5"/><text x="50.1833%" y="271.50"></text></g><g><title>0x11005294c (3 samples, 0.02%)</title><rect x="49.9733%" y="293" width="0.0200%" height="15" fill="rgb(213,208,19)" fg:x="7488" fg:w="3"/><text x="50.2233%" y="303.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="49.9733%" y="277" width="0.0200%" height="15" fill="rgb(233,156,4)" fg:x="7488" fg:w="3"/><text x="50.2233%" y="287.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.02%)</title><rect x="49.9733%" y="261" width="0.0200%" height="15" fill="rgb(207,194,5)" fg:x="7488" fg:w="3"/><text x="50.2233%" y="271.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (3 samples, 0.02%)</title><rect x="49.9733%" y="245" width="0.0200%" height="15" fill="rgb(206,111,30)" fg:x="7488" fg:w="3"/><text x="50.2233%" y="255.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (3 samples, 0.02%)</title><rect x="49.9733%" y="229" width="0.0200%" height="15" fill="rgb(243,70,54)" fg:x="7488" fg:w="3"/><text x="50.2233%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (3 samples, 0.02%)</title><rect x="49.9733%" y="213" width="0.0200%" height="15" fill="rgb(242,28,8)" fg:x="7488" fg:w="3"/><text x="50.2233%" y="223.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (3 samples, 0.02%)</title><rect x="49.9733%" y="197" width="0.0200%" height="15" fill="rgb(219,106,18)" fg:x="7488" fg:w="3"/><text x="50.2233%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (3 samples, 0.02%)</title><rect x="49.9733%" y="181" width="0.0200%" height="15" fill="rgb(244,222,10)" fg:x="7488" fg:w="3"/><text x="50.2233%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="49.9800%" y="165" width="0.0133%" height="15" fill="rgb(236,179,52)" fg:x="7489" fg:w="2"/><text x="50.2300%" y="175.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="49.9800%" y="149" width="0.0133%" height="15" fill="rgb(213,23,39)" fg:x="7489" fg:w="2"/><text x="50.2300%" y="159.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (3 samples, 0.02%)</title><rect x="49.9933%" y="181" width="0.0200%" height="15" fill="rgb(238,48,10)" fg:x="7491" fg:w="3"/><text x="50.2433%" y="191.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (3 samples, 0.02%)</title><rect x="49.9933%" y="165" width="0.0200%" height="15" fill="rgb(251,196,23)" fg:x="7491" fg:w="3"/><text x="50.2433%" y="175.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (2 samples, 0.01%)</title><rect x="50.0000%" y="149" width="0.0133%" height="15" fill="rgb(250,152,24)" fg:x="7492" fg:w="2"/><text x="50.2500%" y="159.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (2 samples, 0.01%)</title><rect x="50.0000%" y="133" width="0.0133%" height="15" fill="rgb(209,150,17)" fg:x="7492" fg:w="2"/><text x="50.2500%" y="143.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (2 samples, 0.01%)</title><rect x="50.0000%" y="117" width="0.0133%" height="15" fill="rgb(234,202,34)" fg:x="7492" fg:w="2"/><text x="50.2500%" y="127.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (2 samples, 0.01%)</title><rect x="50.0000%" y="101" width="0.0133%" height="15" fill="rgb(253,148,53)" fg:x="7492" fg:w="2"/><text x="50.2500%" y="111.50"></text></g><g><title>libsystem_c.dylib`__dtoa (2 samples, 0.01%)</title><rect x="50.0000%" y="85" width="0.0133%" height="15" fill="rgb(218,129,16)" fg:x="7492" fg:w="2"/><text x="50.2500%" y="95.50"></text></g><g><title>0x110052c70 (4 samples, 0.03%)</title><rect x="49.9933%" y="293" width="0.0267%" height="15" fill="rgb(216,85,19)" fg:x="7491" fg:w="4"/><text x="50.2433%" y="303.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (4 samples, 0.03%)</title><rect x="49.9933%" y="277" width="0.0267%" height="15" fill="rgb(235,228,7)" fg:x="7491" fg:w="4"/><text x="50.2433%" y="287.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (4 samples, 0.03%)</title><rect x="49.9933%" y="261" width="0.0267%" height="15" fill="rgb(245,175,0)" fg:x="7491" fg:w="4"/><text x="50.2433%" y="271.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (4 samples, 0.03%)</title><rect x="49.9933%" y="245" width="0.0267%" height="15" fill="rgb(208,168,36)" fg:x="7491" fg:w="4"/><text x="50.2433%" y="255.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (4 samples, 0.03%)</title><rect x="49.9933%" y="229" width="0.0267%" height="15" fill="rgb(246,171,24)" fg:x="7491" fg:w="4"/><text x="50.2433%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (4 samples, 0.03%)</title><rect x="49.9933%" y="213" width="0.0267%" height="15" fill="rgb(215,142,24)" fg:x="7491" fg:w="4"/><text x="50.2433%" y="223.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (4 samples, 0.03%)</title><rect x="49.9933%" y="197" width="0.0267%" height="15" fill="rgb(250,187,7)" fg:x="7491" fg:w="4"/><text x="50.2433%" y="207.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.02%)</title><rect x="50.0267%" y="149" width="0.0200%" height="15" fill="rgb(228,66,33)" fg:x="7496" fg:w="3"/><text x="50.2767%" y="159.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.01%)</title><rect x="50.0334%" y="133" width="0.0133%" height="15" fill="rgb(234,215,21)" fg:x="7497" fg:w="2"/><text x="50.2834%" y="143.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.01%)</title><rect x="50.0334%" y="117" width="0.0133%" height="15" fill="rgb(222,191,20)" fg:x="7497" fg:w="2"/><text x="50.2834%" y="127.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.01%)</title><rect x="50.0334%" y="101" width="0.0133%" height="15" fill="rgb(245,79,54)" fg:x="7497" fg:w="2"/><text x="50.2834%" y="111.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (4 samples, 0.03%)</title><rect x="50.0267%" y="197" width="0.0267%" height="15" fill="rgb(240,10,37)" fg:x="7496" fg:w="4"/><text x="50.2767%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (4 samples, 0.03%)</title><rect x="50.0267%" y="181" width="0.0267%" height="15" fill="rgb(214,192,32)" fg:x="7496" fg:w="4"/><text x="50.2767%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (4 samples, 0.03%)</title><rect x="50.0267%" y="165" width="0.0267%" height="15" fill="rgb(209,36,54)" fg:x="7496" fg:w="4"/><text x="50.2767%" y="175.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (5 samples, 0.03%)</title><rect x="50.0267%" y="229" width="0.0334%" height="15" fill="rgb(220,10,11)" fg:x="7496" fg:w="5"/><text x="50.2767%" y="239.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (5 samples, 0.03%)</title><rect x="50.0267%" y="213" width="0.0334%" height="15" fill="rgb(221,106,17)" fg:x="7496" fg:w="5"/><text x="50.2767%" y="223.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (6 samples, 0.04%)</title><rect x="50.0267%" y="245" width="0.0400%" height="15" fill="rgb(251,142,44)" fg:x="7496" fg:w="6"/><text x="50.2767%" y="255.50"></text></g><g><title>0x110052cc8 (7 samples, 0.05%)</title><rect x="50.0267%" y="293" width="0.0467%" height="15" fill="rgb(238,13,15)" fg:x="7496" fg:w="7"/><text x="50.2767%" y="303.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (7 samples, 0.05%)</title><rect x="50.0267%" y="277" width="0.0467%" height="15" fill="rgb(208,107,27)" fg:x="7496" fg:w="7"/><text x="50.2767%" y="287.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (7 samples, 0.05%)</title><rect x="50.0267%" y="261" width="0.0467%" height="15" fill="rgb(205,136,37)" fg:x="7496" fg:w="7"/><text x="50.2767%" y="271.50"></text></g><g><title>0x110053ac0 (2 samples, 0.01%)</title><rect x="50.1068%" y="293" width="0.0133%" height="15" fill="rgb(250,205,27)" fg:x="7508" fg:w="2"/><text x="50.3568%" y="303.50"></text></g><g><title>0x110053ac8 (2 samples, 0.01%)</title><rect x="50.1201%" y="293" width="0.0133%" height="15" fill="rgb(210,80,43)" fg:x="7510" fg:w="2"/><text x="50.3701%" y="303.50"></text></g><g><title>0x1100556c0 (3 samples, 0.02%)</title><rect x="50.1335%" y="293" width="0.0200%" height="15" fill="rgb(247,160,36)" fg:x="7512" fg:w="3"/><text x="50.3835%" y="303.50"></text></g><g><title>0x1100556d8 (2 samples, 0.01%)</title><rect x="50.1602%" y="293" width="0.0133%" height="15" fill="rgb(234,13,49)" fg:x="7516" fg:w="2"/><text x="50.4102%" y="303.50"></text></g><g><title>deno`Builtins_CallApiCallback (5 samples, 0.03%)</title><rect x="50.1735%" y="293" width="0.0334%" height="15" fill="rgb(234,122,0)" fg:x="7518" fg:w="5"/><text x="50.4235%" y="303.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="50.2069%" y="293" width="0.0133%" height="15" fill="rgb(207,146,38)" fg:x="7523" fg:w="2"/><text x="50.4569%" y="303.50"></text></g><g><title>deno`Builtins_LoadIC (53 samples, 0.35%)</title><rect x="50.2269%" y="293" width="0.3537%" height="15" fill="rgb(207,177,25)" fg:x="7526" fg:w="53"/><text x="50.4769%" y="303.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (4 samples, 0.03%)</title><rect x="50.5806%" y="293" width="0.0267%" height="15" fill="rgb(211,178,42)" fg:x="7579" fg:w="4"/><text x="50.8306%" y="303.50"></text></g><g><title>deno`Builtins_NumberToString (5 samples, 0.03%)</title><rect x="50.6073%" y="293" width="0.0334%" height="15" fill="rgb(230,69,54)" fg:x="7583" fg:w="5"/><text x="50.8573%" y="303.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (60 samples, 0.40%)</title><rect x="50.6407%" y="293" width="0.4004%" height="15" fill="rgb(214,135,41)" fg:x="7588" fg:w="60"/><text x="50.8907%" y="303.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (6,308 samples, 42.10%)</title><rect x="8.9562%" y="309" width="42.0982%" height="15" fill="rgb(237,67,25)" fg:x="1342" fg:w="6308"/><text x="9.2062%" y="319.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_ToString (2 samples, 0.01%)</title><rect x="51.0411%" y="293" width="0.0133%" height="15" fill="rgb(222,189,50)" fg:x="7648" fg:w="2"/><text x="51.2911%" y="303.50"></text></g><g><title>deno`Builtins_ResolvePromise (4 samples, 0.03%)</title><rect x="51.0611%" y="309" width="0.0267%" height="15" fill="rgb(245,148,34)" fg:x="7651" fg:w="4"/><text x="51.3111%" y="319.50"></text></g><g><title>deno`Builtins_FulfillPromise (3 samples, 0.02%)</title><rect x="51.0678%" y="293" width="0.0200%" height="15" fill="rgb(222,29,6)" fg:x="7652" fg:w="3"/><text x="51.3178%" y="303.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (6,346 samples, 42.35%)</title><rect x="8.8428%" y="325" width="42.3518%" height="15" fill="rgb(221,189,43)" fg:x="1325" fg:w="6346"/><text x="9.0928%" y="335.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (16 samples, 0.11%)</title><rect x="51.0878%" y="309" width="0.1068%" height="15" fill="rgb(207,36,27)" fg:x="7655" fg:w="16"/><text x="51.3378%" y="319.50"></text></g><g><title>deno`Builtins_RecordWriteIgnoreFP (8 samples, 0.05%)</title><rect x="51.1412%" y="293" width="0.0534%" height="15" fill="rgb(217,90,24)" fg:x="7663" fg:w="8"/><text x="51.3912%" y="303.50"></text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (6,409 samples, 42.77%)</title><rect x="8.4290%" y="357" width="42.7723%" height="15" fill="rgb(224,66,35)" fg:x="1263" fg:w="6409"/><text x="8.6790%" y="367.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (6,403 samples, 42.73%)</title><rect x="8.4690%" y="341" width="42.7322%" height="15" fill="rgb(221,13,50)" fg:x="1269" fg:w="6403"/><text x="8.7190%" y="351.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (6,420 samples, 42.85%)</title><rect x="8.3689%" y="373" width="42.8457%" height="15" fill="rgb(236,68,49)" fg:x="1254" fg:w="6420"/><text x="8.6189%" y="383.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate..</text></g><g><title>deno`v8::internal::SaveContext::SaveContext (2 samples, 0.01%)</title><rect x="51.2013%" y="357" width="0.0133%" height="15" fill="rgb(229,146,28)" fg:x="7672" fg:w="2"/><text x="51.4513%" y="367.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (2 samples, 0.01%)</title><rect x="51.2146%" y="373" width="0.0133%" height="15" fill="rgb(225,31,38)" fg:x="7674" fg:w="2"/><text x="51.4646%" y="383.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (6,502 samples, 43.39%)</title><rect x="7.8484%" y="453" width="43.3930%" height="15" fill="rgb(250,208,3)" fg:x="1176" fg:w="6502"/><text x="8.0984%" y="463.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (6,487 samples, 43.29%)</title><rect x="7.9485%" y="437" width="43.2928%" height="15" fill="rgb(246,54,23)" fg:x="1191" fg:w="6487"/><text x="8.1985%" y="447.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (6,474 samples, 43.21%)</title><rect x="8.0352%" y="421" width="43.2061%" height="15" fill="rgb(243,76,11)" fg:x="1204" fg:w="6474"/><text x="8.2852%" y="431.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*, v8::internal::MaybeHandle (6,460 samples, 43.11%)</title><rect x="8.1287%" y="405" width="43.1127%" height="15" fill="rgb(245,21,50)" fg:x="1218" fg:w="6460"/><text x="8.3787%" y="415.50">deno`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, ..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (6,437 samples, 42.96%)</title><rect x="8.2822%" y="389" width="42.9592%" height="15" fill="rgb(228,9,43)" fg:x="1241" fg:w="6437"/><text x="8.5322%" y="399.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::inter..</text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (6,666 samples, 44.49%)</title><rect x="6.7672%" y="469" width="44.4875%" height="15" fill="rgb(208,100,47)" fg:x="1014" fg:w="6666"/><text x="7.0172%" y="479.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int..</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (2 samples, 0.01%)</title><rect x="51.2413%" y="453" width="0.0133%" height="15" fill="rgb(232,26,8)" fg:x="7678" fg:w="2"/><text x="51.4913%" y="463.50"></text></g><g><title>deno`v8::TryCatch::Exception (3 samples, 0.02%)</title><rect x="51.2613%" y="469" width="0.0200%" height="15" fill="rgb(216,166,38)" fg:x="7681" fg:w="3"/><text x="51.5113%" y="479.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (5 samples, 0.03%)</title><rect x="51.2814%" y="469" width="0.0334%" height="15" fill="rgb(251,202,51)" fg:x="7684" fg:w="5"/><text x="51.5314%" y="479.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (8 samples, 0.05%)</title><rect x="51.3147%" y="469" width="0.0534%" height="15" fill="rgb(254,216,34)" fg:x="7689" fg:w="8"/><text x="51.5647%" y="479.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call (2 samples, 0.01%)</title><rect x="51.3748%" y="469" width="0.0133%" height="15" fill="rgb(251,32,27)" fg:x="7698" fg:w="2"/><text x="51.6248%" y="479.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (2 samples, 0.01%)</title><rect x="51.3948%" y="469" width="0.0133%" height="15" fill="rgb(208,127,28)" fg:x="7701" fg:w="2"/><text x="51.6448%" y="479.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (3 samples, 0.02%)</title><rect x="51.4148%" y="469" width="0.0200%" height="15" fill="rgb(224,137,22)" fg:x="7704" fg:w="3"/><text x="51.6648%" y="479.50"></text></g><g><title>deno`v8::internal::Isolate::ClearKeptObjects (2 samples, 0.01%)</title><rect x="51.4482%" y="469" width="0.0133%" height="15" fill="rgb(254,70,32)" fg:x="7709" fg:w="2"/><text x="51.6982%" y="479.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (3 samples, 0.02%)</title><rect x="51.4682%" y="469" width="0.0200%" height="15" fill="rgb(229,75,37)" fg:x="7712" fg:w="3"/><text x="51.7182%" y="479.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.01%)</title><rect x="51.4749%" y="453" width="0.0133%" height="15" fill="rgb(252,64,23)" fg:x="7713" fg:w="2"/><text x="51.7249%" y="463.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (10 samples, 0.07%)</title><rect x="51.4949%" y="469" width="0.0667%" height="15" fill="rgb(232,162,48)" fg:x="7716" fg:w="10"/><text x="51.7449%" y="479.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (6 samples, 0.04%)</title><rect x="51.5617%" y="469" width="0.0400%" height="15" fill="rgb(246,160,12)" fg:x="7726" fg:w="6"/><text x="51.8117%" y="479.50"></text></g><g><title>deno`v8::isolate::Isolate::is_execution_terminating (3 samples, 0.02%)</title><rect x="51.6017%" y="469" width="0.0200%" height="15" fill="rgb(247,166,0)" fg:x="7732" fg:w="3"/><text x="51.8517%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="51.6084%" y="453" width="0.0133%" height="15" fill="rgb(249,219,21)" fg:x="7733" fg:w="2"/><text x="51.8584%" y="463.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (3 samples, 0.02%)</title><rect x="51.6217%" y="469" width="0.0200%" height="15" fill="rgb(205,209,3)" fg:x="7735" fg:w="3"/><text x="51.8717%" y="479.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new (3 samples, 0.02%)</title><rect x="51.6418%" y="469" width="0.0200%" height="15" fill="rgb(243,44,1)" fg:x="7738" fg:w="3"/><text x="51.8918%" y="479.50"></text></g><g><title>deno`v8::Integer::New (2 samples, 0.01%)</title><rect x="51.6484%" y="453" width="0.0133%" height="15" fill="rgb(206,159,16)" fg:x="7739" fg:w="2"/><text x="51.8984%" y="463.50"></text></g><g><title>deno`v8::Integer::New (2 samples, 0.01%)</title><rect x="51.6618%" y="453" width="0.0133%" height="15" fill="rgb(244,77,30)" fg:x="7741" fg:w="2"/><text x="51.9118%" y="463.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new_from_unsigned (4 samples, 0.03%)</title><rect x="51.6618%" y="469" width="0.0267%" height="15" fill="rgb(218,69,12)" fg:x="7741" fg:w="4"/><text x="51.9118%" y="479.50"></text></g><g><title>deno`v8::Integer::NewFromUnsigned (2 samples, 0.01%)</title><rect x="51.6751%" y="453" width="0.0133%" height="15" fill="rgb(212,87,7)" fg:x="7743" fg:w="2"/><text x="51.9251%" y="463.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (6 samples, 0.04%)</title><rect x="51.7819%" y="357" width="0.0400%" height="15" fill="rgb(245,114,25)" fg:x="7759" fg:w="6"/><text x="52.0319%" y="367.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (9 samples, 0.06%)</title><rect x="51.7819%" y="373" width="0.0601%" height="15" fill="rgb(210,61,42)" fg:x="7759" fg:w="9"/><text x="52.0319%" y="383.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (3 samples, 0.02%)</title><rect x="51.8219%" y="357" width="0.0200%" height="15" fill="rgb(211,52,33)" fg:x="7765" fg:w="3"/><text x="52.0719%" y="367.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::DefaultJobHandle(std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="51.8486%" y="373" width="0.0133%" height="15" fill="rgb(234,58,33)" fg:x="7769" fg:w="2"/><text x="52.0986%" y="383.50"></text></g><g><title>deno`v8::platform::DefaultJobState::NotifyConcurrencyIncrease (2 samples, 0.01%)</title><rect x="51.8486%" y="357" width="0.0133%" height="15" fill="rgb(220,115,36)" fg:x="7769" fg:w="2"/><text x="52.0986%" y="367.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::PostTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (2 samples, 0.01%)</title><rect x="51.8486%" y="341" width="0.0133%" height="15" fill="rgb(243,153,54)" fg:x="7769" fg:w="2"/><text x="52.0986%" y="351.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::Append(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (2 samples, 0.01%)</title><rect x="51.8486%" y="325" width="0.0133%" height="15" fill="rgb(251,47,18)" fg:x="7769" fg:w="2"/><text x="52.0986%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.01%)</title><rect x="51.8486%" y="309" width="0.0133%" height="15" fill="rgb(242,102,42)" fg:x="7769" fg:w="2"/><text x="52.0986%" y="319.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (3 samples, 0.02%)</title><rect x="51.8753%" y="325" width="0.0200%" height="15" fill="rgb(234,31,38)" fg:x="7773" fg:w="3"/><text x="52.1253%" y="335.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (6 samples, 0.04%)</title><rect x="51.8620%" y="357" width="0.0400%" height="15" fill="rgb(221,117,51)" fg:x="7771" fg:w="6"/><text x="52.1120%" y="367.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (5 samples, 0.03%)</title><rect x="51.8687%" y="341" width="0.0334%" height="15" fill="rgb(212,20,18)" fg:x="7772" fg:w="5"/><text x="52.1187%" y="351.50"></text></g><g><title>deno`v8::internal::ScavengeJob::Task::RunInternal (22 samples, 0.15%)</title><rect x="51.7686%" y="453" width="0.1468%" height="15" fill="rgb(245,133,36)" fg:x="7757" fg:w="22"/><text x="52.0186%" y="463.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (22 samples, 0.15%)</title><rect x="51.7686%" y="437" width="0.1468%" height="15" fill="rgb(212,6,19)" fg:x="7757" fg:w="22"/><text x="52.0186%" y="447.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (21 samples, 0.14%)</title><rect x="51.7752%" y="421" width="0.1401%" height="15" fill="rgb(218,1,36)" fg:x="7758" fg:w="21"/><text x="52.0252%" y="431.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (21 samples, 0.14%)</title><rect x="51.7752%" y="405" width="0.1401%" height="15" fill="rgb(246,84,54)" fg:x="7758" fg:w="21"/><text x="52.0252%" y="415.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (20 samples, 0.13%)</title><rect x="51.7819%" y="389" width="0.1335%" height="15" fill="rgb(242,110,6)" fg:x="7759" fg:w="20"/><text x="52.0319%" y="399.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (8 samples, 0.05%)</title><rect x="51.8620%" y="373" width="0.0534%" height="15" fill="rgb(214,47,5)" fg:x="7771" fg:w="8"/><text x="52.1120%" y="383.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (2 samples, 0.01%)</title><rect x="51.9020%" y="357" width="0.0133%" height="15" fill="rgb(218,159,25)" fg:x="7777" fg:w="2"/><text x="52.1520%" y="367.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (2 samples, 0.01%)</title><rect x="51.9020%" y="341" width="0.0133%" height="15" fill="rgb(215,211,28)" fg:x="7777" fg:w="2"/><text x="52.1520%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.01%)</title><rect x="51.9020%" y="325" width="0.0133%" height="15" fill="rgb(238,59,32)" fg:x="7777" fg:w="2"/><text x="52.1520%" y="335.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::MoveExpiredDelayedTasks(v8::base::LockGuard&lt;v8::base::Mutex, (3 samples, 0.02%)</title><rect x="51.9154%" y="453" width="0.0200%" height="15" fill="rgb(226,82,3)" fg:x="7779" fg:w="3"/><text x="52.1654%" y="463.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromDelayedQueueLocked(v8::base::LockGuard&lt;v8::base::Mutex, (3 samples, 0.02%)</title><rect x="51.9821%" y="437" width="0.0200%" height="15" fill="rgb(240,164,32)" fg:x="7789" fg:w="3"/><text x="52.2321%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5 samples, 0.03%)</title><rect x="52.0021%" y="437" width="0.0334%" height="15" fill="rgb(232,46,7)" fg:x="7792" fg:w="5"/><text x="52.2521%" y="447.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (17 samples, 0.11%)</title><rect x="51.9354%" y="453" width="0.1135%" height="15" fill="rgb(229,129,53)" fg:x="7782" fg:w="17"/><text x="52.1854%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="52.0355%" y="437" width="0.0133%" height="15" fill="rgb(234,188,29)" fg:x="7797" fg:w="2"/><text x="52.2855%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5 samples, 0.03%)</title><rect x="52.0489%" y="453" width="0.0334%" height="15" fill="rgb(246,141,4)" fg:x="7799" fg:w="5"/><text x="52.2989%" y="463.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (59 samples, 0.39%)</title><rect x="51.6951%" y="469" width="0.3938%" height="15" fill="rgb(229,23,39)" fg:x="7746" fg:w="59"/><text x="51.9451%" y="479.50"></text></g><g><title>deno`v8::primitives::undefined (5 samples, 0.03%)</title><rect x="52.0889%" y="469" width="0.0334%" height="15" fill="rgb(206,12,3)" fg:x="7805" fg:w="5"/><text x="52.3389%" y="479.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_try_catch (4 samples, 0.03%)</title><rect x="52.1223%" y="469" width="0.0267%" height="15" fill="rgb(252,226,20)" fg:x="7810" fg:w="4"/><text x="52.3723%" y="479.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (3 samples, 0.02%)</title><rect x="52.2023%" y="453" width="0.0200%" height="15" fill="rgb(216,123,35)" fg:x="7822" fg:w="3"/><text x="52.4523%" y="463.50"></text></g><g><title>deno`v8::internal::GetCurrentStackPosition (7 samples, 0.05%)</title><rect x="52.2224%" y="453" width="0.0467%" height="15" fill="rgb(212,68,40)" fg:x="7825" fg:w="7"/><text x="52.4724%" y="463.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (19 samples, 0.13%)</title><rect x="52.1490%" y="469" width="0.1268%" height="15" fill="rgb(254,125,32)" fg:x="7814" fg:w="19"/><text x="52.3990%" y="479.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.01%)</title><rect x="52.3225%" y="453" width="0.0133%" height="15" fill="rgb(253,97,22)" fg:x="7840" fg:w="2"/><text x="52.5725%" y="463.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (2 samples, 0.01%)</title><rect x="52.3358%" y="453" width="0.0133%" height="15" fill="rgb(241,101,14)" fg:x="7842" fg:w="2"/><text x="52.5858%" y="463.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (12 samples, 0.08%)</title><rect x="52.2758%" y="469" width="0.0801%" height="15" fill="rgb(238,103,29)" fg:x="7833" fg:w="12"/><text x="52.5258%" y="479.50"></text></g><g><title>deno`v8__Global__New (8 samples, 0.05%)</title><rect x="52.3558%" y="469" width="0.0534%" height="15" fill="rgb(233,195,47)" fg:x="7845" fg:w="8"/><text x="52.6058%" y="479.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (7 samples, 0.05%)</title><rect x="52.3625%" y="453" width="0.0467%" height="15" fill="rgb(246,218,30)" fg:x="7846" fg:w="7"/><text x="52.6125%" y="463.50"></text></g><g><title>deno`v8__Isolate__IsExecutionTerminating (3 samples, 0.02%)</title><rect x="52.4159%" y="469" width="0.0200%" height="15" fill="rgb(219,145,47)" fg:x="7854" fg:w="3"/><text x="52.6659%" y="479.50"></text></g><g><title>deno`v8__Isolate__SetData (4 samples, 0.03%)</title><rect x="52.4359%" y="469" width="0.0267%" height="15" fill="rgb(243,12,26)" fg:x="7857" fg:w="4"/><text x="52.6859%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="52.4626%" y="469" width="0.0200%" height="15" fill="rgb(214,87,16)" fg:x="7861" fg:w="3"/><text x="52.7126%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.10%)</title><rect x="52.4893%" y="469" width="0.1001%" height="15" fill="rgb(208,99,42)" fg:x="7865" fg:w="15"/><text x="52.7393%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.04%)</title><rect x="52.5494%" y="453" width="0.0400%" height="15" fill="rgb(253,99,2)" fg:x="7874" fg:w="6"/><text x="52.7994%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="52.5961%" y="469" width="0.0133%" height="15" fill="rgb(220,168,23)" fg:x="7881" fg:w="2"/><text x="52.8461%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5 samples, 0.03%)</title><rect x="52.6161%" y="469" width="0.0334%" height="15" fill="rgb(242,38,24)" fg:x="7884" fg:w="5"/><text x="52.8661%" y="479.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (7,679 samples, 51.25%)</title><rect x="1.4215%" y="485" width="51.2480%" height="15" fill="rgb(225,182,9)" fg:x="213" fg:w="7679"/><text x="1.6715%" y="495.50">deno`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.02%)</title><rect x="52.6495%" y="469" width="0.0200%" height="15" fill="rgb(243,178,37)" fg:x="7889" fg:w="3"/><text x="52.8995%" y="479.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (4 samples, 0.03%)</title><rect x="52.6695%" y="485" width="0.0267%" height="15" fill="rgb(232,139,19)" fg:x="7892" fg:w="4"/><text x="52.9195%" y="495.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (4 samples, 0.03%)</title><rect x="52.7096%" y="485" width="0.0267%" height="15" fill="rgb(225,201,24)" fg:x="7898" fg:w="4"/><text x="52.9596%" y="495.50"></text></g><g><title>deno`v8::Isolate::PerformMicrotaskCheckpoint (3 samples, 0.02%)</title><rect x="52.7429%" y="485" width="0.0200%" height="15" fill="rgb(221,47,46)" fg:x="7903" fg:w="3"/><text x="52.9929%" y="495.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call (4 samples, 0.03%)</title><rect x="52.7830%" y="485" width="0.0267%" height="15" fill="rgb(249,23,13)" fg:x="7909" fg:w="4"/><text x="53.0330%" y="495.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (2 samples, 0.01%)</title><rect x="52.8097%" y="485" width="0.0133%" height="15" fill="rgb(219,9,5)" fg:x="7913" fg:w="2"/><text x="53.0597%" y="495.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (8 samples, 0.05%)</title><rect x="52.8230%" y="485" width="0.0534%" height="15" fill="rgb(254,171,16)" fg:x="7915" fg:w="8"/><text x="53.0730%" y="495.50"></text></g><g><title>deno`v8::platform::PumpMessageLoop (5 samples, 0.03%)</title><rect x="52.8897%" y="485" width="0.0334%" height="15" fill="rgb(230,171,20)" fg:x="7925" fg:w="5"/><text x="53.1397%" y="495.50"></text></g><g><title>deno`v8__Global__Reset (2 samples, 0.01%)</title><rect x="52.9365%" y="485" width="0.0133%" height="15" fill="rgb(210,71,41)" fg:x="7932" fg:w="2"/><text x="53.1865%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="52.9565%" y="485" width="0.0133%" height="15" fill="rgb(206,173,20)" fg:x="7935" fg:w="2"/><text x="53.2065%" y="495.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,772 samples, 51.87%)</title><rect x="1.1212%" y="501" width="51.8687%" height="15" fill="rgb(233,88,34)" fg:x="168" fg:w="7772"/><text x="1.3712%" y="511.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::po..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="52.9765%" y="485" width="0.0133%" height="15" fill="rgb(223,209,46)" fg:x="7938" fg:w="2"/><text x="53.2265%" y="495.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,786 samples, 51.96%)</title><rect x="1.0611%" y="517" width="51.9621%" height="15" fill="rgb(250,43,18)" fg:x="159" fg:w="7786"/><text x="1.3111%" y="527.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (4 samples, 0.03%)</title><rect x="52.9965%" y="501" width="0.0267%" height="15" fill="rgb(208,13,10)" fg:x="7941" fg:w="4"/><text x="53.2465%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_186 (3 samples, 0.02%)</title><rect x="53.0232%" y="517" width="0.0200%" height="15" fill="rgb(212,200,36)" fg:x="7945" fg:w="3"/><text x="53.2732%" y="527.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.03%)</title><rect x="53.0432%" y="485" width="0.0267%" height="15" fill="rgb(225,90,30)" fg:x="7948" fg:w="4"/><text x="53.2932%" y="495.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.01%)</title><rect x="53.0566%" y="469" width="0.0133%" height="15" fill="rgb(236,182,39)" fg:x="7950" fg:w="2"/><text x="53.3066%" y="479.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.01%)</title><rect x="53.0566%" y="453" width="0.0133%" height="15" fill="rgb(212,144,35)" fg:x="7950" fg:w="2"/><text x="53.3066%" y="463.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.01%)</title><rect x="53.0566%" y="437" width="0.0133%" height="15" fill="rgb(228,63,44)" fg:x="7950" fg:w="2"/><text x="53.3066%" y="447.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.01%)</title><rect x="53.0566%" y="421" width="0.0133%" height="15" fill="rgb(228,109,6)" fg:x="7950" fg:w="2"/><text x="53.3066%" y="431.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.01%)</title><rect x="53.0566%" y="405" width="0.0133%" height="15" fill="rgb(238,117,24)" fg:x="7950" fg:w="2"/><text x="53.3066%" y="415.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,823 samples, 52.21%)</title><rect x="0.8676%" y="549" width="52.2090%" height="15" fill="rgb(242,26,26)" fg:x="130" fg:w="7823"/><text x="1.1176%" y="559.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (7,807 samples, 52.10%)</title><rect x="0.9744%" y="533" width="52.1022%" height="15" fill="rgb(221,92,48)" fg:x="146" fg:w="7807"/><text x="1.2244%" y="543.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`deno::create_main_worker (5 samples, 0.03%)</title><rect x="53.0432%" y="517" width="0.0334%" height="15" fill="rgb(209,209,32)" fg:x="7948" fg:w="5"/><text x="53.2932%" y="527.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (5 samples, 0.03%)</title><rect x="53.0432%" y="501" width="0.0334%" height="15" fill="rgb(221,70,22)" fg:x="7948" fg:w="5"/><text x="53.2932%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18471 (2 samples, 0.01%)</title><rect x="53.0833%" y="549" width="0.0133%" height="15" fill="rgb(248,145,5)" fg:x="7954" fg:w="2"/><text x="53.3333%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_20840 (2 samples, 0.01%)</title><rect x="53.0966%" y="549" width="0.0133%" height="15" fill="rgb(226,116,26)" fg:x="7956" fg:w="2"/><text x="53.3466%" y="559.50"></text></g><g><title>deno`deno::main::_{{closure}} (7,847 samples, 52.37%)</title><rect x="0.7541%" y="565" width="52.3692%" height="15" fill="rgb(244,5,17)" fg:x="113" fg:w="7847"/><text x="1.0041%" y="575.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`tokio::task::local::LocalSet::tick (6 samples, 0.04%)</title><rect x="53.1434%" y="565" width="0.0400%" height="15" fill="rgb(252,159,33)" fg:x="7963" fg:w="6"/><text x="53.3934%" y="575.50"></text></g><g><title>deno`tokio::util::wake::drop_arc_raw (4 samples, 0.03%)</title><rect x="53.1901%" y="565" width="0.0267%" height="15" fill="rgb(206,71,0)" fg:x="7970" fg:w="4"/><text x="53.4401%" y="575.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,911 samples, 52.80%)</title><rect x="0.5005%" y="581" width="52.7963%" height="15" fill="rgb(233,118,54)" fg:x="75" fg:w="7911"/><text x="0.7505%" y="591.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.08%)</title><rect x="53.2168%" y="565" width="0.0801%" height="15" fill="rgb(234,83,48)" fg:x="7974" fg:w="12"/><text x="53.4668%" y="575.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="53.3102%" y="581" width="0.0133%" height="15" fill="rgb(228,3,54)" fg:x="7988" fg:w="2"/><text x="53.5602%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_1104 (10 samples, 0.07%)</title><rect x="53.3235%" y="581" width="0.0667%" height="15" fill="rgb(226,155,13)" fg:x="7990" fg:w="10"/><text x="53.5735%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_12621 (2 samples, 0.01%)</title><rect x="53.3903%" y="581" width="0.0133%" height="15" fill="rgb(241,28,37)" fg:x="8000" fg:w="2"/><text x="53.6403%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_1840 (2 samples, 0.01%)</title><rect x="53.4036%" y="581" width="0.0133%" height="15" fill="rgb(233,93,10)" fg:x="8002" fg:w="2"/><text x="53.6536%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_298 (3 samples, 0.02%)</title><rect x="53.4303%" y="581" width="0.0200%" height="15" fill="rgb(225,113,19)" fg:x="8006" fg:w="3"/><text x="53.6803%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_484 (13 samples, 0.09%)</title><rect x="53.4570%" y="581" width="0.0868%" height="15" fill="rgb(241,2,18)" fg:x="8010" fg:w="13"/><text x="53.7070%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_72 (2 samples, 0.01%)</title><rect x="53.5438%" y="581" width="0.0133%" height="15" fill="rgb(228,207,21)" fg:x="8023" fg:w="2"/><text x="53.7938%" y="591.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.03%)</title><rect x="53.5571%" y="581" width="0.0267%" height="15" fill="rgb(213,211,35)" fg:x="8025" fg:w="4"/><text x="53.8071%" y="591.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.01%)</title><rect x="53.5905%" y="581" width="0.0133%" height="15" fill="rgb(209,83,10)" fg:x="8030" fg:w="2"/><text x="53.8405%" y="591.50"></text></g><g><title>deno`tokio::coop::CURRENT::__getit (2 samples, 0.01%)</title><rect x="53.6038%" y="581" width="0.0133%" height="15" fill="rgb(209,164,1)" fg:x="8032" fg:w="2"/><text x="53.8538%" y="591.50"></text></g><g><title>deno`tokio::process::imp::GlobalOrphanQueue::reap_orphans (2 samples, 0.01%)</title><rect x="53.6773%" y="565" width="0.0133%" height="15" fill="rgb(213,184,43)" fg:x="8043" fg:w="2"/><text x="53.9273%" y="575.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (5 samples, 0.03%)</title><rect x="53.6906%" y="565" width="0.0334%" height="15" fill="rgb(231,61,34)" fg:x="8045" fg:w="5"/><text x="53.9406%" y="575.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (3 samples, 0.02%)</title><rect x="53.7907%" y="549" width="0.0200%" height="15" fill="rgb(235,75,3)" fg:x="8060" fg:w="3"/><text x="54.0407%" y="559.50"></text></g><g><title> 32]&gt; (3 samples, 0.02%)</title><rect x="53.7907%" y="533" width="0.0200%" height="15" fill="rgb(220,106,47)" fg:x="8060" fg:w="3"/><text x="54.0407%" y="543.50"></text></g><g><title>deno`mio::poll::Poll::poll (2 samples, 0.01%)</title><rect x="53.8107%" y="549" width="0.0133%" height="15" fill="rgb(210,196,33)" fg:x="8063" fg:w="2"/><text x="54.0607%" y="559.50"></text></g><g><title>deno`DYLD-STUB$$kevent (2 samples, 0.01%)</title><rect x="53.8641%" y="533" width="0.0133%" height="15" fill="rgb(229,154,42)" fg:x="8071" fg:w="2"/><text x="54.1141%" y="543.50"></text></g><g><title>deno`mio::poll::Poll::poll (2 samples, 0.01%)</title><rect x="53.8775%" y="533" width="0.0133%" height="15" fill="rgb(228,114,26)" fg:x="8073" fg:w="2"/><text x="54.1275%" y="543.50"></text></g><g><title>deno`tokio::io::driver::Driver::turn (322 samples, 2.15%)</title><rect x="53.8308%" y="549" width="2.1490%" height="15" fill="rgb(208,144,1)" fg:x="8066" fg:w="322"/><text x="54.0808%" y="559.50">d..</text></g><g><title>libsystem_kernel.dylib`kevent (313 samples, 2.09%)</title><rect x="53.8908%" y="533" width="2.0889%" height="15" fill="rgb(239,112,37)" fg:x="8075" fg:w="313"/><text x="54.1408%" y="543.50">l..</text></g><g><title>deno`tokio::process::imp::GlobalOrphanQueue::reap_orphans (7 samples, 0.05%)</title><rect x="55.9864%" y="549" width="0.0467%" height="15" fill="rgb(210,96,50)" fg:x="8389" fg:w="7"/><text x="56.2364%" y="559.50"></text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_ready (4 samples, 0.03%)</title><rect x="56.0464%" y="533" width="0.0267%" height="15" fill="rgb(222,178,2)" fg:x="8398" fg:w="4"/><text x="56.2964%" y="543.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (14 samples, 0.09%)</title><rect x="56.0331%" y="549" width="0.0934%" height="15" fill="rgb(226,74,18)" fg:x="8396" fg:w="14"/><text x="56.2831%" y="559.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.05%)</title><rect x="56.0731%" y="533" width="0.0534%" height="15" fill="rgb(225,67,54)" fg:x="8402" fg:w="8"/><text x="56.3231%" y="543.50"></text></g><g><title>deno`tokio::signal::unix::driver::noop (3 samples, 0.02%)</title><rect x="56.1265%" y="549" width="0.0200%" height="15" fill="rgb(251,92,32)" fg:x="8410" fg:w="3"/><text x="56.3765%" y="559.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (12 samples, 0.08%)</title><rect x="56.1866%" y="533" width="0.0801%" height="15" fill="rgb(228,149,22)" fg:x="8419" fg:w="12"/><text x="56.4366%" y="543.50"></text></g><g><title> 32]&gt; (12 samples, 0.08%)</title><rect x="56.1866%" y="517" width="0.0801%" height="15" fill="rgb(243,54,13)" fg:x="8419" fg:w="12"/><text x="56.4366%" y="527.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (23 samples, 0.15%)</title><rect x="56.1466%" y="549" width="0.1535%" height="15" fill="rgb(243,180,28)" fg:x="8413" fg:w="23"/><text x="56.3966%" y="559.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (5 samples, 0.03%)</title><rect x="56.2667%" y="533" width="0.0334%" height="15" fill="rgb(208,167,24)" fg:x="8431" fg:w="5"/><text x="56.5167%" y="543.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (390 samples, 2.60%)</title><rect x="53.7240%" y="565" width="2.6028%" height="15" fill="rgb(245,73,45)" fg:x="8050" fg:w="390"/><text x="53.9740%" y="575.50">de..</text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (4 samples, 0.03%)</title><rect x="56.3001%" y="549" width="0.0267%" height="15" fill="rgb(237,203,48)" fg:x="8436" fg:w="4"/><text x="56.5501%" y="559.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (2 samples, 0.01%)</title><rect x="56.3267%" y="565" width="0.0133%" height="15" fill="rgb(211,197,16)" fg:x="8440" fg:w="2"/><text x="56.5767%" y="575.50"></text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::park (442 samples, 2.95%)</title><rect x="53.6172%" y="581" width="2.9498%" height="15" fill="rgb(243,99,51)" fg:x="8034" fg:w="442"/><text x="53.8672%" y="591.50">de..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (33 samples, 0.22%)</title><rect x="56.3468%" y="565" width="0.2202%" height="15" fill="rgb(215,123,29)" fg:x="8443" fg:w="33"/><text x="56.5968%" y="575.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (2 samples, 0.01%)</title><rect x="56.5737%" y="581" width="0.0133%" height="15" fill="rgb(239,186,37)" fg:x="8477" fg:w="2"/><text x="56.8237%" y="591.50"></text></g><g><title>deno`tokio::task::local::LocalSet::tick (3 samples, 0.02%)</title><rect x="56.5870%" y="581" width="0.0200%" height="15" fill="rgb(252,136,39)" fg:x="8479" fg:w="3"/><text x="56.8370%" y="591.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.07%)</title><rect x="56.6137%" y="581" width="0.0667%" height="15" fill="rgb(223,213,32)" fg:x="8483" fg:w="10"/><text x="56.8637%" y="591.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (34 samples, 0.23%)</title><rect x="56.6871%" y="581" width="0.2269%" height="15" fill="rgb(233,115,5)" fg:x="8494" fg:w="34"/><text x="56.9371%" y="591.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (8,483 samples, 56.61%)</title><rect x="0.3337%" y="597" width="56.6137%" height="15" fill="rgb(207,226,44)" fg:x="50" fg:w="8483"/><text x="0.5837%" y="607.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.03%)</title><rect x="56.9140%" y="581" width="0.0334%" height="15" fill="rgb(208,126,0)" fg:x="8528" fg:w="5"/><text x="57.1640%" y="591.50"></text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::park (6 samples, 0.04%)</title><rect x="56.9474%" y="597" width="0.0400%" height="15" fill="rgb(244,66,21)" fg:x="8533" fg:w="6"/><text x="57.1974%" y="607.50"></text></g><g><title>deno`tokio::runtime::basic_scheduler::Spawner::pop (4 samples, 0.03%)</title><rect x="56.9875%" y="597" width="0.0267%" height="15" fill="rgb(222,97,12)" fg:x="8539" fg:w="4"/><text x="57.2375%" y="607.50"></text></g><g><title>dyld`start (8,548 samples, 57.05%)</title><rect x="0.0000%" y="661" width="57.0475%" height="15" fill="rgb(219,213,19)" fg:x="0" fg:w="8548"/><text x="0.2500%" y="671.50">dyld`start</text></g><g><title>deno`main (8,548 samples, 57.05%)</title><rect x="0.0000%" y="645" width="57.0475%" height="15" fill="rgb(252,169,30)" fg:x="0" fg:w="8548"/><text x="0.2500%" y="655.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (8,548 samples, 57.05%)</title><rect x="0.0000%" y="629" width="57.0475%" height="15" fill="rgb(206,32,51)" fg:x="0" fg:w="8548"/><text x="0.2500%" y="639.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (8,548 samples, 57.05%)</title><rect x="0.0000%" y="613" width="57.0475%" height="15" fill="rgb(250,172,42)" fg:x="0" fg:w="8548"/><text x="0.2500%" y="623.50">deno`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.03%)</title><rect x="57.0141%" y="597" width="0.0334%" height="15" fill="rgb(209,34,43)" fg:x="8543" fg:w="5"/><text x="57.2641%" y="607.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="57.0542%" y="565" width="0.0334%" height="15" fill="rgb(223,11,35)" fg:x="8549" fg:w="5"/><text x="57.3042%" y="575.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="57.1009%" y="565" width="0.0200%" height="15" fill="rgb(251,219,26)" fg:x="8556" fg:w="3"/><text x="57.3509%" y="575.50"></text></g><g><title>deno`OUTLINED_FUNCTION_130 (3 samples, 0.02%)</title><rect x="57.1209%" y="565" width="0.0200%" height="15" fill="rgb(231,119,3)" fg:x="8559" fg:w="3"/><text x="57.3709%" y="575.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2502 (2 samples, 0.01%)</title><rect x="57.1410%" y="565" width="0.0133%" height="15" fill="rgb(216,97,11)" fg:x="8562" fg:w="2"/><text x="57.3910%" y="575.50"></text></g><g><title>deno`OUTLINED_FUNCTION_535 (4 samples, 0.03%)</title><rect x="57.1543%" y="565" width="0.0267%" height="15" fill="rgb(223,59,9)" fg:x="8564" fg:w="4"/><text x="57.4043%" y="575.50"></text></g><g><title>deno`OUTLINED_FUNCTION_85 (2 samples, 0.01%)</title><rect x="57.1810%" y="565" width="0.0133%" height="15" fill="rgb(233,93,31)" fg:x="8568" fg:w="2"/><text x="57.4310%" y="575.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="58.1620%" y="549" width="0.0200%" height="15" fill="rgb(239,81,33)" fg:x="8715" fg:w="3"/><text x="58.4120%" y="559.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (22 samples, 0.15%)</title><rect x="58.1887%" y="549" width="0.1468%" height="15" fill="rgb(213,120,34)" fg:x="8719" fg:w="22"/><text x="58.4387%" y="559.50"></text></g><g><title>deno`DYLD-STUB$$recv (5 samples, 0.03%)</title><rect x="58.3356%" y="549" width="0.0334%" height="15" fill="rgb(243,49,53)" fg:x="8741" fg:w="5"/><text x="58.5856%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11310 (3 samples, 0.02%)</title><rect x="58.3689%" y="549" width="0.0200%" height="15" fill="rgb(247,216,33)" fg:x="8746" fg:w="3"/><text x="58.6189%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_166 (2 samples, 0.01%)</title><rect x="58.3889%" y="549" width="0.0133%" height="15" fill="rgb(226,26,14)" fg:x="8749" fg:w="2"/><text x="58.6389%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_229 (2 samples, 0.01%)</title><rect x="58.4090%" y="549" width="0.0133%" height="15" fill="rgb(215,49,53)" fg:x="8752" fg:w="2"/><text x="58.6590%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_25397 (5 samples, 0.03%)</title><rect x="58.4223%" y="549" width="0.0334%" height="15" fill="rgb(245,162,40)" fg:x="8754" fg:w="5"/><text x="58.6723%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2709 (4 samples, 0.03%)</title><rect x="58.4557%" y="549" width="0.0267%" height="15" fill="rgb(229,68,17)" fg:x="8759" fg:w="4"/><text x="58.7057%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_27517 (8 samples, 0.05%)</title><rect x="58.4824%" y="549" width="0.0534%" height="15" fill="rgb(213,182,10)" fg:x="8763" fg:w="8"/><text x="58.7324%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36555 (4 samples, 0.03%)</title><rect x="58.5358%" y="549" width="0.0267%" height="15" fill="rgb(245,125,30)" fg:x="8771" fg:w="4"/><text x="58.7858%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_465 (3 samples, 0.02%)</title><rect x="58.5691%" y="549" width="0.0200%" height="15" fill="rgb(232,202,2)" fg:x="8776" fg:w="3"/><text x="58.8191%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_483 (3 samples, 0.02%)</title><rect x="58.5892%" y="549" width="0.0200%" height="15" fill="rgb(237,140,51)" fg:x="8779" fg:w="3"/><text x="58.8392%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_8080 (5 samples, 0.03%)</title><rect x="58.6092%" y="549" width="0.0334%" height="15" fill="rgb(236,157,25)" fg:x="8782" fg:w="5"/><text x="58.8592%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_88 (2 samples, 0.01%)</title><rect x="58.6426%" y="549" width="0.0133%" height="15" fill="rgb(219,209,0)" fg:x="8787" fg:w="2"/><text x="58.8926%" y="559.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (75 samples, 0.50%)</title><rect x="58.6559%" y="533" width="0.5005%" height="15" fill="rgb(240,116,54)" fg:x="8789" fg:w="75"/><text x="58.9059%" y="543.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (73 samples, 0.49%)</title><rect x="58.6692%" y="517" width="0.4872%" height="15" fill="rgb(216,10,36)" fg:x="8791" fg:w="73"/><text x="58.9192%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`kevent (73 samples, 0.49%)</title><rect x="58.6692%" y="501" width="0.4872%" height="15" fill="rgb(222,72,44)" fg:x="8791" fg:w="73"/><text x="58.9192%" y="511.50"></text></g><g><title>deno`futures_task::waker::wake_arc_raw (78 samples, 0.52%)</title><rect x="58.6559%" y="549" width="0.5206%" height="15" fill="rgb(232,159,9)" fg:x="8789" fg:w="78"/><text x="58.9059%" y="559.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (2 samples, 0.01%)</title><rect x="59.1631%" y="533" width="0.0133%" height="15" fill="rgb(210,39,32)" fg:x="8865" fg:w="2"/><text x="59.4131%" y="543.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (4 samples, 0.03%)</title><rect x="59.1765%" y="549" width="0.0267%" height="15" fill="rgb(216,194,45)" fg:x="8867" fg:w="4"/><text x="59.4265%" y="559.50"></text></g><g><title>deno`http::header::name::parse_hdr (21 samples, 0.14%)</title><rect x="59.2032%" y="549" width="0.1401%" height="15" fill="rgb(218,18,35)" fg:x="8871" fg:w="21"/><text x="59.4532%" y="559.50"></text></g><g><title>deno`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.17%)</title><rect x="59.4768%" y="533" width="0.1668%" height="15" fill="rgb(207,83,51)" fg:x="8912" fg:w="25"/><text x="59.7268%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_10810 (2 samples, 0.01%)</title><rect x="59.6436%" y="533" width="0.0133%" height="15" fill="rgb(225,63,43)" fg:x="8937" fg:w="2"/><text x="59.8936%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_1527 (2 samples, 0.01%)</title><rect x="59.6636%" y="533" width="0.0133%" height="15" fill="rgb(207,57,36)" fg:x="8940" fg:w="2"/><text x="59.9136%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_15439 (5 samples, 0.03%)</title><rect x="59.6770%" y="533" width="0.0334%" height="15" fill="rgb(216,99,33)" fg:x="8942" fg:w="5"/><text x="59.9270%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_17140 (3 samples, 0.02%)</title><rect x="59.7104%" y="533" width="0.0200%" height="15" fill="rgb(225,42,16)" fg:x="8947" fg:w="3"/><text x="59.9604%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_21372 (12 samples, 0.08%)</title><rect x="59.7304%" y="533" width="0.0801%" height="15" fill="rgb(220,201,45)" fg:x="8950" fg:w="12"/><text x="59.9804%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_30730 (3 samples, 0.02%)</title><rect x="59.8105%" y="533" width="0.0200%" height="15" fill="rgb(225,33,4)" fg:x="8962" fg:w="3"/><text x="60.0605%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_446 (9 samples, 0.06%)</title><rect x="59.8305%" y="533" width="0.0601%" height="15" fill="rgb(224,33,50)" fg:x="8965" fg:w="9"/><text x="60.0805%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6841 (2 samples, 0.01%)</title><rect x="59.8905%" y="533" width="0.0133%" height="15" fill="rgb(246,198,51)" fg:x="8974" fg:w="2"/><text x="60.1405%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_7439 (3 samples, 0.02%)</title><rect x="59.9039%" y="533" width="0.0200%" height="15" fill="rgb(205,22,4)" fg:x="8976" fg:w="3"/><text x="60.1539%" y="543.50"></text></g><g><title>deno`httparse::iter::Bytes::peek (3 samples, 0.02%)</title><rect x="59.9239%" y="533" width="0.0200%" height="15" fill="rgb(206,3,8)" fg:x="8979" fg:w="3"/><text x="60.1739%" y="543.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (5 samples, 0.03%)</title><rect x="59.9439%" y="533" width="0.0334%" height="15" fill="rgb(251,23,15)" fg:x="8982" fg:w="5"/><text x="60.1939%" y="543.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (101 samples, 0.67%)</title><rect x="59.9773%" y="533" width="0.6741%" height="15" fill="rgb(252,88,28)" fg:x="8987" fg:w="101"/><text x="60.2273%" y="543.50"></text></g><g><title>deno`httparse::parse_version (14 samples, 0.09%)</title><rect x="60.6514%" y="533" width="0.0934%" height="15" fill="rgb(212,127,14)" fg:x="9088" fg:w="14"/><text x="60.9014%" y="543.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (260 samples, 1.74%)</title><rect x="59.3433%" y="549" width="1.7352%" height="15" fill="rgb(247,145,37)" fg:x="8892" fg:w="260"/><text x="59.5933%" y="559.50"></text></g><g><title>deno`httparse::skip_empty_lines (50 samples, 0.33%)</title><rect x="60.7448%" y="533" width="0.3337%" height="15" fill="rgb(209,117,53)" fg:x="9102" fg:w="50"/><text x="60.9948%" y="543.50"></text></g><g><title>deno`httparse::iter::Bytes::slice (2 samples, 0.01%)</title><rect x="61.0785%" y="549" width="0.0133%" height="15" fill="rgb(212,90,42)" fg:x="9152" fg:w="2"/><text x="61.3285%" y="559.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (2 samples, 0.01%)</title><rect x="61.0918%" y="549" width="0.0133%" height="15" fill="rgb(218,164,37)" fg:x="9154" fg:w="2"/><text x="61.3418%" y="559.50"></text></g><g><title>deno`httparse::skip_empty_lines (2 samples, 0.01%)</title><rect x="61.1185%" y="549" width="0.0133%" height="15" fill="rgb(246,65,34)" fg:x="9158" fg:w="2"/><text x="61.3685%" y="559.50"></text></g><g><title>deno`mio::poll::Poll::poll (4 samples, 0.03%)</title><rect x="61.1319%" y="549" width="0.0267%" height="15" fill="rgb(231,100,33)" fg:x="9160" fg:w="4"/><text x="61.3819%" y="559.50"></text></g><g><title>deno`tokio::runtime::enter::enter (2 samples, 0.01%)</title><rect x="61.1586%" y="549" width="0.0133%" height="15" fill="rgb(228,126,14)" fg:x="9164" fg:w="2"/><text x="61.4086%" y="559.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (45 samples, 0.30%)</title><rect x="61.1719%" y="549" width="0.3003%" height="15" fill="rgb(215,173,21)" fg:x="9166" fg:w="45"/><text x="61.4219%" y="559.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (2 samples, 0.01%)</title><rect x="61.4722%" y="549" width="0.0133%" height="15" fill="rgb(210,6,40)" fg:x="9211" fg:w="2"/><text x="61.7222%" y="559.50"></text></g><g><title>libsystem_c.dylib`recv (3 samples, 0.02%)</title><rect x="61.4856%" y="549" width="0.0200%" height="15" fill="rgb(212,48,18)" fg:x="9213" fg:w="3"/><text x="61.7356%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (4,232 samples, 28.24%)</title><rect x="61.5056%" y="549" width="28.2435%" height="15" fill="rgb(230,214,11)" fg:x="9216" fg:w="4232"/><text x="61.7556%" y="559.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>libsystem_kernel.dylib`kevent (1,322 samples, 8.82%)</title><rect x="89.7491%" y="549" width="8.8227%" height="15" fill="rgb(254,105,39)" fg:x="13448" fg:w="1322"/><text x="89.9991%" y="559.50">libsystem_ke..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="98.6052%" y="533" width="0.0133%" height="15" fill="rgb(245,158,5)" fg:x="14775" fg:w="2"/><text x="98.8552%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.02%)</title><rect x="98.6185%" y="533" width="0.0200%" height="15" fill="rgb(249,208,11)" fg:x="14777" fg:w="3"/><text x="98.8685%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.05%)</title><rect x="99.1191%" y="485" width="0.0534%" height="15" fill="rgb(210,39,28)" fg:x="14852" fg:w="8"/><text x="99.3691%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="99.1725%" y="485" width="0.0133%" height="15" fill="rgb(211,56,53)" fg:x="14860" fg:w="2"/><text x="99.4225%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (101 samples, 0.67%)</title><rect x="98.5718%" y="549" width="0.6741%" height="15" fill="rgb(226,201,30)" fg:x="14770" fg:w="101"/><text x="98.8218%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (91 samples, 0.61%)</title><rect x="98.6385%" y="533" width="0.6073%" height="15" fill="rgb(239,101,34)" fg:x="14780" fg:w="91"/><text x="98.8885%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (86 samples, 0.57%)</title><rect x="98.6719%" y="517" width="0.5739%" height="15" fill="rgb(226,209,5)" fg:x="14785" fg:w="86"/><text x="98.9219%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (32 samples, 0.21%)</title><rect x="99.0323%" y="501" width="0.2136%" height="15" fill="rgb(250,105,47)" fg:x="14839" fg:w="32"/><text x="99.2823%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.06%)</title><rect x="99.1858%" y="485" width="0.0601%" height="15" fill="rgb(230,72,3)" fg:x="14862" fg:w="9"/><text x="99.4358%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (4 samples, 0.03%)</title><rect x="99.2592%" y="549" width="0.0267%" height="15" fill="rgb(232,218,39)" fg:x="14873" fg:w="4"/><text x="99.5092%" y="559.50"></text></g><g><title>deno`deno_flash::op_listen::call::_{{closure}}::_{{closure}} (6,312 samples, 42.12%)</title><rect x="57.1943%" y="565" width="42.1249%" height="15" fill="rgb(248,166,6)" fg:x="8570" fg:w="6312"/><text x="57.4443%" y="575.50">deno`deno_flash::op_listen::call::_{{closure}}::_{{closure}}</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.03%)</title><rect x="99.2859%" y="549" width="0.0334%" height="15" fill="rgb(247,89,20)" fg:x="14877" fg:w="5"/><text x="99.5359%" y="559.50"></text></g><g><title>deno`futures_task::waker::wake_arc_raw (2 samples, 0.01%)</title><rect x="99.3193%" y="565" width="0.0133%" height="15" fill="rgb(248,130,54)" fg:x="14882" fg:w="2"/><text x="99.5693%" y="575.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (3 samples, 0.02%)</title><rect x="99.3326%" y="565" width="0.0200%" height="15" fill="rgb(234,196,4)" fg:x="14884" fg:w="3"/><text x="99.5826%" y="575.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (3 samples, 0.02%)</title><rect x="99.3593%" y="565" width="0.0200%" height="15" fill="rgb(250,143,31)" fg:x="14888" fg:w="3"/><text x="99.6093%" y="575.50"></text></g><g><title>deno`tokio::runtime::enter::enter (7 samples, 0.05%)</title><rect x="99.3860%" y="565" width="0.0467%" height="15" fill="rgb(211,110,34)" fg:x="14892" fg:w="7"/><text x="99.6360%" y="575.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::wake (8 samples, 0.05%)</title><rect x="99.4327%" y="565" width="0.0534%" height="15" fill="rgb(215,124,48)" fg:x="14899" fg:w="8"/><text x="99.6827%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.15%)</title><rect x="99.4861%" y="565" width="0.1535%" height="15" fill="rgb(216,46,13)" fg:x="14907" fg:w="23"/><text x="99.7361%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="99.6396%" y="565" width="0.0133%" height="15" fill="rgb(205,184,25)" fg:x="14930" fg:w="2"/><text x="99.8896%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="99.6530%" y="565" width="0.0133%" height="15" fill="rgb(228,1,10)" fg:x="14932" fg:w="2"/><text x="99.9030%" y="575.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (6,408 samples, 42.77%)</title><rect x="57.0475%" y="629" width="42.7656%" height="15" fill="rgb(213,116,27)" fg:x="8548" fg:w="6408"/><text x="57.2975%" y="639.50">deno`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,408 samples, 42.77%)</title><rect x="57.0475%" y="613" width="42.7656%" height="15" fill="rgb(241,95,50)" fg:x="8548" fg:w="6408"/><text x="57.2975%" y="623.50">deno`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (6,408 samples, 42.77%)</title><rect x="57.0475%" y="597" width="42.7656%" height="15" fill="rgb(238,48,32)" fg:x="8548" fg:w="6408"/><text x="57.2975%" y="607.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`tokio::runtime::task::raw::poll (6,408 samples, 42.77%)</title><rect x="57.0475%" y="581" width="42.7656%" height="15" fill="rgb(235,113,49)" fg:x="8548" fg:w="6408"/><text x="57.2975%" y="591.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.15%)</title><rect x="99.6663%" y="565" width="0.1468%" height="15" fill="rgb(205,127,43)" fg:x="14934" fg:w="22"/><text x="99.9163%" y="575.50"></text></g><g><title>deno`void v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (2 samples, 0.01%)</title><rect x="99.8198%" y="517" width="0.0133%" height="15" fill="rgb(250,162,2)" fg:x="14957" fg:w="2"/><text x="100.0698%" y="527.50"></text></g><g><title>deno`v8::internal::compiler::GraphBuilderPhase::Run (2 samples, 0.01%)</title><rect x="99.8198%" y="501" width="0.0133%" height="15" fill="rgb(220,13,41)" fg:x="14957" fg:w="2"/><text x="100.0698%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, int, v8::internal::CodeKind, v8::base::Flags (2 samples, 0.01%)</title><rect x="99.8198%" y="485" width="0.0133%" height="15" fill="rgb(249,221,25)" fg:x="14957" fg:w="2"/><text x="100.0698%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::BytecodeGraphBuilder(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::NativeContextRef const&amp;, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, int, v8::internal::CodeKind, v8::base::Flags (2 samples, 0.01%)</title><rect x="99.8198%" y="469" width="0.0133%" height="15" fill="rgb(215,208,19)" fg:x="14957" fg:w="2"/><text x="100.0698%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeAnalysis::BytecodeAnalysis(v8::internal::Handle (2 samples, 0.01%)</title><rect x="99.8198%" y="453" width="0.0133%" height="15" fill="rgb(236,175,2)" fg:x="14957" fg:w="2"/><text x="100.0698%" y="463.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeAnalysis::Analyze (2 samples, 0.01%)</title><rect x="99.8198%" y="437" width="0.0133%" height="15" fill="rgb(241,52,2)" fg:x="14957" fg:w="2"/><text x="100.0698%" y="447.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (3 samples, 0.02%)</title><rect x="99.8198%" y="533" width="0.0200%" height="15" fill="rgb(248,140,14)" fg:x="14957" fg:w="3"/><text x="100.0698%" y="543.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (3 samples, 0.02%)</title><rect x="99.8398%" y="501" width="0.0200%" height="15" fill="rgb(253,22,42)" fg:x="14960" fg:w="3"/><text x="100.0898%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (4 samples, 0.03%)</title><rect x="99.8398%" y="517" width="0.0267%" height="15" fill="rgb(234,61,47)" fg:x="14960" fg:w="4"/><text x="100.0898%" y="527.50"></text></g><g><title>deno`void v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::DecompressionOptimizationPhase&gt; (2 samples, 0.01%)</title><rect x="99.8665%" y="517" width="0.0133%" height="15" fill="rgb(208,226,15)" fg:x="14964" fg:w="2"/><text x="100.1165%" y="527.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizationPhase::Run (2 samples, 0.01%)</title><rect x="99.8665%" y="501" width="0.0133%" height="15" fill="rgb(217,221,4)" fg:x="14964" fg:w="2"/><text x="100.1165%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizer::Reduce (2 samples, 0.01%)</title><rect x="99.8665%" y="485" width="0.0133%" height="15" fill="rgb(212,174,34)" fg:x="14964" fg:w="2"/><text x="100.1165%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizer::MarkNodeInputs (2 samples, 0.01%)</title><rect x="99.8665%" y="469" width="0.0133%" height="15" fill="rgb(253,83,4)" fg:x="14964" fg:w="2"/><text x="100.1165%" y="479.50"></text></g><g><title>deno`void v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoopPeelingPhase&gt; (2 samples, 0.01%)</title><rect x="99.9066%" y="517" width="0.0133%" height="15" fill="rgb(250,195,49)" fg:x="14970" fg:w="2"/><text x="100.1566%" y="527.50"></text></g><g><title>deno`v8::internal::compiler::LoopPeelingPhase::Run (2 samples, 0.01%)</title><rect x="99.9066%" y="501" width="0.0133%" height="15" fill="rgb(241,192,25)" fg:x="14970" fg:w="2"/><text x="100.1566%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::LoopFinder::BuildLoopTree (2 samples, 0.01%)</title><rect x="99.9066%" y="485" width="0.0133%" height="15" fill="rgb(208,124,10)" fg:x="14970" fg:w="2"/><text x="100.1566%" y="495.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (19 samples, 0.13%)</title><rect x="99.8198%" y="597" width="0.1268%" height="15" fill="rgb(222,33,0)" fg:x="14957" fg:w="19"/><text x="100.0698%" y="607.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (19 samples, 0.13%)</title><rect x="99.8198%" y="581" width="0.1268%" height="15" fill="rgb(234,209,28)" fg:x="14957" fg:w="19"/><text x="100.0698%" y="591.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (19 samples, 0.13%)</title><rect x="99.8198%" y="565" width="0.1268%" height="15" fill="rgb(224,11,23)" fg:x="14957" fg:w="19"/><text x="100.0698%" y="575.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (19 samples, 0.13%)</title><rect x="99.8198%" y="549" width="0.1268%" height="15" fill="rgb(232,99,1)" fg:x="14957" fg:w="19"/><text x="100.0698%" y="559.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (16 samples, 0.11%)</title><rect x="99.8398%" y="533" width="0.1068%" height="15" fill="rgb(237,95,45)" fg:x="14960" fg:w="16"/><text x="100.0898%" y="543.50"></text></g><g><title>deno`void v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TyperPhase, v8::internal::compiler::Typer*&gt; (2 samples, 0.01%)</title><rect x="99.9333%" y="517" width="0.0133%" height="15" fill="rgb(208,109,11)" fg:x="14974" fg:w="2"/><text x="100.1833%" y="527.50"></text></g><g><title>deno`v8::internal::compiler::TyperPhase::Run (2 samples, 0.01%)</title><rect x="99.9333%" y="501" width="0.0133%" height="15" fill="rgb(216,190,48)" fg:x="14974" fg:w="2"/><text x="100.1833%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Run(v8::internal::ZoneVector (2 samples, 0.01%)</title><rect x="99.9333%" y="485" width="0.0133%" height="15" fill="rgb(251,171,36)" fg:x="14974" fg:w="2"/><text x="100.1833%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.01%)</title><rect x="99.9333%" y="469" width="0.0133%" height="15" fill="rgb(230,62,22)" fg:x="14974" fg:w="2"/><text x="100.1833%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.01%)</title><rect x="99.9333%" y="453" width="0.0133%" height="15" fill="rgb(225,114,35)" fg:x="14974" fg:w="2"/><text x="100.1833%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (6 samples, 0.04%)</title><rect x="99.9533%" y="581" width="0.0400%" height="15" fill="rgb(215,118,42)" fg:x="14977" fg:w="6"/><text x="100.2033%" y="591.50"></text></g><g><title>all (14,984 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(243,119,21)" fg:x="0" fg:w="14984"/><text x="0.2500%" y="687.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (6,436 samples, 42.95%)</title><rect x="57.0475%" y="661" width="42.9525%" height="15" fill="rgb(252,177,53)" fg:x="8548" fg:w="6436"/><text x="57.2975%" y="671.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (6,436 samples, 42.95%)</title><rect x="57.0475%" y="645" width="42.9525%" height="15" fill="rgb(237,209,29)" fg:x="8548" fg:w="6436"/><text x="57.2975%" y="655.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>deno`v8::base::ThreadEntry (28 samples, 0.19%)</title><rect x="99.8131%" y="629" width="0.1869%" height="15" fill="rgb(212,65,23)" fg:x="14956" fg:w="28"/><text x="100.0631%" y="639.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (28 samples, 0.19%)</title><rect x="99.8131%" y="613" width="0.1869%" height="15" fill="rgb(230,222,46)" fg:x="14956" fg:w="28"/><text x="100.0631%" y="623.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (7 samples, 0.05%)</title><rect x="99.9533%" y="597" width="0.0467%" height="15" fill="rgb(215,135,32)" fg:x="14977" fg:w="7"/><text x="100.2033%" y="607.50"></text></g></svg></svg>