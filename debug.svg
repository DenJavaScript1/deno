<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1574" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1557.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1557.00"> </text><svg id="frames" x="10" width="1180" total_samples="15671"><g><title>deno`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.02%)</title><rect x="0.0064%" y="1253" width="0.0191%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2564%" y="1263.50"></text></g><g><title>deno`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.01%)</title><rect x="0.0255%" y="1253" width="0.0128%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="2"/><text x="0.2755%" y="1263.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::or_else (3 samples, 0.02%)</title><rect x="0.0383%" y="1253" width="0.0191%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="3"/><text x="0.2883%" y="1263.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.01%)</title><rect x="0.0893%" y="1237" width="0.0128%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="2"/><text x="0.3393%" y="1247.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.01%)</title><rect x="0.1085%" y="1221" width="0.0128%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="2"/><text x="0.3585%" y="1231.50"></text></g><g><title>deno`core::clone::impls::_&lt;impl core::clone::Clone for u32&gt;::clone (2 samples, 0.01%)</title><rect x="0.1212%" y="1221" width="0.0128%" height="15" fill="rgb(232,128,0)" fg:x="19" fg:w="2"/><text x="0.3712%" y="1231.50"></text></g><g><title>deno`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.04%)</title><rect x="0.1021%" y="1237" width="0.0447%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="7"/><text x="0.3521%" y="1247.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="0.1340%" y="1221" width="0.0128%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="2"/><text x="0.3840%" y="1231.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.01%)</title><rect x="0.1914%" y="1189" width="0.0128%" height="15" fill="rgb(218,30,26)" fg:x="30" fg:w="2"/><text x="0.4414%" y="1199.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;alloc::collections::vec_deque::VecDeque&lt;tokio::runtime::task::Notified&lt;alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt;&gt;&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="0.2042%" y="1189" width="0.0191%" height="15" fill="rgb(220,122,19)" fg:x="32" fg:w="3"/><text x="0.4542%" y="1199.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;alloc::collections::vec_deque::VecDeque&lt;tokio::runtime::task::Notified&lt;alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt;&gt;&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="0.2042%" y="1173" width="0.0191%" height="15" fill="rgb(250,228,42)" fg:x="32" fg:w="3"/><text x="0.4542%" y="1183.50"></text></g><g><title>deno`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="0.2042%" y="1157" width="0.0191%" height="15" fill="rgb(240,193,28)" fg:x="32" fg:w="3"/><text x="0.4542%" y="1167.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.02%)</title><rect x="0.2042%" y="1141" width="0.0191%" height="15" fill="rgb(216,20,37)" fg:x="32" fg:w="3"/><text x="0.4542%" y="1151.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange (3 samples, 0.02%)</title><rect x="0.2042%" y="1125" width="0.0191%" height="15" fill="rgb(206,188,39)" fg:x="32" fg:w="3"/><text x="0.4542%" y="1135.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (2 samples, 0.01%)</title><rect x="0.2106%" y="1109" width="0.0128%" height="15" fill="rgb(217,207,13)" fg:x="33" fg:w="2"/><text x="0.4606%" y="1119.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::or_else (17 samples, 0.11%)</title><rect x="0.1468%" y="1237" width="0.1085%" height="15" fill="rgb(231,73,38)" fg:x="23" fg:w="17"/><text x="0.3968%" y="1247.50"></text></g><g><title>deno`tokio::runtime::basic_scheduler::CoreGuard::block_on::_{{closure}}::_{{closure}} (17 samples, 0.11%)</title><rect x="0.1468%" y="1221" width="0.1085%" height="15" fill="rgb(225,20,46)" fg:x="23" fg:w="17"/><text x="0.3968%" y="1231.50"></text></g><g><title>deno`tokio::runtime::basic_scheduler::Spawner::pop (13 samples, 0.08%)</title><rect x="0.1723%" y="1205" width="0.0830%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="13"/><text x="0.4223%" y="1215.50"></text></g><g><title>deno`tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (5 samples, 0.03%)</title><rect x="0.2233%" y="1189" width="0.0319%" height="15" fill="rgb(221,200,47)" fg:x="35" fg:w="5"/><text x="0.4733%" y="1199.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::lock (3 samples, 0.02%)</title><rect x="0.2361%" y="1173" width="0.0191%" height="15" fill="rgb(226,26,5)" fg:x="37" fg:w="3"/><text x="0.4861%" y="1183.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.01%)</title><rect x="0.2425%" y="1157" width="0.0128%" height="15" fill="rgb(249,33,26)" fg:x="38" fg:w="2"/><text x="0.4925%" y="1167.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (7 samples, 0.04%)</title><rect x="0.2808%" y="1221" width="0.0447%" height="15" fill="rgb(235,183,28)" fg:x="44" fg:w="7"/><text x="0.5308%" y="1231.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (7 samples, 0.04%)</title><rect x="0.2808%" y="1205" width="0.0447%" height="15" fill="rgb(221,5,38)" fg:x="44" fg:w="7"/><text x="0.5308%" y="1215.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (6 samples, 0.04%)</title><rect x="0.2872%" y="1189" width="0.0383%" height="15" fill="rgb(247,18,42)" fg:x="45" fg:w="6"/><text x="0.5372%" y="1199.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (5 samples, 0.03%)</title><rect x="0.2935%" y="1173" width="0.0319%" height="15" fill="rgb(241,131,45)" fg:x="46" fg:w="5"/><text x="0.5435%" y="1183.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="0.2999%" y="1157" width="0.0255%" height="15" fill="rgb(249,31,29)" fg:x="47" fg:w="4"/><text x="0.5499%" y="1167.50"></text></g><g><title>deno`core::ptr::write (2 samples, 0.01%)</title><rect x="0.3127%" y="1141" width="0.0128%" height="15" fill="rgb(225,111,53)" fg:x="49" fg:w="2"/><text x="0.5627%" y="1151.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="0.3637%" y="1141" width="0.0191%" height="15" fill="rgb(238,160,17)" fg:x="57" fg:w="3"/><text x="0.6137%" y="1151.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::basic_scheduler::Core&gt;&gt;&gt;&gt; (9 samples, 0.06%)</title><rect x="0.3318%" y="1221" width="0.0574%" height="15" fill="rgb(214,148,48)" fg:x="52" fg:w="9"/><text x="0.5818%" y="1231.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (7 samples, 0.04%)</title><rect x="0.3446%" y="1205" width="0.0447%" height="15" fill="rgb(232,36,49)" fg:x="54" fg:w="7"/><text x="0.5946%" y="1215.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (7 samples, 0.04%)</title><rect x="0.3446%" y="1189" width="0.0447%" height="15" fill="rgb(209,103,24)" fg:x="54" fg:w="7"/><text x="0.5946%" y="1199.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (6 samples, 0.04%)</title><rect x="0.3510%" y="1173" width="0.0383%" height="15" fill="rgb(229,88,8)" fg:x="55" fg:w="6"/><text x="0.6010%" y="1183.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (6 samples, 0.04%)</title><rect x="0.3510%" y="1157" width="0.0383%" height="15" fill="rgb(213,181,19)" fg:x="55" fg:w="6"/><text x="0.6010%" y="1167.50"></text></g><g><title>deno`tokio::coop::CURRENT::__getit (2 samples, 0.01%)</title><rect x="0.4339%" y="1173" width="0.0128%" height="15" fill="rgb(254,191,54)" fg:x="68" fg:w="2"/><text x="0.6839%" y="1183.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="0.4339%" y="1157" width="0.0128%" height="15" fill="rgb(241,83,37)" fg:x="68" fg:w="2"/><text x="0.6839%" y="1167.50"></text></g><g><title>deno`&lt;&amp;mut T as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="0.4467%" y="1157" width="0.0128%" height="15" fill="rgb(233,36,39)" fg:x="70" fg:w="2"/><text x="0.6967%" y="1167.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::coop::with_budget::ResetGuard&gt; (2 samples, 0.01%)</title><rect x="0.4658%" y="1157" width="0.0128%" height="15" fill="rgb(226,3,54)" fg:x="73" fg:w="2"/><text x="0.7158%" y="1167.50"></text></g><g><title>deno`&lt;tokio::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="0.4658%" y="1141" width="0.0128%" height="15" fill="rgb(245,192,40)" fg:x="73" fg:w="2"/><text x="0.7158%" y="1151.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="0.4658%" y="1125" width="0.0128%" height="15" fill="rgb(238,167,29)" fg:x="73" fg:w="2"/><text x="0.7158%" y="1135.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="0.4658%" y="1109" width="0.0128%" height="15" fill="rgb(232,182,51)" fg:x="73" fg:w="2"/><text x="0.7158%" y="1119.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="0.4658%" y="1093" width="0.0128%" height="15" fill="rgb(231,60,39)" fg:x="73" fg:w="2"/><text x="0.7158%" y="1103.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll::_{{closure}} (3 samples, 0.02%)</title><rect x="0.5105%" y="1109" width="0.0191%" height="15" fill="rgb(208,69,12)" fg:x="80" fg:w="3"/><text x="0.7605%" y="1119.50"></text></g><g><title>deno`core::future::get_context (2 samples, 0.01%)</title><rect x="0.5296%" y="1109" width="0.0128%" height="15" fill="rgb(235,93,37)" fg:x="83" fg:w="2"/><text x="0.7796%" y="1119.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="0.6445%" y="1029" width="0.0128%" height="15" fill="rgb(213,116,39)" fg:x="101" fg:w="2"/><text x="0.8945%" y="1039.50"></text></g><g><title>deno`core::pin::Pin&lt;&amp;mut T&gt;::map_unchecked_mut (2 samples, 0.01%)</title><rect x="0.7594%" y="949" width="0.0128%" height="15" fill="rgb(222,207,29)" fg:x="119" fg:w="2"/><text x="1.0094%" y="959.50"></text></g><g><title>deno`core::pin::Pin&lt;&amp;mut T&gt;::map_unchecked_mut (2 samples, 0.01%)</title><rect x="0.9253%" y="869" width="0.0128%" height="15" fill="rgb(206,96,30)" fg:x="145" fg:w="2"/><text x="1.1753%" y="879.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_main_module::_{{closure}} (2 samples, 0.01%)</title><rect x="0.9380%" y="869" width="0.0128%" height="15" fill="rgb(218,138,4)" fg:x="147" fg:w="2"/><text x="1.1880%" y="879.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.9380%" y="853" width="0.0128%" height="15" fill="rgb(250,191,14)" fg:x="147" fg:w="2"/><text x="1.1880%" y="863.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::preload_module::_{{closure}} (2 samples, 0.01%)</title><rect x="0.9380%" y="837" width="0.0128%" height="15" fill="rgb(239,60,40)" fg:x="147" fg:w="2"/><text x="1.1880%" y="847.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.9380%" y="821" width="0.0128%" height="15" fill="rgb(206,27,48)" fg:x="147" fg:w="2"/><text x="1.1880%" y="831.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::load_main_module::_{{closure}} (2 samples, 0.01%)</title><rect x="0.9380%" y="805" width="0.0128%" height="15" fill="rgb(225,35,8)" fg:x="147" fg:w="2"/><text x="1.1880%" y="815.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.9380%" y="789" width="0.0128%" height="15" fill="rgb(250,213,24)" fg:x="147" fg:w="2"/><text x="1.1880%" y="799.50"></text></g><g><title>deno`deno_core::modules::ModuleMap::load_main::_{{closure}} (2 samples, 0.01%)</title><rect x="0.9380%" y="773" width="0.0128%" height="15" fill="rgb(247,123,22)" fg:x="147" fg:w="2"/><text x="1.1880%" y="783.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.9380%" y="757" width="0.0128%" height="15" fill="rgb(231,138,38)" fg:x="147" fg:w="2"/><text x="1.1880%" y="767.50"></text></g><g><title>deno`deno_core::modules::RecursiveModuleLoad::prepare::_{{closure}} (2 samples, 0.01%)</title><rect x="0.9380%" y="741" width="0.0128%" height="15" fill="rgb(231,145,46)" fg:x="147" fg:w="2"/><text x="1.1880%" y="751.50"></text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.9380%" y="725" width="0.0128%" height="15" fill="rgb(251,118,11)" fg:x="147" fg:w="2"/><text x="1.1880%" y="735.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.9380%" y="709" width="0.0128%" height="15" fill="rgb(217,147,25)" fg:x="147" fg:w="2"/><text x="1.1880%" y="719.50"></text></g><g><title>deno`&lt;deno::module_loader::CliModuleLoader as deno_core::modules::ModuleLoader&gt;::prepare_load::_{{closure}} (2 samples, 0.01%)</title><rect x="0.9380%" y="693" width="0.0128%" height="15" fill="rgb(247,81,37)" fg:x="147" fg:w="2"/><text x="1.1880%" y="703.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.9380%" y="677" width="0.0128%" height="15" fill="rgb(209,12,38)" fg:x="147" fg:w="2"/><text x="1.1880%" y="687.50"></text></g><g><title>deno`deno::proc_state::ProcState::prepare_module_load::_{{closure}} (2 samples, 0.01%)</title><rect x="0.9380%" y="661" width="0.0128%" height="15" fill="rgb(227,1,9)" fg:x="147" fg:w="2"/><text x="1.1880%" y="671.50"></text></g><g><title>deno`&lt;&amp;mut T as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.02%)</title><rect x="1.0338%" y="805" width="0.0191%" height="15" fill="rgb(248,47,43)" fg:x="162" fg:w="3"/><text x="1.2838%" y="815.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.03%)</title><rect x="1.0912%" y="789" width="0.0319%" height="15" fill="rgb(221,10,30)" fg:x="171" fg:w="5"/><text x="1.3412%" y="799.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="1.1486%" y="789" width="0.0191%" height="15" fill="rgb(210,229,1)" fg:x="180" fg:w="3"/><text x="1.3986%" y="799.50"></text></g><g><title>deno`deno_core::runtime::EventLoopPendingState::is_pending (3 samples, 0.02%)</title><rect x="1.1869%" y="789" width="0.0191%" height="15" fill="rgb(222,148,37)" fg:x="186" fg:w="3"/><text x="1.4369%" y="799.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::drain_macrotasks (2 samples, 0.01%)</title><rect x="1.2060%" y="789" width="0.0128%" height="15" fill="rgb(234,67,33)" fg:x="189" fg:w="2"/><text x="1.4560%" y="799.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="1.4039%" y="725" width="0.0128%" height="15" fill="rgb(247,98,35)" fg:x="220" fg:w="2"/><text x="1.6539%" y="735.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="1.4039%" y="709" width="0.0128%" height="15" fill="rgb(247,138,52)" fg:x="220" fg:w="2"/><text x="1.6539%" y="719.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.03%)</title><rect x="1.3975%" y="741" width="0.0255%" height="15" fill="rgb(213,79,30)" fg:x="219" fg:w="4"/><text x="1.6475%" y="751.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="1.4230%" y="741" width="0.0191%" height="15" fill="rgb(246,177,23)" fg:x="223" fg:w="3"/><text x="1.6730%" y="751.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.05%)</title><rect x="1.3975%" y="757" width="0.0510%" height="15" fill="rgb(230,62,27)" fg:x="219" fg:w="8"/><text x="1.6475%" y="767.50"></text></g><g><title>deno`&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (13 samples, 0.08%)</title><rect x="1.3911%" y="773" width="0.0830%" height="15" fill="rgb(216,154,8)" fg:x="218" fg:w="13"/><text x="1.6411%" y="783.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::iter (4 samples, 0.03%)</title><rect x="1.4485%" y="757" width="0.0255%" height="15" fill="rgb(244,35,45)" fg:x="227" fg:w="4"/><text x="1.6985%" y="767.50"></text></g><g><title>deno`core::slice::iter::Iter&lt;T&gt;::new (4 samples, 0.03%)</title><rect x="1.4485%" y="741" width="0.0255%" height="15" fill="rgb(251,115,12)" fg:x="227" fg:w="4"/><text x="1.6985%" y="751.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (2 samples, 0.01%)</title><rect x="1.4613%" y="725" width="0.0128%" height="15" fill="rgb(240,54,50)" fg:x="229" fg:w="2"/><text x="1.7113%" y="735.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.02%)</title><rect x="1.4741%" y="757" width="0.0191%" height="15" fill="rgb(233,84,52)" fg:x="231" fg:w="3"/><text x="1.7241%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;()&gt;+Output = ()&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="1.4996%" y="757" width="0.0128%" height="15" fill="rgb(207,117,47)" fg:x="235" fg:w="2"/><text x="1.7496%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;()&gt;+Output = ()&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="1.5123%" y="757" width="0.0128%" height="15" fill="rgb(249,43,39)" fg:x="237" fg:w="2"/><text x="1.7623%" y="767.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (2 samples, 0.01%)</title><rect x="1.5315%" y="757" width="0.0128%" height="15" fill="rgb(209,38,44)" fg:x="240" fg:w="2"/><text x="1.7815%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="1.5762%" y="741" width="0.0128%" height="15" fill="rgb(236,212,23)" fg:x="247" fg:w="2"/><text x="1.8262%" y="751.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.01%)</title><rect x="1.5889%" y="741" width="0.0128%" height="15" fill="rgb(242,79,21)" fg:x="249" fg:w="2"/><text x="1.8389%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="1.6208%" y="677" width="0.0128%" height="15" fill="rgb(211,96,35)" fg:x="254" fg:w="2"/><text x="1.8708%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="1.6208%" y="661" width="0.0128%" height="15" fill="rgb(253,215,40)" fg:x="254" fg:w="2"/><text x="1.8708%" y="671.50"></text></g><g><title>deno`core::mem::drop (5 samples, 0.03%)</title><rect x="1.6081%" y="741" width="0.0319%" height="15" fill="rgb(211,81,21)" fg:x="252" fg:w="5"/><text x="1.8581%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::ops::OpState&gt;&gt; (4 samples, 0.03%)</title><rect x="1.6144%" y="725" width="0.0255%" height="15" fill="rgb(208,190,38)" fg:x="253" fg:w="4"/><text x="1.8644%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.02%)</title><rect x="1.6208%" y="709" width="0.0191%" height="15" fill="rgb(235,213,38)" fg:x="254" fg:w="3"/><text x="1.8708%" y="719.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="1.6208%" y="693" width="0.0191%" height="15" fill="rgb(237,122,38)" fg:x="254" fg:w="3"/><text x="1.8708%" y="703.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="1.6655%" y="709" width="0.0128%" height="15" fill="rgb(244,218,35)" fg:x="261" fg:w="2"/><text x="1.9155%" y="719.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.03%)</title><rect x="1.6846%" y="693" width="0.0255%" height="15" fill="rgb(240,68,47)" fg:x="264" fg:w="4"/><text x="1.9346%" y="703.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.02%)</title><rect x="1.6910%" y="677" width="0.0191%" height="15" fill="rgb(210,16,53)" fg:x="265" fg:w="3"/><text x="1.9410%" y="687.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="1.7165%" y="693" width="0.0191%" height="15" fill="rgb(235,124,12)" fg:x="269" fg:w="3"/><text x="1.9665%" y="703.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (10 samples, 0.06%)</title><rect x="1.6783%" y="709" width="0.0638%" height="15" fill="rgb(224,169,11)" fg:x="263" fg:w="10"/><text x="1.9283%" y="719.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.10%)</title><rect x="1.6591%" y="725" width="0.1021%" height="15" fill="rgb(250,166,2)" fg:x="260" fg:w="16"/><text x="1.9091%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;()&gt;+Output = ()&gt;]&gt; (3 samples, 0.02%)</title><rect x="1.7612%" y="725" width="0.0191%" height="15" fill="rgb(242,216,29)" fg:x="276" fg:w="3"/><text x="2.0112%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;()&gt;+Output = ()&gt;&gt;&gt; (22 samples, 0.14%)</title><rect x="1.6527%" y="741" width="0.1404%" height="15" fill="rgb(230,116,27)" fg:x="259" fg:w="22"/><text x="1.9027%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;()&gt;+Output = ()&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="1.7804%" y="725" width="0.0128%" height="15" fill="rgb(228,99,48)" fg:x="279" fg:w="2"/><text x="2.0304%" y="735.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="1.8250%" y="725" width="0.0128%" height="15" fill="rgb(253,11,6)" fg:x="286" fg:w="2"/><text x="2.0750%" y="735.50"></text></g><g><title>deno`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (2 samples, 0.01%)</title><rect x="1.8761%" y="693" width="0.0128%" height="15" fill="rgb(247,143,39)" fg:x="294" fg:w="2"/><text x="2.1261%" y="703.50"></text></g><g><title>deno`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.01%)</title><rect x="1.9016%" y="677" width="0.0128%" height="15" fill="rgb(236,97,10)" fg:x="298" fg:w="2"/><text x="2.1516%" y="687.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::cmp::Ord&gt;::cmp (2 samples, 0.01%)</title><rect x="1.9463%" y="645" width="0.0128%" height="15" fill="rgb(233,208,19)" fg:x="305" fg:w="2"/><text x="2.1963%" y="655.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="1.9718%" y="629" width="0.0319%" height="15" fill="rgb(216,164,2)" fg:x="309" fg:w="5"/><text x="2.2218%" y="639.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="1.9909%" y="613" width="0.0128%" height="15" fill="rgb(220,129,5)" fg:x="312" fg:w="2"/><text x="2.2409%" y="623.50"></text></g><g><title>deno`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.05%)</title><rect x="1.9590%" y="645" width="0.0510%" height="15" fill="rgb(242,17,10)" fg:x="307" fg:w="8"/><text x="2.2090%" y="655.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.04%)</title><rect x="2.0420%" y="597" width="0.0383%" height="15" fill="rgb(242,107,0)" fg:x="320" fg:w="6"/><text x="2.2920%" y="607.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (4 samples, 0.03%)</title><rect x="2.0548%" y="581" width="0.0255%" height="15" fill="rgb(251,28,31)" fg:x="322" fg:w="4"/><text x="2.3048%" y="591.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const [T]&gt;::as_ptr (2 samples, 0.01%)</title><rect x="2.0803%" y="597" width="0.0128%" height="15" fill="rgb(233,223,10)" fg:x="326" fg:w="2"/><text x="2.3303%" y="607.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (16 samples, 0.10%)</title><rect x="2.0101%" y="645" width="0.1021%" height="15" fill="rgb(215,21,27)" fg:x="315" fg:w="16"/><text x="2.2601%" y="655.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (14 samples, 0.09%)</title><rect x="2.0228%" y="629" width="0.0893%" height="15" fill="rgb(232,23,21)" fg:x="317" fg:w="14"/><text x="2.2728%" y="639.50"></text></g><g><title>deno`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (12 samples, 0.08%)</title><rect x="2.0356%" y="613" width="0.0766%" height="15" fill="rgb(244,5,23)" fg:x="319" fg:w="12"/><text x="2.2856%" y="623.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (3 samples, 0.02%)</title><rect x="2.0930%" y="597" width="0.0191%" height="15" fill="rgb(226,81,46)" fg:x="328" fg:w="3"/><text x="2.3430%" y="607.50"></text></g><g><title>deno`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (3 samples, 0.02%)</title><rect x="2.1122%" y="645" width="0.0191%" height="15" fill="rgb(247,70,30)" fg:x="331" fg:w="3"/><text x="2.3622%" y="655.50"></text></g><g><title>deno`core::convert::num::_&lt;impl core::convert::From&lt;u16&gt; for usize&gt;::from (3 samples, 0.02%)</title><rect x="2.1313%" y="645" width="0.0191%" height="15" fill="rgb(212,68,19)" fg:x="334" fg:w="3"/><text x="2.3813%" y="655.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (2 samples, 0.01%)</title><rect x="2.1888%" y="597" width="0.0128%" height="15" fill="rgb(240,187,13)" fg:x="343" fg:w="2"/><text x="2.4388%" y="607.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="2.1888%" y="613" width="0.0191%" height="15" fill="rgb(223,113,26)" fg:x="343" fg:w="3"/><text x="2.4388%" y="623.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (10 samples, 0.06%)</title><rect x="2.1505%" y="645" width="0.0638%" height="15" fill="rgb(206,192,2)" fg:x="337" fg:w="10"/><text x="2.4005%" y="655.50"></text></g><g><title>deno`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.04%)</title><rect x="2.1760%" y="629" width="0.0383%" height="15" fill="rgb(241,108,4)" fg:x="341" fg:w="6"/><text x="2.4260%" y="639.50"></text></g><g><title>deno`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::get_mut (61 samples, 0.39%)</title><rect x="1.8633%" y="709" width="0.3893%" height="15" fill="rgb(247,173,49)" fg:x="292" fg:w="61"/><text x="2.1133%" y="719.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (57 samples, 0.36%)</title><rect x="1.8888%" y="693" width="0.3637%" height="15" fill="rgb(224,114,35)" fg:x="296" fg:w="57"/><text x="2.1388%" y="703.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (53 samples, 0.34%)</title><rect x="1.9144%" y="677" width="0.3382%" height="15" fill="rgb(245,159,27)" fg:x="300" fg:w="53"/><text x="2.1644%" y="687.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (51 samples, 0.33%)</title><rect x="1.9271%" y="661" width="0.3254%" height="15" fill="rgb(245,172,44)" fg:x="302" fg:w="51"/><text x="2.1771%" y="671.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::iter (6 samples, 0.04%)</title><rect x="2.2143%" y="645" width="0.0383%" height="15" fill="rgb(236,23,11)" fg:x="347" fg:w="6"/><text x="2.4643%" y="655.50"></text></g><g><title>deno`core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.03%)</title><rect x="2.2207%" y="629" width="0.0319%" height="15" fill="rgb(205,117,38)" fg:x="348" fg:w="5"/><text x="2.4707%" y="639.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (2 samples, 0.01%)</title><rect x="2.2398%" y="613" width="0.0128%" height="15" fill="rgb(237,72,25)" fg:x="351" fg:w="2"/><text x="2.4898%" y="623.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.02%)</title><rect x="2.2526%" y="709" width="0.0191%" height="15" fill="rgb(244,70,9)" fg:x="353" fg:w="3"/><text x="2.5026%" y="719.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (78 samples, 0.50%)</title><rect x="1.7931%" y="741" width="0.4977%" height="15" fill="rgb(217,125,39)" fg:x="281" fg:w="78"/><text x="2.0431%" y="751.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::try_borrow_mut (71 samples, 0.45%)</title><rect x="1.8378%" y="725" width="0.4531%" height="15" fill="rgb(235,36,10)" fg:x="288" fg:w="71"/><text x="2.0878%" y="735.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::and_then (3 samples, 0.02%)</title><rect x="2.2717%" y="709" width="0.0191%" height="15" fill="rgb(251,123,47)" fg:x="356" fg:w="3"/><text x="2.5217%" y="719.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::try_borrow_mut (2 samples, 0.01%)</title><rect x="2.2909%" y="741" width="0.0128%" height="15" fill="rgb(221,13,13)" fg:x="359" fg:w="2"/><text x="2.5409%" y="751.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_mut (2 samples, 0.01%)</title><rect x="2.3164%" y="725" width="0.0128%" height="15" fill="rgb(238,131,9)" fg:x="363" fg:w="2"/><text x="2.5664%" y="735.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="2.3419%" y="709" width="0.0255%" height="15" fill="rgb(211,50,8)" fg:x="367" fg:w="4"/><text x="2.5919%" y="719.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="2.3674%" y="709" width="0.0128%" height="15" fill="rgb(245,182,24)" fg:x="371" fg:w="2"/><text x="2.6174%" y="719.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="2.3674%" y="693" width="0.0128%" height="15" fill="rgb(242,14,37)" fg:x="371" fg:w="2"/><text x="2.6174%" y="703.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="2.3802%" y="709" width="0.0128%" height="15" fill="rgb(246,228,12)" fg:x="373" fg:w="2"/><text x="2.6302%" y="719.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::load (3 samples, 0.02%)</title><rect x="2.4249%" y="693" width="0.0191%" height="15" fill="rgb(213,55,15)" fg:x="380" fg:w="3"/><text x="2.6749%" y="703.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (19 samples, 0.12%)</title><rect x="2.3355%" y="725" width="0.1212%" height="15" fill="rgb(209,9,3)" fg:x="366" fg:w="19"/><text x="2.5855%" y="735.50"></text></g><g><title>deno`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (10 samples, 0.06%)</title><rect x="2.3930%" y="709" width="0.0638%" height="15" fill="rgb(230,59,30)" fg:x="375" fg:w="10"/><text x="2.6430%" y="719.50"></text></g><g><title>deno`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (2 samples, 0.01%)</title><rect x="2.4440%" y="693" width="0.0128%" height="15" fill="rgb(209,121,21)" fg:x="383" fg:w="2"/><text x="2.6940%" y="703.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (144 samples, 0.92%)</title><rect x="1.5443%" y="757" width="0.9189%" height="15" fill="rgb(220,109,13)" fg:x="242" fg:w="144"/><text x="1.7943%" y="767.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::try_next (25 samples, 0.16%)</title><rect x="2.3036%" y="741" width="0.1595%" height="15" fill="rgb(232,18,1)" fg:x="361" fg:w="25"/><text x="2.5536%" y="751.50"></text></g><g><title>deno`&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (158 samples, 1.01%)</title><rect x="1.4741%" y="773" width="1.0082%" height="15" fill="rgb(215,41,42)" fg:x="231" fg:w="158"/><text x="1.7241%" y="783.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::try_next (3 samples, 0.02%)</title><rect x="2.4631%" y="757" width="0.0191%" height="15" fill="rgb(224,123,36)" fg:x="386" fg:w="3"/><text x="2.7131%" y="767.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="2.5014%" y="741" width="0.0191%" height="15" fill="rgb(240,125,3)" fg:x="392" fg:w="3"/><text x="2.7514%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="2.5014%" y="725" width="0.0191%" height="15" fill="rgb(205,98,50)" fg:x="392" fg:w="3"/><text x="2.7514%" y="735.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (6 samples, 0.04%)</title><rect x="2.4887%" y="757" width="0.0383%" height="15" fill="rgb(205,185,37)" fg:x="390" fg:w="6"/><text x="2.7387%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.06%)</title><rect x="2.4823%" y="773" width="0.0574%" height="15" fill="rgb(238,207,15)" fg:x="389" fg:w="9"/><text x="2.7323%" y="783.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="2.5270%" y="757" width="0.0128%" height="15" fill="rgb(213,199,42)" fg:x="396" fg:w="2"/><text x="2.7770%" y="767.50"></text></g><g><title>deno`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="2.5461%" y="773" width="0.0128%" height="15" fill="rgb(235,201,11)" fg:x="399" fg:w="2"/><text x="2.7961%" y="783.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="2.5780%" y="773" width="0.0191%" height="15" fill="rgb(207,46,11)" fg:x="404" fg:w="3"/><text x="2.8280%" y="783.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::is_empty (3 samples, 0.02%)</title><rect x="2.6163%" y="773" width="0.0191%" height="15" fill="rgb(241,35,35)" fg:x="410" fg:w="3"/><text x="2.8663%" y="783.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="2.6354%" y="773" width="0.0128%" height="15" fill="rgb(243,32,47)" fg:x="413" fg:w="2"/><text x="2.8854%" y="783.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (9 samples, 0.06%)</title><rect x="2.6482%" y="773" width="0.0574%" height="15" fill="rgb(247,202,23)" fg:x="415" fg:w="9"/><text x="2.8982%" y="783.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (7 samples, 0.04%)</title><rect x="2.6610%" y="757" width="0.0447%" height="15" fill="rgb(219,102,11)" fg:x="417" fg:w="7"/><text x="2.9110%" y="767.50"></text></g><g><title>deno`core::cell::BorrowRef::new (5 samples, 0.03%)</title><rect x="2.6737%" y="741" width="0.0319%" height="15" fill="rgb(243,110,44)" fg:x="419" fg:w="5"/><text x="2.9237%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="2.6801%" y="725" width="0.0255%" height="15" fill="rgb(222,74,54)" fg:x="420" fg:w="4"/><text x="2.9301%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="2.6801%" y="709" width="0.0255%" height="15" fill="rgb(216,99,12)" fg:x="420" fg:w="4"/><text x="2.9301%" y="719.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="2.6929%" y="693" width="0.0128%" height="15" fill="rgb(226,22,26)" fg:x="422" fg:w="2"/><text x="2.9429%" y="703.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_mut (2 samples, 0.01%)</title><rect x="2.7120%" y="773" width="0.0128%" height="15" fill="rgb(217,163,10)" fg:x="425" fg:w="2"/><text x="2.9620%" y="783.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.01%)</title><rect x="2.7439%" y="725" width="0.0128%" height="15" fill="rgb(213,25,53)" fg:x="430" fg:w="2"/><text x="2.9939%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.01%)</title><rect x="2.7439%" y="709" width="0.0128%" height="15" fill="rgb(252,105,26)" fg:x="430" fg:w="2"/><text x="2.9939%" y="719.50"></text></g><g><title>deno`deno_core::inspector::SessionContainer::has_active_sessions (8 samples, 0.05%)</title><rect x="2.7631%" y="725" width="0.0510%" height="15" fill="rgb(220,39,43)" fg:x="433" fg:w="8"/><text x="3.0131%" y="735.50"></text></g><g><title>deno`futures_util::stream::select_all::SelectAll&lt;St&gt;::is_empty (5 samples, 0.03%)</title><rect x="2.7822%" y="709" width="0.0319%" height="15" fill="rgb(229,68,48)" fg:x="436" fg:w="5"/><text x="3.0322%" y="719.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::is_empty (5 samples, 0.03%)</title><rect x="2.7822%" y="693" width="0.0319%" height="15" fill="rgb(252,8,32)" fg:x="436" fg:w="5"/><text x="3.0322%" y="703.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::load (4 samples, 0.03%)</title><rect x="2.7886%" y="677" width="0.0255%" height="15" fill="rgb(223,20,43)" fg:x="437" fg:w="4"/><text x="3.0386%" y="687.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="2.7950%" y="661" width="0.0191%" height="15" fill="rgb(229,81,49)" fg:x="438" fg:w="3"/><text x="3.0450%" y="671.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (14 samples, 0.09%)</title><rect x="2.7312%" y="773" width="0.0893%" height="15" fill="rgb(236,28,36)" fg:x="428" fg:w="14"/><text x="2.9812%" y="783.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop::_{{closure}} (14 samples, 0.09%)</title><rect x="2.7312%" y="757" width="0.0893%" height="15" fill="rgb(249,185,26)" fg:x="428" fg:w="14"/><text x="2.9812%" y="767.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::has_active_sessions (12 samples, 0.08%)</title><rect x="2.7439%" y="741" width="0.0766%" height="15" fill="rgb(249,174,33)" fg:x="430" fg:w="12"/><text x="2.9939%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::modules::ModuleMap&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="2.8269%" y="773" width="0.0319%" height="15" fill="rgb(233,201,37)" fg:x="443" fg:w="5"/><text x="3.0769%" y="783.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="2.8269%" y="757" width="0.0319%" height="15" fill="rgb(221,78,26)" fg:x="443" fg:w="5"/><text x="3.0769%" y="767.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (3 samples, 0.02%)</title><rect x="2.8396%" y="741" width="0.0191%" height="15" fill="rgb(250,127,30)" fg:x="445" fg:w="3"/><text x="3.0896%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="2.8460%" y="725" width="0.0128%" height="15" fill="rgb(230,49,44)" fg:x="446" fg:w="2"/><text x="3.0960%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="2.8460%" y="709" width="0.0128%" height="15" fill="rgb(229,67,23)" fg:x="446" fg:w="2"/><text x="3.0960%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="2.8652%" y="725" width="0.0128%" height="15" fill="rgb(249,83,47)" fg:x="449" fg:w="2"/><text x="3.1152%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="2.8652%" y="709" width="0.0128%" height="15" fill="rgb(215,43,3)" fg:x="449" fg:w="2"/><text x="3.1152%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="2.8588%" y="773" width="0.0255%" height="15" fill="rgb(238,154,13)" fg:x="448" fg:w="4"/><text x="3.1088%" y="783.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="2.8588%" y="757" width="0.0255%" height="15" fill="rgb(219,56,2)" fg:x="448" fg:w="4"/><text x="3.1088%" y="767.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (4 samples, 0.03%)</title><rect x="2.8588%" y="741" width="0.0255%" height="15" fill="rgb(233,0,4)" fg:x="448" fg:w="4"/><text x="3.1088%" y="751.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="2.9035%" y="693" width="0.0128%" height="15" fill="rgb(235,30,7)" fg:x="455" fg:w="2"/><text x="3.1535%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (6 samples, 0.04%)</title><rect x="2.8843%" y="773" width="0.0383%" height="15" fill="rgb(250,79,13)" fg:x="452" fg:w="6"/><text x="3.1343%" y="783.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="2.8843%" y="757" width="0.0383%" height="15" fill="rgb(211,146,34)" fg:x="452" fg:w="6"/><text x="3.1343%" y="767.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (5 samples, 0.03%)</title><rect x="2.8907%" y="741" width="0.0319%" height="15" fill="rgb(228,22,38)" fg:x="453" fg:w="5"/><text x="3.1407%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="2.8971%" y="725" width="0.0255%" height="15" fill="rgb(235,168,5)" fg:x="454" fg:w="4"/><text x="3.1471%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="2.9035%" y="709" width="0.0191%" height="15" fill="rgb(221,155,16)" fg:x="455" fg:w="3"/><text x="3.1535%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::modules::ModuleMap&gt;&gt; (2 samples, 0.01%)</title><rect x="2.9226%" y="773" width="0.0128%" height="15" fill="rgb(215,215,53)" fg:x="458" fg:w="2"/><text x="3.1726%" y="783.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (2 samples, 0.01%)</title><rect x="2.9226%" y="757" width="0.0128%" height="15" fill="rgb(223,4,10)" fg:x="458" fg:w="2"/><text x="3.1726%" y="767.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="2.9226%" y="741" width="0.0128%" height="15" fill="rgb(234,103,6)" fg:x="458" fg:w="2"/><text x="3.1726%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="2.9226%" y="725" width="0.0128%" height="15" fill="rgb(227,97,0)" fg:x="458" fg:w="2"/><text x="3.1726%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="2.9226%" y="709" width="0.0128%" height="15" fill="rgb(234,150,53)" fg:x="458" fg:w="2"/><text x="3.1726%" y="719.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="2.9226%" y="693" width="0.0128%" height="15" fill="rgb(228,201,54)" fg:x="458" fg:w="2"/><text x="3.1726%" y="703.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="2.9354%" y="741" width="0.0191%" height="15" fill="rgb(222,22,37)" fg:x="460" fg:w="3"/><text x="3.1854%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (4 samples, 0.03%)</title><rect x="2.9354%" y="773" width="0.0255%" height="15" fill="rgb(237,53,32)" fg:x="460" fg:w="4"/><text x="3.1854%" y="783.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (4 samples, 0.03%)</title><rect x="2.9354%" y="757" width="0.0255%" height="15" fill="rgb(233,25,53)" fg:x="460" fg:w="4"/><text x="3.1854%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (2 samples, 0.01%)</title><rect x="2.9609%" y="773" width="0.0128%" height="15" fill="rgb(210,40,34)" fg:x="464" fg:w="2"/><text x="3.2109%" y="783.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.01%)</title><rect x="2.9609%" y="757" width="0.0128%" height="15" fill="rgb(241,220,44)" fg:x="464" fg:w="2"/><text x="3.2109%" y="767.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="2.9609%" y="741" width="0.0128%" height="15" fill="rgb(235,28,35)" fg:x="464" fg:w="2"/><text x="3.2109%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="2.9609%" y="725" width="0.0128%" height="15" fill="rgb(210,56,17)" fg:x="464" fg:w="2"/><text x="3.2109%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (3 samples, 0.02%)</title><rect x="3.0247%" y="757" width="0.0191%" height="15" fill="rgb(224,130,29)" fg:x="474" fg:w="3"/><text x="3.2747%" y="767.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.01%)</title><rect x="3.0311%" y="741" width="0.0128%" height="15" fill="rgb(235,212,8)" fg:x="475" fg:w="2"/><text x="3.2811%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="3.0438%" y="757" width="0.0319%" height="15" fill="rgb(223,33,50)" fg:x="477" fg:w="5"/><text x="3.2938%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="3.0502%" y="741" width="0.0255%" height="15" fill="rgb(219,149,13)" fg:x="478" fg:w="4"/><text x="3.3002%" y="751.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (3 samples, 0.02%)</title><rect x="3.0566%" y="725" width="0.0191%" height="15" fill="rgb(250,156,29)" fg:x="479" fg:w="3"/><text x="3.3066%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="3.0630%" y="709" width="0.0128%" height="15" fill="rgb(216,193,19)" fg:x="480" fg:w="2"/><text x="3.3130%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="3.0630%" y="693" width="0.0128%" height="15" fill="rgb(216,135,14)" fg:x="480" fg:w="2"/><text x="3.3130%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (6 samples, 0.04%)</title><rect x="3.0757%" y="757" width="0.0383%" height="15" fill="rgb(241,47,5)" fg:x="482" fg:w="6"/><text x="3.3257%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (5 samples, 0.03%)</title><rect x="3.0821%" y="741" width="0.0319%" height="15" fill="rgb(233,42,35)" fg:x="483" fg:w="5"/><text x="3.3321%" y="751.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="3.0885%" y="725" width="0.0255%" height="15" fill="rgb(231,13,6)" fg:x="484" fg:w="4"/><text x="3.3385%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="3.0949%" y="709" width="0.0191%" height="15" fill="rgb(207,181,40)" fg:x="485" fg:w="3"/><text x="3.3449%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="3.0949%" y="693" width="0.0191%" height="15" fill="rgb(254,173,49)" fg:x="485" fg:w="3"/><text x="3.3449%" y="703.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (7 samples, 0.04%)</title><rect x="3.1523%" y="725" width="0.0447%" height="15" fill="rgb(221,1,38)" fg:x="494" fg:w="7"/><text x="3.4023%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (5 samples, 0.03%)</title><rect x="3.1651%" y="709" width="0.0319%" height="15" fill="rgb(206,124,46)" fg:x="496" fg:w="5"/><text x="3.4151%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (5 samples, 0.03%)</title><rect x="3.1651%" y="693" width="0.0319%" height="15" fill="rgb(249,21,11)" fg:x="496" fg:w="5"/><text x="3.4151%" y="703.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="3.1842%" y="677" width="0.0128%" height="15" fill="rgb(222,201,40)" fg:x="499" fg:w="2"/><text x="3.4342%" y="687.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.07%)</title><rect x="3.1332%" y="741" width="0.0702%" height="15" fill="rgb(235,61,29)" fg:x="491" fg:w="11"/><text x="3.3832%" y="751.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (4 samples, 0.03%)</title><rect x="3.2098%" y="725" width="0.0255%" height="15" fill="rgb(219,207,3)" fg:x="503" fg:w="4"/><text x="3.4598%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot::_{{closure}} (3 samples, 0.02%)</title><rect x="3.2161%" y="709" width="0.0191%" height="15" fill="rgb(222,56,46)" fg:x="504" fg:w="3"/><text x="3.4661%" y="719.50"></text></g><g><title>deno`hashbrown::map::make_hash (6 samples, 0.04%)</title><rect x="3.2608%" y="677" width="0.0383%" height="15" fill="rgb(239,76,54)" fg:x="511" fg:w="6"/><text x="3.5108%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="3.2608%" y="661" width="0.0383%" height="15" fill="rgb(231,124,27)" fg:x="511" fg:w="6"/><text x="3.5108%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.03%)</title><rect x="3.2672%" y="645" width="0.0319%" height="15" fill="rgb(249,195,6)" fg:x="512" fg:w="5"/><text x="3.5172%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (5 samples, 0.03%)</title><rect x="3.2672%" y="629" width="0.0319%" height="15" fill="rgb(237,174,47)" fg:x="512" fg:w="5"/><text x="3.5172%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.03%)</title><rect x="3.2736%" y="613" width="0.0255%" height="15" fill="rgb(206,201,31)" fg:x="513" fg:w="4"/><text x="3.5236%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (4 samples, 0.03%)</title><rect x="3.2736%" y="597" width="0.0255%" height="15" fill="rgb(231,57,52)" fg:x="513" fg:w="4"/><text x="3.5236%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="3.2799%" y="581" width="0.0191%" height="15" fill="rgb(248,177,22)" fg:x="514" fg:w="3"/><text x="3.5299%" y="591.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="3.2863%" y="565" width="0.0128%" height="15" fill="rgb(215,211,37)" fg:x="515" fg:w="2"/><text x="3.5363%" y="575.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="3.3055%" y="661" width="0.0191%" height="15" fill="rgb(241,128,51)" fg:x="518" fg:w="3"/><text x="3.5555%" y="671.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.01%)</title><rect x="3.3310%" y="629" width="0.0128%" height="15" fill="rgb(227,165,31)" fg:x="522" fg:w="2"/><text x="3.5810%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.02%)</title><rect x="3.3310%" y="645" width="0.0191%" height="15" fill="rgb(228,167,24)" fg:x="522" fg:w="3"/><text x="3.5810%" y="655.50"></text></g><g><title>deno`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="3.3629%" y="629" width="0.0128%" height="15" fill="rgb(228,143,12)" fg:x="527" fg:w="2"/><text x="3.6129%" y="639.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (4 samples, 0.03%)</title><rect x="3.3820%" y="613" width="0.0255%" height="15" fill="rgb(249,149,8)" fg:x="530" fg:w="4"/><text x="3.6320%" y="623.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.02%)</title><rect x="3.3884%" y="597" width="0.0191%" height="15" fill="rgb(243,35,44)" fg:x="531" fg:w="3"/><text x="3.6384%" y="607.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="3.4076%" y="597" width="0.0128%" height="15" fill="rgb(246,89,9)" fg:x="534" fg:w="2"/><text x="3.6576%" y="607.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (12 samples, 0.08%)</title><rect x="3.3757%" y="629" width="0.0766%" height="15" fill="rgb(233,213,13)" fg:x="529" fg:w="12"/><text x="3.6257%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (7 samples, 0.04%)</title><rect x="3.4076%" y="613" width="0.0447%" height="15" fill="rgb(233,141,41)" fg:x="534" fg:w="7"/><text x="3.6576%" y="623.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5 samples, 0.03%)</title><rect x="3.4203%" y="597" width="0.0319%" height="15" fill="rgb(239,167,4)" fg:x="536" fg:w="5"/><text x="3.6703%" y="607.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (4 samples, 0.03%)</title><rect x="3.4650%" y="629" width="0.0255%" height="15" fill="rgb(209,217,16)" fg:x="543" fg:w="4"/><text x="3.7150%" y="639.50"></text></g><g><title>deno`hashbrown::raw::generic::repeat (3 samples, 0.02%)</title><rect x="3.4714%" y="613" width="0.0191%" height="15" fill="rgb(219,88,35)" fg:x="544" fg:w="3"/><text x="3.7214%" y="623.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (59 samples, 0.38%)</title><rect x="3.1268%" y="757" width="0.3765%" height="15" fill="rgb(220,193,23)" fg:x="490" fg:w="59"/><text x="3.3768%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (46 samples, 0.29%)</title><rect x="3.2098%" y="741" width="0.2935%" height="15" fill="rgb(230,90,52)" fg:x="503" fg:w="46"/><text x="3.4598%" y="751.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (42 samples, 0.27%)</title><rect x="3.2353%" y="725" width="0.2680%" height="15" fill="rgb(252,106,19)" fg:x="507" fg:w="42"/><text x="3.4853%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (42 samples, 0.27%)</title><rect x="3.2353%" y="709" width="0.2680%" height="15" fill="rgb(206,74,20)" fg:x="507" fg:w="42"/><text x="3.4853%" y="719.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (41 samples, 0.26%)</title><rect x="3.2417%" y="693" width="0.2616%" height="15" fill="rgb(230,138,44)" fg:x="508" fg:w="41"/><text x="3.4917%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (32 samples, 0.20%)</title><rect x="3.2991%" y="677" width="0.2042%" height="15" fill="rgb(235,182,43)" fg:x="517" fg:w="32"/><text x="3.5491%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (28 samples, 0.18%)</title><rect x="3.3246%" y="661" width="0.1787%" height="15" fill="rgb(242,16,51)" fg:x="521" fg:w="28"/><text x="3.5746%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (24 samples, 0.15%)</title><rect x="3.3501%" y="645" width="0.1531%" height="15" fill="rgb(248,9,4)" fg:x="525" fg:w="24"/><text x="3.6001%" y="655.50"></text></g><g><title>deno`hashbrown::raw::h2 (2 samples, 0.01%)</title><rect x="3.4905%" y="629" width="0.0128%" height="15" fill="rgb(210,31,22)" fg:x="547" fg:w="2"/><text x="3.7405%" y="639.50"></text></g><g><title>deno`core::cmp::Ord::min (2 samples, 0.01%)</title><rect x="3.4905%" y="613" width="0.0128%" height="15" fill="rgb(239,54,39)" fg:x="547" fg:w="2"/><text x="3.7405%" y="623.50"></text></g><g><title>deno`core::cmp::min_by (2 samples, 0.01%)</title><rect x="3.4905%" y="597" width="0.0128%" height="15" fill="rgb(230,99,41)" fg:x="547" fg:w="2"/><text x="3.7405%" y="607.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (2 samples, 0.01%)</title><rect x="3.5224%" y="725" width="0.0128%" height="15" fill="rgb(253,106,12)" fg:x="552" fg:w="2"/><text x="3.7724%" y="735.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::check_promise_exceptions (88 samples, 0.56%)</title><rect x="2.9864%" y="773" width="0.5615%" height="15" fill="rgb(213,46,41)" fg:x="468" fg:w="88"/><text x="3.2364%" y="783.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::is_empty (6 samples, 0.04%)</title><rect x="3.5097%" y="757" width="0.0383%" height="15" fill="rgb(215,133,35)" fg:x="550" fg:w="6"/><text x="3.7597%" y="767.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (6 samples, 0.04%)</title><rect x="3.5097%" y="741" width="0.0383%" height="15" fill="rgb(213,28,5)" fg:x="550" fg:w="6"/><text x="3.7597%" y="751.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.01%)</title><rect x="3.5352%" y="725" width="0.0128%" height="15" fill="rgb(215,77,49)" fg:x="554" fg:w="2"/><text x="3.7852%" y="735.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.01%)</title><rect x="3.6181%" y="725" width="0.0128%" height="15" fill="rgb(248,100,22)" fg:x="567" fg:w="2"/><text x="3.8681%" y="735.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="3.6181%" y="709" width="0.0128%" height="15" fill="rgb(208,67,9)" fg:x="567" fg:w="2"/><text x="3.8681%" y="719.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.05%)</title><rect x="3.6054%" y="741" width="0.0510%" height="15" fill="rgb(219,133,21)" fg:x="565" fg:w="8"/><text x="3.8554%" y="751.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (3 samples, 0.02%)</title><rect x="3.6373%" y="725" width="0.0191%" height="15" fill="rgb(246,46,29)" fg:x="570" fg:w="3"/><text x="3.8873%" y="735.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (2 samples, 0.01%)</title><rect x="3.6437%" y="709" width="0.0128%" height="15" fill="rgb(246,185,52)" fg:x="571" fg:w="2"/><text x="3.8937%" y="719.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="3.6947%" y="661" width="0.0191%" height="15" fill="rgb(252,136,11)" fg:x="579" fg:w="3"/><text x="3.9447%" y="671.50"></text></g><g><title>deno`&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="3.6820%" y="693" width="0.0447%" height="15" fill="rgb(219,138,53)" fg:x="577" fg:w="7"/><text x="3.9320%" y="703.50"></text></g><g><title>deno`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="3.6883%" y="677" width="0.0383%" height="15" fill="rgb(211,51,23)" fg:x="578" fg:w="6"/><text x="3.9383%" y="687.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as v8::handle::Handle&gt;::get_handle_info (5 samples, 0.03%)</title><rect x="3.7394%" y="677" width="0.0319%" height="15" fill="rgb(247,221,28)" fg:x="586" fg:w="5"/><text x="3.9894%" y="687.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.02%)</title><rect x="3.7522%" y="661" width="0.0191%" height="15" fill="rgb(251,222,45)" fg:x="588" fg:w="3"/><text x="4.0022%" y="671.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_mut (2 samples, 0.01%)</title><rect x="3.7713%" y="677" width="0.0128%" height="15" fill="rgb(217,162,53)" fg:x="591" fg:w="2"/><text x="4.0213%" y="687.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (4 samples, 0.03%)</title><rect x="3.8479%" y="613" width="0.0255%" height="15" fill="rgb(229,93,14)" fg:x="603" fg:w="4"/><text x="4.0979%" y="623.50"></text></g><g><title>deno`alloc::sync::data_offset (3 samples, 0.02%)</title><rect x="3.8543%" y="597" width="0.0191%" height="15" fill="rgb(209,67,49)" fg:x="604" fg:w="3"/><text x="4.1043%" y="607.50"></text></g><g><title>deno`alloc::sync::data_offset_align (3 samples, 0.02%)</title><rect x="3.8543%" y="581" width="0.0191%" height="15" fill="rgb(213,87,29)" fg:x="604" fg:w="3"/><text x="4.1043%" y="591.50"></text></g><g><title>deno`core::alloc::layout::Layout::padding_needed_for (2 samples, 0.01%)</title><rect x="3.8606%" y="565" width="0.0128%" height="15" fill="rgb(205,151,52)" fg:x="605" fg:w="2"/><text x="4.1106%" y="575.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (9 samples, 0.06%)</title><rect x="3.8223%" y="661" width="0.0574%" height="15" fill="rgb(253,215,39)" fg:x="599" fg:w="9"/><text x="4.0723%" y="671.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::new (7 samples, 0.04%)</title><rect x="3.8351%" y="645" width="0.0447%" height="15" fill="rgb(221,220,41)" fg:x="601" fg:w="7"/><text x="4.0851%" y="655.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (7 samples, 0.04%)</title><rect x="3.8351%" y="629" width="0.0447%" height="15" fill="rgb(218,133,21)" fg:x="601" fg:w="7"/><text x="4.0851%" y="639.50"></text></g><g><title>deno`v8::handle::Global&lt;T&gt;::new_raw (14 samples, 0.09%)</title><rect x="3.7968%" y="677" width="0.0893%" height="15" fill="rgb(221,193,43)" fg:x="595" fg:w="14"/><text x="4.0468%" y="687.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.17%)</title><rect x="3.7266%" y="693" width="0.1659%" height="15" fill="rgb(240,128,52)" fg:x="584" fg:w="26"/><text x="3.9766%" y="703.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::spare_capacity_mut (3 samples, 0.02%)</title><rect x="3.8925%" y="693" width="0.0191%" height="15" fill="rgb(253,114,12)" fg:x="610" fg:w="3"/><text x="4.1425%" y="703.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.01%)</title><rect x="3.8989%" y="677" width="0.0128%" height="15" fill="rgb(215,223,47)" fg:x="611" fg:w="2"/><text x="4.1489%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="3.9819%" y="565" width="0.0128%" height="15" fill="rgb(248,225,23)" fg:x="624" fg:w="2"/><text x="4.2319%" y="575.50"></text></g><g><title>deno`alloc::alloc::alloc (5 samples, 0.03%)</title><rect x="3.9691%" y="613" width="0.0319%" height="15" fill="rgb(250,108,0)" fg:x="622" fg:w="5"/><text x="4.2191%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="3.9819%" y="597" width="0.0191%" height="15" fill="rgb(228,208,7)" fg:x="624" fg:w="3"/><text x="4.2319%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="3.9819%" y="581" width="0.0191%" height="15" fill="rgb(244,45,10)" fg:x="624" fg:w="3"/><text x="4.2319%" y="591.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="4.0010%" y="613" width="0.0191%" height="15" fill="rgb(207,125,25)" fg:x="627" fg:w="3"/><text x="4.2510%" y="623.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.08%)</title><rect x="3.9564%" y="645" width="0.0766%" height="15" fill="rgb(210,195,18)" fg:x="620" fg:w="12"/><text x="4.2064%" y="655.50"></text></g><g><title>deno`alloc::alloc::Global::alloc_impl (12 samples, 0.08%)</title><rect x="3.9564%" y="629" width="0.0766%" height="15" fill="rgb(249,80,12)" fg:x="620" fg:w="12"/><text x="4.2064%" y="639.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (2 samples, 0.01%)</title><rect x="4.0202%" y="613" width="0.0128%" height="15" fill="rgb(221,65,9)" fg:x="630" fg:w="2"/><text x="4.2702%" y="623.50"></text></g><g><title>deno`core::alloc::layout::Layout::array (4 samples, 0.03%)</title><rect x="4.0393%" y="645" width="0.0255%" height="15" fill="rgb(235,49,36)" fg:x="633" fg:w="4"/><text x="4.2893%" y="655.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (24 samples, 0.15%)</title><rect x="3.9372%" y="661" width="0.1531%" height="15" fill="rgb(225,32,20)" fg:x="617" fg:w="24"/><text x="4.1872%" y="671.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (3 samples, 0.02%)</title><rect x="4.0712%" y="645" width="0.0191%" height="15" fill="rgb(215,141,46)" fg:x="638" fg:w="3"/><text x="4.3212%" y="655.50"></text></g><g><title>deno`alloc::raw_vec::alloc_guard (2 samples, 0.01%)</title><rect x="4.0904%" y="661" width="0.0128%" height="15" fill="rgb(250,160,47)" fg:x="641" fg:w="2"/><text x="4.3404%" y="671.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (32 samples, 0.20%)</title><rect x="3.9117%" y="693" width="0.2042%" height="15" fill="rgb(216,222,40)" fg:x="613" fg:w="32"/><text x="4.1617%" y="703.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.20%)</title><rect x="3.9181%" y="677" width="0.1978%" height="15" fill="rgb(234,217,39)" fg:x="614" fg:w="31"/><text x="4.1681%" y="687.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::iter (5 samples, 0.03%)</title><rect x="4.1223%" y="693" width="0.0319%" height="15" fill="rgb(207,178,40)" fg:x="646" fg:w="5"/><text x="4.3723%" y="703.50"></text></g><g><title>deno`core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.03%)</title><rect x="4.1223%" y="677" width="0.0319%" height="15" fill="rgb(221,136,13)" fg:x="646" fg:w="5"/><text x="4.3723%" y="687.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (2 samples, 0.01%)</title><rect x="4.1414%" y="661" width="0.0128%" height="15" fill="rgb(249,199,10)" fg:x="649" fg:w="2"/><text x="4.3914%" y="671.50"></text></g><g><title>deno`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (78 samples, 0.50%)</title><rect x="3.6628%" y="709" width="0.4977%" height="15" fill="rgb(249,222,13)" fg:x="574" fg:w="78"/><text x="3.9128%" y="719.50"></text></g><g><title>deno`alloc::slice::_&lt;impl [T]&gt;::to_vec_in (81 samples, 0.52%)</title><rect x="3.6564%" y="741" width="0.5169%" height="15" fill="rgb(244,185,38)" fg:x="573" fg:w="81"/><text x="3.9064%" y="751.50"></text></g><g><title>deno`alloc::slice::hack::to_vec (80 samples, 0.51%)</title><rect x="3.6628%" y="725" width="0.5105%" height="15" fill="rgb(236,202,9)" fg:x="574" fg:w="80"/><text x="3.9128%" y="735.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (90 samples, 0.57%)</title><rect x="3.6054%" y="757" width="0.5743%" height="15" fill="rgb(250,229,37)" fg:x="565" fg:w="90"/><text x="3.8554%" y="767.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.03%)</title><rect x="4.1797%" y="757" width="0.0319%" height="15" fill="rgb(206,174,23)" fg:x="655" fg:w="5"/><text x="4.4297%" y="767.50"></text></g><g><title>deno`&lt;v8::isolate::OwnedIsolate as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="4.2180%" y="757" width="0.0128%" height="15" fill="rgb(211,33,43)" fg:x="661" fg:w="2"/><text x="4.4680%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="4.2307%" y="757" width="0.0319%" height="15" fill="rgb(245,58,50)" fg:x="663" fg:w="5"/><text x="4.4807%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsRef&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_ref (4 samples, 0.03%)</title><rect x="4.2371%" y="741" width="0.0255%" height="15" fill="rgb(244,68,36)" fg:x="664" fg:w="4"/><text x="4.4871%" y="751.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_ref (4 samples, 0.03%)</title><rect x="4.2371%" y="725" width="0.0255%" height="15" fill="rgb(232,229,15)" fg:x="664" fg:w="4"/><text x="4.4871%" y="735.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (2 samples, 0.01%)</title><rect x="4.2499%" y="709" width="0.0128%" height="15" fill="rgb(254,30,23)" fg:x="666" fg:w="2"/><text x="4.4999%" y="719.50"></text></g><g><title>deno`core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.01%)</title><rect x="4.2499%" y="693" width="0.0128%" height="15" fill="rgb(235,160,14)" fg:x="666" fg:w="2"/><text x="4.4999%" y="703.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="4.2818%" y="709" width="0.0255%" height="15" fill="rgb(212,155,44)" fg:x="671" fg:w="4"/><text x="4.5318%" y="719.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="4.2882%" y="693" width="0.0191%" height="15" fill="rgb(226,2,50)" fg:x="672" fg:w="3"/><text x="4.5382%" y="703.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (2 samples, 0.01%)</title><rect x="4.3073%" y="709" width="0.0128%" height="15" fill="rgb(234,177,6)" fg:x="675" fg:w="2"/><text x="4.5573%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope as core::ops::deref::DerefMut&gt;::deref_mut (12 samples, 0.08%)</title><rect x="4.2627%" y="757" width="0.0766%" height="15" fill="rgb(217,24,9)" fg:x="668" fg:w="12"/><text x="4.5127%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (12 samples, 0.08%)</title><rect x="4.2627%" y="741" width="0.0766%" height="15" fill="rgb(220,13,46)" fg:x="668" fg:w="12"/><text x="4.5127%" y="751.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (11 samples, 0.07%)</title><rect x="4.2690%" y="725" width="0.0702%" height="15" fill="rgb(239,221,27)" fg:x="669" fg:w="11"/><text x="4.5190%" y="735.50"></text></g><g><title>deno`core::alloc::layout::size_align (3 samples, 0.02%)</title><rect x="4.3201%" y="709" width="0.0191%" height="15" fill="rgb(222,198,25)" fg:x="677" fg:w="3"/><text x="4.5701%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="4.3584%" y="709" width="0.0128%" height="15" fill="rgb(211,99,13)" fg:x="683" fg:w="2"/><text x="4.6084%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="4.3392%" y="757" width="0.0447%" height="15" fill="rgb(232,111,31)" fg:x="680" fg:w="7"/><text x="4.5892%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsRef&lt;v8::isolate::Isolate&gt;&gt;::as_ref (7 samples, 0.04%)</title><rect x="4.3392%" y="741" width="0.0447%" height="15" fill="rgb(245,82,37)" fg:x="680" fg:w="7"/><text x="4.5892%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get (6 samples, 0.04%)</title><rect x="4.3456%" y="725" width="0.0383%" height="15" fill="rgb(227,149,46)" fg:x="681" fg:w="6"/><text x="4.5956%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_isolate (2 samples, 0.01%)</title><rect x="4.3711%" y="709" width="0.0128%" height="15" fill="rgb(218,36,50)" fg:x="685" fg:w="2"/><text x="4.6211%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="4.3839%" y="725" width="0.0128%" height="15" fill="rgb(226,80,48)" fg:x="687" fg:w="2"/><text x="4.6339%" y="735.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.03%)</title><rect x="4.3839%" y="757" width="0.0319%" height="15" fill="rgb(238,224,15)" fg:x="687" fg:w="5"/><text x="4.6339%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::isolate::Isolate&gt;&gt;::as_mut (5 samples, 0.03%)</title><rect x="4.3839%" y="741" width="0.0319%" height="15" fill="rgb(241,136,10)" fg:x="687" fg:w="5"/><text x="4.6339%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (3 samples, 0.02%)</title><rect x="4.3967%" y="725" width="0.0191%" height="15" fill="rgb(208,32,45)" fg:x="689" fg:w="3"/><text x="4.6467%" y="735.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="4.4349%" y="709" width="0.0191%" height="15" fill="rgb(207,135,9)" fg:x="695" fg:w="3"/><text x="4.6849%" y="719.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="4.4413%" y="693" width="0.0128%" height="15" fill="rgb(206,86,44)" fg:x="696" fg:w="2"/><text x="4.6913%" y="703.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.05%)</title><rect x="4.4158%" y="757" width="0.0510%" height="15" fill="rgb(245,177,15)" fg:x="692" fg:w="8"/><text x="4.6658%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt; as core::convert::AsRef&lt;v8::scope::HandleScope&gt;&gt;::as_ref (6 samples, 0.04%)</title><rect x="4.4286%" y="741" width="0.0383%" height="15" fill="rgb(206,64,50)" fg:x="694" fg:w="6"/><text x="4.6786%" y="751.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_ref (6 samples, 0.04%)</title><rect x="4.4286%" y="725" width="0.0383%" height="15" fill="rgb(234,36,40)" fg:x="694" fg:w="6"/><text x="4.6786%" y="735.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="4.5243%" y="693" width="0.0191%" height="15" fill="rgb(213,64,8)" fg:x="709" fg:w="3"/><text x="4.7743%" y="703.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (7 samples, 0.04%)</title><rect x="4.5051%" y="709" width="0.0447%" height="15" fill="rgb(210,75,36)" fg:x="706" fg:w="7"/><text x="4.7551%" y="719.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (4 samples, 0.03%)</title><rect x="4.5498%" y="709" width="0.0255%" height="15" fill="rgb(229,88,21)" fg:x="713" fg:w="4"/><text x="4.7998%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt; as core::ops::deref::DerefMut&gt;::deref_mut (18 samples, 0.11%)</title><rect x="4.4668%" y="757" width="0.1149%" height="15" fill="rgb(252,204,47)" fg:x="700" fg:w="18"/><text x="4.7168%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&gt;&gt;::as_mut (16 samples, 0.10%)</title><rect x="4.4796%" y="741" width="0.1021%" height="15" fill="rgb(208,77,27)" fg:x="702" fg:w="16"/><text x="4.7296%" y="751.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (15 samples, 0.10%)</title><rect x="4.4860%" y="725" width="0.0957%" height="15" fill="rgb(221,76,26)" fg:x="703" fg:w="15"/><text x="4.7360%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (3 samples, 0.02%)</title><rect x="4.5881%" y="741" width="0.0191%" height="15" fill="rgb(225,139,18)" fg:x="719" fg:w="3"/><text x="4.8381%" y="751.50"></text></g><g><title>deno`core::cell::BorrowRef::new (3 samples, 0.02%)</title><rect x="4.5881%" y="725" width="0.0191%" height="15" fill="rgb(230,137,11)" fg:x="719" fg:w="3"/><text x="4.8381%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="4.5945%" y="709" width="0.0128%" height="15" fill="rgb(212,28,1)" fg:x="720" fg:w="2"/><text x="4.8445%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="4.5945%" y="693" width="0.0128%" height="15" fill="rgb(248,164,17)" fg:x="720" fg:w="2"/><text x="4.8445%" y="703.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.03%)</title><rect x="4.5817%" y="757" width="0.0319%" height="15" fill="rgb(222,171,42)" fg:x="718" fg:w="5"/><text x="4.8317%" y="767.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_mut (2 samples, 0.01%)</title><rect x="4.6136%" y="757" width="0.0128%" height="15" fill="rgb(243,84,45)" fg:x="723" fg:w="2"/><text x="4.8636%" y="767.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (4 samples, 0.03%)</title><rect x="4.6328%" y="725" width="0.0255%" height="15" fill="rgb(252,49,23)" fg:x="726" fg:w="4"/><text x="4.8828%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="4.6391%" y="709" width="0.0191%" height="15" fill="rgb(215,19,7)" fg:x="727" fg:w="3"/><text x="4.8891%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="4.6455%" y="693" width="0.0128%" height="15" fill="rgb(238,81,41)" fg:x="728" fg:w="2"/><text x="4.8955%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="4.6328%" y="757" width="0.0319%" height="15" fill="rgb(210,199,37)" fg:x="726" fg:w="5"/><text x="4.8828%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="4.6328%" y="741" width="0.0319%" height="15" fill="rgb(244,192,49)" fg:x="726" fg:w="5"/><text x="4.8828%" y="751.50"></text></g><g><title>deno`&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="4.6774%" y="725" width="0.0128%" height="15" fill="rgb(226,211,11)" fg:x="733" fg:w="2"/><text x="4.9274%" y="735.50"></text></g><g><title>deno`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.02%)</title><rect x="4.7093%" y="677" width="0.0191%" height="15" fill="rgb(236,162,54)" fg:x="738" fg:w="3"/><text x="4.9593%" y="687.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr (2 samples, 0.01%)</title><rect x="4.7157%" y="661" width="0.0128%" height="15" fill="rgb(220,229,9)" fg:x="739" fg:w="2"/><text x="4.9657%" y="671.50"></text></g><g><title>deno`&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (8 samples, 0.05%)</title><rect x="4.6902%" y="709" width="0.0510%" height="15" fill="rgb(250,87,22)" fg:x="735" fg:w="8"/><text x="4.9402%" y="719.50"></text></g><g><title>deno`core::iter::traits::exact_size::ExactSizeIterator::len (6 samples, 0.04%)</title><rect x="4.7030%" y="693" width="0.0383%" height="15" fill="rgb(239,43,17)" fg:x="737" fg:w="6"/><text x="4.9530%" y="703.50"></text></g><g><title>deno`alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (9 samples, 0.06%)</title><rect x="4.6902%" y="725" width="0.0574%" height="15" fill="rgb(231,177,25)" fg:x="735" fg:w="9"/><text x="4.9402%" y="735.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::from_raw_parts_in (2 samples, 0.01%)</title><rect x="4.7668%" y="693" width="0.0128%" height="15" fill="rgb(219,179,1)" fg:x="747" fg:w="2"/><text x="5.0168%" y="703.50"></text></g><g><title>deno`alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="4.8433%" y="645" width="0.0191%" height="15" fill="rgb(238,219,53)" fg:x="759" fg:w="3"/><text x="5.0933%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="4.8433%" y="629" width="0.0191%" height="15" fill="rgb(232,167,36)" fg:x="759" fg:w="3"/><text x="5.0933%" y="639.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.04%)</title><rect x="4.8306%" y="661" width="0.0447%" height="15" fill="rgb(244,19,51)" fg:x="757" fg:w="7"/><text x="5.0806%" y="671.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="4.9008%" y="645" width="0.0128%" height="15" fill="rgb(224,6,22)" fg:x="768" fg:w="2"/><text x="5.1508%" y="655.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (2 samples, 0.01%)</title><rect x="4.9135%" y="645" width="0.0128%" height="15" fill="rgb(224,145,5)" fg:x="770" fg:w="2"/><text x="5.1635%" y="655.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;v8::handle::Global&lt;v8::data::Function&gt;&gt;&gt; (23 samples, 0.15%)</title><rect x="4.7859%" y="693" width="0.1468%" height="15" fill="rgb(234,130,49)" fg:x="750" fg:w="23"/><text x="5.0359%" y="703.50"></text></g><g><title>deno`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.15%)</title><rect x="4.7859%" y="677" width="0.1468%" height="15" fill="rgb(254,6,2)" fg:x="750" fg:w="23"/><text x="5.0359%" y="687.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.06%)</title><rect x="4.8752%" y="661" width="0.0574%" height="15" fill="rgb(208,96,46)" fg:x="764" fg:w="9"/><text x="5.1252%" y="671.50"></text></g><g><title>deno`&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.19%)</title><rect x="4.7540%" y="709" width="0.1914%" height="15" fill="rgb(239,3,39)" fg:x="745" fg:w="30"/><text x="5.0040%" y="719.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="4.9327%" y="693" width="0.0128%" height="15" fill="rgb(233,210,1)" fg:x="773" fg:w="2"/><text x="5.1827%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;v8::handle::Global&lt;v8::data::Function&gt;,alloc::alloc::Global&gt;&gt; (33 samples, 0.21%)</title><rect x="4.7476%" y="725" width="0.2106%" height="15" fill="rgb(244,137,37)" fg:x="744" fg:w="33"/><text x="4.9976%" y="735.50"></text></g><g><title>deno`core::mem::manually_drop::ManuallyDrop&lt;T&gt;::take (2 samples, 0.01%)</title><rect x="4.9454%" y="709" width="0.0128%" height="15" fill="rgb(240,136,2)" fg:x="775" fg:w="2"/><text x="5.1954%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;v8::handle::Global&lt;v8::data::Function&gt;&gt;&gt; (47 samples, 0.30%)</title><rect x="4.6647%" y="757" width="0.2999%" height="15" fill="rgb(239,18,37)" fg:x="731" fg:w="47"/><text x="4.9147%" y="767.50"></text></g><g><title>deno`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.30%)</title><rect x="4.6647%" y="741" width="0.2999%" height="15" fill="rgb(218,185,22)" fg:x="731" fg:w="47"/><text x="4.9147%" y="751.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="4.9773%" y="677" width="0.0128%" height="15" fill="rgb(225,218,4)" fg:x="780" fg:w="2"/><text x="5.2273%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="4.9710%" y="709" width="0.0255%" height="15" fill="rgb(230,182,32)" fg:x="779" fg:w="4"/><text x="5.2210%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="4.9773%" y="693" width="0.0191%" height="15" fill="rgb(242,56,43)" fg:x="780" fg:w="3"/><text x="5.2273%" y="703.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="4.9710%" y="725" width="0.0319%" height="15" fill="rgb(233,99,24)" fg:x="779" fg:w="5"/><text x="5.2210%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (7 samples, 0.04%)</title><rect x="4.9646%" y="757" width="0.0447%" height="15" fill="rgb(234,209,42)" fg:x="778" fg:w="7"/><text x="5.2146%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (6 samples, 0.04%)</title><rect x="4.9710%" y="741" width="0.0383%" height="15" fill="rgb(227,7,12)" fg:x="779" fg:w="6"/><text x="5.2210%" y="751.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="5.0093%" y="741" width="0.0191%" height="15" fill="rgb(245,203,43)" fg:x="785" fg:w="3"/><text x="5.2593%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::handle::Global&lt;v8::data::Function&gt;&gt; (5 samples, 0.03%)</title><rect x="5.0093%" y="757" width="0.0319%" height="15" fill="rgb(238,205,33)" fg:x="785" fg:w="5"/><text x="5.2593%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (4 samples, 0.03%)</title><rect x="5.0475%" y="725" width="0.0255%" height="15" fill="rgb(231,56,7)" fg:x="791" fg:w="4"/><text x="5.2975%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="5.0603%" y="709" width="0.0128%" height="15" fill="rgb(244,186,29)" fg:x="793" fg:w="2"/><text x="5.3103%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (6 samples, 0.04%)</title><rect x="5.0412%" y="757" width="0.0383%" height="15" fill="rgb(234,111,31)" fg:x="790" fg:w="6"/><text x="5.2912%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="5.0412%" y="741" width="0.0383%" height="15" fill="rgb(241,149,10)" fg:x="790" fg:w="6"/><text x="5.2912%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (5 samples, 0.03%)</title><rect x="5.0858%" y="725" width="0.0319%" height="15" fill="rgb(249,206,44)" fg:x="797" fg:w="5"/><text x="5.3358%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="5.1050%" y="709" width="0.0128%" height="15" fill="rgb(251,153,30)" fg:x="800" fg:w="2"/><text x="5.3550%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="5.1241%" y="693" width="0.0128%" height="15" fill="rgb(239,152,38)" fg:x="803" fg:w="2"/><text x="5.3741%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="5.1241%" y="677" width="0.0128%" height="15" fill="rgb(249,139,47)" fg:x="803" fg:w="2"/><text x="5.3741%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.01%)</title><rect x="5.1369%" y="693" width="0.0128%" height="15" fill="rgb(244,64,35)" fg:x="805" fg:w="2"/><text x="5.3869%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::raw::TryCatch&gt; (2 samples, 0.01%)</title><rect x="5.1369%" y="677" width="0.0128%" height="15" fill="rgb(216,46,15)" fg:x="805" fg:w="2"/><text x="5.3869%" y="687.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;P&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.08%)</title><rect x="5.0858%" y="741" width="0.0830%" height="15" fill="rgb(250,74,19)" fg:x="797" fg:w="13"/><text x="5.3358%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (8 samples, 0.05%)</title><rect x="5.1177%" y="725" width="0.0510%" height="15" fill="rgb(249,42,33)" fg:x="802" fg:w="8"/><text x="5.3677%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::exit_scope (8 samples, 0.05%)</title><rect x="5.1177%" y="709" width="0.0510%" height="15" fill="rgb(242,149,17)" fg:x="802" fg:w="8"/><text x="5.3677%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (3 samples, 0.02%)</title><rect x="5.1496%" y="693" width="0.0191%" height="15" fill="rgb(244,29,21)" fg:x="807" fg:w="3"/><text x="5.3996%" y="703.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="5.1560%" y="677" width="0.0128%" height="15" fill="rgb(220,130,37)" fg:x="808" fg:w="2"/><text x="5.4060%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt;&gt; (16 samples, 0.10%)</title><rect x="5.0794%" y="757" width="0.1021%" height="15" fill="rgb(211,67,2)" fg:x="796" fg:w="16"/><text x="5.3294%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (2 samples, 0.01%)</title><rect x="5.1688%" y="741" width="0.0128%" height="15" fill="rgb(235,68,52)" fg:x="810" fg:w="2"/><text x="5.4188%" y="751.50"></text></g><g><title>deno`core::ptr::read (5 samples, 0.03%)</title><rect x="5.1879%" y="757" width="0.0319%" height="15" fill="rgb(246,142,3)" fg:x="813" fg:w="5"/><text x="5.4379%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::runtime::JsRealm&gt; (3 samples, 0.02%)</title><rect x="5.2326%" y="741" width="0.0191%" height="15" fill="rgb(241,25,7)" fg:x="820" fg:w="3"/><text x="5.4826%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::handle::Global&lt;v8::data::Context&gt;&gt; (3 samples, 0.02%)</title><rect x="5.2326%" y="725" width="0.0191%" height="15" fill="rgb(242,119,39)" fg:x="820" fg:w="3"/><text x="5.4826%" y="735.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::is_none (2 samples, 0.01%)</title><rect x="5.2836%" y="693" width="0.0128%" height="15" fill="rgb(241,98,45)" fg:x="828" fg:w="2"/><text x="5.5336%" y="703.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="5.3411%" y="661" width="0.0128%" height="15" fill="rgb(254,28,30)" fg:x="837" fg:w="2"/><text x="5.5911%" y="671.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="5.3538%" y="661" width="0.0128%" height="15" fill="rgb(241,142,54)" fg:x="839" fg:w="2"/><text x="5.6038%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (7 samples, 0.04%)</title><rect x="5.3347%" y="677" width="0.0447%" height="15" fill="rgb(222,85,15)" fg:x="836" fg:w="7"/><text x="5.5847%" y="687.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="5.3666%" y="661" width="0.0128%" height="15" fill="rgb(210,85,47)" fg:x="841" fg:w="2"/><text x="5.6166%" y="671.50"></text></g><g><title>deno`&lt;v8::scope::data::ScopeTypeSpecificData as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="5.4049%" y="629" width="0.0191%" height="15" fill="rgb(224,206,25)" fg:x="847" fg:w="3"/><text x="5.6549%" y="639.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;v8::scope::raw::ContextScope&gt;&gt; (3 samples, 0.02%)</title><rect x="5.4049%" y="613" width="0.0191%" height="15" fill="rgb(243,201,19)" fg:x="847" fg:w="3"/><text x="5.6549%" y="623.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (5 samples, 0.03%)</title><rect x="5.3985%" y="645" width="0.0319%" height="15" fill="rgb(236,59,4)" fg:x="846" fg:w="5"/><text x="5.6485%" y="655.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (27 samples, 0.17%)</title><rect x="5.2709%" y="709" width="0.1723%" height="15" fill="rgb(254,179,45)" fg:x="826" fg:w="27"/><text x="5.5209%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_root_mut (23 samples, 0.15%)</title><rect x="5.2964%" y="693" width="0.1468%" height="15" fill="rgb(226,14,10)" fg:x="830" fg:w="23"/><text x="5.5464%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (10 samples, 0.06%)</title><rect x="5.3794%" y="677" width="0.0638%" height="15" fill="rgb(244,27,41)" fg:x="843" fg:w="10"/><text x="5.6294%" y="687.50"></text></g><g><title>deno`v8::scope::data::ScopeData::exit_scope (9 samples, 0.06%)</title><rect x="5.3857%" y="661" width="0.0574%" height="15" fill="rgb(235,35,32)" fg:x="844" fg:w="9"/><text x="5.6357%" y="671.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (2 samples, 0.01%)</title><rect x="5.4304%" y="645" width="0.0128%" height="15" fill="rgb(218,68,31)" fg:x="851" fg:w="2"/><text x="5.6804%" y="655.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="5.4304%" y="629" width="0.0128%" height="15" fill="rgb(207,120,37)" fg:x="851" fg:w="2"/><text x="5.6804%" y="639.50"></text></g><g><title>deno`&lt;v8::scope::data::ScopeStatus as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="5.4432%" y="709" width="0.0128%" height="15" fill="rgb(227,98,0)" fg:x="853" fg:w="2"/><text x="5.6932%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="5.4559%" y="709" width="0.0128%" height="15" fill="rgb(207,7,3)" fg:x="855" fg:w="2"/><text x="5.7059%" y="719.50"></text></g><g><title>deno`&lt;&amp;v8::handle::Global&lt;T&gt; as v8::handle::Handle&gt;::get_handle_info (3 samples, 0.02%)</title><rect x="5.4687%" y="693" width="0.0191%" height="15" fill="rgb(206,98,19)" fg:x="857" fg:w="3"/><text x="5.7187%" y="703.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="5.4751%" y="677" width="0.0128%" height="15" fill="rgb(217,5,26)" fg:x="858" fg:w="2"/><text x="5.7251%" y="687.50"></text></g><g><title>deno`&lt;v8::handle::HandleHost as core::convert::From&lt;&amp;v8::isolate::IsolateHandle&gt;&gt;::from (2 samples, 0.01%)</title><rect x="5.4751%" y="661" width="0.0128%" height="15" fill="rgb(235,190,38)" fg:x="858" fg:w="2"/><text x="5.7251%" y="671.50"></text></g><g><title>deno`v8::handle::Handle::open (6 samples, 0.04%)</title><rect x="5.4687%" y="709" width="0.0383%" height="15" fill="rgb(247,86,24)" fg:x="857" fg:w="6"/><text x="5.7187%" y="719.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (3 samples, 0.02%)</title><rect x="5.4878%" y="693" width="0.0191%" height="15" fill="rgb(205,101,16)" fg:x="860" fg:w="3"/><text x="5.7378%" y="703.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_host (2 samples, 0.01%)</title><rect x="5.4942%" y="677" width="0.0128%" height="15" fill="rgb(246,168,33)" fg:x="861" fg:w="2"/><text x="5.7442%" y="687.50"></text></g><g><title>deno`v8::handle::HandleHost::match_host (2 samples, 0.01%)</title><rect x="5.4942%" y="661" width="0.0128%" height="15" fill="rgb(231,114,1)" fg:x="861" fg:w="2"/><text x="5.7442%" y="671.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="5.5453%" y="693" width="0.0128%" height="15" fill="rgb(207,184,53)" fg:x="869" fg:w="2"/><text x="5.7953%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (13 samples, 0.08%)</title><rect x="5.5070%" y="709" width="0.0830%" height="15" fill="rgb(224,95,51)" fg:x="863" fg:w="13"/><text x="5.7570%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="5.5644%" y="693" width="0.0255%" height="15" fill="rgb(212,188,45)" fg:x="872" fg:w="4"/><text x="5.8144%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="5.5644%" y="677" width="0.0255%" height="15" fill="rgb(223,154,38)" fg:x="872" fg:w="4"/><text x="5.8144%" y="687.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="5.5708%" y="661" width="0.0191%" height="15" fill="rgb(251,22,52)" fg:x="873" fg:w="3"/><text x="5.8208%" y="671.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="5.6282%" y="677" width="0.0128%" height="15" fill="rgb(229,209,22)" fg:x="882" fg:w="2"/><text x="5.8782%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="5.6282%" y="661" width="0.0128%" height="15" fill="rgb(234,138,34)" fg:x="882" fg:w="2"/><text x="5.8782%" y="671.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (5 samples, 0.03%)</title><rect x="5.6410%" y="677" width="0.0319%" height="15" fill="rgb(212,95,11)" fg:x="884" fg:w="5"/><text x="5.8910%" y="687.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="5.6538%" y="661" width="0.0191%" height="15" fill="rgb(240,179,47)" fg:x="886" fg:w="3"/><text x="5.9038%" y="671.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="5.6601%" y="645" width="0.0128%" height="15" fill="rgb(240,163,11)" fg:x="887" fg:w="2"/><text x="5.9101%" y="655.50"></text></g><g><title>deno`v8::scope::data::ScopeData::allocate_or_reuse_scope_data (2 samples, 0.01%)</title><rect x="5.6729%" y="677" width="0.0128%" height="15" fill="rgb(236,37,12)" fg:x="889" fg:w="2"/><text x="5.9229%" y="687.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="5.7048%" y="613" width="0.0128%" height="15" fill="rgb(232,164,16)" fg:x="894" fg:w="2"/><text x="5.9548%" y="623.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="5.7048%" y="629" width="0.0191%" height="15" fill="rgb(244,205,15)" fg:x="894" fg:w="3"/><text x="5.9548%" y="639.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (5 samples, 0.03%)</title><rect x="5.6984%" y="645" width="0.0319%" height="15" fill="rgb(223,117,47)" fg:x="893" fg:w="5"/><text x="5.9484%" y="655.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context::_{{closure}} (11 samples, 0.07%)</title><rect x="5.6920%" y="661" width="0.0702%" height="15" fill="rgb(244,107,35)" fg:x="892" fg:w="11"/><text x="5.9420%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeTypeSpecificData::init_with (2 samples, 0.01%)</title><rect x="5.7622%" y="661" width="0.0128%" height="15" fill="rgb(205,140,8)" fg:x="903" fg:w="2"/><text x="6.0122%" y="671.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::handle_scope (84 samples, 0.54%)</title><rect x="5.2517%" y="741" width="0.5360%" height="15" fill="rgb(228,84,46)" fg:x="823" fg:w="84"/><text x="5.5017%" y="751.50"></text></g><g><title>deno`v8::scope::HandleScope::with_context (81 samples, 0.52%)</title><rect x="5.2709%" y="725" width="0.5169%" height="15" fill="rgb(254,188,9)" fg:x="826" fg:w="81"/><text x="5.5209%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (31 samples, 0.20%)</title><rect x="5.5899%" y="709" width="0.1978%" height="15" fill="rgb(206,112,54)" fg:x="876" fg:w="31"/><text x="5.8399%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_scope_data_with (28 samples, 0.18%)</title><rect x="5.6091%" y="693" width="0.1787%" height="15" fill="rgb(216,84,49)" fg:x="879" fg:w="28"/><text x="5.8591%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with::_{{closure}} (15 samples, 0.10%)</title><rect x="5.6920%" y="677" width="0.0957%" height="15" fill="rgb(214,194,35)" fg:x="892" fg:w="15"/><text x="5.9420%" y="687.50"></text></g><g><title>deno`v8::scope::raw::HandleScope::init (2 samples, 0.01%)</title><rect x="5.7750%" y="661" width="0.0128%" height="15" fill="rgb(249,28,3)" fg:x="905" fg:w="2"/><text x="6.0250%" y="671.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as v8::handle::Handle&gt;::get_handle_info (4 samples, 0.03%)</title><rect x="5.8197%" y="677" width="0.0255%" height="15" fill="rgb(222,56,52)" fg:x="912" fg:w="4"/><text x="6.0697%" y="687.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.02%)</title><rect x="5.8260%" y="661" width="0.0191%" height="15" fill="rgb(245,217,50)" fg:x="913" fg:w="3"/><text x="6.0760%" y="671.50"></text></g><g><title>deno`&lt;v8::handle::HandleHost as core::convert::From&lt;&amp;v8::isolate::IsolateHandle&gt;&gt;::from (3 samples, 0.02%)</title><rect x="5.8260%" y="645" width="0.0191%" height="15" fill="rgb(213,201,24)" fg:x="913" fg:w="3"/><text x="6.0760%" y="655.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.06%)</title><rect x="5.8069%" y="693" width="0.0638%" height="15" fill="rgb(248,116,28)" fg:x="910" fg:w="10"/><text x="6.0569%" y="703.50"></text></g><g><title>deno`v8::handle::Global&lt;T&gt;::new_raw (4 samples, 0.03%)</title><rect x="5.8452%" y="677" width="0.0255%" height="15" fill="rgb(219,72,43)" fg:x="916" fg:w="4"/><text x="6.0952%" y="687.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (2 samples, 0.01%)</title><rect x="5.8580%" y="661" width="0.0128%" height="15" fill="rgb(209,138,14)" fg:x="918" fg:w="2"/><text x="6.1080%" y="671.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::new (2 samples, 0.01%)</title><rect x="5.8580%" y="645" width="0.0128%" height="15" fill="rgb(222,18,33)" fg:x="918" fg:w="2"/><text x="6.1080%" y="655.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (2 samples, 0.01%)</title><rect x="5.8580%" y="629" width="0.0128%" height="15" fill="rgb(213,199,7)" fg:x="918" fg:w="2"/><text x="6.1080%" y="639.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.08%)</title><rect x="5.8069%" y="725" width="0.0766%" height="15" fill="rgb(250,110,10)" fg:x="910" fg:w="12"/><text x="6.0569%" y="735.50"></text></g><g><title>deno`&lt;deno_core::runtime::JsRealm as core::clone::Clone&gt;::clone (12 samples, 0.08%)</title><rect x="5.8069%" y="709" width="0.0766%" height="15" fill="rgb(248,123,6)" fg:x="910" fg:w="12"/><text x="6.0569%" y="719.50"></text></g><g><title>deno`v8::handle::Global&lt;T&gt;::new_raw (2 samples, 0.01%)</title><rect x="5.8707%" y="693" width="0.0128%" height="15" fill="rgb(206,91,31)" fg:x="920" fg:w="2"/><text x="6.1207%" y="703.50"></text></g><g><title>deno`&lt;v8::isolate::OwnedIsolate as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="5.8835%" y="725" width="0.0191%" height="15" fill="rgb(211,154,13)" fg:x="922" fg:w="3"/><text x="6.1335%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.01%)</title><rect x="5.9026%" y="725" width="0.0128%" height="15" fill="rgb(225,148,7)" fg:x="925" fg:w="2"/><text x="6.1526%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.01%)</title><rect x="5.9026%" y="709" width="0.0128%" height="15" fill="rgb(220,160,43)" fg:x="925" fg:w="2"/><text x="6.1526%" y="719.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (3 samples, 0.02%)</title><rect x="5.9281%" y="693" width="0.0191%" height="15" fill="rgb(213,52,39)" fg:x="929" fg:w="3"/><text x="6.1781%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (6 samples, 0.04%)</title><rect x="5.9154%" y="725" width="0.0383%" height="15" fill="rgb(243,137,7)" fg:x="927" fg:w="6"/><text x="6.1654%" y="735.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="5.9154%" y="709" width="0.0383%" height="15" fill="rgb(230,79,13)" fg:x="927" fg:w="6"/><text x="6.1654%" y="719.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="5.9537%" y="693" width="0.0128%" height="15" fill="rgb(247,105,23)" fg:x="933" fg:w="2"/><text x="6.2037%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="5.9537%" y="677" width="0.0128%" height="15" fill="rgb(223,179,41)" fg:x="933" fg:w="2"/><text x="6.2037%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="5.9537%" y="661" width="0.0128%" height="15" fill="rgb(218,9,34)" fg:x="933" fg:w="2"/><text x="6.2037%" y="671.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (3 samples, 0.02%)</title><rect x="5.9537%" y="725" width="0.0191%" height="15" fill="rgb(222,106,8)" fg:x="933" fg:w="3"/><text x="6.2037%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (3 samples, 0.02%)</title><rect x="5.9537%" y="709" width="0.0191%" height="15" fill="rgb(211,220,0)" fg:x="933" fg:w="3"/><text x="6.2037%" y="719.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="5.9792%" y="709" width="0.0128%" height="15" fill="rgb(229,52,16)" fg:x="937" fg:w="2"/><text x="6.2292%" y="719.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.01%)</title><rect x="5.9792%" y="693" width="0.0128%" height="15" fill="rgb(212,155,18)" fg:x="937" fg:w="2"/><text x="6.2292%" y="703.50"></text></g><g><title>deno`hashbrown::map::make_hash (7 samples, 0.04%)</title><rect x="6.0047%" y="645" width="0.0447%" height="15" fill="rgb(242,21,14)" fg:x="941" fg:w="7"/><text x="6.2547%" y="655.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="6.0111%" y="629" width="0.0383%" height="15" fill="rgb(222,19,48)" fg:x="942" fg:w="6"/><text x="6.2611%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.04%)</title><rect x="6.0111%" y="613" width="0.0383%" height="15" fill="rgb(232,45,27)" fg:x="942" fg:w="6"/><text x="6.2611%" y="623.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (6 samples, 0.04%)</title><rect x="6.0111%" y="597" width="0.0383%" height="15" fill="rgb(249,103,42)" fg:x="942" fg:w="6"/><text x="6.2611%" y="607.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (5 samples, 0.03%)</title><rect x="6.0175%" y="581" width="0.0319%" height="15" fill="rgb(246,81,33)" fg:x="943" fg:w="5"/><text x="6.2675%" y="591.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (3 samples, 0.02%)</title><rect x="6.0302%" y="565" width="0.0191%" height="15" fill="rgb(252,33,42)" fg:x="945" fg:w="3"/><text x="6.2802%" y="575.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="6.0366%" y="549" width="0.0128%" height="15" fill="rgb(209,212,41)" fg:x="946" fg:w="2"/><text x="6.2866%" y="559.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="6.0494%" y="629" width="0.0128%" height="15" fill="rgb(207,154,6)" fg:x="948" fg:w="2"/><text x="6.2994%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.02%)</title><rect x="6.0622%" y="613" width="0.0191%" height="15" fill="rgb(223,64,47)" fg:x="950" fg:w="3"/><text x="6.3122%" y="623.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.01%)</title><rect x="6.0685%" y="597" width="0.0128%" height="15" fill="rgb(211,161,38)" fg:x="951" fg:w="2"/><text x="6.3185%" y="607.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="6.0813%" y="597" width="0.0191%" height="15" fill="rgb(219,138,40)" fg:x="953" fg:w="3"/><text x="6.3313%" y="607.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="6.1068%" y="581" width="0.0191%" height="15" fill="rgb(241,228,46)" fg:x="957" fg:w="3"/><text x="6.3568%" y="591.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (7 samples, 0.04%)</title><rect x="6.1004%" y="597" width="0.0447%" height="15" fill="rgb(223,209,38)" fg:x="956" fg:w="7"/><text x="6.3504%" y="607.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.02%)</title><rect x="6.1260%" y="581" width="0.0191%" height="15" fill="rgb(236,164,45)" fg:x="960" fg:w="3"/><text x="6.3760%" y="591.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (2 samples, 0.01%)</title><rect x="6.1451%" y="597" width="0.0128%" height="15" fill="rgb(231,15,5)" fg:x="963" fg:w="2"/><text x="6.3951%" y="607.50"></text></g><g><title>deno`core::ptr::read_unaligned (2 samples, 0.01%)</title><rect x="6.1451%" y="581" width="0.0128%" height="15" fill="rgb(252,35,15)" fg:x="963" fg:w="2"/><text x="6.3951%" y="591.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (27 samples, 0.17%)</title><rect x="5.9983%" y="661" width="0.1723%" height="15" fill="rgb(248,181,18)" fg:x="940" fg:w="27"/><text x="6.2483%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (19 samples, 0.12%)</title><rect x="6.0494%" y="645" width="0.1212%" height="15" fill="rgb(233,39,42)" fg:x="948" fg:w="19"/><text x="6.2994%" y="655.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (17 samples, 0.11%)</title><rect x="6.0622%" y="629" width="0.1085%" height="15" fill="rgb(238,110,33)" fg:x="950" fg:w="17"/><text x="6.3122%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (14 samples, 0.09%)</title><rect x="6.0813%" y="613" width="0.0893%" height="15" fill="rgb(233,195,10)" fg:x="953" fg:w="14"/><text x="6.3313%" y="623.50"></text></g><g><title>deno`hashbrown::raw::h2 (2 samples, 0.01%)</title><rect x="6.1579%" y="597" width="0.0128%" height="15" fill="rgb(254,105,3)" fg:x="965" fg:w="2"/><text x="6.4079%" y="607.50"></text></g><g><title>deno`core::cmp::Ord::min (2 samples, 0.01%)</title><rect x="6.1579%" y="581" width="0.0128%" height="15" fill="rgb(221,225,9)" fg:x="965" fg:w="2"/><text x="6.4079%" y="591.50"></text></g><g><title>deno`core::cmp::min_by (2 samples, 0.01%)</title><rect x="6.1579%" y="565" width="0.0128%" height="15" fill="rgb(224,227,45)" fg:x="965" fg:w="2"/><text x="6.4079%" y="575.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (149 samples, 0.95%)</title><rect x="5.2262%" y="757" width="0.9508%" height="15" fill="rgb(229,198,43)" fg:x="819" fg:w="149"/><text x="5.4762%" y="767.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (61 samples, 0.39%)</title><rect x="5.7878%" y="741" width="0.3893%" height="15" fill="rgb(206,209,35)" fg:x="907" fg:w="61"/><text x="6.0378%" y="751.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (31 samples, 0.20%)</title><rect x="5.9792%" y="725" width="0.1978%" height="15" fill="rgb(245,195,53)" fg:x="937" fg:w="31"/><text x="6.2292%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (29 samples, 0.19%)</title><rect x="5.9920%" y="709" width="0.1851%" height="15" fill="rgb(240,92,26)" fg:x="939" fg:w="29"/><text x="6.2420%" y="719.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (28 samples, 0.18%)</title><rect x="5.9983%" y="693" width="0.1787%" height="15" fill="rgb(207,40,23)" fg:x="940" fg:w="28"/><text x="6.2483%" y="703.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (28 samples, 0.18%)</title><rect x="5.9983%" y="677" width="0.1787%" height="15" fill="rgb(223,111,35)" fg:x="940" fg:w="28"/><text x="6.2483%" y="687.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="6.1898%" y="741" width="0.0319%" height="15" fill="rgb(229,147,28)" fg:x="970" fg:w="5"/><text x="6.4398%" y="751.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.03%)</title><rect x="6.1962%" y="725" width="0.0255%" height="15" fill="rgb(211,29,28)" fg:x="971" fg:w="4"/><text x="6.4462%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="6.2025%" y="709" width="0.0191%" height="15" fill="rgb(228,72,33)" fg:x="972" fg:w="3"/><text x="6.4525%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="6.2025%" y="693" width="0.0191%" height="15" fill="rgb(205,214,31)" fg:x="972" fg:w="3"/><text x="6.4525%" y="703.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="6.2025%" y="677" width="0.0191%" height="15" fill="rgb(224,111,15)" fg:x="972" fg:w="3"/><text x="6.4525%" y="687.50"></text></g><g><title>deno`hashbrown::map::make_hash (3 samples, 0.02%)</title><rect x="6.2281%" y="677" width="0.0191%" height="15" fill="rgb(253,21,26)" fg:x="976" fg:w="3"/><text x="6.4781%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="6.2281%" y="661" width="0.0191%" height="15" fill="rgb(245,139,43)" fg:x="976" fg:w="3"/><text x="6.4781%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.01%)</title><rect x="6.2344%" y="645" width="0.0128%" height="15" fill="rgb(252,170,7)" fg:x="977" fg:w="2"/><text x="6.4844%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (2 samples, 0.01%)</title><rect x="6.2344%" y="629" width="0.0128%" height="15" fill="rgb(231,118,14)" fg:x="977" fg:w="2"/><text x="6.4844%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (2 samples, 0.01%)</title><rect x="6.2344%" y="613" width="0.0128%" height="15" fill="rgb(238,83,0)" fg:x="977" fg:w="2"/><text x="6.4844%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (2 samples, 0.01%)</title><rect x="6.2344%" y="597" width="0.0128%" height="15" fill="rgb(221,39,39)" fg:x="977" fg:w="2"/><text x="6.4844%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="6.2344%" y="581" width="0.0128%" height="15" fill="rgb(222,119,46)" fg:x="977" fg:w="2"/><text x="6.4844%" y="591.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="6.2344%" y="565" width="0.0128%" height="15" fill="rgb(222,165,49)" fg:x="977" fg:w="2"/><text x="6.4844%" y="575.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (5 samples, 0.03%)</title><rect x="6.2983%" y="597" width="0.0319%" height="15" fill="rgb(219,113,52)" fg:x="987" fg:w="5"/><text x="6.5483%" y="607.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8 samples, 0.05%)</title><rect x="6.2919%" y="629" width="0.0510%" height="15" fill="rgb(214,7,15)" fg:x="986" fg:w="8"/><text x="6.5419%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (7 samples, 0.04%)</title><rect x="6.2983%" y="613" width="0.0447%" height="15" fill="rgb(235,32,4)" fg:x="987" fg:w="7"/><text x="6.5483%" y="623.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (2 samples, 0.01%)</title><rect x="6.3429%" y="629" width="0.0128%" height="15" fill="rgb(238,90,54)" fg:x="994" fg:w="2"/><text x="6.5929%" y="639.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (4 samples, 0.03%)</title><rect x="6.3557%" y="629" width="0.0255%" height="15" fill="rgb(213,208,19)" fg:x="996" fg:w="4"/><text x="6.6057%" y="639.50"></text></g><g><title>deno`hashbrown::raw::generic::repeat (2 samples, 0.01%)</title><rect x="6.3685%" y="613" width="0.0128%" height="15" fill="rgb(233,156,4)" fg:x="998" fg:w="2"/><text x="6.6185%" y="623.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (35 samples, 0.22%)</title><rect x="6.1770%" y="757" width="0.2233%" height="15" fill="rgb(207,194,5)" fg:x="968" fg:w="35"/><text x="6.4270%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (27 samples, 0.17%)</title><rect x="6.2281%" y="741" width="0.1723%" height="15" fill="rgb(206,111,30)" fg:x="976" fg:w="27"/><text x="6.4781%" y="751.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (27 samples, 0.17%)</title><rect x="6.2281%" y="725" width="0.1723%" height="15" fill="rgb(243,70,54)" fg:x="976" fg:w="27"/><text x="6.4781%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (27 samples, 0.17%)</title><rect x="6.2281%" y="709" width="0.1723%" height="15" fill="rgb(242,28,8)" fg:x="976" fg:w="27"/><text x="6.4781%" y="719.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (27 samples, 0.17%)</title><rect x="6.2281%" y="693" width="0.1723%" height="15" fill="rgb(219,106,18)" fg:x="976" fg:w="27"/><text x="6.4781%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (24 samples, 0.15%)</title><rect x="6.2472%" y="677" width="0.1531%" height="15" fill="rgb(244,222,10)" fg:x="979" fg:w="24"/><text x="6.4972%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (22 samples, 0.14%)</title><rect x="6.2600%" y="661" width="0.1404%" height="15" fill="rgb(236,179,52)" fg:x="981" fg:w="22"/><text x="6.5100%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (19 samples, 0.12%)</title><rect x="6.2791%" y="645" width="0.1212%" height="15" fill="rgb(213,23,39)" fg:x="984" fg:w="19"/><text x="6.5291%" y="655.50"></text></g><g><title>deno`hashbrown::raw::h2 (3 samples, 0.02%)</title><rect x="6.3812%" y="629" width="0.0191%" height="15" fill="rgb(238,48,10)" fg:x="1000" fg:w="3"/><text x="6.6312%" y="639.50"></text></g><g><title>deno`core::cmp::Ord::min (3 samples, 0.02%)</title><rect x="6.3812%" y="613" width="0.0191%" height="15" fill="rgb(251,196,23)" fg:x="1000" fg:w="3"/><text x="6.6312%" y="623.50"></text></g><g><title>deno`core::cmp::min_by (3 samples, 0.02%)</title><rect x="6.3812%" y="597" width="0.0191%" height="15" fill="rgb(250,152,24)" fg:x="1000" fg:w="3"/><text x="6.6312%" y="607.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::v8_isolate (2 samples, 0.01%)</title><rect x="6.4004%" y="757" width="0.0128%" height="15" fill="rgb(209,150,17)" fg:x="1003" fg:w="2"/><text x="6.6504%" y="767.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap (2 samples, 0.01%)</title><rect x="6.4004%" y="741" width="0.0128%" height="15" fill="rgb(234,202,34)" fg:x="1003" fg:w="2"/><text x="6.6504%" y="751.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.03%)</title><rect x="6.4259%" y="741" width="0.0255%" height="15" fill="rgb(253,148,53)" fg:x="1007" fg:w="4"/><text x="6.6759%" y="751.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (3 samples, 0.02%)</title><rect x="6.4323%" y="725" width="0.0191%" height="15" fill="rgb(218,129,16)" fg:x="1008" fg:w="3"/><text x="6.6823%" y="735.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (3 samples, 0.02%)</title><rect x="6.4323%" y="709" width="0.0191%" height="15" fill="rgb(216,85,19)" fg:x="1008" fg:w="3"/><text x="6.6823%" y="719.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (2 samples, 0.01%)</title><rect x="6.4386%" y="693" width="0.0128%" height="15" fill="rgb(235,228,7)" fg:x="1009" fg:w="2"/><text x="6.6886%" y="703.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call::_{{closure}} (2 samples, 0.01%)</title><rect x="6.4514%" y="741" width="0.0128%" height="15" fill="rgb(245,175,0)" fg:x="1011" fg:w="2"/><text x="6.7014%" y="751.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (2 samples, 0.01%)</title><rect x="6.5025%" y="693" width="0.0128%" height="15" fill="rgb(208,168,36)" fg:x="1019" fg:w="2"/><text x="6.7525%" y="703.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (12 samples, 0.08%)</title><rect x="6.5216%" y="677" width="0.0766%" height="15" fill="rgb(246,171,24)" fg:x="1022" fg:w="12"/><text x="6.7716%" y="687.50"></text></g><g><title>deno`Builtins_JSEntry (7 samples, 0.04%)</title><rect x="6.5535%" y="661" width="0.0447%" height="15" fill="rgb(215,142,24)" fg:x="1027" fg:w="7"/><text x="6.8035%" y="671.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (5 samples, 0.03%)</title><rect x="6.5663%" y="645" width="0.0319%" height="15" fill="rgb(250,187,7)" fg:x="1029" fg:w="5"/><text x="6.8163%" y="655.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (4 samples, 0.03%)</title><rect x="6.5982%" y="677" width="0.0255%" height="15" fill="rgb(228,66,33)" fg:x="1034" fg:w="4"/><text x="6.8482%" y="687.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (19 samples, 0.12%)</title><rect x="6.5152%" y="693" width="0.1212%" height="15" fill="rgb(234,215,21)" fg:x="1021" fg:w="19"/><text x="6.7652%" y="703.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (26 samples, 0.17%)</title><rect x="6.4833%" y="709" width="0.1659%" height="15" fill="rgb(222,191,20)" fg:x="1016" fg:w="26"/><text x="6.7333%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="6.6556%" y="693" width="0.0191%" height="15" fill="rgb(245,79,54)" fg:x="1043" fg:w="3"/><text x="6.9056%" y="703.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call::_{{closure}} (34 samples, 0.22%)</title><rect x="6.4769%" y="725" width="0.2170%" height="15" fill="rgb(240,10,37)" fg:x="1015" fg:w="34"/><text x="6.7269%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (6 samples, 0.04%)</title><rect x="6.6556%" y="709" width="0.0383%" height="15" fill="rgb(214,192,32)" fg:x="1043" fg:w="6"/><text x="6.9056%" y="719.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw (2 samples, 0.01%)</title><rect x="6.6939%" y="725" width="0.0128%" height="15" fill="rgb(209,36,54)" fg:x="1049" fg:w="2"/><text x="6.9439%" y="735.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call (47 samples, 0.30%)</title><rect x="6.4131%" y="757" width="0.2999%" height="15" fill="rgb(220,10,11)" fg:x="1005" fg:w="47"/><text x="6.6631%" y="767.50"></text></g><g><title>deno`v8::scope::HandleScope&lt;()&gt;::cast_local (39 samples, 0.25%)</title><rect x="6.4642%" y="741" width="0.2489%" height="15" fill="rgb(221,106,17)" fg:x="1013" fg:w="39"/><text x="6.7142%" y="751.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as v8::handle::Handle&gt;::get_handle_info (3 samples, 0.02%)</title><rect x="6.7194%" y="725" width="0.0191%" height="15" fill="rgb(251,142,44)" fg:x="1053" fg:w="3"/><text x="6.9694%" y="735.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.02%)</title><rect x="6.7194%" y="709" width="0.0191%" height="15" fill="rgb(238,13,15)" fg:x="1053" fg:w="3"/><text x="6.9694%" y="719.50"></text></g><g><title>deno`&lt;v8::handle::HandleHost as core::convert::From&lt;&amp;v8::isolate::IsolateHandle&gt;&gt;::from (3 samples, 0.02%)</title><rect x="6.7194%" y="693" width="0.0191%" height="15" fill="rgb(208,107,27)" fg:x="1053" fg:w="3"/><text x="6.9694%" y="703.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="6.7386%" y="709" width="0.0128%" height="15" fill="rgb(205,136,37)" fg:x="1056" fg:w="2"/><text x="6.9886%" y="719.50"></text></g><g><title>deno`v8::handle::Global&lt;T&gt;::open (9 samples, 0.06%)</title><rect x="6.7130%" y="757" width="0.0574%" height="15" fill="rgb(250,205,27)" fg:x="1052" fg:w="9"/><text x="6.9630%" y="767.50"></text></g><g><title>deno`v8::handle::Handle::open (8 samples, 0.05%)</title><rect x="6.7194%" y="741" width="0.0510%" height="15" fill="rgb(210,80,43)" fg:x="1053" fg:w="8"/><text x="6.9694%" y="751.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (5 samples, 0.03%)</title><rect x="6.7386%" y="725" width="0.0319%" height="15" fill="rgb(247,160,36)" fg:x="1056" fg:w="5"/><text x="6.9886%" y="735.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_host (3 samples, 0.02%)</title><rect x="6.7513%" y="709" width="0.0191%" height="15" fill="rgb(234,13,49)" fg:x="1058" fg:w="3"/><text x="7.0013%" y="719.50"></text></g><g><title>deno`v8::handle::HandleHost::match_host (3 samples, 0.02%)</title><rect x="6.7513%" y="693" width="0.0191%" height="15" fill="rgb(234,122,0)" fg:x="1058" fg:w="3"/><text x="7.0013%" y="703.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="6.7577%" y="677" width="0.0128%" height="15" fill="rgb(207,146,38)" fg:x="1059" fg:w="2"/><text x="7.0077%" y="687.50"></text></g><g><title>deno`v8::Isolate::IsExecutionTerminating (3 samples, 0.02%)</title><rect x="6.7768%" y="741" width="0.0191%" height="15" fill="rgb(207,177,25)" fg:x="1062" fg:w="3"/><text x="7.0268%" y="751.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="6.7960%" y="693" width="0.0128%" height="15" fill="rgb(211,178,42)" fg:x="1065" fg:w="2"/><text x="7.0460%" y="703.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (6 samples, 0.04%)</title><rect x="6.7960%" y="741" width="0.0383%" height="15" fill="rgb(230,69,54)" fg:x="1065" fg:w="6"/><text x="7.0460%" y="751.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::new (6 samples, 0.04%)</title><rect x="6.7960%" y="725" width="0.0383%" height="15" fill="rgb(214,135,41)" fg:x="1065" fg:w="6"/><text x="7.0460%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (6 samples, 0.04%)</title><rect x="6.7960%" y="709" width="0.0383%" height="15" fill="rgb(237,67,25)" fg:x="1065" fg:w="6"/><text x="7.0460%" y="719.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (4 samples, 0.03%)</title><rect x="6.8088%" y="693" width="0.0255%" height="15" fill="rgb(222,189,50)" fg:x="1067" fg:w="4"/><text x="7.0588%" y="703.50"></text></g><g><title>deno`alloc::sync::data_offset (2 samples, 0.01%)</title><rect x="6.8215%" y="677" width="0.0128%" height="15" fill="rgb(245,148,34)" fg:x="1069" fg:w="2"/><text x="7.0715%" y="687.50"></text></g><g><title>deno`std::sync::poison::Flag::done (3 samples, 0.02%)</title><rect x="6.8470%" y="693" width="0.0191%" height="15" fill="rgb(222,29,6)" fg:x="1073" fg:w="3"/><text x="7.0970%" y="703.50"></text></g><g><title>deno`std::thread::panicking (3 samples, 0.02%)</title><rect x="6.8470%" y="677" width="0.0191%" height="15" fill="rgb(221,189,43)" fg:x="1073" fg:w="3"/><text x="7.0970%" y="687.50"></text></g><g><title>deno`std::panicking::panicking (3 samples, 0.02%)</title><rect x="6.8470%" y="661" width="0.0191%" height="15" fill="rgb(207,36,27)" fg:x="1073" fg:w="3"/><text x="7.0970%" y="671.50"></text></g><g><title>deno`std::panicking::panic_count::count_is_zero (3 samples, 0.02%)</title><rect x="6.8470%" y="645" width="0.0191%" height="15" fill="rgb(217,90,24)" fg:x="1073" fg:w="3"/><text x="7.0970%" y="655.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="6.8534%" y="629" width="0.0128%" height="15" fill="rgb(224,66,35)" fg:x="1074" fg:w="2"/><text x="7.1034%" y="639.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="6.8534%" y="613" width="0.0128%" height="15" fill="rgb(221,13,50)" fg:x="1074" fg:w="2"/><text x="7.1034%" y="623.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (5 samples, 0.03%)</title><rect x="6.8470%" y="725" width="0.0319%" height="15" fill="rgb(236,68,49)" fg:x="1073" fg:w="5"/><text x="7.0970%" y="735.50"></text></g><g><title>deno`&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="6.8470%" y="709" width="0.0319%" height="15" fill="rgb(229,146,28)" fg:x="1073" fg:w="5"/><text x="7.0970%" y="719.50"></text></g><g><title>deno`std::sys_common::mutex::MovableMutex::raw_unlock (2 samples, 0.01%)</title><rect x="6.8662%" y="693" width="0.0128%" height="15" fill="rgb(225,31,38)" fg:x="1076" fg:w="2"/><text x="7.1162%" y="703.50"></text></g><g><title>deno`std::sync::poison::Flag::borrow (4 samples, 0.03%)</title><rect x="6.8917%" y="693" width="0.0255%" height="15" fill="rgb(250,208,3)" fg:x="1080" fg:w="4"/><text x="7.1417%" y="703.50"></text></g><g><title>deno`std::sync::poison::Flag::get (4 samples, 0.03%)</title><rect x="6.8917%" y="677" width="0.0255%" height="15" fill="rgb(246,54,23)" fg:x="1080" fg:w="4"/><text x="7.1417%" y="687.50"></text></g><g><title>deno`core::sync::atomic::AtomicBool::load (3 samples, 0.02%)</title><rect x="6.8981%" y="661" width="0.0191%" height="15" fill="rgb(243,76,11)" fg:x="1081" fg:w="3"/><text x="7.1481%" y="671.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="6.9045%" y="645" width="0.0128%" height="15" fill="rgb(245,21,50)" fg:x="1082" fg:w="2"/><text x="7.1545%" y="655.50"></text></g><g><title>deno`std::sync::mutex::MutexGuard&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="6.8789%" y="709" width="0.0447%" height="15" fill="rgb(228,9,43)" fg:x="1078" fg:w="7"/><text x="7.1289%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::is_execution_terminating (29 samples, 0.19%)</title><rect x="6.7705%" y="757" width="0.1851%" height="15" fill="rgb(208,100,47)" fg:x="1061" fg:w="29"/><text x="7.0205%" y="767.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::is_execution_terminating (19 samples, 0.12%)</title><rect x="6.8343%" y="741" width="0.1212%" height="15" fill="rgb(232,26,8)" fg:x="1071" fg:w="19"/><text x="7.0843%" y="751.50"></text></g><g><title>deno`std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 0.08%)</title><rect x="6.8789%" y="725" width="0.0766%" height="15" fill="rgb(216,166,38)" fg:x="1078" fg:w="12"/><text x="7.1289%" y="735.50"></text></g><g><title>deno`std::sys_common::mutex::MovableMutex::raw_lock (5 samples, 0.03%)</title><rect x="6.9236%" y="709" width="0.0319%" height="15" fill="rgb(251,202,51)" fg:x="1085" fg:w="5"/><text x="7.1736%" y="719.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="6.9428%" y="693" width="0.0128%" height="15" fill="rgb(254,216,34)" fg:x="1088" fg:w="2"/><text x="7.1928%" y="703.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::is_execution_terminating (2 samples, 0.01%)</title><rect x="6.9555%" y="757" width="0.0128%" height="15" fill="rgb(251,32,27)" fg:x="1090" fg:w="2"/><text x="7.2055%" y="767.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw (3 samples, 0.02%)</title><rect x="6.9810%" y="725" width="0.0191%" height="15" fill="rgb(208,127,28)" fg:x="1094" fg:w="3"/><text x="7.2310%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="7.0193%" y="709" width="0.0128%" height="15" fill="rgb(224,137,22)" fg:x="1100" fg:w="2"/><text x="7.2693%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (5 samples, 0.03%)</title><rect x="7.0066%" y="725" width="0.0319%" height="15" fill="rgb(254,70,32)" fg:x="1098" fg:w="5"/><text x="7.2566%" y="735.50"></text></g><g><title>deno`v8::primitives::undefined (12 samples, 0.08%)</title><rect x="6.9683%" y="757" width="0.0766%" height="15" fill="rgb(229,75,37)" fg:x="1092" fg:w="12"/><text x="7.2183%" y="767.50"></text></g><g><title>deno`v8::scope::HandleScope&lt;()&gt;::cast_local (11 samples, 0.07%)</title><rect x="6.9747%" y="741" width="0.0702%" height="15" fill="rgb(252,64,23)" fg:x="1093" fg:w="11"/><text x="7.2247%" y="751.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (2 samples, 0.01%)</title><rect x="7.0704%" y="709" width="0.0128%" height="15" fill="rgb(232,162,48)" fg:x="1108" fg:w="2"/><text x="7.3204%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&lt;C&gt;&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (6 samples, 0.04%)</title><rect x="7.0512%" y="741" width="0.0383%" height="15" fill="rgb(246,160,12)" fg:x="1105" fg:w="6"/><text x="7.3012%" y="751.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (5 samples, 0.03%)</title><rect x="7.0576%" y="725" width="0.0319%" height="15" fill="rgb(247,166,0)" fg:x="1106" fg:w="5"/><text x="7.3076%" y="735.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::exception::_{{closure}} (5 samples, 0.03%)</title><rect x="7.1087%" y="725" width="0.0319%" height="15" fill="rgb(249,219,21)" fg:x="1114" fg:w="5"/><text x="7.3587%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_try_catch (4 samples, 0.03%)</title><rect x="7.1151%" y="709" width="0.0255%" height="15" fill="rgb(205,209,3)" fg:x="1115" fg:w="4"/><text x="7.3651%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (5 samples, 0.03%)</title><rect x="7.1406%" y="725" width="0.0319%" height="15" fill="rgb(243,44,1)" fg:x="1119" fg:w="5"/><text x="7.3906%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (3 samples, 0.02%)</title><rect x="7.1533%" y="709" width="0.0191%" height="15" fill="rgb(206,159,16)" fg:x="1121" fg:w="3"/><text x="7.4033%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="7.1533%" y="693" width="0.0191%" height="15" fill="rgb(244,77,30)" fg:x="1121" fg:w="3"/><text x="7.4033%" y="703.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (3 samples, 0.02%)</title><rect x="7.1533%" y="677" width="0.0191%" height="15" fill="rgb(218,69,12)" fg:x="1121" fg:w="3"/><text x="7.4033%" y="687.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::exception (20 samples, 0.13%)</title><rect x="7.0512%" y="757" width="0.1276%" height="15" fill="rgb(212,87,7)" fg:x="1105" fg:w="20"/><text x="7.3012%" y="767.50"></text></g><g><title>deno`v8::scope::HandleScope&lt;()&gt;::cast_local (14 samples, 0.09%)</title><rect x="7.0895%" y="741" width="0.0893%" height="15" fill="rgb(245,114,25)" fg:x="1111" fg:w="14"/><text x="7.3395%" y="751.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::has_terminated (3 samples, 0.02%)</title><rect x="7.1789%" y="757" width="0.0191%" height="15" fill="rgb(210,61,42)" fg:x="1125" fg:w="3"/><text x="7.4289%" y="767.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::get_raw (3 samples, 0.02%)</title><rect x="7.1789%" y="741" width="0.0191%" height="15" fill="rgb(211,52,33)" fg:x="1125" fg:w="3"/><text x="7.4289%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_try_catch (2 samples, 0.01%)</title><rect x="7.1852%" y="725" width="0.0128%" height="15" fill="rgb(234,58,33)" fg:x="1126" fg:w="2"/><text x="7.4352%" y="735.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="7.2299%" y="709" width="0.0128%" height="15" fill="rgb(220,115,36)" fg:x="1133" fg:w="2"/><text x="7.4799%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (3 samples, 0.02%)</title><rect x="7.2427%" y="709" width="0.0191%" height="15" fill="rgb(243,153,54)" fg:x="1135" fg:w="3"/><text x="7.4927%" y="719.50"></text></g><g><title>deno`&lt;T as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (10 samples, 0.06%)</title><rect x="7.2044%" y="741" width="0.0638%" height="15" fill="rgb(251,47,18)" fg:x="1129" fg:w="10"/><text x="7.4544%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (8 samples, 0.05%)</title><rect x="7.2172%" y="725" width="0.0510%" height="15" fill="rgb(242,102,42)" fg:x="1131" fg:w="8"/><text x="7.4672%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (6 samples, 0.04%)</title><rect x="7.2810%" y="741" width="0.0383%" height="15" fill="rgb(234,31,38)" fg:x="1141" fg:w="6"/><text x="7.5310%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="7.3001%" y="725" width="0.0191%" height="15" fill="rgb(221,117,51)" fg:x="1144" fg:w="3"/><text x="7.5501%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="7.3001%" y="709" width="0.0191%" height="15" fill="rgb(212,20,18)" fg:x="1144" fg:w="3"/><text x="7.5501%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (2 samples, 0.01%)</title><rect x="7.3512%" y="709" width="0.0128%" height="15" fill="rgb(245,133,36)" fg:x="1152" fg:w="2"/><text x="7.6012%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::allocate_or_reuse_scope_data (2 samples, 0.01%)</title><rect x="7.3639%" y="709" width="0.0128%" height="15" fill="rgb(212,6,19)" fg:x="1154" fg:w="2"/><text x="7.6139%" y="719.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="7.3639%" y="693" width="0.0128%" height="15" fill="rgb(218,1,36)" fg:x="1154" fg:w="2"/><text x="7.6139%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_isolate_mut (2 samples, 0.01%)</title><rect x="7.3767%" y="709" width="0.0128%" height="15" fill="rgb(246,84,54)" fg:x="1156" fg:w="2"/><text x="7.6267%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data::_{{closure}}::_{{closure}} (4 samples, 0.03%)</title><rect x="7.3958%" y="677" width="0.0255%" height="15" fill="rgb(242,110,6)" fg:x="1159" fg:w="4"/><text x="7.6458%" y="687.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="7.3958%" y="661" width="0.0255%" height="15" fill="rgb(214,47,5)" fg:x="1159" fg:w="4"/><text x="7.6458%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeTypeSpecificData::init_with (7 samples, 0.04%)</title><rect x="7.3958%" y="693" width="0.0447%" height="15" fill="rgb(218,159,25)" fg:x="1159" fg:w="7"/><text x="7.6458%" y="703.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="7.4214%" y="677" width="0.0191%" height="15" fill="rgb(215,211,28)" fg:x="1163" fg:w="3"/><text x="7.6714%" y="687.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::drain_macrotasks (612 samples, 3.91%)</title><rect x="3.5480%" y="773" width="3.9053%" height="15" fill="rgb(238,59,32)" fg:x="556" fg:w="612"/><text x="3.7980%" y="783.50">deno..</text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::new (40 samples, 0.26%)</title><rect x="7.1980%" y="757" width="0.2552%" height="15" fill="rgb(226,82,3)" fg:x="1128" fg:w="40"/><text x="7.4480%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (20 samples, 0.13%)</title><rect x="7.3256%" y="741" width="0.1276%" height="15" fill="rgb(240,164,32)" fg:x="1148" fg:w="20"/><text x="7.5756%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_scope_data_with (18 samples, 0.11%)</title><rect x="7.3384%" y="725" width="0.1149%" height="15" fill="rgb(232,46,7)" fg:x="1150" fg:w="18"/><text x="7.5884%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data::_{{closure}} (10 samples, 0.06%)</title><rect x="7.3894%" y="709" width="0.0638%" height="15" fill="rgb(229,129,53)" fg:x="1158" fg:w="10"/><text x="7.6394%" y="719.50"></text></g><g><title>deno`v8::scope::raw::TryCatch::init (2 samples, 0.01%)</title><rect x="7.4405%" y="693" width="0.0128%" height="15" fill="rgb(234,188,29)" fg:x="1166" fg:w="2"/><text x="7.6905%" y="703.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.02%)</title><rect x="7.4660%" y="757" width="0.0191%" height="15" fill="rgb(246,141,4)" fg:x="1170" fg:w="3"/><text x="7.7160%" y="767.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.01%)</title><rect x="7.4852%" y="757" width="0.0128%" height="15" fill="rgb(229,23,39)" fg:x="1173" fg:w="2"/><text x="7.7352%" y="767.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_mut (4 samples, 0.03%)</title><rect x="7.4979%" y="757" width="0.0255%" height="15" fill="rgb(206,12,3)" fg:x="1175" fg:w="4"/><text x="7.7479%" y="767.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::strong (2 samples, 0.01%)</title><rect x="7.5235%" y="709" width="0.0128%" height="15" fill="rgb(252,226,20)" fg:x="1179" fg:w="2"/><text x="7.7735%" y="719.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="7.5490%" y="677" width="0.0128%" height="15" fill="rgb(216,123,35)" fg:x="1183" fg:w="2"/><text x="7.7990%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (8 samples, 0.05%)</title><rect x="7.5235%" y="757" width="0.0510%" height="15" fill="rgb(212,68,40)" fg:x="1179" fg:w="8"/><text x="7.7735%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.05%)</title><rect x="7.5235%" y="741" width="0.0510%" height="15" fill="rgb(254,125,32)" fg:x="1179" fg:w="8"/><text x="7.7735%" y="751.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (8 samples, 0.05%)</title><rect x="7.5235%" y="725" width="0.0510%" height="15" fill="rgb(253,97,22)" fg:x="1179" fg:w="8"/><text x="7.7735%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (6 samples, 0.04%)</title><rect x="7.5362%" y="709" width="0.0383%" height="15" fill="rgb(241,101,14)" fg:x="1181" fg:w="6"/><text x="7.7862%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="7.5490%" y="693" width="0.0255%" height="15" fill="rgb(238,103,29)" fg:x="1183" fg:w="4"/><text x="7.7990%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (3 samples, 0.02%)</title><rect x="7.5745%" y="757" width="0.0191%" height="15" fill="rgb(233,195,47)" fg:x="1187" fg:w="3"/><text x="7.8245%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (3 samples, 0.02%)</title><rect x="7.5745%" y="741" width="0.0191%" height="15" fill="rgb(246,218,30)" fg:x="1187" fg:w="3"/><text x="7.8245%" y="751.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="7.5745%" y="725" width="0.0191%" height="15" fill="rgb(219,145,47)" fg:x="1187" fg:w="3"/><text x="7.8245%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="7.5745%" y="709" width="0.0191%" height="15" fill="rgb(243,12,26)" fg:x="1187" fg:w="3"/><text x="7.8245%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="7.5745%" y="693" width="0.0191%" height="15" fill="rgb(214,87,16)" fg:x="1187" fg:w="3"/><text x="7.8245%" y="703.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="7.5809%" y="677" width="0.0128%" height="15" fill="rgb(208,99,42)" fg:x="1188" fg:w="2"/><text x="7.8309%" y="687.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="7.6000%" y="741" width="0.0128%" height="15" fill="rgb(253,99,2)" fg:x="1191" fg:w="2"/><text x="7.8500%" y="751.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.01%)</title><rect x="7.6000%" y="725" width="0.0128%" height="15" fill="rgb(220,168,23)" fg:x="1191" fg:w="2"/><text x="7.8500%" y="735.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::strong (2 samples, 0.01%)</title><rect x="7.6000%" y="709" width="0.0128%" height="15" fill="rgb(242,38,24)" fg:x="1191" fg:w="2"/><text x="7.8500%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="7.6256%" y="725" width="0.0191%" height="15" fill="rgb(225,182,9)" fg:x="1195" fg:w="3"/><text x="7.8756%" y="735.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="7.7021%" y="565" width="0.0128%" height="15" fill="rgb(243,178,37)" fg:x="1207" fg:w="2"/><text x="7.9521%" y="575.50"></text></g><g><title>deno`hashbrown::map::make_hash (9 samples, 0.06%)</title><rect x="7.6638%" y="677" width="0.0574%" height="15" fill="rgb(232,139,19)" fg:x="1201" fg:w="9"/><text x="7.9138%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (8 samples, 0.05%)</title><rect x="7.6702%" y="661" width="0.0510%" height="15" fill="rgb(225,201,24)" fg:x="1202" fg:w="8"/><text x="7.9202%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="7.6957%" y="645" width="0.0255%" height="15" fill="rgb(221,47,46)" fg:x="1206" fg:w="4"/><text x="7.9457%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (4 samples, 0.03%)</title><rect x="7.6957%" y="629" width="0.0255%" height="15" fill="rgb(249,23,13)" fg:x="1206" fg:w="4"/><text x="7.9457%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (4 samples, 0.03%)</title><rect x="7.6957%" y="613" width="0.0255%" height="15" fill="rgb(219,9,5)" fg:x="1206" fg:w="4"/><text x="7.9457%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (4 samples, 0.03%)</title><rect x="7.6957%" y="597" width="0.0255%" height="15" fill="rgb(254,171,16)" fg:x="1206" fg:w="4"/><text x="7.9457%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="7.6957%" y="581" width="0.0255%" height="15" fill="rgb(230,171,20)" fg:x="1206" fg:w="4"/><text x="7.9457%" y="591.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.01%)</title><rect x="7.7404%" y="645" width="0.0128%" height="15" fill="rgb(210,71,41)" fg:x="1213" fg:w="2"/><text x="7.9904%" y="655.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="7.7596%" y="629" width="0.0128%" height="15" fill="rgb(206,173,20)" fg:x="1216" fg:w="2"/><text x="8.0096%" y="639.50"></text></g><g><title>deno`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="7.7723%" y="629" width="0.0128%" height="15" fill="rgb(233,88,34)" fg:x="1218" fg:w="2"/><text x="8.0223%" y="639.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (3 samples, 0.02%)</title><rect x="7.8042%" y="597" width="0.0191%" height="15" fill="rgb(223,209,46)" fg:x="1223" fg:w="3"/><text x="8.0542%" y="607.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.02%)</title><rect x="7.8234%" y="597" width="0.0191%" height="15" fill="rgb(250,43,18)" fg:x="1226" fg:w="3"/><text x="8.0734%" y="607.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (10 samples, 0.06%)</title><rect x="7.7851%" y="629" width="0.0638%" height="15" fill="rgb(208,13,10)" fg:x="1220" fg:w="10"/><text x="8.0351%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (8 samples, 0.05%)</title><rect x="7.7978%" y="613" width="0.0510%" height="15" fill="rgb(212,200,36)" fg:x="1222" fg:w="8"/><text x="8.0478%" y="623.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.01%)</title><rect x="7.8489%" y="629" width="0.0128%" height="15" fill="rgb(225,90,30)" fg:x="1230" fg:w="2"/><text x="8.0989%" y="639.50"></text></g><g><title>deno`core::num::_&lt;impl u64&gt;::from_ne_bytes (3 samples, 0.02%)</title><rect x="7.8808%" y="613" width="0.0191%" height="15" fill="rgb(236,182,39)" fg:x="1235" fg:w="3"/><text x="8.1308%" y="623.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (6 samples, 0.04%)</title><rect x="7.8680%" y="629" width="0.0383%" height="15" fill="rgb(212,144,35)" fg:x="1233" fg:w="6"/><text x="8.1180%" y="639.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (42 samples, 0.27%)</title><rect x="7.6511%" y="693" width="0.2680%" height="15" fill="rgb(228,63,44)" fg:x="1199" fg:w="42"/><text x="7.9011%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (31 samples, 0.20%)</title><rect x="7.7213%" y="677" width="0.1978%" height="15" fill="rgb(228,109,6)" fg:x="1210" fg:w="31"/><text x="7.9713%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (29 samples, 0.19%)</title><rect x="7.7340%" y="661" width="0.1851%" height="15" fill="rgb(238,117,24)" fg:x="1212" fg:w="29"/><text x="7.9840%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (26 samples, 0.17%)</title><rect x="7.7532%" y="645" width="0.1659%" height="15" fill="rgb(242,26,26)" fg:x="1215" fg:w="26"/><text x="8.0032%" y="655.50"></text></g><g><title>deno`hashbrown::raw::h2 (2 samples, 0.01%)</title><rect x="7.9063%" y="629" width="0.0128%" height="15" fill="rgb(221,92,48)" fg:x="1239" fg:w="2"/><text x="8.1563%" y="639.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::drain_nexttick (74 samples, 0.47%)</title><rect x="7.4533%" y="773" width="0.4722%" height="15" fill="rgb(209,209,32)" fg:x="1168" fg:w="74"/><text x="7.7033%" y="783.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (51 samples, 0.33%)</title><rect x="7.6000%" y="757" width="0.3254%" height="15" fill="rgb(221,70,22)" fg:x="1191" fg:w="51"/><text x="7.8500%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (49 samples, 0.31%)</title><rect x="7.6128%" y="741" width="0.3127%" height="15" fill="rgb(248,145,5)" fg:x="1193" fg:w="49"/><text x="7.8628%" y="751.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (44 samples, 0.28%)</title><rect x="7.6447%" y="725" width="0.2808%" height="15" fill="rgb(226,116,26)" fg:x="1198" fg:w="44"/><text x="7.8947%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (44 samples, 0.28%)</title><rect x="7.6447%" y="709" width="0.2808%" height="15" fill="rgb(244,5,17)" fg:x="1198" fg:w="44"/><text x="7.8947%" y="719.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="7.9382%" y="741" width="0.0128%" height="15" fill="rgb(252,159,33)" fg:x="1244" fg:w="2"/><text x="8.1882%" y="751.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (6 samples, 0.04%)</title><rect x="7.9255%" y="757" width="0.0383%" height="15" fill="rgb(206,71,0)" fg:x="1242" fg:w="6"/><text x="8.1755%" y="767.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T&gt; as core::default::Default&gt;::default (2 samples, 0.01%)</title><rect x="7.9638%" y="757" width="0.0128%" height="15" fill="rgb(233,118,54)" fg:x="1248" fg:w="2"/><text x="8.2138%" y="767.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (8 samples, 0.05%)</title><rect x="7.9765%" y="757" width="0.0510%" height="15" fill="rgb(234,83,48)" fg:x="1250" fg:w="8"/><text x="8.2265%" y="767.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (7 samples, 0.04%)</title><rect x="7.9829%" y="741" width="0.0447%" height="15" fill="rgb(228,3,54)" fg:x="1251" fg:w="7"/><text x="8.2329%" y="751.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (6 samples, 0.04%)</title><rect x="7.9893%" y="725" width="0.0383%" height="15" fill="rgb(226,155,13)" fg:x="1252" fg:w="6"/><text x="8.2393%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="8.0020%" y="709" width="0.0255%" height="15" fill="rgb(241,28,37)" fg:x="1254" fg:w="4"/><text x="8.2520%" y="719.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="8.0403%" y="741" width="0.0191%" height="15" fill="rgb(233,93,10)" fg:x="1260" fg:w="3"/><text x="8.2903%" y="751.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="8.0595%" y="741" width="0.0191%" height="15" fill="rgb(225,113,19)" fg:x="1263" fg:w="3"/><text x="8.3095%" y="751.50"></text></g><g><title>deno`core::mem::take (9 samples, 0.06%)</title><rect x="8.0276%" y="757" width="0.0574%" height="15" fill="rgb(241,2,18)" fg:x="1258" fg:w="9"/><text x="8.2776%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="8.0850%" y="757" width="0.0128%" height="15" fill="rgb(228,207,21)" fg:x="1267" fg:w="2"/><text x="8.3350%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="8.0850%" y="741" width="0.0128%" height="15" fill="rgb(213,211,35)" fg:x="1267" fg:w="2"/><text x="8.3350%" y="751.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.02%)</title><rect x="8.1169%" y="725" width="0.0191%" height="15" fill="rgb(209,83,10)" fg:x="1272" fg:w="3"/><text x="8.3669%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;deno_core::runtime::DynImportModEvaluate&gt;&gt; (7 samples, 0.04%)</title><rect x="8.0978%" y="757" width="0.0447%" height="15" fill="rgb(209,164,1)" fg:x="1269" fg:w="7"/><text x="8.3478%" y="767.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="8.1041%" y="741" width="0.0383%" height="15" fill="rgb(213,184,43)" fg:x="1270" fg:w="6"/><text x="8.3541%" y="751.50"></text></g><g><title>deno`alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (3 samples, 0.02%)</title><rect x="8.1424%" y="725" width="0.0191%" height="15" fill="rgb(231,61,34)" fg:x="1276" fg:w="3"/><text x="8.3924%" y="735.50"></text></g><g><title>deno`&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (3 samples, 0.02%)</title><rect x="8.1424%" y="709" width="0.0191%" height="15" fill="rgb(235,75,3)" fg:x="1276" fg:w="3"/><text x="8.3924%" y="719.50"></text></g><g><title>deno`core::iter::traits::exact_size::ExactSizeIterator::len (3 samples, 0.02%)</title><rect x="8.1424%" y="693" width="0.0191%" height="15" fill="rgb(220,106,47)" fg:x="1276" fg:w="3"/><text x="8.3924%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;deno_core::runtime::DynImportModEvaluate&gt;&gt; (3 samples, 0.02%)</title><rect x="8.1935%" y="693" width="0.0191%" height="15" fill="rgb(210,196,33)" fg:x="1284" fg:w="3"/><text x="8.4435%" y="703.50"></text></g><g><title>deno`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="8.1935%" y="677" width="0.0191%" height="15" fill="rgb(229,154,42)" fg:x="1284" fg:w="3"/><text x="8.4435%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;deno_core::runtime::DynImportModEvaluate&gt;&gt; (12 samples, 0.08%)</title><rect x="8.1424%" y="757" width="0.0766%" height="15" fill="rgb(228,114,26)" fg:x="1276" fg:w="12"/><text x="8.3924%" y="767.50"></text></g><g><title>deno`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.08%)</title><rect x="8.1424%" y="741" width="0.0766%" height="15" fill="rgb(208,144,1)" fg:x="1276" fg:w="12"/><text x="8.3924%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;deno_core::runtime::DynImportModEvaluate,alloc::alloc::Global&gt;&gt; (9 samples, 0.06%)</title><rect x="8.1616%" y="725" width="0.0574%" height="15" fill="rgb(239,112,37)" fg:x="1279" fg:w="9"/><text x="8.4116%" y="735.50"></text></g><g><title>deno`&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.05%)</title><rect x="8.1680%" y="709" width="0.0510%" height="15" fill="rgb(210,96,50)" fg:x="1280" fg:w="8"/><text x="8.4180%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (4 samples, 0.03%)</title><rect x="8.2190%" y="757" width="0.0255%" height="15" fill="rgb(222,178,2)" fg:x="1288" fg:w="4"/><text x="8.4690%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (4 samples, 0.03%)</title><rect x="8.2190%" y="741" width="0.0255%" height="15" fill="rgb(226,74,18)" fg:x="1288" fg:w="4"/><text x="8.4690%" y="751.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="8.2318%" y="725" width="0.0128%" height="15" fill="rgb(225,67,54)" fg:x="1290" fg:w="2"/><text x="8.4818%" y="735.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.03%)</title><rect x="8.2764%" y="725" width="0.0255%" height="15" fill="rgb(251,92,32)" fg:x="1297" fg:w="4"/><text x="8.5264%" y="735.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="8.2701%" y="741" width="0.0383%" height="15" fill="rgb(228,149,22)" fg:x="1296" fg:w="6"/><text x="8.5201%" y="751.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::finish (2 samples, 0.01%)</title><rect x="8.3275%" y="645" width="0.0128%" height="15" fill="rgb(243,54,13)" fg:x="1305" fg:w="2"/><text x="8.5775%" y="655.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="8.3466%" y="581" width="0.0128%" height="15" fill="rgb(243,180,28)" fg:x="1308" fg:w="2"/><text x="8.5966%" y="591.50"></text></g><g><title>deno`hashbrown::map::make_hash (9 samples, 0.06%)</title><rect x="8.3147%" y="677" width="0.0574%" height="15" fill="rgb(208,167,24)" fg:x="1303" fg:w="9"/><text x="8.5647%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (9 samples, 0.06%)</title><rect x="8.3147%" y="661" width="0.0574%" height="15" fill="rgb(245,73,45)" fg:x="1303" fg:w="9"/><text x="8.5647%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.03%)</title><rect x="8.3402%" y="645" width="0.0319%" height="15" fill="rgb(237,203,48)" fg:x="1307" fg:w="5"/><text x="8.5902%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (5 samples, 0.03%)</title><rect x="8.3402%" y="629" width="0.0319%" height="15" fill="rgb(211,197,16)" fg:x="1307" fg:w="5"/><text x="8.5902%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (5 samples, 0.03%)</title><rect x="8.3402%" y="613" width="0.0319%" height="15" fill="rgb(243,99,51)" fg:x="1307" fg:w="5"/><text x="8.5902%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (5 samples, 0.03%)</title><rect x="8.3402%" y="597" width="0.0319%" height="15" fill="rgb(215,123,29)" fg:x="1307" fg:w="5"/><text x="8.5902%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="8.3594%" y="581" width="0.0128%" height="15" fill="rgb(239,186,37)" fg:x="1310" fg:w="2"/><text x="8.6094%" y="591.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="8.3594%" y="565" width="0.0128%" height="15" fill="rgb(252,136,39)" fg:x="1310" fg:w="2"/><text x="8.6094%" y="575.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.01%)</title><rect x="8.3785%" y="645" width="0.0128%" height="15" fill="rgb(223,213,32)" fg:x="1313" fg:w="2"/><text x="8.6285%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="8.4104%" y="613" width="0.0128%" height="15" fill="rgb(233,115,5)" fg:x="1318" fg:w="2"/><text x="8.6604%" y="623.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="8.4232%" y="597" width="0.0128%" height="15" fill="rgb(207,226,44)" fg:x="1320" fg:w="2"/><text x="8.6732%" y="607.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.03%)</title><rect x="8.4104%" y="629" width="0.0319%" height="15" fill="rgb(208,126,0)" fg:x="1318" fg:w="5"/><text x="8.6604%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.02%)</title><rect x="8.4232%" y="613" width="0.0191%" height="15" fill="rgb(244,66,21)" fg:x="1320" fg:w="3"/><text x="8.6732%" y="623.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (30 samples, 0.19%)</title><rect x="8.2637%" y="757" width="0.1914%" height="15" fill="rgb(222,97,12)" fg:x="1295" fg:w="30"/><text x="8.5137%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (23 samples, 0.15%)</title><rect x="8.3083%" y="741" width="0.1468%" height="15" fill="rgb(219,213,19)" fg:x="1302" fg:w="23"/><text x="8.5583%" y="751.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (23 samples, 0.15%)</title><rect x="8.3083%" y="725" width="0.1468%" height="15" fill="rgb(252,169,30)" fg:x="1302" fg:w="23"/><text x="8.5583%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (23 samples, 0.15%)</title><rect x="8.3083%" y="709" width="0.1468%" height="15" fill="rgb(206,32,51)" fg:x="1302" fg:w="23"/><text x="8.5583%" y="719.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (23 samples, 0.15%)</title><rect x="8.3083%" y="693" width="0.1468%" height="15" fill="rgb(250,172,42)" fg:x="1302" fg:w="23"/><text x="8.5583%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 0.08%)</title><rect x="8.3722%" y="677" width="0.0830%" height="15" fill="rgb(209,34,43)" fg:x="1312" fg:w="13"/><text x="8.6222%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.08%)</title><rect x="8.3785%" y="661" width="0.0766%" height="15" fill="rgb(223,11,35)" fg:x="1313" fg:w="12"/><text x="8.6285%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (10 samples, 0.06%)</title><rect x="8.3913%" y="645" width="0.0638%" height="15" fill="rgb(251,219,26)" fg:x="1315" fg:w="10"/><text x="8.6413%" y="655.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::evaluate_dyn_imports (84 samples, 0.54%)</title><rect x="7.9255%" y="773" width="0.5360%" height="15" fill="rgb(231,119,3)" fg:x="1242" fg:w="84"/><text x="8.1755%" y="783.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.03%)</title><rect x="8.5317%" y="757" width="0.0255%" height="15" fill="rgb(216,97,11)" fg:x="1337" fg:w="4"/><text x="8.7817%" y="767.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.02%)</title><rect x="8.5381%" y="741" width="0.0191%" height="15" fill="rgb(223,59,9)" fg:x="1338" fg:w="3"/><text x="8.7881%" y="751.50"></text></g><g><title>deno`core::mem::replace (8 samples, 0.05%)</title><rect x="8.5700%" y="741" width="0.0510%" height="15" fill="rgb(233,93,31)" fg:x="1343" fg:w="8"/><text x="8.8200%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="8.5955%" y="725" width="0.0255%" height="15" fill="rgb(239,81,33)" fg:x="1347" fg:w="4"/><text x="8.8455%" y="735.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (10 samples, 0.06%)</title><rect x="8.5700%" y="757" width="0.0638%" height="15" fill="rgb(213,120,34)" fg:x="1343" fg:w="10"/><text x="8.8200%" y="767.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (5 samples, 0.03%)</title><rect x="8.6657%" y="725" width="0.0319%" height="15" fill="rgb(243,49,53)" fg:x="1358" fg:w="5"/><text x="8.9157%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (5 samples, 0.03%)</title><rect x="8.6657%" y="709" width="0.0319%" height="15" fill="rgb(247,216,33)" fg:x="1358" fg:w="5"/><text x="8.9157%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="8.6785%" y="693" width="0.0191%" height="15" fill="rgb(226,26,14)" fg:x="1360" fg:w="3"/><text x="8.9285%" y="703.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="8.6848%" y="677" width="0.0128%" height="15" fill="rgb(215,49,53)" fg:x="1361" fg:w="2"/><text x="8.9348%" y="687.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.05%)</title><rect x="8.6593%" y="741" width="0.0510%" height="15" fill="rgb(245,162,40)" fg:x="1357" fg:w="8"/><text x="8.9093%" y="751.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="8.6976%" y="725" width="0.0128%" height="15" fill="rgb(229,68,17)" fg:x="1363" fg:w="2"/><text x="8.9476%" y="735.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="8.7359%" y="565" width="0.0128%" height="15" fill="rgb(213,182,10)" fg:x="1369" fg:w="2"/><text x="8.9859%" y="575.50"></text></g><g><title>deno`hashbrown::map::make_hash (5 samples, 0.03%)</title><rect x="8.7231%" y="677" width="0.0319%" height="15" fill="rgb(245,125,30)" fg:x="1367" fg:w="5"/><text x="8.9731%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="8.7231%" y="661" width="0.0319%" height="15" fill="rgb(232,202,2)" fg:x="1367" fg:w="5"/><text x="8.9731%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="8.7295%" y="645" width="0.0255%" height="15" fill="rgb(237,140,51)" fg:x="1368" fg:w="4"/><text x="8.9795%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (3 samples, 0.02%)</title><rect x="8.7359%" y="629" width="0.0191%" height="15" fill="rgb(236,157,25)" fg:x="1369" fg:w="3"/><text x="8.9859%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.02%)</title><rect x="8.7359%" y="613" width="0.0191%" height="15" fill="rgb(219,209,0)" fg:x="1369" fg:w="3"/><text x="8.9859%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (3 samples, 0.02%)</title><rect x="8.7359%" y="597" width="0.0191%" height="15" fill="rgb(240,116,54)" fg:x="1369" fg:w="3"/><text x="8.9859%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="8.7359%" y="581" width="0.0191%" height="15" fill="rgb(216,10,36)" fg:x="1369" fg:w="3"/><text x="8.9859%" y="591.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="8.7550%" y="661" width="0.0128%" height="15" fill="rgb(222,72,44)" fg:x="1372" fg:w="2"/><text x="9.0050%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.01%)</title><rect x="8.7869%" y="629" width="0.0128%" height="15" fill="rgb(232,159,9)" fg:x="1377" fg:w="2"/><text x="9.0369%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.01%)</title><rect x="8.7869%" y="613" width="0.0128%" height="15" fill="rgb(210,39,32)" fg:x="1377" fg:w="2"/><text x="9.0369%" y="623.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8 samples, 0.05%)</title><rect x="8.7806%" y="645" width="0.0510%" height="15" fill="rgb(216,194,45)" fg:x="1376" fg:w="8"/><text x="9.0306%" y="655.50"></text></g><g><title>deno`hashbrown::raw::h2 (2 samples, 0.01%)</title><rect x="8.8188%" y="629" width="0.0128%" height="15" fill="rgb(218,18,35)" fg:x="1382" fg:w="2"/><text x="9.0688%" y="639.50"></text></g><g><title>deno`core::cmp::Ord::min (2 samples, 0.01%)</title><rect x="8.8188%" y="613" width="0.0128%" height="15" fill="rgb(207,83,51)" fg:x="1382" fg:w="2"/><text x="9.0688%" y="623.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 0.08%)</title><rect x="8.7550%" y="677" width="0.0830%" height="15" fill="rgb(225,63,43)" fg:x="1372" fg:w="13"/><text x="9.0050%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.07%)</title><rect x="8.7678%" y="661" width="0.0702%" height="15" fill="rgb(207,57,36)" fg:x="1374" fg:w="11"/><text x="9.0178%" y="671.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (21 samples, 0.13%)</title><rect x="8.7167%" y="725" width="0.1340%" height="15" fill="rgb(216,99,33)" fg:x="1366" fg:w="21"/><text x="8.9667%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (21 samples, 0.13%)</title><rect x="8.7167%" y="709" width="0.1340%" height="15" fill="rgb(225,42,16)" fg:x="1366" fg:w="21"/><text x="8.9667%" y="719.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.13%)</title><rect x="8.7167%" y="693" width="0.1340%" height="15" fill="rgb(220,201,45)" fg:x="1366" fg:w="21"/><text x="8.9667%" y="703.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (32 samples, 0.20%)</title><rect x="8.6593%" y="757" width="0.2042%" height="15" fill="rgb(225,33,4)" fg:x="1357" fg:w="32"/><text x="8.9093%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (24 samples, 0.15%)</title><rect x="8.7104%" y="741" width="0.1531%" height="15" fill="rgb(224,33,50)" fg:x="1365" fg:w="24"/><text x="8.9604%" y="751.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::evaluate_pending_module (66 samples, 0.42%)</title><rect x="8.4615%" y="773" width="0.4212%" height="15" fill="rgb(246,198,51)" fg:x="1326" fg:w="66"/><text x="8.7115%" y="783.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="8.8699%" y="757" width="0.0128%" height="15" fill="rgb(205,22,4)" fg:x="1390" fg:w="2"/><text x="9.1199%" y="767.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (3 samples, 0.02%)</title><rect x="8.9209%" y="757" width="0.0191%" height="15" fill="rgb(206,3,8)" fg:x="1398" fg:w="3"/><text x="9.1709%" y="767.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.01%)</title><rect x="8.9273%" y="741" width="0.0128%" height="15" fill="rgb(251,23,15)" fg:x="1399" fg:w="2"/><text x="9.1773%" y="751.50"></text></g><g><title>deno`core::cell::BorrowRef::new (2 samples, 0.01%)</title><rect x="8.9273%" y="725" width="0.0128%" height="15" fill="rgb(252,88,28)" fg:x="1399" fg:w="2"/><text x="9.1773%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.02%)</title><rect x="8.9465%" y="741" width="0.0191%" height="15" fill="rgb(212,127,14)" fg:x="1402" fg:w="3"/><text x="9.1965%" y="751.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (2 samples, 0.01%)</title><rect x="8.9528%" y="725" width="0.0128%" height="15" fill="rgb(247,145,37)" fg:x="1403" fg:w="2"/><text x="9.2028%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="8.9528%" y="709" width="0.0128%" height="15" fill="rgb(209,117,53)" fg:x="1403" fg:w="2"/><text x="9.2028%" y="719.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (5 samples, 0.03%)</title><rect x="8.9401%" y="757" width="0.0319%" height="15" fill="rgb(212,90,42)" fg:x="1401" fg:w="5"/><text x="9.1901%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::modules::ModuleMap&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="8.9720%" y="757" width="0.0191%" height="15" fill="rgb(218,164,37)" fg:x="1406" fg:w="3"/><text x="9.2220%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="8.9784%" y="741" width="0.0128%" height="15" fill="rgb(246,65,34)" fg:x="1407" fg:w="2"/><text x="9.2284%" y="751.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (2 samples, 0.01%)</title><rect x="8.9784%" y="725" width="0.0128%" height="15" fill="rgb(231,100,33)" fg:x="1407" fg:w="2"/><text x="9.2284%" y="735.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (3 samples, 0.02%)</title><rect x="8.9975%" y="725" width="0.0191%" height="15" fill="rgb(228,126,14)" fg:x="1410" fg:w="3"/><text x="9.2475%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="9.0039%" y="709" width="0.0128%" height="15" fill="rgb(215,173,21)" fg:x="1411" fg:w="2"/><text x="9.2539%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (7 samples, 0.04%)</title><rect x="8.9911%" y="757" width="0.0447%" height="15" fill="rgb(210,6,40)" fg:x="1409" fg:w="7"/><text x="9.2411%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="8.9975%" y="741" width="0.0383%" height="15" fill="rgb(212,48,18)" fg:x="1410" fg:w="6"/><text x="9.2475%" y="751.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="9.0167%" y="725" width="0.0191%" height="15" fill="rgb(230,214,11)" fg:x="1413" fg:w="3"/><text x="9.2667%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (2 samples, 0.01%)</title><rect x="9.0422%" y="757" width="0.0128%" height="15" fill="rgb(254,105,39)" fg:x="1417" fg:w="2"/><text x="9.2922%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.01%)</title><rect x="9.0422%" y="741" width="0.0128%" height="15" fill="rgb(245,158,5)" fg:x="1417" fg:w="2"/><text x="9.2922%" y="751.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="9.0422%" y="725" width="0.0128%" height="15" fill="rgb(249,208,11)" fg:x="1417" fg:w="2"/><text x="9.2922%" y="735.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="9.0549%" y="757" width="0.0128%" height="15" fill="rgb(210,39,28)" fg:x="1419" fg:w="2"/><text x="9.3049%" y="767.50"></text></g><g><title>deno`deno_core::modules::ModuleMap::has_pending_dynamic_imports (4 samples, 0.03%)</title><rect x="9.0677%" y="757" width="0.0255%" height="15" fill="rgb(211,56,53)" fg:x="1421" fg:w="4"/><text x="9.3177%" y="767.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::is_empty (2 samples, 0.01%)</title><rect x="9.0805%" y="741" width="0.0128%" height="15" fill="rgb(226,201,30)" fg:x="1423" fg:w="2"/><text x="9.3305%" y="751.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="9.0932%" y="741" width="0.0255%" height="15" fill="rgb(239,101,34)" fg:x="1425" fg:w="4"/><text x="9.3432%" y="751.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.03%)</title><rect x="9.0932%" y="725" width="0.0255%" height="15" fill="rgb(226,209,5)" fg:x="1425" fg:w="4"/><text x="9.3432%" y="735.50"></text></g><g><title>deno`hashbrown::map::make_hash (5 samples, 0.03%)</title><rect x="9.1251%" y="677" width="0.0319%" height="15" fill="rgb(250,105,47)" fg:x="1430" fg:w="5"/><text x="9.3751%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="9.1251%" y="661" width="0.0319%" height="15" fill="rgb(230,72,3)" fg:x="1430" fg:w="5"/><text x="9.3751%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.03%)</title><rect x="9.1251%" y="645" width="0.0319%" height="15" fill="rgb(232,218,39)" fg:x="1430" fg:w="5"/><text x="9.3751%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (5 samples, 0.03%)</title><rect x="9.1251%" y="629" width="0.0319%" height="15" fill="rgb(248,166,6)" fg:x="1430" fg:w="5"/><text x="9.3751%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (5 samples, 0.03%)</title><rect x="9.1251%" y="613" width="0.0319%" height="15" fill="rgb(247,89,20)" fg:x="1430" fg:w="5"/><text x="9.3751%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (5 samples, 0.03%)</title><rect x="9.1251%" y="597" width="0.0319%" height="15" fill="rgb(248,130,54)" fg:x="1430" fg:w="5"/><text x="9.3751%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="9.1379%" y="581" width="0.0191%" height="15" fill="rgb(234,196,4)" fg:x="1432" fg:w="3"/><text x="9.3879%" y="591.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="9.1379%" y="565" width="0.0191%" height="15" fill="rgb(250,143,31)" fg:x="1432" fg:w="3"/><text x="9.3879%" y="575.50"></text></g><g><title>deno`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="9.1889%" y="629" width="0.0128%" height="15" fill="rgb(211,110,34)" fg:x="1440" fg:w="2"/><text x="9.4389%" y="639.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="9.2145%" y="613" width="0.0191%" height="15" fill="rgb(215,124,48)" fg:x="1444" fg:w="3"/><text x="9.4645%" y="623.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.02%)</title><rect x="9.2145%" y="597" width="0.0191%" height="15" fill="rgb(216,46,13)" fg:x="1444" fg:w="3"/><text x="9.4645%" y="607.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="9.2336%" y="597" width="0.0128%" height="15" fill="rgb(205,184,25)" fg:x="1447" fg:w="2"/><text x="9.4836%" y="607.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8 samples, 0.05%)</title><rect x="9.2017%" y="629" width="0.0510%" height="15" fill="rgb(228,1,10)" fg:x="1442" fg:w="8"/><text x="9.4517%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.02%)</title><rect x="9.2336%" y="613" width="0.0191%" height="15" fill="rgb(213,116,27)" fg:x="1447" fg:w="3"/><text x="9.4836%" y="623.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (2 samples, 0.01%)</title><rect x="9.2528%" y="629" width="0.0128%" height="15" fill="rgb(241,95,50)" fg:x="1450" fg:w="2"/><text x="9.5028%" y="639.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::module_map (33 samples, 0.21%)</title><rect x="9.0932%" y="757" width="0.2106%" height="15" fill="rgb(238,48,32)" fg:x="1425" fg:w="33"/><text x="9.3432%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (29 samples, 0.19%)</title><rect x="9.1188%" y="741" width="0.1851%" height="15" fill="rgb(235,113,49)" fg:x="1429" fg:w="29"/><text x="9.3688%" y="751.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (28 samples, 0.18%)</title><rect x="9.1251%" y="725" width="0.1787%" height="15" fill="rgb(205,127,43)" fg:x="1430" fg:w="28"/><text x="9.3751%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (28 samples, 0.18%)</title><rect x="9.1251%" y="709" width="0.1787%" height="15" fill="rgb(250,162,2)" fg:x="1430" fg:w="28"/><text x="9.3751%" y="719.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 0.18%)</title><rect x="9.1251%" y="693" width="0.1787%" height="15" fill="rgb(220,13,41)" fg:x="1430" fg:w="28"/><text x="9.3751%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (23 samples, 0.15%)</title><rect x="9.1570%" y="677" width="0.1468%" height="15" fill="rgb(249,221,25)" fg:x="1435" fg:w="23"/><text x="9.4070%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (21 samples, 0.13%)</title><rect x="9.1698%" y="661" width="0.1340%" height="15" fill="rgb(215,208,19)" fg:x="1437" fg:w="21"/><text x="9.4198%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (20 samples, 0.13%)</title><rect x="9.1762%" y="645" width="0.1276%" height="15" fill="rgb(236,175,2)" fg:x="1438" fg:w="20"/><text x="9.4262%" y="655.50"></text></g><g><title>deno`hashbrown::raw::h2 (6 samples, 0.04%)</title><rect x="9.2655%" y="629" width="0.0383%" height="15" fill="rgb(241,52,2)" fg:x="1452" fg:w="6"/><text x="9.5155%" y="639.50"></text></g><g><title>deno`core::cmp::Ord::min (6 samples, 0.04%)</title><rect x="9.2655%" y="613" width="0.0383%" height="15" fill="rgb(248,140,14)" fg:x="1452" fg:w="6"/><text x="9.5155%" y="623.50"></text></g><g><title>deno`core::cmp::min_by (6 samples, 0.04%)</title><rect x="9.2655%" y="597" width="0.0383%" height="15" fill="rgb(253,22,42)" fg:x="1452" fg:w="6"/><text x="9.5155%" y="607.50"></text></g><g><title>deno`core::ptr::read (4 samples, 0.03%)</title><rect x="9.3230%" y="565" width="0.0255%" height="15" fill="rgb(234,61,47)" fg:x="1461" fg:w="4"/><text x="9.5730%" y="575.50"></text></g><g><title>deno`hashbrown::map::make_hash (7 samples, 0.04%)</title><rect x="9.3102%" y="677" width="0.0447%" height="15" fill="rgb(208,226,15)" fg:x="1459" fg:w="7"/><text x="9.5602%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (7 samples, 0.04%)</title><rect x="9.3102%" y="661" width="0.0447%" height="15" fill="rgb(217,221,4)" fg:x="1459" fg:w="7"/><text x="9.5602%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.04%)</title><rect x="9.3102%" y="645" width="0.0447%" height="15" fill="rgb(212,174,34)" fg:x="1459" fg:w="7"/><text x="9.5602%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (7 samples, 0.04%)</title><rect x="9.3102%" y="629" width="0.0447%" height="15" fill="rgb(253,83,4)" fg:x="1459" fg:w="7"/><text x="9.5602%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (6 samples, 0.04%)</title><rect x="9.3166%" y="613" width="0.0383%" height="15" fill="rgb(250,195,49)" fg:x="1460" fg:w="6"/><text x="9.5666%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (6 samples, 0.04%)</title><rect x="9.3166%" y="597" width="0.0383%" height="15" fill="rgb(241,192,25)" fg:x="1460" fg:w="6"/><text x="9.5666%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (5 samples, 0.03%)</title><rect x="9.3230%" y="581" width="0.0319%" height="15" fill="rgb(208,124,10)" fg:x="1461" fg:w="5"/><text x="9.5730%" y="591.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="9.3549%" y="661" width="0.0128%" height="15" fill="rgb(222,33,0)" fg:x="1466" fg:w="2"/><text x="9.6049%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.01%)</title><rect x="9.3676%" y="645" width="0.0128%" height="15" fill="rgb(234,209,28)" fg:x="1468" fg:w="2"/><text x="9.6176%" y="655.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="9.3931%" y="597" width="0.0128%" height="15" fill="rgb(224,11,23)" fg:x="1472" fg:w="2"/><text x="9.6431%" y="607.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (6 samples, 0.04%)</title><rect x="9.3804%" y="629" width="0.0383%" height="15" fill="rgb(232,99,1)" fg:x="1470" fg:w="6"/><text x="9.6304%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4 samples, 0.03%)</title><rect x="9.3931%" y="613" width="0.0255%" height="15" fill="rgb(237,95,45)" fg:x="1472" fg:w="4"/><text x="9.6431%" y="623.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (20 samples, 0.13%)</title><rect x="9.3102%" y="725" width="0.1276%" height="15" fill="rgb(208,109,11)" fg:x="1459" fg:w="20"/><text x="9.5602%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (20 samples, 0.13%)</title><rect x="9.3102%" y="709" width="0.1276%" height="15" fill="rgb(216,190,48)" fg:x="1459" fg:w="20"/><text x="9.5602%" y="719.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (20 samples, 0.13%)</title><rect x="9.3102%" y="693" width="0.1276%" height="15" fill="rgb(251,171,36)" fg:x="1459" fg:w="20"/><text x="9.5602%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 0.08%)</title><rect x="9.3549%" y="677" width="0.0830%" height="15" fill="rgb(230,62,22)" fg:x="1466" fg:w="13"/><text x="9.6049%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.07%)</title><rect x="9.3676%" y="661" width="0.0702%" height="15" fill="rgb(225,114,35)" fg:x="1468" fg:w="11"/><text x="9.6176%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 0.06%)</title><rect x="9.3804%" y="645" width="0.0574%" height="15" fill="rgb(215,118,42)" fg:x="1470" fg:w="9"/><text x="9.6304%" y="655.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (2 samples, 0.01%)</title><rect x="9.4251%" y="629" width="0.0128%" height="15" fill="rgb(243,119,21)" fg:x="1477" fg:w="2"/><text x="9.6751%" y="639.50"></text></g><g><title>deno`core::num::_&lt;impl u64&gt;::from_ne_bytes (2 samples, 0.01%)</title><rect x="9.4251%" y="613" width="0.0128%" height="15" fill="rgb(252,177,53)" fg:x="1477" fg:w="2"/><text x="9.6751%" y="623.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (22 samples, 0.14%)</title><rect x="9.3038%" y="757" width="0.1404%" height="15" fill="rgb(237,209,29)" fg:x="1458" fg:w="22"/><text x="9.5538%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (21 samples, 0.13%)</title><rect x="9.3102%" y="741" width="0.1340%" height="15" fill="rgb(212,65,23)" fg:x="1459" fg:w="21"/><text x="9.5602%" y="751.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::pending_next_all (2 samples, 0.01%)</title><rect x="9.4570%" y="725" width="0.0128%" height="15" fill="rgb(230,222,46)" fg:x="1482" fg:w="2"/><text x="9.7070%" y="735.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="9.4570%" y="709" width="0.0128%" height="15" fill="rgb(215,135,32)" fg:x="1482" fg:w="2"/><text x="9.7070%" y="719.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="9.4570%" y="693" width="0.0128%" height="15" fill="rgb(246,101,22)" fg:x="1482" fg:w="2"/><text x="9.7070%" y="703.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::len (6 samples, 0.04%)</title><rect x="9.4442%" y="757" width="0.0383%" height="15" fill="rgb(206,107,13)" fg:x="1480" fg:w="6"/><text x="9.6942%" y="767.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::atomic_load_head_and_len_all (5 samples, 0.03%)</title><rect x="9.4506%" y="741" width="0.0319%" height="15" fill="rgb(250,100,44)" fg:x="1481" fg:w="5"/><text x="9.7006%" y="751.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::task::Task&lt;Fut&gt;::spin_next_all (2 samples, 0.01%)</title><rect x="9.4697%" y="725" width="0.0128%" height="15" fill="rgb(231,147,38)" fg:x="1484" fg:w="2"/><text x="9.7197%" y="735.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.01%)</title><rect x="9.4697%" y="709" width="0.0128%" height="15" fill="rgb(229,8,40)" fg:x="1484" fg:w="2"/><text x="9.7197%" y="719.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="9.4697%" y="693" width="0.0128%" height="15" fill="rgb(221,135,30)" fg:x="1484" fg:w="2"/><text x="9.7197%" y="703.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (99 samples, 0.63%)</title><rect x="8.8826%" y="773" width="0.6317%" height="15" fill="rgb(249,193,18)" fg:x="1392" fg:w="99"/><text x="9.1326%" y="783.50"></text></g><g><title>deno`v8::isolate::Isolate::has_pending_background_tasks (3 samples, 0.02%)</title><rect x="9.4952%" y="757" width="0.0191%" height="15" fill="rgb(209,133,39)" fg:x="1488" fg:w="3"/><text x="9.7452%" y="767.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (2 samples, 0.01%)</title><rect x="9.5016%" y="741" width="0.0128%" height="15" fill="rgb(232,100,14)" fg:x="1489" fg:w="2"/><text x="9.7516%" y="751.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="9.5016%" y="725" width="0.0128%" height="15" fill="rgb(224,185,1)" fg:x="1489" fg:w="2"/><text x="9.7516%" y="735.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (3 samples, 0.02%)</title><rect x="9.5335%" y="741" width="0.0191%" height="15" fill="rgb(223,139,8)" fg:x="1494" fg:w="3"/><text x="9.7835%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="9.5399%" y="725" width="0.0128%" height="15" fill="rgb(232,213,38)" fg:x="1495" fg:w="2"/><text x="9.7899%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="9.5399%" y="709" width="0.0128%" height="15" fill="rgb(207,94,22)" fg:x="1495" fg:w="2"/><text x="9.7899%" y="719.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="9.5399%" y="693" width="0.0128%" height="15" fill="rgb(219,183,54)" fg:x="1495" fg:w="2"/><text x="9.7899%" y="703.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="9.5335%" y="757" width="0.0255%" height="15" fill="rgb(216,185,54)" fg:x="1494" fg:w="4"/><text x="9.7835%" y="767.50"></text></g><g><title>deno`hashbrown::map::make_hash (5 samples, 0.03%)</title><rect x="9.5718%" y="693" width="0.0319%" height="15" fill="rgb(254,217,39)" fg:x="1500" fg:w="5"/><text x="9.8218%" y="703.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (4 samples, 0.03%)</title><rect x="9.5782%" y="677" width="0.0255%" height="15" fill="rgb(240,178,23)" fg:x="1501" fg:w="4"/><text x="9.8282%" y="687.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="9.5846%" y="661" width="0.0191%" height="15" fill="rgb(218,11,47)" fg:x="1502" fg:w="3"/><text x="9.8346%" y="671.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (3 samples, 0.02%)</title><rect x="9.5846%" y="645" width="0.0191%" height="15" fill="rgb(218,51,51)" fg:x="1502" fg:w="3"/><text x="9.8346%" y="655.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.02%)</title><rect x="9.5846%" y="629" width="0.0191%" height="15" fill="rgb(238,126,27)" fg:x="1502" fg:w="3"/><text x="9.8346%" y="639.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (3 samples, 0.02%)</title><rect x="9.5846%" y="613" width="0.0191%" height="15" fill="rgb(249,202,22)" fg:x="1502" fg:w="3"/><text x="9.8346%" y="623.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="9.5910%" y="597" width="0.0128%" height="15" fill="rgb(254,195,49)" fg:x="1503" fg:w="2"/><text x="9.8410%" y="607.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="9.5910%" y="581" width="0.0128%" height="15" fill="rgb(208,123,14)" fg:x="1503" fg:w="2"/><text x="9.8410%" y="591.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="9.6037%" y="661" width="0.0128%" height="15" fill="rgb(224,200,8)" fg:x="1505" fg:w="2"/><text x="9.8537%" y="671.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="9.6037%" y="677" width="0.0191%" height="15" fill="rgb(217,61,36)" fg:x="1505" fg:w="3"/><text x="9.8537%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4 samples, 0.03%)</title><rect x="9.6356%" y="645" width="0.0255%" height="15" fill="rgb(206,35,45)" fg:x="1510" fg:w="4"/><text x="9.8856%" y="655.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4 samples, 0.03%)</title><rect x="9.6356%" y="629" width="0.0255%" height="15" fill="rgb(217,65,33)" fg:x="1510" fg:w="4"/><text x="9.8856%" y="639.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (2 samples, 0.01%)</title><rect x="9.6612%" y="645" width="0.0128%" height="15" fill="rgb(222,158,48)" fg:x="1514" fg:w="2"/><text x="9.9112%" y="655.50"></text></g><g><title>deno`core::ptr::read_unaligned (2 samples, 0.01%)</title><rect x="9.6612%" y="629" width="0.0128%" height="15" fill="rgb(254,2,54)" fg:x="1514" fg:w="2"/><text x="9.9112%" y="639.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::module_map (24 samples, 0.15%)</title><rect x="9.5272%" y="773" width="0.1531%" height="15" fill="rgb(250,143,38)" fg:x="1493" fg:w="24"/><text x="9.7772%" y="783.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (19 samples, 0.12%)</title><rect x="9.5591%" y="757" width="0.1212%" height="15" fill="rgb(248,25,0)" fg:x="1498" fg:w="19"/><text x="9.8091%" y="767.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (18 samples, 0.11%)</title><rect x="9.5654%" y="741" width="0.1149%" height="15" fill="rgb(206,152,27)" fg:x="1499" fg:w="18"/><text x="9.8154%" y="751.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (18 samples, 0.11%)</title><rect x="9.5654%" y="725" width="0.1149%" height="15" fill="rgb(240,77,30)" fg:x="1499" fg:w="18"/><text x="9.8154%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (18 samples, 0.11%)</title><rect x="9.5654%" y="709" width="0.1149%" height="15" fill="rgb(231,5,3)" fg:x="1499" fg:w="18"/><text x="9.8154%" y="719.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (12 samples, 0.08%)</title><rect x="9.6037%" y="693" width="0.0766%" height="15" fill="rgb(207,226,32)" fg:x="1505" fg:w="12"/><text x="9.8537%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.06%)</title><rect x="9.6229%" y="677" width="0.0574%" height="15" fill="rgb(222,207,47)" fg:x="1508" fg:w="9"/><text x="9.8729%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8 samples, 0.05%)</title><rect x="9.6293%" y="661" width="0.0510%" height="15" fill="rgb(229,115,45)" fg:x="1509" fg:w="8"/><text x="9.8793%" y="671.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.01%)</title><rect x="9.6931%" y="757" width="0.0128%" height="15" fill="rgb(224,191,6)" fg:x="1519" fg:w="2"/><text x="9.9431%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::modules::ModuleMap&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="9.7058%" y="757" width="0.0191%" height="15" fill="rgb(230,227,24)" fg:x="1521" fg:w="3"/><text x="9.9558%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="9.7058%" y="741" width="0.0191%" height="15" fill="rgb(228,80,19)" fg:x="1521" fg:w="3"/><text x="9.9558%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::modules::ModuleMap&gt;&gt; (2 samples, 0.01%)</title><rect x="9.7250%" y="757" width="0.0128%" height="15" fill="rgb(247,229,0)" fg:x="1524" fg:w="2"/><text x="9.9750%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (2 samples, 0.01%)</title><rect x="9.7250%" y="741" width="0.0128%" height="15" fill="rgb(237,194,15)" fg:x="1524" fg:w="2"/><text x="9.9750%" y="751.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="9.7250%" y="725" width="0.0128%" height="15" fill="rgb(219,203,20)" fg:x="1524" fg:w="2"/><text x="9.9750%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="9.7250%" y="709" width="0.0128%" height="15" fill="rgb(234,128,8)" fg:x="1524" fg:w="2"/><text x="9.9750%" y="719.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="9.7377%" y="741" width="0.0128%" height="15" fill="rgb(248,202,8)" fg:x="1526" fg:w="2"/><text x="9.9877%" y="751.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.01%)</title><rect x="9.7377%" y="725" width="0.0128%" height="15" fill="rgb(206,104,37)" fg:x="1526" fg:w="2"/><text x="9.9877%" y="735.50"></text></g><g><title>deno`core::ptr::read (4 samples, 0.03%)</title><rect x="9.8143%" y="565" width="0.0255%" height="15" fill="rgb(223,8,27)" fg:x="1538" fg:w="4"/><text x="10.0643%" y="575.50"></text></g><g><title>deno`hashbrown::map::make_hash (12 samples, 0.08%)</title><rect x="9.7696%" y="677" width="0.0766%" height="15" fill="rgb(216,217,28)" fg:x="1531" fg:w="12"/><text x="10.0196%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (12 samples, 0.08%)</title><rect x="9.7696%" y="661" width="0.0766%" height="15" fill="rgb(249,199,1)" fg:x="1531" fg:w="12"/><text x="10.0196%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 0.07%)</title><rect x="9.7760%" y="645" width="0.0702%" height="15" fill="rgb(240,85,17)" fg:x="1532" fg:w="11"/><text x="10.0260%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (10 samples, 0.06%)</title><rect x="9.7824%" y="629" width="0.0638%" height="15" fill="rgb(206,108,45)" fg:x="1533" fg:w="10"/><text x="10.0324%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (9 samples, 0.06%)</title><rect x="9.7888%" y="613" width="0.0574%" height="15" fill="rgb(245,210,41)" fg:x="1534" fg:w="9"/><text x="10.0388%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (9 samples, 0.06%)</title><rect x="9.7888%" y="597" width="0.0574%" height="15" fill="rgb(206,13,37)" fg:x="1534" fg:w="9"/><text x="10.0388%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (6 samples, 0.04%)</title><rect x="9.8079%" y="581" width="0.0383%" height="15" fill="rgb(250,61,18)" fg:x="1537" fg:w="6"/><text x="10.0579%" y="591.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="9.8462%" y="661" width="0.0128%" height="15" fill="rgb(235,172,48)" fg:x="1543" fg:w="2"/><text x="10.0962%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.01%)</title><rect x="9.8590%" y="645" width="0.0128%" height="15" fill="rgb(249,201,17)" fg:x="1545" fg:w="2"/><text x="10.1090%" y="655.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.03%)</title><rect x="9.8781%" y="629" width="0.0319%" height="15" fill="rgb(219,208,6)" fg:x="1548" fg:w="5"/><text x="10.1281%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4 samples, 0.03%)</title><rect x="9.8845%" y="613" width="0.0255%" height="15" fill="rgb(248,31,23)" fg:x="1549" fg:w="4"/><text x="10.1345%" y="623.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.01%)</title><rect x="9.8973%" y="597" width="0.0128%" height="15" fill="rgb(245,15,42)" fg:x="1551" fg:w="2"/><text x="10.1473%" y="607.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (2 samples, 0.01%)</title><rect x="9.9100%" y="629" width="0.0128%" height="15" fill="rgb(222,217,39)" fg:x="1553" fg:w="2"/><text x="10.1600%" y="639.50"></text></g><g><title>deno`core::ptr::read_unaligned (2 samples, 0.01%)</title><rect x="9.9100%" y="613" width="0.0128%" height="15" fill="rgb(210,219,27)" fg:x="1553" fg:w="2"/><text x="10.1600%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="9.9100%" y="597" width="0.0128%" height="15" fill="rgb(252,166,36)" fg:x="1553" fg:w="2"/><text x="10.1600%" y="607.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (27 samples, 0.17%)</title><rect x="9.7696%" y="725" width="0.1723%" height="15" fill="rgb(245,132,34)" fg:x="1531" fg:w="27"/><text x="10.0196%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (27 samples, 0.17%)</title><rect x="9.7696%" y="709" width="0.1723%" height="15" fill="rgb(236,54,3)" fg:x="1531" fg:w="27"/><text x="10.0196%" y="719.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (27 samples, 0.17%)</title><rect x="9.7696%" y="693" width="0.1723%" height="15" fill="rgb(241,173,43)" fg:x="1531" fg:w="27"/><text x="10.0196%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (15 samples, 0.10%)</title><rect x="9.8462%" y="677" width="0.0957%" height="15" fill="rgb(215,190,9)" fg:x="1543" fg:w="15"/><text x="10.0962%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.08%)</title><rect x="9.8590%" y="661" width="0.0830%" height="15" fill="rgb(242,101,16)" fg:x="1545" fg:w="13"/><text x="10.1090%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (11 samples, 0.07%)</title><rect x="9.8717%" y="645" width="0.0702%" height="15" fill="rgb(223,190,21)" fg:x="1547" fg:w="11"/><text x="10.1217%" y="655.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (3 samples, 0.02%)</title><rect x="9.9228%" y="629" width="0.0191%" height="15" fill="rgb(215,228,25)" fg:x="1555" fg:w="3"/><text x="10.1728%" y="639.50"></text></g><g><title>deno`hashbrown::raw::generic::repeat (2 samples, 0.01%)</title><rect x="9.9292%" y="613" width="0.0128%" height="15" fill="rgb(225,36,22)" fg:x="1556" fg:w="2"/><text x="10.1792%" y="623.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::module_map (33 samples, 0.21%)</title><rect x="9.7377%" y="757" width="0.2106%" height="15" fill="rgb(251,106,46)" fg:x="1526" fg:w="33"/><text x="9.9877%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (30 samples, 0.19%)</title><rect x="9.7569%" y="741" width="0.1914%" height="15" fill="rgb(208,90,1)" fg:x="1529" fg:w="30"/><text x="10.0069%" y="751.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_dyn_imports (45 samples, 0.29%)</title><rect x="9.6803%" y="773" width="0.2872%" height="15" fill="rgb(243,10,4)" fg:x="1517" fg:w="45"/><text x="9.9303%" y="783.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::is_empty (3 samples, 0.02%)</title><rect x="9.9483%" y="757" width="0.0191%" height="15" fill="rgb(212,137,27)" fg:x="1559" fg:w="3"/><text x="10.1983%" y="767.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.01%)</title><rect x="9.9547%" y="741" width="0.0128%" height="15" fill="rgb(231,220,49)" fg:x="1560" fg:w="2"/><text x="10.2047%" y="751.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (3 samples, 0.02%)</title><rect x="10.0121%" y="741" width="0.0191%" height="15" fill="rgb(237,96,20)" fg:x="1569" fg:w="3"/><text x="10.2621%" y="751.50"></text></g><g><title>deno`core::cell::BorrowRef::new (2 samples, 0.01%)</title><rect x="10.0185%" y="725" width="0.0128%" height="15" fill="rgb(239,229,30)" fg:x="1570" fg:w="2"/><text x="10.2685%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.03%)</title><rect x="10.0121%" y="757" width="0.0255%" height="15" fill="rgb(219,65,33)" fg:x="1569" fg:w="4"/><text x="10.2621%" y="767.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (2 samples, 0.01%)</title><rect x="10.0504%" y="725" width="0.0128%" height="15" fill="rgb(243,134,7)" fg:x="1575" fg:w="2"/><text x="10.3004%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::modules::ModuleMap&gt;&gt;&gt; (6 samples, 0.04%)</title><rect x="10.0376%" y="757" width="0.0383%" height="15" fill="rgb(216,177,54)" fg:x="1573" fg:w="6"/><text x="10.2876%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="10.0440%" y="741" width="0.0319%" height="15" fill="rgb(211,160,20)" fg:x="1574" fg:w="5"/><text x="10.2940%" y="751.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.03%)</title><rect x="10.1078%" y="725" width="0.0255%" height="15" fill="rgb(239,85,39)" fg:x="1584" fg:w="4"/><text x="10.3578%" y="735.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="10.1015%" y="741" width="0.0383%" height="15" fill="rgb(232,125,22)" fg:x="1583" fg:w="6"/><text x="10.3515%" y="751.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (4 samples, 0.03%)</title><rect x="10.1525%" y="725" width="0.0255%" height="15" fill="rgb(244,57,34)" fg:x="1591" fg:w="4"/><text x="10.4025%" y="735.50"></text></g><g><title>deno`hashbrown::map::make_hash (9 samples, 0.06%)</title><rect x="10.1844%" y="677" width="0.0574%" height="15" fill="rgb(214,203,32)" fg:x="1596" fg:w="9"/><text x="10.4344%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (8 samples, 0.05%)</title><rect x="10.1908%" y="661" width="0.0510%" height="15" fill="rgb(207,58,43)" fg:x="1597" fg:w="8"/><text x="10.4408%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.04%)</title><rect x="10.2036%" y="645" width="0.0383%" height="15" fill="rgb(215,193,15)" fg:x="1599" fg:w="6"/><text x="10.4536%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (6 samples, 0.04%)</title><rect x="10.2036%" y="629" width="0.0383%" height="15" fill="rgb(232,15,44)" fg:x="1599" fg:w="6"/><text x="10.4536%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (6 samples, 0.04%)</title><rect x="10.2036%" y="613" width="0.0383%" height="15" fill="rgb(212,3,48)" fg:x="1599" fg:w="6"/><text x="10.4536%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (6 samples, 0.04%)</title><rect x="10.2036%" y="597" width="0.0383%" height="15" fill="rgb(218,128,7)" fg:x="1599" fg:w="6"/><text x="10.4536%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="10.2227%" y="581" width="0.0191%" height="15" fill="rgb(226,216,39)" fg:x="1602" fg:w="3"/><text x="10.4727%" y="591.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="10.2418%" y="661" width="0.0191%" height="15" fill="rgb(243,47,51)" fg:x="1605" fg:w="3"/><text x="10.4918%" y="671.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="10.2482%" y="645" width="0.0128%" height="15" fill="rgb(241,183,40)" fg:x="1606" fg:w="2"/><text x="10.4982%" y="655.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="10.3057%" y="597" width="0.0128%" height="15" fill="rgb(231,217,32)" fg:x="1615" fg:w="2"/><text x="10.5557%" y="607.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::module_map (39 samples, 0.25%)</title><rect x="10.0951%" y="757" width="0.2489%" height="15" fill="rgb(229,61,38)" fg:x="1582" fg:w="39"/><text x="10.3451%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (32 samples, 0.20%)</title><rect x="10.1397%" y="741" width="0.2042%" height="15" fill="rgb(225,210,5)" fg:x="1589" fg:w="32"/><text x="10.3897%" y="751.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (26 samples, 0.17%)</title><rect x="10.1780%" y="725" width="0.1659%" height="15" fill="rgb(231,79,45)" fg:x="1595" fg:w="26"/><text x="10.4280%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (26 samples, 0.17%)</title><rect x="10.1780%" y="709" width="0.1659%" height="15" fill="rgb(224,100,7)" fg:x="1595" fg:w="26"/><text x="10.4280%" y="719.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (25 samples, 0.16%)</title><rect x="10.1844%" y="693" width="0.1595%" height="15" fill="rgb(241,198,18)" fg:x="1596" fg:w="25"/><text x="10.4344%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (16 samples, 0.10%)</title><rect x="10.2418%" y="677" width="0.1021%" height="15" fill="rgb(252,97,53)" fg:x="1605" fg:w="16"/><text x="10.4918%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.08%)</title><rect x="10.2610%" y="661" width="0.0830%" height="15" fill="rgb(220,88,7)" fg:x="1608" fg:w="13"/><text x="10.5110%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (11 samples, 0.07%)</title><rect x="10.2738%" y="645" width="0.0702%" height="15" fill="rgb(213,176,14)" fg:x="1610" fg:w="11"/><text x="10.5238%" y="655.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (9 samples, 0.06%)</title><rect x="10.2865%" y="629" width="0.0574%" height="15" fill="rgb(246,73,7)" fg:x="1612" fg:w="9"/><text x="10.5365%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (7 samples, 0.04%)</title><rect x="10.2993%" y="613" width="0.0447%" height="15" fill="rgb(245,64,36)" fg:x="1614" fg:w="7"/><text x="10.5493%" y="623.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.02%)</title><rect x="10.3248%" y="597" width="0.0191%" height="15" fill="rgb(245,80,10)" fg:x="1618" fg:w="3"/><text x="10.5748%" y="607.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::prepare_dyn_imports (59 samples, 0.38%)</title><rect x="9.9738%" y="773" width="0.3765%" height="15" fill="rgb(232,107,50)" fg:x="1563" fg:w="59"/><text x="10.2238%" y="783.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="10.4141%" y="709" width="0.0255%" height="15" fill="rgb(253,3,0)" fg:x="1632" fg:w="4"/><text x="10.6641%" y="719.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="10.4269%" y="693" width="0.0128%" height="15" fill="rgb(212,99,53)" fg:x="1634" fg:w="2"/><text x="10.6769%" y="703.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (2 samples, 0.01%)</title><rect x="10.4397%" y="709" width="0.0128%" height="15" fill="rgb(249,111,54)" fg:x="1636" fg:w="2"/><text x="10.6897%" y="719.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (11 samples, 0.07%)</title><rect x="10.3950%" y="725" width="0.0702%" height="15" fill="rgb(249,55,30)" fg:x="1629" fg:w="11"/><text x="10.6450%" y="735.50"></text></g><g><title>deno`core::alloc::layout::size_align (2 samples, 0.01%)</title><rect x="10.4524%" y="709" width="0.0128%" height="15" fill="rgb(237,47,42)" fg:x="1638" fg:w="2"/><text x="10.7024%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope as core::ops::deref::DerefMut&gt;::deref_mut (12 samples, 0.08%)</title><rect x="10.3950%" y="757" width="0.0766%" height="15" fill="rgb(211,20,18)" fg:x="1629" fg:w="12"/><text x="10.6450%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (12 samples, 0.08%)</title><rect x="10.3950%" y="741" width="0.0766%" height="15" fill="rgb(231,203,46)" fg:x="1629" fg:w="12"/><text x="10.6450%" y="751.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="10.5226%" y="709" width="0.0191%" height="15" fill="rgb(237,142,3)" fg:x="1649" fg:w="3"/><text x="10.7726%" y="719.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_mut (2 samples, 0.01%)</title><rect x="10.5418%" y="709" width="0.0128%" height="15" fill="rgb(241,107,1)" fg:x="1652" fg:w="2"/><text x="10.7918%" y="719.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="10.5609%" y="709" width="0.0191%" height="15" fill="rgb(229,83,13)" fg:x="1655" fg:w="3"/><text x="10.8109%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="10.5864%" y="693" width="0.0128%" height="15" fill="rgb(241,91,40)" fg:x="1659" fg:w="2"/><text x="10.8364%" y="703.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="10.5864%" y="677" width="0.0128%" height="15" fill="rgb(225,3,45)" fg:x="1659" fg:w="2"/><text x="10.8364%" y="687.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (23 samples, 0.15%)</title><rect x="10.4716%" y="757" width="0.1468%" height="15" fill="rgb(244,223,14)" fg:x="1641" fg:w="23"/><text x="10.7216%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::isolate::Isolate&gt;&gt;::as_mut (21 samples, 0.13%)</title><rect x="10.4843%" y="741" width="0.1340%" height="15" fill="rgb(224,124,37)" fg:x="1643" fg:w="21"/><text x="10.7343%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (19 samples, 0.12%)</title><rect x="10.4971%" y="725" width="0.1212%" height="15" fill="rgb(251,171,30)" fg:x="1645" fg:w="19"/><text x="10.7471%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (6 samples, 0.04%)</title><rect x="10.5801%" y="709" width="0.0383%" height="15" fill="rgb(236,46,54)" fg:x="1658" fg:w="6"/><text x="10.8301%" y="719.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="10.5992%" y="693" width="0.0191%" height="15" fill="rgb(245,213,5)" fg:x="1661" fg:w="3"/><text x="10.8492%" y="703.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="10.6183%" y="757" width="0.0128%" height="15" fill="rgb(230,144,27)" fg:x="1664" fg:w="2"/><text x="10.8683%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&gt;&gt;::as_mut (2 samples, 0.01%)</title><rect x="10.6183%" y="741" width="0.0128%" height="15" fill="rgb(220,86,6)" fg:x="1664" fg:w="2"/><text x="10.8683%" y="751.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (2 samples, 0.01%)</title><rect x="10.6183%" y="725" width="0.0128%" height="15" fill="rgb(240,20,13)" fg:x="1664" fg:w="2"/><text x="10.8683%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::runtime::JsRealm&gt; (2 samples, 0.01%)</title><rect x="10.6311%" y="757" width="0.0128%" height="15" fill="rgb(217,89,34)" fg:x="1666" fg:w="2"/><text x="10.8811%" y="767.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="10.6566%" y="725" width="0.0128%" height="15" fill="rgb(229,13,5)" fg:x="1670" fg:w="2"/><text x="10.9066%" y="735.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="10.6949%" y="709" width="0.0128%" height="15" fill="rgb(244,67,35)" fg:x="1676" fg:w="2"/><text x="10.9449%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="10.7077%" y="693" width="0.0128%" height="15" fill="rgb(221,40,2)" fg:x="1678" fg:w="2"/><text x="10.9577%" y="703.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="10.7077%" y="677" width="0.0128%" height="15" fill="rgb(237,157,21)" fg:x="1678" fg:w="2"/><text x="10.9577%" y="687.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (10 samples, 0.06%)</title><rect x="10.6694%" y="725" width="0.0638%" height="15" fill="rgb(222,94,11)" fg:x="1672" fg:w="10"/><text x="10.9194%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (4 samples, 0.03%)</title><rect x="10.7077%" y="709" width="0.0255%" height="15" fill="rgb(249,113,6)" fg:x="1678" fg:w="4"/><text x="10.9577%" y="719.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="10.7204%" y="693" width="0.0128%" height="15" fill="rgb(238,137,36)" fg:x="1680" fg:w="2"/><text x="10.9704%" y="703.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="10.7332%" y="677" width="0.0128%" height="15" fill="rgb(210,102,26)" fg:x="1682" fg:w="2"/><text x="10.9832%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (16 samples, 0.10%)</title><rect x="10.6502%" y="757" width="0.1021%" height="15" fill="rgb(218,30,30)" fg:x="1669" fg:w="16"/><text x="10.9002%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.10%)</title><rect x="10.6566%" y="741" width="0.0957%" height="15" fill="rgb(214,67,26)" fg:x="1670" fg:w="15"/><text x="10.9066%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (3 samples, 0.02%)</title><rect x="10.7332%" y="725" width="0.0191%" height="15" fill="rgb(251,9,53)" fg:x="1682" fg:w="3"/><text x="10.9832%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="10.7332%" y="709" width="0.0191%" height="15" fill="rgb(228,204,25)" fg:x="1682" fg:w="3"/><text x="10.9832%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="10.7332%" y="693" width="0.0191%" height="15" fill="rgb(207,153,8)" fg:x="1682" fg:w="3"/><text x="10.9832%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (2 samples, 0.01%)</title><rect x="10.7523%" y="725" width="0.0128%" height="15" fill="rgb(242,9,16)" fg:x="1685" fg:w="2"/><text x="11.0023%" y="735.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="10.7523%" y="709" width="0.0128%" height="15" fill="rgb(217,211,10)" fg:x="1685" fg:w="2"/><text x="11.0023%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="10.7715%" y="693" width="0.0255%" height="15" fill="rgb(219,228,52)" fg:x="1688" fg:w="4"/><text x="11.0215%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="10.7715%" y="677" width="0.0255%" height="15" fill="rgb(231,92,29)" fg:x="1688" fg:w="4"/><text x="11.0215%" y="687.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="10.7779%" y="661" width="0.0191%" height="15" fill="rgb(232,8,23)" fg:x="1689" fg:w="3"/><text x="11.0279%" y="671.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt;&gt; (11 samples, 0.07%)</title><rect x="10.7523%" y="757" width="0.0702%" height="15" fill="rgb(216,211,34)" fg:x="1685" fg:w="11"/><text x="11.0023%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;P&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.07%)</title><rect x="10.7523%" y="741" width="0.0702%" height="15" fill="rgb(236,151,0)" fg:x="1685" fg:w="11"/><text x="11.0023%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (9 samples, 0.06%)</title><rect x="10.7651%" y="725" width="0.0574%" height="15" fill="rgb(209,168,3)" fg:x="1687" fg:w="9"/><text x="11.0151%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::exit_scope (8 samples, 0.05%)</title><rect x="10.7715%" y="709" width="0.0510%" height="15" fill="rgb(208,129,28)" fg:x="1688" fg:w="8"/><text x="11.0215%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (2 samples, 0.01%)</title><rect x="10.8098%" y="693" width="0.0128%" height="15" fill="rgb(229,78,22)" fg:x="1694" fg:w="2"/><text x="11.0598%" y="703.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="10.8098%" y="677" width="0.0128%" height="15" fill="rgb(228,187,13)" fg:x="1694" fg:w="2"/><text x="11.0598%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::support::SharedRef&lt;v8::platform::Platform&gt;&gt; (4 samples, 0.03%)</title><rect x="10.8225%" y="757" width="0.0255%" height="15" fill="rgb(240,119,24)" fg:x="1696" fg:w="4"/><text x="11.0725%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::support::SharedPtrBase&lt;v8::platform::Platform&gt;&gt; (3 samples, 0.02%)</title><rect x="10.8289%" y="741" width="0.0191%" height="15" fill="rgb(209,194,42)" fg:x="1697" fg:w="3"/><text x="11.0789%" y="751.50"></text></g><g><title>deno`&lt;v8::support::SharedPtrBase&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="10.8289%" y="725" width="0.0191%" height="15" fill="rgb(247,200,46)" fg:x="1697" fg:w="3"/><text x="11.0789%" y="735.50"></text></g><g><title>deno`&lt;v8::platform::Platform as v8::support::Shared&gt;::reset (2 samples, 0.01%)</title><rect x="10.8353%" y="709" width="0.0128%" height="15" fill="rgb(218,76,16)" fg:x="1698" fg:w="2"/><text x="11.0853%" y="719.50"></text></g><g><title>deno`std__shared_ptr__v8__Platform__reset (2 samples, 0.01%)</title><rect x="10.8353%" y="693" width="0.0128%" height="15" fill="rgb(225,21,48)" fg:x="1698" fg:w="2"/><text x="11.0853%" y="703.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="10.8736%" y="709" width="0.0191%" height="15" fill="rgb(239,223,50)" fg:x="1704" fg:w="3"/><text x="11.1236%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::isolate::IsolateHandle&gt; (3 samples, 0.02%)</title><rect x="10.8927%" y="709" width="0.0191%" height="15" fill="rgb(244,45,21)" fg:x="1707" fg:w="3"/><text x="11.1427%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;v8::isolate::IsolateAnnex&gt;&gt; (3 samples, 0.02%)</title><rect x="10.8927%" y="693" width="0.0191%" height="15" fill="rgb(232,33,43)" fg:x="1707" fg:w="3"/><text x="11.1427%" y="703.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="10.8991%" y="677" width="0.0128%" height="15" fill="rgb(209,8,3)" fg:x="1708" fg:w="2"/><text x="11.1491%" y="687.50"></text></g><g><title>deno`core::sync::atomic::atomic_sub (2 samples, 0.01%)</title><rect x="10.8991%" y="661" width="0.0128%" height="15" fill="rgb(214,25,53)" fg:x="1708" fg:w="2"/><text x="11.1491%" y="671.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::runtime::JsRealm&gt; (8 samples, 0.05%)</title><rect x="10.8672%" y="741" width="0.0510%" height="15" fill="rgb(254,186,54)" fg:x="1703" fg:w="8"/><text x="11.1172%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::handle::Global&lt;v8::data::Context&gt;&gt; (8 samples, 0.05%)</title><rect x="10.8672%" y="725" width="0.0510%" height="15" fill="rgb(208,174,49)" fg:x="1703" fg:w="8"/><text x="11.1172%" y="735.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::is_none (2 samples, 0.01%)</title><rect x="10.9693%" y="677" width="0.0128%" height="15" fill="rgb(233,191,51)" fg:x="1719" fg:w="2"/><text x="11.2193%" y="687.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="10.9885%" y="661" width="0.0191%" height="15" fill="rgb(222,134,10)" fg:x="1722" fg:w="3"/><text x="11.2385%" y="671.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (3 samples, 0.02%)</title><rect x="11.0076%" y="661" width="0.0191%" height="15" fill="rgb(230,226,20)" fg:x="1725" fg:w="3"/><text x="11.2576%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (8 samples, 0.05%)</title><rect x="10.9821%" y="677" width="0.0510%" height="15" fill="rgb(251,111,25)" fg:x="1721" fg:w="8"/><text x="11.2321%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="11.0586%" y="645" width="0.0191%" height="15" fill="rgb(224,40,46)" fg:x="1733" fg:w="3"/><text x="11.3086%" y="655.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="11.0586%" y="629" width="0.0191%" height="15" fill="rgb(236,108,47)" fg:x="1733" fg:w="3"/><text x="11.3086%" y="639.50"></text></g><g><title>deno`&lt;v8::scope::data::ScopeTypeSpecificData as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="11.0905%" y="629" width="0.0191%" height="15" fill="rgb(234,93,0)" fg:x="1738" fg:w="3"/><text x="11.3405%" y="639.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;v8::scope::raw::ContextScope&gt;&gt; (2 samples, 0.01%)</title><rect x="11.0969%" y="613" width="0.0128%" height="15" fill="rgb(224,213,32)" fg:x="1739" fg:w="2"/><text x="11.3469%" y="623.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::raw::ContextScope&gt; (2 samples, 0.01%)</title><rect x="11.0969%" y="597" width="0.0128%" height="15" fill="rgb(251,11,48)" fg:x="1739" fg:w="2"/><text x="11.3469%" y="607.50"></text></g><g><title>deno`&lt;v8::scope::raw::ContextScope as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="11.0969%" y="581" width="0.0128%" height="15" fill="rgb(236,173,5)" fg:x="1739" fg:w="2"/><text x="11.3469%" y="591.50"></text></g><g><title>deno`v8::Context::Exit (2 samples, 0.01%)</title><rect x="11.0969%" y="565" width="0.0128%" height="15" fill="rgb(230,95,12)" fg:x="1739" fg:w="2"/><text x="11.3469%" y="575.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (6 samples, 0.04%)</title><rect x="11.0905%" y="645" width="0.0383%" height="15" fill="rgb(232,209,1)" fg:x="1738" fg:w="6"/><text x="11.3405%" y="655.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (4 samples, 0.03%)</title><rect x="11.1288%" y="629" width="0.0255%" height="15" fill="rgb(232,6,1)" fg:x="1744" fg:w="4"/><text x="11.3788%" y="639.50"></text></g><g><title>deno`v8::scope::data::ScopeData::exit_scope (19 samples, 0.12%)</title><rect x="11.0459%" y="661" width="0.1212%" height="15" fill="rgb(210,224,50)" fg:x="1731" fg:w="19"/><text x="11.2959%" y="671.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (6 samples, 0.04%)</title><rect x="11.1288%" y="645" width="0.0383%" height="15" fill="rgb(228,127,35)" fg:x="1744" fg:w="6"/><text x="11.3788%" y="655.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap_or_else (2 samples, 0.01%)</title><rect x="11.1544%" y="629" width="0.0128%" height="15" fill="rgb(245,102,45)" fg:x="1748" fg:w="2"/><text x="11.4044%" y="639.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (39 samples, 0.25%)</title><rect x="10.9246%" y="709" width="0.2489%" height="15" fill="rgb(214,1,49)" fg:x="1712" fg:w="39"/><text x="11.1746%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_root_mut (38 samples, 0.24%)</title><rect x="10.9310%" y="693" width="0.2425%" height="15" fill="rgb(226,163,40)" fg:x="1713" fg:w="38"/><text x="11.1810%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (22 samples, 0.14%)</title><rect x="11.0331%" y="677" width="0.1404%" height="15" fill="rgb(239,212,28)" fg:x="1729" fg:w="22"/><text x="11.2831%" y="687.50"></text></g><g><title>deno`&lt;v8::scope::data::ScopeStatus as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="11.1735%" y="709" width="0.0128%" height="15" fill="rgb(220,20,13)" fg:x="1751" fg:w="2"/><text x="11.4235%" y="719.50"></text></g><g><title>deno`v8::handle::Handle::open (5 samples, 0.03%)</title><rect x="11.1990%" y="709" width="0.0319%" height="15" fill="rgb(210,164,35)" fg:x="1755" fg:w="5"/><text x="11.4490%" y="719.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (3 samples, 0.02%)</title><rect x="11.2118%" y="693" width="0.0191%" height="15" fill="rgb(248,109,41)" fg:x="1757" fg:w="3"/><text x="11.4618%" y="703.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="11.2565%" y="693" width="0.0128%" height="15" fill="rgb(238,23,50)" fg:x="1764" fg:w="2"/><text x="11.5065%" y="703.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="11.2565%" y="677" width="0.0128%" height="15" fill="rgb(211,48,49)" fg:x="1764" fg:w="2"/><text x="11.5065%" y="687.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (4 samples, 0.03%)</title><rect x="11.2692%" y="693" width="0.0255%" height="15" fill="rgb(223,36,21)" fg:x="1766" fg:w="4"/><text x="11.5192%" y="703.50"></text></g><g><title>deno`core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.01%)</title><rect x="11.2820%" y="677" width="0.0128%" height="15" fill="rgb(207,123,46)" fg:x="1768" fg:w="2"/><text x="11.5320%" y="687.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (14 samples, 0.09%)</title><rect x="11.2309%" y="709" width="0.0893%" height="15" fill="rgb(240,218,32)" fg:x="1760" fg:w="14"/><text x="11.4809%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="11.3011%" y="693" width="0.0191%" height="15" fill="rgb(252,5,43)" fg:x="1771" fg:w="3"/><text x="11.5511%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="11.3075%" y="677" width="0.0128%" height="15" fill="rgb(252,84,19)" fg:x="1772" fg:w="2"/><text x="11.5575%" y="687.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="11.3075%" y="661" width="0.0128%" height="15" fill="rgb(243,152,39)" fg:x="1772" fg:w="2"/><text x="11.5575%" y="671.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (3 samples, 0.02%)</title><rect x="11.3458%" y="677" width="0.0191%" height="15" fill="rgb(234,160,15)" fg:x="1778" fg:w="3"/><text x="11.5958%" y="687.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap_or_else (2 samples, 0.01%)</title><rect x="11.3522%" y="661" width="0.0128%" height="15" fill="rgb(237,34,20)" fg:x="1779" fg:w="2"/><text x="11.6022%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeData::allocate_or_reuse_scope_data (5 samples, 0.03%)</title><rect x="11.3649%" y="677" width="0.0319%" height="15" fill="rgb(229,97,13)" fg:x="1781" fg:w="5"/><text x="11.6149%" y="687.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="11.3841%" y="661" width="0.0128%" height="15" fill="rgb(234,71,50)" fg:x="1784" fg:w="2"/><text x="11.6341%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context::_{{closure}} (6 samples, 0.04%)</title><rect x="11.4032%" y="661" width="0.0383%" height="15" fill="rgb(253,155,4)" fg:x="1787" fg:w="6"/><text x="11.6532%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeTypeSpecificData::init_with (4 samples, 0.03%)</title><rect x="11.4415%" y="661" width="0.0255%" height="15" fill="rgb(222,185,37)" fg:x="1793" fg:w="4"/><text x="11.6915%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="11.4415%" y="645" width="0.0255%" height="15" fill="rgb(251,177,13)" fg:x="1793" fg:w="4"/><text x="11.6915%" y="655.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with::_{{closure}} (12 samples, 0.08%)</title><rect x="11.3968%" y="677" width="0.0766%" height="15" fill="rgb(250,179,40)" fg:x="1786" fg:w="12"/><text x="11.6468%" y="687.50"></text></g><g><title>deno`v8::scope::HandleScope::with_context (88 samples, 0.56%)</title><rect x="10.9183%" y="725" width="0.5615%" height="15" fill="rgb(242,44,2)" fg:x="1711" fg:w="88"/><text x="11.1683%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (25 samples, 0.16%)</title><rect x="11.3203%" y="709" width="0.1595%" height="15" fill="rgb(216,177,13)" fg:x="1774" fg:w="25"/><text x="11.5703%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_scope_data_with (23 samples, 0.15%)</title><rect x="11.3330%" y="693" width="0.1468%" height="15" fill="rgb(216,106,43)" fg:x="1776" fg:w="23"/><text x="11.5830%" y="703.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::handle_scope (92 samples, 0.59%)</title><rect x="10.9183%" y="741" width="0.5871%" height="15" fill="rgb(216,183,2)" fg:x="1711" fg:w="92"/><text x="11.1683%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (4 samples, 0.03%)</title><rect x="11.4798%" y="725" width="0.0255%" height="15" fill="rgb(249,75,3)" fg:x="1799" fg:w="4"/><text x="11.7298%" y="735.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="11.5755%" y="613" width="0.0128%" height="15" fill="rgb(219,67,39)" fg:x="1814" fg:w="2"/><text x="11.8255%" y="623.50"></text></g><g><title>deno`&lt;v8::handle::HandleHost as core::convert::From&lt;&amp;v8::isolate::IsolateHandle&gt;&gt;::from (9 samples, 0.06%)</title><rect x="11.5500%" y="645" width="0.0574%" height="15" fill="rgb(253,228,2)" fg:x="1810" fg:w="9"/><text x="11.8000%" y="655.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::get_isolate_ptr (5 samples, 0.03%)</title><rect x="11.5755%" y="629" width="0.0319%" height="15" fill="rgb(235,138,27)" fg:x="1814" fg:w="5"/><text x="11.8255%" y="639.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.02%)</title><rect x="11.5883%" y="613" width="0.0191%" height="15" fill="rgb(236,97,51)" fg:x="1816" fg:w="3"/><text x="11.8383%" y="623.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (11 samples, 0.07%)</title><rect x="11.5500%" y="661" width="0.0702%" height="15" fill="rgb(240,80,30)" fg:x="1810" fg:w="11"/><text x="11.8000%" y="671.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as v8::handle::Handle&gt;::get_handle_info (14 samples, 0.09%)</title><rect x="11.5436%" y="677" width="0.0893%" height="15" fill="rgb(230,178,19)" fg:x="1809" fg:w="14"/><text x="11.7936%" y="687.50"></text></g><g><title>deno`&lt;v8::handle::HandleHost as core::convert::From&lt;&amp;v8::isolate::IsolateHandle&gt;&gt;::from (2 samples, 0.01%)</title><rect x="11.6202%" y="661" width="0.0128%" height="15" fill="rgb(210,190,27)" fg:x="1821" fg:w="2"/><text x="11.8702%" y="671.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="11.6521%" y="661" width="0.0128%" height="15" fill="rgb(222,107,31)" fg:x="1826" fg:w="2"/><text x="11.9021%" y="671.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (3 samples, 0.02%)</title><rect x="11.7095%" y="565" width="0.0191%" height="15" fill="rgb(216,127,34)" fg:x="1835" fg:w="3"/><text x="11.9595%" y="575.50"></text></g><g><title>deno`alloc::sync::data_offset_align (5 samples, 0.03%)</title><rect x="11.7095%" y="581" width="0.0319%" height="15" fill="rgb(234,116,52)" fg:x="1835" fg:w="5"/><text x="11.9595%" y="591.50"></text></g><g><title>deno`core::alloc::layout::Layout::padding_needed_for (2 samples, 0.01%)</title><rect x="11.7287%" y="565" width="0.0128%" height="15" fill="rgb(222,124,15)" fg:x="1838" fg:w="2"/><text x="11.9787%" y="575.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (9 samples, 0.06%)</title><rect x="11.6904%" y="613" width="0.0574%" height="15" fill="rgb(231,179,28)" fg:x="1832" fg:w="9"/><text x="11.9404%" y="623.50"></text></g><g><title>deno`alloc::sync::data_offset (7 samples, 0.04%)</title><rect x="11.7031%" y="597" width="0.0447%" height="15" fill="rgb(226,93,45)" fg:x="1834" fg:w="7"/><text x="11.9531%" y="607.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (14 samples, 0.09%)</title><rect x="11.6712%" y="661" width="0.0893%" height="15" fill="rgb(215,8,51)" fg:x="1829" fg:w="14"/><text x="11.9212%" y="671.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::new (14 samples, 0.09%)</title><rect x="11.6712%" y="645" width="0.0893%" height="15" fill="rgb(223,106,5)" fg:x="1829" fg:w="14"/><text x="11.9212%" y="655.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (13 samples, 0.08%)</title><rect x="11.6776%" y="629" width="0.0830%" height="15" fill="rgb(250,191,5)" fg:x="1830" fg:w="13"/><text x="11.9276%" y="639.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as core::clone::Clone&gt;::clone (39 samples, 0.25%)</title><rect x="11.5309%" y="693" width="0.2489%" height="15" fill="rgb(242,132,44)" fg:x="1807" fg:w="39"/><text x="11.7809%" y="703.50"></text></g><g><title>deno`v8::handle::Global&lt;T&gt;::new_raw (23 samples, 0.15%)</title><rect x="11.6330%" y="677" width="0.1468%" height="15" fill="rgb(251,152,29)" fg:x="1823" fg:w="23"/><text x="11.8830%" y="687.50"></text></g><g><title>deno`v8__Global__New (3 samples, 0.02%)</title><rect x="11.7606%" y="661" width="0.0191%" height="15" fill="rgb(218,179,5)" fg:x="1843" fg:w="3"/><text x="12.0106%" y="671.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="11.7606%" y="645" width="0.0191%" height="15" fill="rgb(227,67,19)" fg:x="1843" fg:w="3"/><text x="12.0106%" y="655.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (42 samples, 0.27%)</title><rect x="11.5181%" y="725" width="0.2680%" height="15" fill="rgb(233,119,31)" fg:x="1805" fg:w="42"/><text x="11.7681%" y="735.50"></text></g><g><title>deno`&lt;deno_core::runtime::JsRealm as core::clone::Clone&gt;::clone (40 samples, 0.26%)</title><rect x="11.5309%" y="709" width="0.2552%" height="15" fill="rgb(241,120,22)" fg:x="1807" fg:w="40"/><text x="11.7809%" y="719.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.03%)</title><rect x="11.7925%" y="725" width="0.0255%" height="15" fill="rgb(224,102,30)" fg:x="1848" fg:w="4"/><text x="12.0425%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.03%)</title><rect x="11.7925%" y="709" width="0.0255%" height="15" fill="rgb(210,164,37)" fg:x="1848" fg:w="4"/><text x="12.0425%" y="719.50"></text></g><g><title>deno`core::cell::BorrowRef::new (3 samples, 0.02%)</title><rect x="11.7989%" y="693" width="0.0191%" height="15" fill="rgb(226,191,16)" fg:x="1849" fg:w="3"/><text x="12.0489%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="11.8052%" y="677" width="0.0128%" height="15" fill="rgb(214,40,45)" fg:x="1850" fg:w="2"/><text x="12.0552%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="11.8052%" y="661" width="0.0128%" height="15" fill="rgb(244,29,26)" fg:x="1850" fg:w="2"/><text x="12.0552%" y="671.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="11.8052%" y="645" width="0.0128%" height="15" fill="rgb(216,16,5)" fg:x="1850" fg:w="2"/><text x="12.0552%" y="655.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (2 samples, 0.01%)</title><rect x="11.8372%" y="693" width="0.0128%" height="15" fill="rgb(249,76,35)" fg:x="1855" fg:w="2"/><text x="12.0872%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (6 samples, 0.04%)</title><rect x="11.8244%" y="725" width="0.0383%" height="15" fill="rgb(207,11,44)" fg:x="1853" fg:w="6"/><text x="12.0744%" y="735.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="11.8308%" y="709" width="0.0319%" height="15" fill="rgb(228,190,49)" fg:x="1854" fg:w="5"/><text x="12.0808%" y="719.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="11.8691%" y="693" width="0.0128%" height="15" fill="rgb(214,173,12)" fg:x="1860" fg:w="2"/><text x="12.1191%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="11.8691%" y="677" width="0.0128%" height="15" fill="rgb(218,26,35)" fg:x="1860" fg:w="2"/><text x="12.1191%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (4 samples, 0.03%)</title><rect x="11.8627%" y="725" width="0.0255%" height="15" fill="rgb(220,200,19)" fg:x="1859" fg:w="4"/><text x="12.1127%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (3 samples, 0.02%)</title><rect x="11.8691%" y="709" width="0.0191%" height="15" fill="rgb(239,95,49)" fg:x="1860" fg:w="3"/><text x="12.1191%" y="719.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="11.9073%" y="709" width="0.0128%" height="15" fill="rgb(235,85,53)" fg:x="1866" fg:w="2"/><text x="12.1573%" y="719.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.01%)</title><rect x="11.9073%" y="693" width="0.0128%" height="15" fill="rgb(233,133,31)" fg:x="1866" fg:w="2"/><text x="12.1573%" y="703.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="11.9393%" y="549" width="0.0128%" height="15" fill="rgb(218,25,20)" fg:x="1871" fg:w="2"/><text x="12.1893%" y="559.50"></text></g><g><title>deno`hashbrown::map::make_hash (7 samples, 0.04%)</title><rect x="11.9393%" y="645" width="0.0447%" height="15" fill="rgb(252,210,38)" fg:x="1871" fg:w="7"/><text x="12.1893%" y="655.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (7 samples, 0.04%)</title><rect x="11.9393%" y="629" width="0.0447%" height="15" fill="rgb(242,134,21)" fg:x="1871" fg:w="7"/><text x="12.1893%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.04%)</title><rect x="11.9393%" y="613" width="0.0447%" height="15" fill="rgb(213,28,48)" fg:x="1871" fg:w="7"/><text x="12.1893%" y="623.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (7 samples, 0.04%)</title><rect x="11.9393%" y="597" width="0.0447%" height="15" fill="rgb(250,196,2)" fg:x="1871" fg:w="7"/><text x="12.1893%" y="607.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (7 samples, 0.04%)</title><rect x="11.9393%" y="581" width="0.0447%" height="15" fill="rgb(227,5,17)" fg:x="1871" fg:w="7"/><text x="12.1893%" y="591.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (7 samples, 0.04%)</title><rect x="11.9393%" y="565" width="0.0447%" height="15" fill="rgb(221,226,24)" fg:x="1871" fg:w="7"/><text x="12.1893%" y="575.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (5 samples, 0.03%)</title><rect x="11.9520%" y="549" width="0.0319%" height="15" fill="rgb(211,5,48)" fg:x="1873" fg:w="5"/><text x="12.2020%" y="559.50"></text></g><g><title>deno`core::ptr::read (4 samples, 0.03%)</title><rect x="11.9584%" y="533" width="0.0255%" height="15" fill="rgb(219,150,6)" fg:x="1874" fg:w="4"/><text x="12.2084%" y="543.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="12.0031%" y="565" width="0.0128%" height="15" fill="rgb(251,46,16)" fg:x="1881" fg:w="2"/><text x="12.2531%" y="575.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.01%)</title><rect x="12.0158%" y="565" width="0.0128%" height="15" fill="rgb(220,204,40)" fg:x="1883" fg:w="2"/><text x="12.2658%" y="575.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.03%)</title><rect x="12.0031%" y="597" width="0.0319%" height="15" fill="rgb(211,85,2)" fg:x="1881" fg:w="5"/><text x="12.2531%" y="607.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5 samples, 0.03%)</title><rect x="12.0031%" y="581" width="0.0319%" height="15" fill="rgb(229,17,7)" fg:x="1881" fg:w="5"/><text x="12.2531%" y="591.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (3 samples, 0.02%)</title><rect x="12.0477%" y="597" width="0.0191%" height="15" fill="rgb(239,72,28)" fg:x="1888" fg:w="3"/><text x="12.2977%" y="607.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (28 samples, 0.18%)</title><rect x="11.8946%" y="725" width="0.1787%" height="15" fill="rgb(230,47,54)" fg:x="1864" fg:w="28"/><text x="12.1446%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (24 samples, 0.15%)</title><rect x="11.9201%" y="709" width="0.1531%" height="15" fill="rgb(214,50,8)" fg:x="1868" fg:w="24"/><text x="12.1701%" y="719.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (23 samples, 0.15%)</title><rect x="11.9265%" y="693" width="0.1468%" height="15" fill="rgb(216,198,43)" fg:x="1869" fg:w="23"/><text x="12.1765%" y="703.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (23 samples, 0.15%)</title><rect x="11.9265%" y="677" width="0.1468%" height="15" fill="rgb(234,20,35)" fg:x="1869" fg:w="23"/><text x="12.1765%" y="687.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (23 samples, 0.15%)</title><rect x="11.9265%" y="661" width="0.1468%" height="15" fill="rgb(254,45,19)" fg:x="1869" fg:w="23"/><text x="12.1765%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (14 samples, 0.09%)</title><rect x="11.9839%" y="645" width="0.0893%" height="15" fill="rgb(219,14,44)" fg:x="1878" fg:w="14"/><text x="12.2339%" y="655.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (14 samples, 0.09%)</title><rect x="11.9839%" y="629" width="0.0893%" height="15" fill="rgb(217,220,26)" fg:x="1878" fg:w="14"/><text x="12.2339%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (13 samples, 0.08%)</title><rect x="11.9903%" y="613" width="0.0830%" height="15" fill="rgb(213,158,28)" fg:x="1879" fg:w="13"/><text x="12.2403%" y="623.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (90 samples, 0.57%)</title><rect x="11.5053%" y="741" width="0.5743%" height="15" fill="rgb(252,51,52)" fg:x="1803" fg:w="90"/><text x="11.7553%" y="751.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (194 samples, 1.24%)</title><rect x="10.8481%" y="757" width="1.2380%" height="15" fill="rgb(246,89,16)" fg:x="1700" fg:w="194"/><text x="11.0981%" y="767.50"></text></g><g><title>deno`v8::Isolate::PerformMicrotaskCheckpoint (3 samples, 0.02%)</title><rect x="12.0860%" y="757" width="0.0191%" height="15" fill="rgb(216,158,49)" fg:x="1894" fg:w="3"/><text x="12.3360%" y="767.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="12.1243%" y="709" width="0.0128%" height="15" fill="rgb(236,107,19)" fg:x="1900" fg:w="2"/><text x="12.3743%" y="719.50"></text></g><g><title>deno`&lt;v8::V8::GLOBAL_STATE as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="12.1179%" y="741" width="0.0255%" height="15" fill="rgb(228,185,30)" fg:x="1899" fg:w="4"/><text x="12.3679%" y="751.50"></text></g><g><title>deno`spin::once::Once&lt;T&gt;::call_once (4 samples, 0.03%)</title><rect x="12.1179%" y="725" width="0.0255%" height="15" fill="rgb(246,134,8)" fg:x="1899" fg:w="4"/><text x="12.3679%" y="735.50"></text></g><g><title>deno`std::sync::poison::Flag::done (2 samples, 0.01%)</title><rect x="12.1498%" y="709" width="0.0128%" height="15" fill="rgb(214,143,50)" fg:x="1904" fg:w="2"/><text x="12.3998%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;v8::V8::GlobalState&gt;&gt; (3 samples, 0.02%)</title><rect x="12.1498%" y="741" width="0.0191%" height="15" fill="rgb(228,75,8)" fg:x="1904" fg:w="3"/><text x="12.3998%" y="751.50"></text></g><g><title>deno`&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="12.1498%" y="725" width="0.0191%" height="15" fill="rgb(207,175,4)" fg:x="1904" fg:w="3"/><text x="12.3998%" y="735.50"></text></g><g><title>deno`std::sync::poison::Flag::get (2 samples, 0.01%)</title><rect x="12.2009%" y="693" width="0.0128%" height="15" fill="rgb(205,108,24)" fg:x="1912" fg:w="2"/><text x="12.4509%" y="703.50"></text></g><g><title>deno`std::sync::mutex::MutexGuard&lt;T&gt;::new (6 samples, 0.04%)</title><rect x="12.1817%" y="725" width="0.0383%" height="15" fill="rgb(244,120,49)" fg:x="1909" fg:w="6"/><text x="12.4317%" y="735.50"></text></g><g><title>deno`std::sync::poison::Flag::borrow (5 samples, 0.03%)</title><rect x="12.1881%" y="709" width="0.0319%" height="15" fill="rgb(223,47,38)" fg:x="1910" fg:w="5"/><text x="12.4381%" y="719.50"></text></g><g><title>deno`std::sync::mutex::Mutex&lt;T&gt;::lock (11 samples, 0.07%)</title><rect x="12.1754%" y="741" width="0.0702%" height="15" fill="rgb(229,179,11)" fg:x="1908" fg:w="11"/><text x="12.4254%" y="751.50"></text></g><g><title>deno`std::sys_common::mutex::MovableMutex::raw_lock (3 samples, 0.02%)</title><rect x="12.2264%" y="725" width="0.0191%" height="15" fill="rgb(231,122,1)" fg:x="1916" fg:w="3"/><text x="12.4764%" y="735.50"></text></g><g><title>deno`std::sys::unix::locks::pthread_mutex::Mutex::lock (3 samples, 0.02%)</title><rect x="12.2264%" y="709" width="0.0191%" height="15" fill="rgb(245,119,9)" fg:x="1916" fg:w="3"/><text x="12.4764%" y="719.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="12.2328%" y="693" width="0.0128%" height="15" fill="rgb(241,163,25)" fg:x="1917" fg:w="2"/><text x="12.4828%" y="703.50"></text></g><g><title>deno`v8::V8::get_current_platform (23 samples, 0.15%)</title><rect x="12.1052%" y="757" width="0.1468%" height="15" fill="rgb(217,214,3)" fg:x="1897" fg:w="23"/><text x="12.3552%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::perform_microtask_checkpoint (4 samples, 0.03%)</title><rect x="12.2583%" y="757" width="0.0255%" height="15" fill="rgb(240,86,28)" fg:x="1921" fg:w="4"/><text x="12.5083%" y="767.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.01%)</title><rect x="12.2711%" y="741" width="0.0128%" height="15" fill="rgb(215,47,9)" fg:x="1923" fg:w="2"/><text x="12.5211%" y="751.50"></text></g><g><title>deno`&lt;v8::platform::Platform as v8::support::Shared&gt;::get (2 samples, 0.01%)</title><rect x="12.2902%" y="741" width="0.0128%" height="15" fill="rgb(252,25,45)" fg:x="1926" fg:w="2"/><text x="12.5402%" y="751.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (3 samples, 0.02%)</title><rect x="12.3476%" y="629" width="0.0191%" height="15" fill="rgb(251,164,9)" fg:x="1935" fg:w="3"/><text x="12.5976%" y="639.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (4 samples, 0.03%)</title><rect x="12.3476%" y="645" width="0.0255%" height="15" fill="rgb(233,194,0)" fg:x="1935" fg:w="4"/><text x="12.5976%" y="655.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (3 samples, 0.02%)</title><rect x="12.3796%" y="629" width="0.0191%" height="15" fill="rgb(249,111,24)" fg:x="1940" fg:w="3"/><text x="12.6296%" y="639.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (3 samples, 0.02%)</title><rect x="12.3796%" y="613" width="0.0191%" height="15" fill="rgb(250,223,3)" fg:x="1940" fg:w="3"/><text x="12.6296%" y="623.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (3 samples, 0.02%)</title><rect x="12.3796%" y="597" width="0.0191%" height="15" fill="rgb(236,178,37)" fg:x="1940" fg:w="3"/><text x="12.6296%" y="607.50"></text></g><g><title>deno`v8::internal::ScavengeJob::Task::RunInternal (13 samples, 0.08%)</title><rect x="12.3221%" y="725" width="0.0830%" height="15" fill="rgb(241,158,50)" fg:x="1931" fg:w="13"/><text x="12.5721%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (13 samples, 0.08%)</title><rect x="12.3221%" y="709" width="0.0830%" height="15" fill="rgb(213,121,41)" fg:x="1931" fg:w="13"/><text x="12.5721%" y="719.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (11 samples, 0.07%)</title><rect x="12.3349%" y="693" width="0.0702%" height="15" fill="rgb(240,92,3)" fg:x="1933" fg:w="11"/><text x="12.5849%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (11 samples, 0.07%)</title><rect x="12.3349%" y="677" width="0.0702%" height="15" fill="rgb(205,123,3)" fg:x="1933" fg:w="11"/><text x="12.5849%" y="687.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (10 samples, 0.06%)</title><rect x="12.3413%" y="661" width="0.0638%" height="15" fill="rgb(205,97,47)" fg:x="1934" fg:w="10"/><text x="12.5913%" y="671.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (4 samples, 0.03%)</title><rect x="12.3796%" y="645" width="0.0255%" height="15" fill="rgb(247,152,14)" fg:x="1940" fg:w="4"/><text x="12.6296%" y="655.50"></text></g><g><title>deno`v8::platform::Platform::pump_message_loop (21 samples, 0.13%)</title><rect x="12.2838%" y="757" width="0.1340%" height="15" fill="rgb(248,195,53)" fg:x="1925" fg:w="21"/><text x="12.5338%" y="767.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (16 samples, 0.10%)</title><rect x="12.3157%" y="741" width="0.1021%" height="15" fill="rgb(226,201,16)" fg:x="1930" fg:w="16"/><text x="12.5657%" y="751.50"></text></g><g><title>deno`v8::platform::PumpMessageLoop (2 samples, 0.01%)</title><rect x="12.4178%" y="757" width="0.0128%" height="15" fill="rgb(205,98,0)" fg:x="1946" fg:w="2"/><text x="12.6678%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&lt;C&gt;&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (2 samples, 0.01%)</title><rect x="12.4306%" y="741" width="0.0128%" height="15" fill="rgb(214,191,48)" fg:x="1948" fg:w="2"/><text x="12.6806%" y="751.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::exception (5 samples, 0.03%)</title><rect x="12.4306%" y="757" width="0.0319%" height="15" fill="rgb(237,112,39)" fg:x="1948" fg:w="5"/><text x="12.6806%" y="767.50"></text></g><g><title>deno`v8::scope::HandleScope&lt;()&gt;::cast_local (3 samples, 0.02%)</title><rect x="12.4434%" y="741" width="0.0191%" height="15" fill="rgb(247,203,27)" fg:x="1950" fg:w="3"/><text x="12.6934%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (2 samples, 0.01%)</title><rect x="12.4497%" y="725" width="0.0128%" height="15" fill="rgb(235,124,28)" fg:x="1951" fg:w="2"/><text x="12.6997%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (3 samples, 0.02%)</title><rect x="12.5008%" y="709" width="0.0191%" height="15" fill="rgb(208,207,46)" fg:x="1959" fg:w="3"/><text x="12.7508%" y="719.50"></text></g><g><title>deno`&lt;T as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (10 samples, 0.06%)</title><rect x="12.4625%" y="741" width="0.0638%" height="15" fill="rgb(234,176,4)" fg:x="1953" fg:w="10"/><text x="12.7125%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (10 samples, 0.06%)</title><rect x="12.4625%" y="725" width="0.0638%" height="15" fill="rgb(230,133,28)" fg:x="1953" fg:w="10"/><text x="12.7125%" y="735.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (3 samples, 0.02%)</title><rect x="12.5327%" y="741" width="0.0191%" height="15" fill="rgb(211,137,40)" fg:x="1964" fg:w="3"/><text x="12.7827%" y="751.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (3 samples, 0.02%)</title><rect x="12.5646%" y="725" width="0.0191%" height="15" fill="rgb(254,35,13)" fg:x="1969" fg:w="3"/><text x="12.8146%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (6 samples, 0.04%)</title><rect x="12.5518%" y="741" width="0.0383%" height="15" fill="rgb(225,49,51)" fg:x="1967" fg:w="6"/><text x="12.8018%" y="751.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="12.6029%" y="709" width="0.0128%" height="15" fill="rgb(251,10,15)" fg:x="1975" fg:w="2"/><text x="12.8529%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="12.6157%" y="709" width="0.0128%" height="15" fill="rgb(228,207,15)" fg:x="1977" fg:w="2"/><text x="12.8657%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="12.6157%" y="693" width="0.0128%" height="15" fill="rgb(241,99,19)" fg:x="1977" fg:w="2"/><text x="12.8657%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::allocate_or_reuse_scope_data (4 samples, 0.03%)</title><rect x="12.6284%" y="709" width="0.0255%" height="15" fill="rgb(207,104,49)" fg:x="1979" fg:w="4"/><text x="12.8784%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data::_{{closure}}::_{{closure}} (5 samples, 0.03%)</title><rect x="12.6731%" y="677" width="0.0319%" height="15" fill="rgb(234,99,18)" fg:x="1986" fg:w="5"/><text x="12.9231%" y="687.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="12.6922%" y="661" width="0.0128%" height="15" fill="rgb(213,191,49)" fg:x="1989" fg:w="2"/><text x="12.9422%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeTypeSpecificData::init_with (7 samples, 0.04%)</title><rect x="12.6731%" y="693" width="0.0447%" height="15" fill="rgb(210,226,19)" fg:x="1986" fg:w="7"/><text x="12.9231%" y="703.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="12.7050%" y="677" width="0.0128%" height="15" fill="rgb(229,97,18)" fg:x="1991" fg:w="2"/><text x="12.9550%" y="687.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::pump_v8_message_loop (376 samples, 2.40%)</title><rect x="10.3503%" y="773" width="2.3993%" height="15" fill="rgb(211,167,15)" fg:x="1622" fg:w="376"/><text x="10.6003%" y="783.50">de..</text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::new (45 samples, 0.29%)</title><rect x="12.4625%" y="757" width="0.2872%" height="15" fill="rgb(210,169,34)" fg:x="1953" fg:w="45"/><text x="12.7125%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (25 samples, 0.16%)</title><rect x="12.5901%" y="741" width="0.1595%" height="15" fill="rgb(241,121,31)" fg:x="1973" fg:w="25"/><text x="12.8401%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_scope_data_with (23 samples, 0.15%)</title><rect x="12.6029%" y="725" width="0.1468%" height="15" fill="rgb(232,40,11)" fg:x="1975" fg:w="23"/><text x="12.8529%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data::_{{closure}} (15 samples, 0.10%)</title><rect x="12.6539%" y="709" width="0.0957%" height="15" fill="rgb(205,86,26)" fg:x="1983" fg:w="15"/><text x="12.9039%" y="719.50"></text></g><g><title>deno`v8::scope::raw::TryCatch::init (4 samples, 0.03%)</title><rect x="12.7241%" y="693" width="0.0255%" height="15" fill="rgb(231,126,28)" fg:x="1994" fg:w="4"/><text x="12.9741%" y="703.50"></text></g><g><title>deno`v8::internal::Isolate::RegisterTryCatchHandler (2 samples, 0.01%)</title><rect x="12.7369%" y="677" width="0.0128%" height="15" fill="rgb(219,221,18)" fg:x="1996" fg:w="2"/><text x="12.9869%" y="687.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as v8::handle::Handle&gt;::get_handle_info (3 samples, 0.02%)</title><rect x="12.8901%" y="725" width="0.0191%" height="15" fill="rgb(211,40,0)" fg:x="2020" fg:w="3"/><text x="13.1401%" y="735.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="12.8964%" y="709" width="0.0128%" height="15" fill="rgb(239,85,43)" fg:x="2021" fg:w="2"/><text x="13.1464%" y="719.50"></text></g><g><title>deno`&lt;v8::handle::HandleHost as core::convert::From&lt;&amp;v8::isolate::IsolateHandle&gt;&gt;::from (2 samples, 0.01%)</title><rect x="12.8964%" y="693" width="0.0128%" height="15" fill="rgb(231,55,21)" fg:x="2021" fg:w="2"/><text x="13.1464%" y="703.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::get_isolate_ptr (2 samples, 0.01%)</title><rect x="12.8964%" y="677" width="0.0128%" height="15" fill="rgb(225,184,43)" fg:x="2021" fg:w="2"/><text x="13.1464%" y="687.50"></text></g><g><title>deno`alloc::sync::data_offset (2 samples, 0.01%)</title><rect x="12.9347%" y="645" width="0.0128%" height="15" fill="rgb(251,158,41)" fg:x="2027" fg:w="2"/><text x="13.1847%" y="655.50"></text></g><g><title>deno`alloc::sync::data_offset_align (2 samples, 0.01%)</title><rect x="12.9347%" y="629" width="0.0128%" height="15" fill="rgb(234,159,37)" fg:x="2027" fg:w="2"/><text x="13.1847%" y="639.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (3 samples, 0.02%)</title><rect x="12.9347%" y="661" width="0.0191%" height="15" fill="rgb(216,204,22)" fg:x="2027" fg:w="3"/><text x="13.1847%" y="671.50"></text></g><g><title>deno`v8::handle::Global&lt;T&gt;::new_raw (9 samples, 0.06%)</title><rect x="12.9156%" y="725" width="0.0574%" height="15" fill="rgb(214,17,3)" fg:x="2024" fg:w="9"/><text x="13.1656%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (6 samples, 0.04%)</title><rect x="12.9347%" y="709" width="0.0383%" height="15" fill="rgb(212,111,17)" fg:x="2027" fg:w="6"/><text x="13.1847%" y="719.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::new (6 samples, 0.04%)</title><rect x="12.9347%" y="693" width="0.0383%" height="15" fill="rgb(221,157,24)" fg:x="2027" fg:w="6"/><text x="13.1847%" y="703.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (6 samples, 0.04%)</title><rect x="12.9347%" y="677" width="0.0383%" height="15" fill="rgb(252,16,13)" fg:x="2027" fg:w="6"/><text x="13.1847%" y="687.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex (2 samples, 0.01%)</title><rect x="12.9602%" y="661" width="0.0128%" height="15" fill="rgb(221,62,2)" fg:x="2031" fg:w="2"/><text x="13.2102%" y="671.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 0.10%)</title><rect x="12.8773%" y="757" width="0.1021%" height="15" fill="rgb(247,87,22)" fg:x="2018" fg:w="16"/><text x="13.1273%" y="767.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.09%)</title><rect x="12.8901%" y="741" width="0.0893%" height="15" fill="rgb(215,73,9)" fg:x="2020" fg:w="14"/><text x="13.1401%" y="751.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (5 samples, 0.03%)</title><rect x="13.0241%" y="709" width="0.0319%" height="15" fill="rgb(207,175,33)" fg:x="2041" fg:w="5"/><text x="13.2741%" y="719.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="13.0304%" y="693" width="0.0255%" height="15" fill="rgb(243,129,54)" fg:x="2042" fg:w="4"/><text x="13.2804%" y="703.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (15 samples, 0.10%)</title><rect x="12.9922%" y="725" width="0.0957%" height="15" fill="rgb(227,119,45)" fg:x="2036" fg:w="15"/><text x="13.2422%" y="735.50"></text></g><g><title>deno`core::alloc::layout::size_align (4 samples, 0.03%)</title><rect x="13.0623%" y="709" width="0.0255%" height="15" fill="rgb(205,109,36)" fg:x="2047" fg:w="4"/><text x="13.3123%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope as core::ops::deref::DerefMut&gt;::deref_mut (16 samples, 0.10%)</title><rect x="12.9922%" y="757" width="0.1021%" height="15" fill="rgb(205,6,39)" fg:x="2036" fg:w="16"/><text x="13.2422%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (16 samples, 0.10%)</title><rect x="12.9922%" y="741" width="0.1021%" height="15" fill="rgb(221,32,16)" fg:x="2036" fg:w="16"/><text x="13.2422%" y="751.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (3 samples, 0.02%)</title><rect x="13.1006%" y="709" width="0.0191%" height="15" fill="rgb(228,144,50)" fg:x="2053" fg:w="3"/><text x="13.3506%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.03%)</title><rect x="13.0943%" y="757" width="0.0319%" height="15" fill="rgb(229,201,53)" fg:x="2052" fg:w="5"/><text x="13.3443%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::isolate::Isolate&gt;&gt;::as_mut (5 samples, 0.03%)</title><rect x="13.0943%" y="741" width="0.0319%" height="15" fill="rgb(249,153,27)" fg:x="2052" fg:w="5"/><text x="13.3443%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (5 samples, 0.03%)</title><rect x="13.0943%" y="725" width="0.0319%" height="15" fill="rgb(227,106,25)" fg:x="2052" fg:w="5"/><text x="13.3443%" y="735.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="13.1453%" y="693" width="0.0191%" height="15" fill="rgb(230,65,29)" fg:x="2060" fg:w="3"/><text x="13.3953%" y="703.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (6 samples, 0.04%)</title><rect x="13.1325%" y="709" width="0.0383%" height="15" fill="rgb(221,57,46)" fg:x="2058" fg:w="6"/><text x="13.3825%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.06%)</title><rect x="13.1325%" y="757" width="0.0574%" height="15" fill="rgb(229,161,17)" fg:x="2058" fg:w="9"/><text x="13.3825%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&gt;&gt;::as_mut (9 samples, 0.06%)</title><rect x="13.1325%" y="741" width="0.0574%" height="15" fill="rgb(222,213,11)" fg:x="2058" fg:w="9"/><text x="13.3825%" y="751.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (9 samples, 0.06%)</title><rect x="13.1325%" y="725" width="0.0574%" height="15" fill="rgb(235,35,13)" fg:x="2058" fg:w="9"/><text x="13.3825%" y="735.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (2 samples, 0.01%)</title><rect x="13.1772%" y="709" width="0.0128%" height="15" fill="rgb(233,158,34)" fg:x="2065" fg:w="2"/><text x="13.4272%" y="719.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="13.1963%" y="741" width="0.0255%" height="15" fill="rgb(215,151,48)" fg:x="2068" fg:w="4"/><text x="13.4463%" y="751.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (2 samples, 0.01%)</title><rect x="13.2091%" y="725" width="0.0128%" height="15" fill="rgb(229,84,14)" fg:x="2070" fg:w="2"/><text x="13.4591%" y="735.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_slice (6 samples, 0.04%)</title><rect x="13.1900%" y="757" width="0.0383%" height="15" fill="rgb(229,68,14)" fg:x="2067" fg:w="6"/><text x="13.4400%" y="767.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2 samples, 0.01%)</title><rect x="13.2921%" y="709" width="0.0128%" height="15" fill="rgb(243,106,26)" fg:x="2083" fg:w="2"/><text x="13.5421%" y="719.50"></text></g><g><title>deno`alloc::alloc::alloc (5 samples, 0.03%)</title><rect x="13.3304%" y="661" width="0.0319%" height="15" fill="rgb(206,45,38)" fg:x="2089" fg:w="5"/><text x="13.5804%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="13.3304%" y="645" width="0.0319%" height="15" fill="rgb(226,6,15)" fg:x="2089" fg:w="5"/><text x="13.5804%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="13.3431%" y="629" width="0.0191%" height="15" fill="rgb(232,22,54)" fg:x="2091" fg:w="3"/><text x="13.5931%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="13.3431%" y="613" width="0.0191%" height="15" fill="rgb(229,222,32)" fg:x="2091" fg:w="3"/><text x="13.5931%" y="623.50"></text></g><g><title>deno`alloc::alloc::Global::alloc_impl (11 samples, 0.07%)</title><rect x="13.3112%" y="677" width="0.0702%" height="15" fill="rgb(228,62,29)" fg:x="2086" fg:w="11"/><text x="13.5612%" y="687.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.08%)</title><rect x="13.3112%" y="693" width="0.0830%" height="15" fill="rgb(251,103,34)" fg:x="2086" fg:w="13"/><text x="13.5612%" y="703.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (16 samples, 0.10%)</title><rect x="13.3048%" y="709" width="0.1021%" height="15" fill="rgb(233,12,30)" fg:x="2085" fg:w="16"/><text x="13.5548%" y="719.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="13.3942%" y="693" width="0.0128%" height="15" fill="rgb(238,52,0)" fg:x="2099" fg:w="2"/><text x="13.6442%" y="703.50"></text></g><g><title>deno`core::cmp::max (9 samples, 0.06%)</title><rect x="13.4069%" y="709" width="0.0574%" height="15" fill="rgb(223,98,5)" fg:x="2101" fg:w="9"/><text x="13.6569%" y="719.50"></text></g><g><title>deno`core::cmp::Ord::max (9 samples, 0.06%)</title><rect x="13.4069%" y="693" width="0.0574%" height="15" fill="rgb(228,75,37)" fg:x="2101" fg:w="9"/><text x="13.6569%" y="703.50"></text></g><g><title>deno`core::cmp::max_by (7 samples, 0.04%)</title><rect x="13.4197%" y="677" width="0.0447%" height="15" fill="rgb(205,115,49)" fg:x="2103" fg:w="7"/><text x="13.6697%" y="687.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="13.4516%" y="661" width="0.0128%" height="15" fill="rgb(250,154,43)" fg:x="2108" fg:w="2"/><text x="13.7016%" y="671.50"></text></g><g><title>deno`core::num::_&lt;impl usize&gt;::checked_mul (2 samples, 0.01%)</title><rect x="13.4644%" y="709" width="0.0128%" height="15" fill="rgb(226,43,29)" fg:x="2110" fg:w="2"/><text x="13.7144%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (2 samples, 0.01%)</title><rect x="13.4771%" y="709" width="0.0128%" height="15" fill="rgb(249,228,39)" fg:x="2112" fg:w="2"/><text x="13.7271%" y="719.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (39 samples, 0.25%)</title><rect x="13.2665%" y="725" width="0.2489%" height="15" fill="rgb(216,79,43)" fg:x="2079" fg:w="39"/><text x="13.5165%" y="735.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::new_unchecked (4 samples, 0.03%)</title><rect x="13.4899%" y="709" width="0.0255%" height="15" fill="rgb(228,95,12)" fg:x="2114" fg:w="4"/><text x="13.7399%" y="719.50"></text></g><g><title>deno`alloc::raw_vec::handle_reserve (3 samples, 0.02%)</title><rect x="13.5154%" y="725" width="0.0191%" height="15" fill="rgb(249,221,15)" fg:x="2118" fg:w="3"/><text x="13.7654%" y="735.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="13.5218%" y="709" width="0.0128%" height="15" fill="rgb(233,34,13)" fg:x="2119" fg:w="2"/><text x="13.7718%" y="719.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (47 samples, 0.30%)</title><rect x="13.2474%" y="741" width="0.2999%" height="15" fill="rgb(214,103,39)" fg:x="2076" fg:w="47"/><text x="13.4974%" y="751.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.02%)</title><rect x="13.5665%" y="725" width="0.0191%" height="15" fill="rgb(251,126,39)" fg:x="2126" fg:w="3"/><text x="13.8165%" y="735.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::push (56 samples, 0.36%)</title><rect x="13.2346%" y="757" width="0.3573%" height="15" fill="rgb(214,216,36)" fg:x="2074" fg:w="56"/><text x="13.4846%" y="767.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7 samples, 0.04%)</title><rect x="13.5473%" y="741" width="0.0447%" height="15" fill="rgb(220,221,8)" fg:x="2123" fg:w="7"/><text x="13.7973%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="13.6175%" y="709" width="0.0128%" height="15" fill="rgb(240,216,3)" fg:x="2134" fg:w="2"/><text x="13.8675%" y="719.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (7 samples, 0.04%)</title><rect x="13.5920%" y="757" width="0.0447%" height="15" fill="rgb(232,218,17)" fg:x="2130" fg:w="7"/><text x="13.8420%" y="767.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (7 samples, 0.04%)</title><rect x="13.5920%" y="741" width="0.0447%" height="15" fill="rgb(229,163,45)" fg:x="2130" fg:w="7"/><text x="13.8420%" y="751.50"></text></g><g><title>deno`core::cell::BorrowRef::new (6 samples, 0.04%)</title><rect x="13.5984%" y="725" width="0.0383%" height="15" fill="rgb(231,110,42)" fg:x="2131" fg:w="6"/><text x="13.8484%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (3 samples, 0.02%)</title><rect x="13.6367%" y="757" width="0.0191%" height="15" fill="rgb(208,170,48)" fg:x="2137" fg:w="3"/><text x="13.8867%" y="767.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.02%)</title><rect x="13.6367%" y="741" width="0.0191%" height="15" fill="rgb(239,116,25)" fg:x="2137" fg:w="3"/><text x="13.8867%" y="751.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (3 samples, 0.02%)</title><rect x="13.6367%" y="725" width="0.0191%" height="15" fill="rgb(219,200,50)" fg:x="2137" fg:w="3"/><text x="13.8867%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="13.6430%" y="709" width="0.0128%" height="15" fill="rgb(245,200,0)" fg:x="2138" fg:w="2"/><text x="13.8930%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="13.6430%" y="693" width="0.0128%" height="15" fill="rgb(245,119,33)" fg:x="2138" fg:w="2"/><text x="13.8930%" y="703.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="13.6430%" y="677" width="0.0128%" height="15" fill="rgb(231,125,12)" fg:x="2138" fg:w="2"/><text x="13.8930%" y="687.50"></text></g><g><title>deno`core::convert::num::ptr_try_from_impls::_&lt;impl core::convert::TryFrom&lt;usize&gt; for i32&gt;::try_from (4 samples, 0.03%)</title><rect x="13.6558%" y="757" width="0.0255%" height="15" fill="rgb(216,96,41)" fg:x="2140" fg:w="4"/><text x="13.9058%" y="767.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (4 samples, 0.03%)</title><rect x="13.6813%" y="725" width="0.0255%" height="15" fill="rgb(248,43,45)" fg:x="2144" fg:w="4"/><text x="13.9313%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="13.6877%" y="709" width="0.0191%" height="15" fill="rgb(217,222,7)" fg:x="2145" fg:w="3"/><text x="13.9377%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="13.6877%" y="693" width="0.0191%" height="15" fill="rgb(233,28,6)" fg:x="2145" fg:w="3"/><text x="13.9377%" y="703.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="13.6941%" y="677" width="0.0128%" height="15" fill="rgb(231,218,15)" fg:x="2146" fg:w="2"/><text x="13.9441%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="13.6813%" y="757" width="0.0319%" height="15" fill="rgb(226,171,48)" fg:x="2144" fg:w="5"/><text x="13.9313%" y="767.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="13.6813%" y="741" width="0.0319%" height="15" fill="rgb(235,201,9)" fg:x="2144" fg:w="5"/><text x="13.9313%" y="751.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="13.7132%" y="725" width="0.0128%" height="15" fill="rgb(217,80,15)" fg:x="2149" fg:w="2"/><text x="13.9632%" y="735.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="13.7132%" y="741" width="0.0191%" height="15" fill="rgb(219,152,8)" fg:x="2149" fg:w="3"/><text x="13.9632%" y="751.50"></text></g><g><title>deno`core::alloc::layout::Layout::align (3 samples, 0.02%)</title><rect x="13.7707%" y="677" width="0.0191%" height="15" fill="rgb(243,107,38)" fg:x="2158" fg:w="3"/><text x="14.0207%" y="687.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.04%)</title><rect x="13.7579%" y="709" width="0.0447%" height="15" fill="rgb(231,17,5)" fg:x="2156" fg:w="7"/><text x="14.0079%" y="719.50"></text></g><g><title>deno`alloc::alloc::dealloc (5 samples, 0.03%)</title><rect x="13.7707%" y="693" width="0.0319%" height="15" fill="rgb(209,25,54)" fg:x="2158" fg:w="5"/><text x="14.0207%" y="703.50"></text></g><g><title>deno`core::alloc::layout::Layout::array (2 samples, 0.01%)</title><rect x="13.8089%" y="693" width="0.0128%" height="15" fill="rgb(219,0,2)" fg:x="2164" fg:w="2"/><text x="14.0589%" y="703.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (2 samples, 0.01%)</title><rect x="13.8281%" y="693" width="0.0128%" height="15" fill="rgb(246,9,5)" fg:x="2167" fg:w="2"/><text x="14.0781%" y="703.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.05%)</title><rect x="13.8026%" y="709" width="0.0510%" height="15" fill="rgb(226,159,4)" fg:x="2163" fg:w="8"/><text x="14.0526%" y="719.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::cast (2 samples, 0.01%)</title><rect x="13.8409%" y="693" width="0.0128%" height="15" fill="rgb(219,175,34)" fg:x="2169" fg:w="2"/><text x="14.0909%" y="703.50"></text></g><g><title>deno`core::alloc::layout::Layout::array (2 samples, 0.01%)</title><rect x="13.8536%" y="709" width="0.0128%" height="15" fill="rgb(236,10,46)" fg:x="2171" fg:w="2"/><text x="14.1036%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt;&gt; (26 samples, 0.17%)</title><rect x="13.7132%" y="757" width="0.1659%" height="15" fill="rgb(240,211,16)" fg:x="2149" fg:w="26"/><text x="13.9632%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt;&gt; (23 samples, 0.15%)</title><rect x="13.7324%" y="741" width="0.1468%" height="15" fill="rgb(205,3,43)" fg:x="2152" fg:w="23"/><text x="13.9824%" y="751.50"></text></g><g><title>deno`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.15%)</title><rect x="13.7324%" y="725" width="0.1468%" height="15" fill="rgb(245,7,22)" fg:x="2152" fg:w="23"/><text x="13.9824%" y="735.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::cast (2 samples, 0.01%)</title><rect x="13.8664%" y="709" width="0.0128%" height="15" fill="rgb(239,132,32)" fg:x="2173" fg:w="2"/><text x="14.1164%" y="719.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="13.8855%" y="725" width="0.0191%" height="15" fill="rgb(228,202,34)" fg:x="2176" fg:w="3"/><text x="14.1355%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="13.8855%" y="709" width="0.0191%" height="15" fill="rgb(254,200,22)" fg:x="2176" fg:w="3"/><text x="14.1355%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="13.8855%" y="693" width="0.0191%" height="15" fill="rgb(219,10,39)" fg:x="2176" fg:w="3"/><text x="14.1355%" y="703.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="13.8919%" y="677" width="0.0128%" height="15" fill="rgb(226,210,39)" fg:x="2177" fg:w="2"/><text x="14.1419%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::ops::OpState&gt;&gt; (4 samples, 0.03%)</title><rect x="13.8855%" y="757" width="0.0255%" height="15" fill="rgb(208,219,16)" fg:x="2176" fg:w="4"/><text x="14.1355%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (4 samples, 0.03%)</title><rect x="13.8855%" y="741" width="0.0255%" height="15" fill="rgb(216,158,51)" fg:x="2176" fg:w="4"/><text x="14.1355%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (2 samples, 0.01%)</title><rect x="13.9110%" y="757" width="0.0128%" height="15" fill="rgb(233,14,44)" fg:x="2180" fg:w="2"/><text x="14.1610%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (2 samples, 0.01%)</title><rect x="13.9110%" y="741" width="0.0128%" height="15" fill="rgb(237,97,39)" fg:x="2180" fg:w="2"/><text x="14.1610%" y="751.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="13.9110%" y="725" width="0.0128%" height="15" fill="rgb(218,198,43)" fg:x="2180" fg:w="2"/><text x="14.1610%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="13.9110%" y="709" width="0.0128%" height="15" fill="rgb(231,104,20)" fg:x="2180" fg:w="2"/><text x="14.1610%" y="719.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (3 samples, 0.02%)</title><rect x="13.9621%" y="725" width="0.0191%" height="15" fill="rgb(254,36,13)" fg:x="2188" fg:w="3"/><text x="14.2121%" y="735.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.06%)</title><rect x="13.9302%" y="741" width="0.0574%" height="15" fill="rgb(248,14,50)" fg:x="2183" fg:w="9"/><text x="14.1802%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::isolate::IsolateHandle&gt; (4 samples, 0.03%)</title><rect x="13.9876%" y="741" width="0.0255%" height="15" fill="rgb(217,107,29)" fg:x="2192" fg:w="4"/><text x="14.2376%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;v8::isolate::IsolateAnnex&gt;&gt; (3 samples, 0.02%)</title><rect x="13.9940%" y="725" width="0.0191%" height="15" fill="rgb(251,169,33)" fg:x="2193" fg:w="3"/><text x="14.2440%" y="735.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="13.9940%" y="709" width="0.0191%" height="15" fill="rgb(217,108,32)" fg:x="2193" fg:w="3"/><text x="14.2440%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::handle::Global&lt;v8::data::Function&gt;&gt; (15 samples, 0.10%)</title><rect x="13.9302%" y="757" width="0.0957%" height="15" fill="rgb(219,66,42)" fg:x="2183" fg:w="15"/><text x="14.1802%" y="767.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="14.0323%" y="709" width="0.0128%" height="15" fill="rgb(206,180,7)" fg:x="2199" fg:w="2"/><text x="14.2823%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (7 samples, 0.04%)</title><rect x="14.0259%" y="725" width="0.0447%" height="15" fill="rgb(208,226,31)" fg:x="2198" fg:w="7"/><text x="14.2759%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="14.0578%" y="709" width="0.0128%" height="15" fill="rgb(218,26,49)" fg:x="2203" fg:w="2"/><text x="14.3078%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="14.0833%" y="709" width="0.0191%" height="15" fill="rgb(233,197,48)" fg:x="2207" fg:w="3"/><text x="14.3333%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="14.0833%" y="693" width="0.0191%" height="15" fill="rgb(252,181,51)" fg:x="2207" fg:w="3"/><text x="14.3333%" y="703.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="14.0833%" y="677" width="0.0191%" height="15" fill="rgb(253,90,19)" fg:x="2207" fg:w="3"/><text x="14.3333%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (13 samples, 0.08%)</title><rect x="14.0259%" y="757" width="0.0830%" height="15" fill="rgb(215,171,30)" fg:x="2198" fg:w="13"/><text x="14.2759%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.08%)</title><rect x="14.0259%" y="741" width="0.0830%" height="15" fill="rgb(214,222,9)" fg:x="2198" fg:w="13"/><text x="14.2759%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (6 samples, 0.04%)</title><rect x="14.0706%" y="725" width="0.0383%" height="15" fill="rgb(223,3,22)" fg:x="2205" fg:w="6"/><text x="14.3206%" y="735.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="14.1152%" y="709" width="0.0128%" height="15" fill="rgb(225,196,46)" fg:x="2212" fg:w="2"/><text x="14.3652%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (5 samples, 0.03%)</title><rect x="14.1089%" y="725" width="0.0319%" height="15" fill="rgb(209,110,37)" fg:x="2211" fg:w="5"/><text x="14.3589%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="14.1280%" y="709" width="0.0128%" height="15" fill="rgb(249,89,12)" fg:x="2214" fg:w="2"/><text x="14.3780%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="14.1280%" y="693" width="0.0128%" height="15" fill="rgb(226,27,33)" fg:x="2214" fg:w="2"/><text x="14.3780%" y="703.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="14.1280%" y="677" width="0.0128%" height="15" fill="rgb(213,82,22)" fg:x="2214" fg:w="2"/><text x="14.3780%" y="687.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (2 samples, 0.01%)</title><rect x="14.1280%" y="661" width="0.0128%" height="15" fill="rgb(248,140,0)" fg:x="2214" fg:w="2"/><text x="14.3780%" y="671.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="14.1663%" y="661" width="0.0128%" height="15" fill="rgb(228,106,3)" fg:x="2220" fg:w="2"/><text x="14.4163%" y="671.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="14.1599%" y="693" width="0.0255%" height="15" fill="rgb(209,23,37)" fg:x="2219" fg:w="4"/><text x="14.4099%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="14.1663%" y="677" width="0.0191%" height="15" fill="rgb(241,93,50)" fg:x="2220" fg:w="3"/><text x="14.4163%" y="687.50"></text></g><g><title>deno`core::mem::drop (2 samples, 0.01%)</title><rect x="14.1854%" y="693" width="0.0128%" height="15" fill="rgb(253,46,43)" fg:x="2223" fg:w="2"/><text x="14.4354%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.01%)</title><rect x="14.1982%" y="693" width="0.0128%" height="15" fill="rgb(226,206,43)" fg:x="2225" fg:w="2"/><text x="14.4482%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::raw::TryCatch&gt; (2 samples, 0.01%)</title><rect x="14.1982%" y="677" width="0.0128%" height="15" fill="rgb(217,54,7)" fg:x="2225" fg:w="2"/><text x="14.4482%" y="687.50"></text></g><g><title>deno`&lt;v8::scope::raw::TryCatch as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="14.1982%" y="661" width="0.0128%" height="15" fill="rgb(223,5,52)" fg:x="2225" fg:w="2"/><text x="14.4482%" y="671.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (2 samples, 0.01%)</title><rect x="14.1982%" y="645" width="0.0128%" height="15" fill="rgb(206,52,46)" fg:x="2225" fg:w="2"/><text x="14.4482%" y="655.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;P&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.12%)</title><rect x="14.1089%" y="741" width="0.1212%" height="15" fill="rgb(253,136,11)" fg:x="2211" fg:w="19"/><text x="14.3589%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (14 samples, 0.09%)</title><rect x="14.1408%" y="725" width="0.0893%" height="15" fill="rgb(208,106,33)" fg:x="2216" fg:w="14"/><text x="14.3908%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::exit_scope (13 samples, 0.08%)</title><rect x="14.1472%" y="709" width="0.0830%" height="15" fill="rgb(206,54,4)" fg:x="2217" fg:w="13"/><text x="14.3972%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (3 samples, 0.02%)</title><rect x="14.2110%" y="693" width="0.0191%" height="15" fill="rgb(213,3,15)" fg:x="2227" fg:w="3"/><text x="14.4610%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&gt;&gt; (21 samples, 0.13%)</title><rect x="14.1089%" y="757" width="0.1340%" height="15" fill="rgb(252,211,39)" fg:x="2211" fg:w="21"/><text x="14.3589%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (2 samples, 0.01%)</title><rect x="14.2301%" y="741" width="0.0128%" height="15" fill="rgb(223,6,36)" fg:x="2230" fg:w="2"/><text x="14.4801%" y="751.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="14.2556%" y="709" width="0.0128%" height="15" fill="rgb(252,169,45)" fg:x="2234" fg:w="2"/><text x="14.5056%" y="719.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="14.3067%" y="597" width="0.0128%" height="15" fill="rgb(212,48,26)" fg:x="2242" fg:w="2"/><text x="14.5567%" y="607.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.03%)</title><rect x="14.3003%" y="645" width="0.0319%" height="15" fill="rgb(251,102,48)" fg:x="2241" fg:w="5"/><text x="14.5503%" y="655.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (5 samples, 0.03%)</title><rect x="14.3003%" y="629" width="0.0319%" height="15" fill="rgb(243,208,16)" fg:x="2241" fg:w="5"/><text x="14.5503%" y="639.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (5 samples, 0.03%)</title><rect x="14.3003%" y="613" width="0.0319%" height="15" fill="rgb(219,96,24)" fg:x="2241" fg:w="5"/><text x="14.5503%" y="623.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="14.3513%" y="597" width="0.0128%" height="15" fill="rgb(219,33,29)" fg:x="2249" fg:w="2"/><text x="14.6013%" y="607.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (6 samples, 0.04%)</title><rect x="14.3322%" y="645" width="0.0383%" height="15" fill="rgb(223,176,5)" fg:x="2246" fg:w="6"/><text x="14.5822%" y="655.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (5 samples, 0.03%)</title><rect x="14.3386%" y="629" width="0.0319%" height="15" fill="rgb(228,140,14)" fg:x="2247" fg:w="5"/><text x="14.5886%" y="639.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (3 samples, 0.02%)</title><rect x="14.3513%" y="613" width="0.0191%" height="15" fill="rgb(217,179,31)" fg:x="2249" fg:w="3"/><text x="14.6013%" y="623.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;&amp;mut v8::scope::HandleScope&gt;&gt; (3 samples, 0.02%)</title><rect x="14.3705%" y="645" width="0.0191%" height="15" fill="rgb(230,9,30)" fg:x="2252" fg:w="3"/><text x="14.6205%" y="655.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.01%)</title><rect x="14.3769%" y="629" width="0.0128%" height="15" fill="rgb(230,136,20)" fg:x="2253" fg:w="2"/><text x="14.6269%" y="639.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="14.3769%" y="613" width="0.0128%" height="15" fill="rgb(215,210,22)" fg:x="2253" fg:w="2"/><text x="14.6269%" y="623.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="14.3769%" y="597" width="0.0128%" height="15" fill="rgb(218,43,5)" fg:x="2253" fg:w="2"/><text x="14.6269%" y="607.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw (3 samples, 0.02%)</title><rect x="14.3960%" y="613" width="0.0191%" height="15" fill="rgb(216,11,5)" fg:x="2256" fg:w="3"/><text x="14.6460%" y="623.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="14.4024%" y="597" width="0.0128%" height="15" fill="rgb(209,82,29)" fg:x="2257" fg:w="2"/><text x="14.6524%" y="607.50"></text></g><g><title>deno`v8::Integer::New (2 samples, 0.01%)</title><rect x="14.4215%" y="597" width="0.0128%" height="15" fill="rgb(244,115,12)" fg:x="2260" fg:w="2"/><text x="14.6715%" y="607.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new_from_unsigned::_{{closure}} (5 samples, 0.03%)</title><rect x="14.4152%" y="613" width="0.0319%" height="15" fill="rgb(222,82,18)" fg:x="2259" fg:w="5"/><text x="14.6652%" y="623.50"></text></g><g><title>deno`v8::Integer::NewFromUnsigned (2 samples, 0.01%)</title><rect x="14.4343%" y="597" width="0.0128%" height="15" fill="rgb(249,227,8)" fg:x="2262" fg:w="2"/><text x="14.6843%" y="607.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="14.4598%" y="597" width="0.0191%" height="15" fill="rgb(253,141,45)" fg:x="2266" fg:w="3"/><text x="14.7098%" y="607.50"></text></g><g><title>deno`&lt;serde_v8::serializable::Primitive as serde::ser::Serialize&gt;::serialize (35 samples, 0.22%)</title><rect x="14.2748%" y="693" width="0.2233%" height="15" fill="rgb(234,184,4)" fg:x="2237" fg:w="35"/><text x="14.5248%" y="703.50"></text></g><g><title>deno`serde::ser::impls::_&lt;impl serde::ser::Serialize for u32&gt;::serialize (33 samples, 0.21%)</title><rect x="14.2875%" y="677" width="0.2106%" height="15" fill="rgb(218,194,23)" fg:x="2239" fg:w="33"/><text x="14.5375%" y="687.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (33 samples, 0.21%)</title><rect x="14.2875%" y="661" width="0.2106%" height="15" fill="rgb(235,66,41)" fg:x="2239" fg:w="33"/><text x="14.5375%" y="671.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new_from_unsigned (17 samples, 0.11%)</title><rect x="14.3896%" y="645" width="0.1085%" height="15" fill="rgb(245,217,1)" fg:x="2255" fg:w="17"/><text x="14.6396%" y="655.50"></text></g><g><title>deno`v8::scope::HandleScope&lt;()&gt;::cast_local (17 samples, 0.11%)</title><rect x="14.3896%" y="629" width="0.1085%" height="15" fill="rgb(229,91,1)" fg:x="2255" fg:w="17"/><text x="14.6396%" y="639.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (8 samples, 0.05%)</title><rect x="14.4471%" y="613" width="0.0510%" height="15" fill="rgb(207,101,30)" fg:x="2264" fg:w="8"/><text x="14.6971%" y="623.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (40 samples, 0.26%)</title><rect x="14.2493%" y="757" width="0.2552%" height="15" fill="rgb(223,82,49)" fg:x="2233" fg:w="40"/><text x="14.4993%" y="767.50"></text></g><g><title>deno`serde_v8::serializable::SerializablePkg::to_v8 (39 samples, 0.25%)</title><rect x="14.2556%" y="741" width="0.2489%" height="15" fill="rgb(218,167,17)" fg:x="2234" fg:w="39"/><text x="14.5056%" y="751.50"></text></g><g><title>deno`serde_v8::ser::to_v8 (39 samples, 0.25%)</title><rect x="14.2556%" y="725" width="0.2489%" height="15" fill="rgb(208,103,14)" fg:x="2234" fg:w="39"/><text x="14.5056%" y="735.50"></text></g><g><title>deno`serde::ser::impls::_&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (37 samples, 0.24%)</title><rect x="14.2684%" y="709" width="0.2361%" height="15" fill="rgb(238,20,8)" fg:x="2236" fg:w="37"/><text x="14.5184%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::ops_metrics::OpMetrics&gt;&gt; (2 samples, 0.01%)</title><rect x="14.5109%" y="741" width="0.0128%" height="15" fill="rgb(218,80,54)" fg:x="2274" fg:w="2"/><text x="14.7609%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.01%)</title><rect x="14.5109%" y="725" width="0.0128%" height="15" fill="rgb(240,144,17)" fg:x="2274" fg:w="2"/><text x="14.7609%" y="735.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="14.5109%" y="709" width="0.0128%" height="15" fill="rgb(245,27,50)" fg:x="2274" fg:w="2"/><text x="14.7609%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="14.5109%" y="693" width="0.0128%" height="15" fill="rgb(251,51,7)" fg:x="2274" fg:w="2"/><text x="14.7609%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="14.5109%" y="677" width="0.0128%" height="15" fill="rgb(245,217,29)" fg:x="2274" fg:w="2"/><text x="14.7609%" y="687.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.03%)</title><rect x="14.5300%" y="709" width="0.0255%" height="15" fill="rgb(221,176,29)" fg:x="2277" fg:w="4"/><text x="14.7800%" y="719.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (3 samples, 0.02%)</title><rect x="14.5364%" y="693" width="0.0191%" height="15" fill="rgb(212,180,24)" fg:x="2278" fg:w="3"/><text x="14.7864%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="14.5364%" y="677" width="0.0191%" height="15" fill="rgb(254,24,2)" fg:x="2278" fg:w="3"/><text x="14.7864%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="14.5364%" y="661" width="0.0191%" height="15" fill="rgb(230,100,2)" fg:x="2278" fg:w="3"/><text x="14.7864%" y="671.50"></text></g><g><title>deno`core::ptr::write (2 samples, 0.01%)</title><rect x="14.5428%" y="645" width="0.0128%" height="15" fill="rgb(219,142,25)" fg:x="2279" fg:w="2"/><text x="14.7928%" y="655.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (5 samples, 0.03%)</title><rect x="14.5300%" y="725" width="0.0319%" height="15" fill="rgb(240,73,43)" fg:x="2277" fg:w="5"/><text x="14.7800%" y="735.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.03%)</title><rect x="14.5811%" y="661" width="0.0255%" height="15" fill="rgb(214,114,15)" fg:x="2285" fg:w="4"/><text x="14.8311%" y="671.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="14.5938%" y="645" width="0.0128%" height="15" fill="rgb(207,130,4)" fg:x="2287" fg:w="2"/><text x="14.8438%" y="655.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (8 samples, 0.05%)</title><rect x="14.5747%" y="677" width="0.0510%" height="15" fill="rgb(221,25,40)" fg:x="2284" fg:w="8"/><text x="14.8247%" y="687.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts_mut (2 samples, 0.01%)</title><rect x="14.6130%" y="661" width="0.0128%" height="15" fill="rgb(241,184,7)" fg:x="2290" fg:w="2"/><text x="14.8630%" y="671.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.02%)</title><rect x="14.6257%" y="677" width="0.0191%" height="15" fill="rgb(235,159,4)" fg:x="2292" fg:w="3"/><text x="14.8757%" y="687.50"></text></g><g><title>deno`deno_core::ops_metrics::OpsTracker::track_async_completed (25 samples, 0.16%)</title><rect x="14.5109%" y="757" width="0.1595%" height="15" fill="rgb(214,87,48)" fg:x="2274" fg:w="25"/><text x="14.7609%" y="767.50"></text></g><g><title>deno`deno_core::ops_metrics::OpsTracker::metrics_mut (23 samples, 0.15%)</title><rect x="14.5236%" y="741" width="0.1468%" height="15" fill="rgb(246,198,24)" fg:x="2276" fg:w="23"/><text x="14.7736%" y="751.50"></text></g><g><title>deno`core::cell::RefMut&lt;T&gt;::map (17 samples, 0.11%)</title><rect x="14.5619%" y="725" width="0.1085%" height="15" fill="rgb(209,66,40)" fg:x="2282" fg:w="17"/><text x="14.8119%" y="735.50"></text></g><g><title>deno`deno_core::ops_metrics::OpsTracker::metrics_mut::_{{closure}} (17 samples, 0.11%)</title><rect x="14.5619%" y="709" width="0.1085%" height="15" fill="rgb(233,147,39)" fg:x="2282" fg:w="17"/><text x="14.8119%" y="719.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (17 samples, 0.11%)</title><rect x="14.5619%" y="693" width="0.1085%" height="15" fill="rgb(231,145,52)" fg:x="2282" fg:w="17"/><text x="14.8119%" y="703.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts_mut (4 samples, 0.03%)</title><rect x="14.6449%" y="677" width="0.0255%" height="15" fill="rgb(206,20,26)" fg:x="2295" fg:w="4"/><text x="14.8949%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::runtime::JsRealm&gt; (5 samples, 0.03%)</title><rect x="14.6768%" y="741" width="0.0319%" height="15" fill="rgb(238,220,4)" fg:x="2300" fg:w="5"/><text x="14.9268%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::handle::Global&lt;v8::data::Context&gt;&gt; (4 samples, 0.03%)</title><rect x="14.6832%" y="725" width="0.0255%" height="15" fill="rgb(252,195,42)" fg:x="2301" fg:w="4"/><text x="14.9332%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::isolate::IsolateHandle&gt; (2 samples, 0.01%)</title><rect x="14.6959%" y="709" width="0.0128%" height="15" fill="rgb(209,10,6)" fg:x="2303" fg:w="2"/><text x="14.9459%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;v8::isolate::IsolateAnnex&gt;&gt; (2 samples, 0.01%)</title><rect x="14.6959%" y="693" width="0.0128%" height="15" fill="rgb(229,3,52)" fg:x="2303" fg:w="2"/><text x="14.9459%" y="703.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="14.6959%" y="677" width="0.0128%" height="15" fill="rgb(253,49,37)" fg:x="2303" fg:w="2"/><text x="14.9459%" y="687.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (2 samples, 0.01%)</title><rect x="14.7342%" y="677" width="0.0128%" height="15" fill="rgb(240,103,49)" fg:x="2309" fg:w="2"/><text x="14.9842%" y="687.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="14.7342%" y="661" width="0.0128%" height="15" fill="rgb(250,182,30)" fg:x="2309" fg:w="2"/><text x="14.9842%" y="671.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (4 samples, 0.03%)</title><rect x="14.7597%" y="645" width="0.0255%" height="15" fill="rgb(248,8,30)" fg:x="2313" fg:w="4"/><text x="15.0097%" y="655.50"></text></g><g><title>deno`&lt;v8::scope::data::ScopeTypeSpecificData as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="14.7661%" y="629" width="0.0191%" height="15" fill="rgb(237,120,30)" fg:x="2314" fg:w="3"/><text x="15.0161%" y="639.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;v8::scope::raw::ContextScope&gt;&gt; (3 samples, 0.02%)</title><rect x="14.7661%" y="613" width="0.0191%" height="15" fill="rgb(221,146,34)" fg:x="2314" fg:w="3"/><text x="15.0161%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (11 samples, 0.07%)</title><rect x="14.7215%" y="709" width="0.0702%" height="15" fill="rgb(242,55,13)" fg:x="2307" fg:w="11"/><text x="14.9715%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_root_mut (11 samples, 0.07%)</title><rect x="14.7215%" y="693" width="0.0702%" height="15" fill="rgb(242,112,31)" fg:x="2307" fg:w="11"/><text x="14.9715%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (7 samples, 0.04%)</title><rect x="14.7470%" y="677" width="0.0447%" height="15" fill="rgb(249,192,27)" fg:x="2311" fg:w="7"/><text x="14.9970%" y="687.50"></text></g><g><title>deno`v8::scope::data::ScopeData::exit_scope (6 samples, 0.04%)</title><rect x="14.7534%" y="661" width="0.0383%" height="15" fill="rgb(208,204,44)" fg:x="2312" fg:w="6"/><text x="15.0034%" y="671.50"></text></g><g><title>deno`&lt;&amp;v8::handle::Global&lt;T&gt; as v8::handle::Handle&gt;::get_handle_info (3 samples, 0.02%)</title><rect x="14.7980%" y="693" width="0.0191%" height="15" fill="rgb(208,93,54)" fg:x="2319" fg:w="3"/><text x="15.0480%" y="703.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.02%)</title><rect x="14.7980%" y="677" width="0.0191%" height="15" fill="rgb(242,1,31)" fg:x="2319" fg:w="3"/><text x="15.0480%" y="687.50"></text></g><g><title>deno`&lt;v8::handle::HandleHost as core::convert::From&lt;&amp;v8::isolate::IsolateHandle&gt;&gt;::from (2 samples, 0.01%)</title><rect x="14.8044%" y="661" width="0.0128%" height="15" fill="rgb(241,83,25)" fg:x="2320" fg:w="2"/><text x="15.0544%" y="671.50"></text></g><g><title>deno`v8::handle::Handle::open (9 samples, 0.06%)</title><rect x="14.7917%" y="709" width="0.0574%" height="15" fill="rgb(205,169,50)" fg:x="2318" fg:w="9"/><text x="15.0417%" y="719.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (5 samples, 0.03%)</title><rect x="14.8172%" y="693" width="0.0319%" height="15" fill="rgb(239,186,37)" fg:x="2322" fg:w="5"/><text x="15.0672%" y="703.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_host (4 samples, 0.03%)</title><rect x="14.8236%" y="677" width="0.0255%" height="15" fill="rgb(205,221,10)" fg:x="2323" fg:w="4"/><text x="15.0736%" y="687.50"></text></g><g><title>deno`v8::handle::HandleHost::match_host (2 samples, 0.01%)</title><rect x="14.8363%" y="661" width="0.0128%" height="15" fill="rgb(218,196,15)" fg:x="2325" fg:w="2"/><text x="15.0863%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (7 samples, 0.04%)</title><rect x="14.8491%" y="709" width="0.0447%" height="15" fill="rgb(218,196,35)" fg:x="2327" fg:w="7"/><text x="15.0991%" y="719.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="14.8810%" y="693" width="0.0128%" height="15" fill="rgb(233,63,24)" fg:x="2332" fg:w="2"/><text x="15.1310%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="14.8810%" y="677" width="0.0128%" height="15" fill="rgb(225,8,4)" fg:x="2332" fg:w="2"/><text x="15.1310%" y="687.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="14.8810%" y="661" width="0.0128%" height="15" fill="rgb(234,105,35)" fg:x="2332" fg:w="2"/><text x="15.1310%" y="671.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="14.9065%" y="677" width="0.0191%" height="15" fill="rgb(236,21,32)" fg:x="2336" fg:w="3"/><text x="15.1565%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="14.9065%" y="661" width="0.0191%" height="15" fill="rgb(228,109,6)" fg:x="2336" fg:w="3"/><text x="15.1565%" y="671.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="14.9129%" y="645" width="0.0128%" height="15" fill="rgb(229,215,31)" fg:x="2337" fg:w="2"/><text x="15.1629%" y="655.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (3 samples, 0.02%)</title><rect x="14.9257%" y="677" width="0.0191%" height="15" fill="rgb(221,52,54)" fg:x="2339" fg:w="3"/><text x="15.1757%" y="687.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="14.9257%" y="661" width="0.0191%" height="15" fill="rgb(252,129,43)" fg:x="2339" fg:w="3"/><text x="15.1757%" y="671.50"></text></g><g><title>deno`v8::scope::data::ScopeData::allocate_or_reuse_scope_data (3 samples, 0.02%)</title><rect x="14.9448%" y="677" width="0.0191%" height="15" fill="rgb(248,183,27)" fg:x="2342" fg:w="3"/><text x="15.1948%" y="687.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_isolate_mut (4 samples, 0.03%)</title><rect x="14.9639%" y="677" width="0.0255%" height="15" fill="rgb(250,0,22)" fg:x="2345" fg:w="4"/><text x="15.2139%" y="687.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="15.0086%" y="661" width="0.0128%" height="15" fill="rgb(213,166,10)" fg:x="2352" fg:w="2"/><text x="15.2586%" y="671.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="15.0405%" y="645" width="0.0128%" height="15" fill="rgb(207,163,36)" fg:x="2357" fg:w="2"/><text x="15.2905%" y="655.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="15.0405%" y="629" width="0.0128%" height="15" fill="rgb(208,122,22)" fg:x="2357" fg:w="2"/><text x="15.2905%" y="639.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context::_{{closure}} (9 samples, 0.06%)</title><rect x="15.0214%" y="661" width="0.0574%" height="15" fill="rgb(207,104,49)" fg:x="2354" fg:w="9"/><text x="15.2714%" y="671.50"></text></g><g><title>deno`v8::scope::raw::ContextScope::new (2 samples, 0.01%)</title><rect x="15.0660%" y="645" width="0.0128%" height="15" fill="rgb(248,211,50)" fg:x="2361" fg:w="2"/><text x="15.3160%" y="655.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="15.0660%" y="629" width="0.0128%" height="15" fill="rgb(217,13,45)" fg:x="2361" fg:w="2"/><text x="15.3160%" y="639.50"></text></g><g><title>deno`v8::scope::data::ScopeTypeSpecificData::init_with (3 samples, 0.02%)</title><rect x="15.0788%" y="661" width="0.0191%" height="15" fill="rgb(211,216,49)" fg:x="2363" fg:w="3"/><text x="15.3288%" y="671.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::handle_scope (64 samples, 0.41%)</title><rect x="14.7087%" y="741" width="0.4084%" height="15" fill="rgb(221,58,53)" fg:x="2305" fg:w="64"/><text x="14.9587%" y="751.50"></text></g><g><title>deno`v8::scope::HandleScope::with_context (63 samples, 0.40%)</title><rect x="14.7151%" y="725" width="0.4020%" height="15" fill="rgb(220,112,41)" fg:x="2306" fg:w="63"/><text x="14.9651%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (35 samples, 0.22%)</title><rect x="14.8938%" y="709" width="0.2233%" height="15" fill="rgb(236,38,28)" fg:x="2334" fg:w="35"/><text x="15.1438%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_scope_data_with (34 samples, 0.22%)</title><rect x="14.9001%" y="693" width="0.2170%" height="15" fill="rgb(227,195,22)" fg:x="2335" fg:w="34"/><text x="15.1501%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with::_{{closure}} (20 samples, 0.13%)</title><rect x="14.9895%" y="677" width="0.1276%" height="15" fill="rgb(214,55,33)" fg:x="2349" fg:w="20"/><text x="15.2395%" y="687.50"></text></g><g><title>deno`v8::scope::raw::HandleScope::init (2 samples, 0.01%)</title><rect x="15.1043%" y="661" width="0.0128%" height="15" fill="rgb(248,80,13)" fg:x="2367" fg:w="2"/><text x="15.3543%" y="671.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (2 samples, 0.01%)</title><rect x="15.1043%" y="645" width="0.0128%" height="15" fill="rgb(238,52,6)" fg:x="2367" fg:w="2"/><text x="15.3543%" y="655.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (4 samples, 0.03%)</title><rect x="15.1426%" y="629" width="0.0255%" height="15" fill="rgb(224,198,47)" fg:x="2373" fg:w="4"/><text x="15.3926%" y="639.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.01%)</title><rect x="15.1554%" y="613" width="0.0128%" height="15" fill="rgb(233,171,20)" fg:x="2375" fg:w="2"/><text x="15.4054%" y="623.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as v8::handle::Handle&gt;::get_handle_info (6 samples, 0.04%)</title><rect x="15.1362%" y="677" width="0.0383%" height="15" fill="rgb(241,30,25)" fg:x="2372" fg:w="6"/><text x="15.3862%" y="687.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (6 samples, 0.04%)</title><rect x="15.1362%" y="661" width="0.0383%" height="15" fill="rgb(207,171,38)" fg:x="2372" fg:w="6"/><text x="15.3862%" y="671.50"></text></g><g><title>deno`&lt;v8::handle::HandleHost as core::convert::From&lt;&amp;v8::isolate::IsolateHandle&gt;&gt;::from (6 samples, 0.04%)</title><rect x="15.1362%" y="645" width="0.0383%" height="15" fill="rgb(234,70,1)" fg:x="2372" fg:w="6"/><text x="15.3862%" y="655.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="15.1809%" y="661" width="0.0191%" height="15" fill="rgb(232,178,18)" fg:x="2379" fg:w="3"/><text x="15.4309%" y="671.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="15.2128%" y="613" width="0.0191%" height="15" fill="rgb(241,78,40)" fg:x="2384" fg:w="3"/><text x="15.4628%" y="623.50"></text></g><g><title>deno`core::sync::atomic::atomic_add (3 samples, 0.02%)</title><rect x="15.2128%" y="597" width="0.0191%" height="15" fill="rgb(222,35,25)" fg:x="2384" fg:w="3"/><text x="15.4628%" y="607.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (4 samples, 0.03%)</title><rect x="15.2320%" y="613" width="0.0255%" height="15" fill="rgb(207,92,16)" fg:x="2387" fg:w="4"/><text x="15.4820%" y="623.50"></text></g><g><title>deno`alloc::sync::data_offset (4 samples, 0.03%)</title><rect x="15.2320%" y="597" width="0.0255%" height="15" fill="rgb(216,59,51)" fg:x="2387" fg:w="4"/><text x="15.4820%" y="607.50"></text></g><g><title>deno`alloc::sync::data_offset_align (4 samples, 0.03%)</title><rect x="15.2320%" y="581" width="0.0255%" height="15" fill="rgb(213,80,28)" fg:x="2387" fg:w="4"/><text x="15.4820%" y="591.50"></text></g><g><title>deno`core::alloc::layout::Layout::padding_needed_for (2 samples, 0.01%)</title><rect x="15.2447%" y="565" width="0.0128%" height="15" fill="rgb(220,93,7)" fg:x="2389" fg:w="2"/><text x="15.4947%" y="575.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (14 samples, 0.09%)</title><rect x="15.2001%" y="661" width="0.0893%" height="15" fill="rgb(225,24,44)" fg:x="2382" fg:w="14"/><text x="15.4501%" y="671.50"></text></g><g><title>deno`v8::isolate::IsolateHandle::new (13 samples, 0.08%)</title><rect x="15.2064%" y="645" width="0.0830%" height="15" fill="rgb(243,74,40)" fg:x="2383" fg:w="13"/><text x="15.4564%" y="655.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (13 samples, 0.08%)</title><rect x="15.2064%" y="629" width="0.0830%" height="15" fill="rgb(228,39,7)" fg:x="2383" fg:w="13"/><text x="15.4564%" y="639.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex (3 samples, 0.02%)</title><rect x="15.2702%" y="613" width="0.0191%" height="15" fill="rgb(227,79,8)" fg:x="2393" fg:w="3"/><text x="15.5202%" y="623.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.17%)</title><rect x="15.1299%" y="725" width="0.1659%" height="15" fill="rgb(236,58,11)" fg:x="2371" fg:w="26"/><text x="15.3799%" y="735.50"></text></g><g><title>deno`&lt;deno_core::runtime::JsRealm as core::clone::Clone&gt;::clone (25 samples, 0.16%)</title><rect x="15.1362%" y="709" width="0.1595%" height="15" fill="rgb(249,63,35)" fg:x="2372" fg:w="25"/><text x="15.3862%" y="719.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as core::clone::Clone&gt;::clone (25 samples, 0.16%)</title><rect x="15.1362%" y="693" width="0.1595%" height="15" fill="rgb(252,114,16)" fg:x="2372" fg:w="25"/><text x="15.3862%" y="703.50"></text></g><g><title>deno`v8::handle::Global&lt;T&gt;::new_raw (19 samples, 0.12%)</title><rect x="15.1745%" y="677" width="0.1212%" height="15" fill="rgb(254,151,24)" fg:x="2378" fg:w="19"/><text x="15.4245%" y="687.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (3 samples, 0.02%)</title><rect x="15.3213%" y="693" width="0.0191%" height="15" fill="rgb(253,54,39)" fg:x="2401" fg:w="3"/><text x="15.5713%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="15.3277%" y="677" width="0.0128%" height="15" fill="rgb(243,25,45)" fg:x="2402" fg:w="2"/><text x="15.5777%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="15.3277%" y="661" width="0.0128%" height="15" fill="rgb(234,134,9)" fg:x="2402" fg:w="2"/><text x="15.5777%" y="671.50"></text></g><g><title>deno`core::ptr::write (2 samples, 0.01%)</title><rect x="15.3277%" y="645" width="0.0128%" height="15" fill="rgb(227,166,31)" fg:x="2402" fg:w="2"/><text x="15.5777%" y="655.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (6 samples, 0.04%)</title><rect x="15.3085%" y="725" width="0.0383%" height="15" fill="rgb(245,143,41)" fg:x="2399" fg:w="6"/><text x="15.5585%" y="735.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="15.3213%" y="709" width="0.0255%" height="15" fill="rgb(238,181,32)" fg:x="2401" fg:w="4"/><text x="15.5713%" y="719.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="15.3468%" y="709" width="0.0191%" height="15" fill="rgb(224,113,18)" fg:x="2405" fg:w="3"/><text x="15.5968%" y="719.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.01%)</title><rect x="15.3532%" y="693" width="0.0128%" height="15" fill="rgb(240,229,28)" fg:x="2406" fg:w="2"/><text x="15.6032%" y="703.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="15.3851%" y="549" width="0.0128%" height="15" fill="rgb(250,185,3)" fg:x="2411" fg:w="2"/><text x="15.6351%" y="559.50"></text></g><g><title>deno`hashbrown::map::make_hash (7 samples, 0.04%)</title><rect x="15.3851%" y="645" width="0.0447%" height="15" fill="rgb(212,59,25)" fg:x="2411" fg:w="7"/><text x="15.6351%" y="655.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (7 samples, 0.04%)</title><rect x="15.3851%" y="629" width="0.0447%" height="15" fill="rgb(221,87,20)" fg:x="2411" fg:w="7"/><text x="15.6351%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.04%)</title><rect x="15.3851%" y="613" width="0.0447%" height="15" fill="rgb(213,74,28)" fg:x="2411" fg:w="7"/><text x="15.6351%" y="623.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (7 samples, 0.04%)</title><rect x="15.3851%" y="597" width="0.0447%" height="15" fill="rgb(224,132,34)" fg:x="2411" fg:w="7"/><text x="15.6351%" y="607.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (7 samples, 0.04%)</title><rect x="15.3851%" y="581" width="0.0447%" height="15" fill="rgb(222,101,24)" fg:x="2411" fg:w="7"/><text x="15.6351%" y="591.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (7 samples, 0.04%)</title><rect x="15.3851%" y="565" width="0.0447%" height="15" fill="rgb(254,142,4)" fg:x="2411" fg:w="7"/><text x="15.6351%" y="575.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (5 samples, 0.03%)</title><rect x="15.3979%" y="549" width="0.0319%" height="15" fill="rgb(230,229,49)" fg:x="2413" fg:w="5"/><text x="15.6479%" y="559.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="15.4106%" y="533" width="0.0191%" height="15" fill="rgb(238,70,47)" fg:x="2415" fg:w="3"/><text x="15.6606%" y="543.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="15.4553%" y="565" width="0.0128%" height="15" fill="rgb(231,160,17)" fg:x="2422" fg:w="2"/><text x="15.7053%" y="575.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4 samples, 0.03%)</title><rect x="15.4489%" y="597" width="0.0255%" height="15" fill="rgb(218,68,53)" fg:x="2421" fg:w="4"/><text x="15.6989%" y="607.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.02%)</title><rect x="15.4553%" y="581" width="0.0191%" height="15" fill="rgb(236,111,10)" fg:x="2422" fg:w="3"/><text x="15.7053%" y="591.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (3 samples, 0.02%)</title><rect x="15.4744%" y="597" width="0.0191%" height="15" fill="rgb(224,34,41)" fg:x="2425" fg:w="3"/><text x="15.7244%" y="607.50"></text></g><g><title>deno`core::ptr::read_unaligned (2 samples, 0.01%)</title><rect x="15.4808%" y="581" width="0.0128%" height="15" fill="rgb(241,118,19)" fg:x="2426" fg:w="2"/><text x="15.7308%" y="591.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (12 samples, 0.08%)</title><rect x="15.4298%" y="645" width="0.0766%" height="15" fill="rgb(238,129,25)" fg:x="2418" fg:w="12"/><text x="15.6798%" y="655.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.07%)</title><rect x="15.4362%" y="629" width="0.0702%" height="15" fill="rgb(238,22,31)" fg:x="2419" fg:w="11"/><text x="15.6862%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (10 samples, 0.06%)</title><rect x="15.4425%" y="613" width="0.0638%" height="15" fill="rgb(222,174,48)" fg:x="2420" fg:w="10"/><text x="15.6925%" y="623.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (21 samples, 0.13%)</title><rect x="15.3787%" y="693" width="0.1340%" height="15" fill="rgb(206,152,40)" fg:x="2410" fg:w="21"/><text x="15.6287%" y="703.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (21 samples, 0.13%)</title><rect x="15.3787%" y="677" width="0.1340%" height="15" fill="rgb(218,99,54)" fg:x="2410" fg:w="21"/><text x="15.6287%" y="687.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.13%)</title><rect x="15.3787%" y="661" width="0.1340%" height="15" fill="rgb(220,174,26)" fg:x="2410" fg:w="21"/><text x="15.6287%" y="671.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (63 samples, 0.40%)</title><rect x="15.1171%" y="741" width="0.4020%" height="15" fill="rgb(245,116,9)" fg:x="2369" fg:w="63"/><text x="15.3671%" y="751.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (27 samples, 0.17%)</title><rect x="15.3468%" y="725" width="0.1723%" height="15" fill="rgb(209,72,35)" fg:x="2405" fg:w="27"/><text x="15.5968%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (23 samples, 0.15%)</title><rect x="15.3723%" y="709" width="0.1468%" height="15" fill="rgb(226,126,21)" fg:x="2409" fg:w="23"/><text x="15.6223%" y="719.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (135 samples, 0.86%)</title><rect x="14.6704%" y="757" width="0.8615%" height="15" fill="rgb(227,192,1)" fg:x="2299" fg:w="135"/><text x="14.9204%" y="767.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.01%)</title><rect x="15.5383%" y="725" width="0.0128%" height="15" fill="rgb(237,180,29)" fg:x="2435" fg:w="2"/><text x="15.7883%" y="735.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="15.5319%" y="741" width="0.0255%" height="15" fill="rgb(230,197,35)" fg:x="2434" fg:w="4"/><text x="15.7819%" y="751.50"></text></g><g><title>deno`&lt;v8::isolate::BuildTypeIdHasher as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.02%)</title><rect x="15.5829%" y="645" width="0.0191%" height="15" fill="rgb(246,193,31)" fg:x="2442" fg:w="3"/><text x="15.8329%" y="655.50"></text></g><g><title>deno`hashbrown::map::make_hash (8 samples, 0.05%)</title><rect x="15.5702%" y="677" width="0.0510%" height="15" fill="rgb(241,36,4)" fg:x="2440" fg:w="8"/><text x="15.8202%" y="687.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (8 samples, 0.05%)</title><rect x="15.5702%" y="661" width="0.0510%" height="15" fill="rgb(241,130,17)" fg:x="2440" fg:w="8"/><text x="15.8202%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="15.6021%" y="645" width="0.0191%" height="15" fill="rgb(206,137,32)" fg:x="2445" fg:w="3"/><text x="15.8521%" y="655.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (2 samples, 0.01%)</title><rect x="15.6084%" y="629" width="0.0128%" height="15" fill="rgb(237,228,51)" fg:x="2446" fg:w="2"/><text x="15.8584%" y="639.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (2 samples, 0.01%)</title><rect x="15.6084%" y="613" width="0.0128%" height="15" fill="rgb(243,6,42)" fg:x="2446" fg:w="2"/><text x="15.8584%" y="623.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (2 samples, 0.01%)</title><rect x="15.6084%" y="597" width="0.0128%" height="15" fill="rgb(251,74,28)" fg:x="2446" fg:w="2"/><text x="15.8584%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="15.6084%" y="581" width="0.0128%" height="15" fill="rgb(218,20,49)" fg:x="2446" fg:w="2"/><text x="15.8584%" y="591.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="15.6084%" y="565" width="0.0128%" height="15" fill="rgb(238,28,14)" fg:x="2446" fg:w="2"/><text x="15.8584%" y="575.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.01%)</title><rect x="15.6340%" y="645" width="0.0128%" height="15" fill="rgb(229,40,46)" fg:x="2450" fg:w="2"/><text x="15.8840%" y="655.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.01%)</title><rect x="15.6850%" y="629" width="0.0128%" height="15" fill="rgb(244,195,20)" fg:x="2458" fg:w="2"/><text x="15.9350%" y="639.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (22 samples, 0.14%)</title><rect x="15.5638%" y="725" width="0.1404%" height="15" fill="rgb(253,56,35)" fg:x="2439" fg:w="22"/><text x="15.8138%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (22 samples, 0.14%)</title><rect x="15.5638%" y="709" width="0.1404%" height="15" fill="rgb(210,149,44)" fg:x="2439" fg:w="22"/><text x="15.8138%" y="719.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (22 samples, 0.14%)</title><rect x="15.5638%" y="693" width="0.1404%" height="15" fill="rgb(240,135,12)" fg:x="2439" fg:w="22"/><text x="15.8138%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 0.08%)</title><rect x="15.6212%" y="677" width="0.0830%" height="15" fill="rgb(251,24,50)" fg:x="2448" fg:w="13"/><text x="15.8712%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.08%)</title><rect x="15.6276%" y="661" width="0.0766%" height="15" fill="rgb(243,200,47)" fg:x="2449" fg:w="12"/><text x="15.8776%" y="671.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 0.06%)</title><rect x="15.6467%" y="645" width="0.0574%" height="15" fill="rgb(224,166,26)" fg:x="2452" fg:w="9"/><text x="15.8967%" y="655.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (28 samples, 0.18%)</title><rect x="15.5319%" y="757" width="0.1787%" height="15" fill="rgb(233,0,47)" fg:x="2434" fg:w="28"/><text x="15.7819%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (24 samples, 0.15%)</title><rect x="15.5574%" y="741" width="0.1531%" height="15" fill="rgb(253,80,5)" fg:x="2438" fg:w="24"/><text x="15.8074%" y="751.50"></text></g><g><title>deno`&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;Fut&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="15.7744%" y="725" width="0.0128%" height="15" fill="rgb(214,133,25)" fg:x="2472" fg:w="2"/><text x="16.0244%" y="735.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="15.7871%" y="725" width="0.0383%" height="15" fill="rgb(209,27,14)" fg:x="2474" fg:w="6"/><text x="16.0371%" y="735.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (5 samples, 0.03%)</title><rect x="15.7935%" y="709" width="0.0319%" height="15" fill="rgb(219,102,51)" fg:x="2475" fg:w="5"/><text x="16.0435%" y="719.50"></text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="15.8254%" y="725" width="0.0191%" height="15" fill="rgb(237,18,16)" fg:x="2480" fg:w="3"/><text x="16.0754%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_flash::NextRequest&gt;&gt; (3 samples, 0.02%)</title><rect x="15.8765%" y="613" width="0.0191%" height="15" fill="rgb(241,85,17)" fg:x="2488" fg:w="3"/><text x="16.1265%" y="623.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_flash::NextRequest&gt; (3 samples, 0.02%)</title><rect x="15.8765%" y="597" width="0.0191%" height="15" fill="rgb(236,90,42)" fg:x="2488" fg:w="3"/><text x="16.1265%" y="607.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_flash::InnerRequest&gt; (3 samples, 0.02%)</title><rect x="15.8765%" y="581" width="0.0191%" height="15" fill="rgb(249,57,21)" fg:x="2488" fg:w="3"/><text x="16.1265%" y="591.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;httparse::Header&gt;&gt; (3 samples, 0.02%)</title><rect x="15.8765%" y="565" width="0.0191%" height="15" fill="rgb(243,12,36)" fg:x="2488" fg:w="3"/><text x="16.1265%" y="575.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;httparse::Header&gt;&gt; (3 samples, 0.02%)</title><rect x="15.8765%" y="549" width="0.0191%" height="15" fill="rgb(253,128,47)" fg:x="2488" fg:w="3"/><text x="16.1265%" y="559.50"></text></g><g><title>deno`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="15.8765%" y="533" width="0.0191%" height="15" fill="rgb(207,33,20)" fg:x="2488" fg:w="3"/><text x="16.1265%" y="543.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="15.8828%" y="517" width="0.0128%" height="15" fill="rgb(233,215,35)" fg:x="2489" fg:w="2"/><text x="16.1328%" y="527.50"></text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="15.8701%" y="693" width="0.0319%" height="15" fill="rgb(249,188,52)" fg:x="2487" fg:w="5"/><text x="16.1201%" y="703.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="15.8701%" y="677" width="0.0319%" height="15" fill="rgb(225,12,32)" fg:x="2487" fg:w="5"/><text x="16.1201%" y="687.50"></text></g><g><title>deno`deno_flash::op_next::v8_func::_{{closure}} (5 samples, 0.03%)</title><rect x="15.8701%" y="661" width="0.0319%" height="15" fill="rgb(247,98,14)" fg:x="2487" fg:w="5"/><text x="16.1201%" y="671.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.03%)</title><rect x="15.8765%" y="645" width="0.0255%" height="15" fill="rgb(247,219,48)" fg:x="2488" fg:w="4"/><text x="16.1265%" y="655.50"></text></g><g><title>deno`deno_flash::op_next::call::_{{closure}} (4 samples, 0.03%)</title><rect x="15.8765%" y="629" width="0.0255%" height="15" fill="rgb(253,60,48)" fg:x="2488" fg:w="4"/><text x="16.1265%" y="639.50"></text></g><g><title>deno`&lt;futures_util::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (8 samples, 0.05%)</title><rect x="15.8573%" y="709" width="0.0510%" height="15" fill="rgb(245,15,52)" fg:x="2485" fg:w="8"/><text x="16.1073%" y="719.50"></text></g><g><title>deno`&lt;deno_core::ops::OpCall&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.09%)</title><rect x="15.8509%" y="725" width="0.0893%" height="15" fill="rgb(220,133,28)" fg:x="2484" fg:w="14"/><text x="16.1009%" y="735.50"></text></g><g><title>deno`futures_util::future::maybe_done::MaybeDone&lt;Fut&gt;::take_output (4 samples, 0.03%)</title><rect x="15.9147%" y="709" width="0.0255%" height="15" fill="rgb(217,180,4)" fg:x="2494" fg:w="4"/><text x="16.1647%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (3 samples, 0.02%)</title><rect x="15.9722%" y="693" width="0.0191%" height="15" fill="rgb(251,24,1)" fg:x="2503" fg:w="3"/><text x="16.2222%" y="703.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="16.0105%" y="677" width="0.0255%" height="15" fill="rgb(212,185,49)" fg:x="2509" fg:w="4"/><text x="16.2605%" y="687.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (4 samples, 0.03%)</title><rect x="16.0105%" y="661" width="0.0255%" height="15" fill="rgb(215,175,22)" fg:x="2509" fg:w="4"/><text x="16.2605%" y="671.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="16.0232%" y="645" width="0.0128%" height="15" fill="rgb(250,205,14)" fg:x="2511" fg:w="2"/><text x="16.2732%" y="655.50"></text></g><g><title>deno`__rdl_dealloc (2 samples, 0.01%)</title><rect x="16.0615%" y="565" width="0.0128%" height="15" fill="rgb(225,211,22)" fg:x="2517" fg:w="2"/><text x="16.3115%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="16.0870%" y="549" width="0.0319%" height="15" fill="rgb(251,179,42)" fg:x="2521" fg:w="5"/><text x="16.3370%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="16.0998%" y="533" width="0.0191%" height="15" fill="rgb(208,216,51)" fg:x="2523" fg:w="3"/><text x="16.3498%" y="543.50"></text></g><g><title>deno`alloc::alloc::dealloc (8 samples, 0.05%)</title><rect x="16.0743%" y="565" width="0.0510%" height="15" fill="rgb(235,36,11)" fg:x="2519" fg:w="8"/><text x="16.3243%" y="575.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.08%)</title><rect x="16.0615%" y="581" width="0.0766%" height="15" fill="rgb(213,189,28)" fg:x="2517" fg:w="12"/><text x="16.3115%" y="591.50"></text></g><g><title>deno`alloc::sync::Weak&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="16.1381%" y="581" width="0.0128%" height="15" fill="rgb(227,203,42)" fg:x="2529" fg:w="2"/><text x="16.3881%" y="591.50"></text></g><g><title>deno`&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.12%)</title><rect x="16.0551%" y="597" width="0.1212%" height="15" fill="rgb(244,72,36)" fg:x="2516" fg:w="19"/><text x="16.3051%" y="607.50"></text></g><g><title>deno`core::mem::drop (23 samples, 0.15%)</title><rect x="16.0424%" y="629" width="0.1468%" height="15" fill="rgb(213,53,17)" fg:x="2514" fg:w="23"/><text x="16.2924%" y="639.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;futures_util::stream::futures_unordered::task::Task&lt;deno_core::ops::OpCall&lt;(i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt;&gt; (22 samples, 0.14%)</title><rect x="16.0488%" y="613" width="0.1404%" height="15" fill="rgb(207,167,3)" fg:x="2515" fg:w="22"/><text x="16.2988%" y="623.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;futures_util::stream::futures_unordered::task::Task&lt;deno_core::ops::OpCall&lt;(i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt; (6 samples, 0.04%)</title><rect x="16.1891%" y="629" width="0.0383%" height="15" fill="rgb(216,98,30)" fg:x="2537" fg:w="6"/><text x="16.4391%" y="639.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;futures_util::stream::futures_unordered::ready_to_run_queue::ReadyToRunQueue&lt;deno_core::ops::OpCall&lt;(i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt;&gt; (6 samples, 0.04%)</title><rect x="16.1891%" y="613" width="0.0383%" height="15" fill="rgb(236,123,15)" fg:x="2537" fg:w="6"/><text x="16.4391%" y="623.50"></text></g><g><title>deno`&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="16.1891%" y="597" width="0.0383%" height="15" fill="rgb(248,81,50)" fg:x="2537" fg:w="6"/><text x="16.4391%" y="607.50"></text></g><g><title>deno`alloc::sync::Weak&lt;T&gt;::inner (5 samples, 0.03%)</title><rect x="16.1955%" y="581" width="0.0319%" height="15" fill="rgb(214,120,4)" fg:x="2538" fg:w="5"/><text x="16.4455%" y="591.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::addr (2 samples, 0.01%)</title><rect x="16.2147%" y="565" width="0.0128%" height="15" fill="rgb(208,179,34)" fg:x="2541" fg:w="2"/><text x="16.4647%" y="575.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::drop_slow (30 samples, 0.19%)</title><rect x="16.0424%" y="645" width="0.1914%" height="15" fill="rgb(227,140,7)" fg:x="2514" fg:w="30"/><text x="16.2924%" y="655.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;futures_util::stream::futures_unordered::task::Task&lt;deno_core::ops::OpCall&lt;(i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt;&gt; (35 samples, 0.22%)</title><rect x="16.0360%" y="677" width="0.2233%" height="15" fill="rgb(214,22,6)" fg:x="2513" fg:w="35"/><text x="16.2860%" y="687.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.22%)</title><rect x="16.0360%" y="661" width="0.2233%" height="15" fill="rgb(207,137,27)" fg:x="2513" fg:w="35"/><text x="16.2860%" y="671.50"></text></g><g><title>deno`&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;Fut&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.31%)</title><rect x="15.9530%" y="709" width="0.3127%" height="15" fill="rgb(210,8,46)" fg:x="2500" fg:w="49"/><text x="16.2030%" y="719.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (43 samples, 0.27%)</title><rect x="15.9913%" y="693" width="0.2744%" height="15" fill="rgb(240,16,54)" fg:x="2506" fg:w="43"/><text x="16.2413%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next::Bomb&lt;deno_core::ops::OpCall&lt;(i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt; (51 samples, 0.33%)</title><rect x="15.9530%" y="725" width="0.3254%" height="15" fill="rgb(211,209,29)" fg:x="2500" fg:w="51"/><text x="16.2030%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;futures_util::stream::futures_unordered::task::Task&lt;deno_core::ops::OpCall&lt;(i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="16.2657%" y="709" width="0.0128%" height="15" fill="rgb(226,228,24)" fg:x="2549" fg:w="2"/><text x="16.5157%" y="719.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="16.3678%" y="629" width="0.0128%" height="15" fill="rgb(222,84,9)" fg:x="2565" fg:w="2"/><text x="16.6178%" y="639.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="16.3678%" y="613" width="0.0128%" height="15" fill="rgb(234,203,30)" fg:x="2565" fg:w="2"/><text x="16.6178%" y="623.50"></text></g><g><title>deno`&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="16.3487%" y="661" width="0.0383%" height="15" fill="rgb(238,109,14)" fg:x="2562" fg:w="6"/><text x="16.5987%" y="671.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="16.3487%" y="645" width="0.0383%" height="15" fill="rgb(233,206,34)" fg:x="2562" fg:w="6"/><text x="16.5987%" y="655.50"></text></g><g><title>deno`core::alloc::layout::Layout::padding_needed_for (2 samples, 0.01%)</title><rect x="16.4061%" y="613" width="0.0128%" height="15" fill="rgb(220,167,47)" fg:x="2571" fg:w="2"/><text x="16.6561%" y="623.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (15 samples, 0.10%)</title><rect x="16.3295%" y="709" width="0.0957%" height="15" fill="rgb(238,105,10)" fg:x="2559" fg:w="15"/><text x="16.5795%" y="719.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (13 samples, 0.08%)</title><rect x="16.3423%" y="693" width="0.0830%" height="15" fill="rgb(213,227,17)" fg:x="2561" fg:w="13"/><text x="16.5923%" y="703.50"></text></g><g><title>deno`tokio::util::wake::inc_ref_count (13 samples, 0.08%)</title><rect x="16.3423%" y="677" width="0.0830%" height="15" fill="rgb(217,132,38)" fg:x="2561" fg:w="13"/><text x="16.5923%" y="687.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (6 samples, 0.04%)</title><rect x="16.3870%" y="661" width="0.0383%" height="15" fill="rgb(242,146,4)" fg:x="2568" fg:w="6"/><text x="16.6370%" y="671.50"></text></g><g><title>deno`alloc::sync::data_offset (5 samples, 0.03%)</title><rect x="16.3933%" y="645" width="0.0319%" height="15" fill="rgb(212,61,9)" fg:x="2569" fg:w="5"/><text x="16.6433%" y="655.50"></text></g><g><title>deno`alloc::sync::data_offset_align (5 samples, 0.03%)</title><rect x="16.3933%" y="629" width="0.0319%" height="15" fill="rgb(247,126,22)" fg:x="2569" fg:w="5"/><text x="16.6433%" y="639.50"></text></g><g><title>deno`core::alloc::layout::Layout::padding_needed_for (4 samples, 0.03%)</title><rect x="16.4827%" y="597" width="0.0255%" height="15" fill="rgb(220,196,2)" fg:x="2583" fg:w="4"/><text x="16.7327%" y="607.50"></text></g><g><title>deno`alloc::sync::data_offset (8 samples, 0.05%)</title><rect x="16.4699%" y="629" width="0.0510%" height="15" fill="rgb(208,46,4)" fg:x="2581" fg:w="8"/><text x="16.7199%" y="639.50"></text></g><g><title>deno`alloc::sync::data_offset_align (7 samples, 0.04%)</title><rect x="16.4763%" y="613" width="0.0447%" height="15" fill="rgb(252,104,46)" fg:x="2582" fg:w="7"/><text x="16.7263%" y="623.50"></text></g><g><title>deno`core::alloc::layout::size_align (2 samples, 0.01%)</title><rect x="16.5082%" y="597" width="0.0128%" height="15" fill="rgb(237,152,48)" fg:x="2587" fg:w="2"/><text x="16.7582%" y="607.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (12 samples, 0.08%)</title><rect x="16.4508%" y="645" width="0.0766%" height="15" fill="rgb(221,59,37)" fg:x="2578" fg:w="12"/><text x="16.7008%" y="655.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (19 samples, 0.12%)</title><rect x="16.4252%" y="709" width="0.1212%" height="15" fill="rgb(209,202,51)" fg:x="2574" fg:w="19"/><text x="16.6752%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (16 samples, 0.10%)</title><rect x="16.4444%" y="693" width="0.1021%" height="15" fill="rgb(228,81,30)" fg:x="2577" fg:w="16"/><text x="16.6944%" y="703.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (16 samples, 0.10%)</title><rect x="16.4444%" y="677" width="0.1021%" height="15" fill="rgb(227,42,39)" fg:x="2577" fg:w="16"/><text x="16.6944%" y="687.50"></text></g><g><title>deno`tokio::util::wake::drop_arc_raw (15 samples, 0.10%)</title><rect x="16.4508%" y="661" width="0.0957%" height="15" fill="rgb(221,26,2)" fg:x="2578" fg:w="15"/><text x="16.7008%" y="671.50"></text></g><g><title>deno`core::mem::drop (3 samples, 0.02%)</title><rect x="16.5273%" y="645" width="0.0191%" height="15" fill="rgb(254,61,31)" fg:x="2590" fg:w="3"/><text x="16.7773%" y="655.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt; (3 samples, 0.02%)</title><rect x="16.5273%" y="629" width="0.0191%" height="15" fill="rgb(222,173,38)" fg:x="2590" fg:w="3"/><text x="16.7773%" y="639.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="16.5273%" y="613" width="0.0191%" height="15" fill="rgb(218,50,12)" fg:x="2590" fg:w="3"/><text x="16.7773%" y="623.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::compare_exchange (7 samples, 0.04%)</title><rect x="16.5529%" y="709" width="0.0447%" height="15" fill="rgb(223,88,40)" fg:x="2594" fg:w="7"/><text x="16.8029%" y="719.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (5 samples, 0.03%)</title><rect x="16.5656%" y="693" width="0.0319%" height="15" fill="rgb(237,54,19)" fg:x="2596" fg:w="5"/><text x="16.8156%" y="703.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (49 samples, 0.31%)</title><rect x="16.2912%" y="725" width="0.3127%" height="15" fill="rgb(251,129,25)" fg:x="2553" fg:w="49"/><text x="16.5412%" y="735.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::is_empty (3 samples, 0.02%)</title><rect x="16.6039%" y="725" width="0.0191%" height="15" fill="rgb(238,97,19)" fg:x="2602" fg:w="3"/><text x="16.8539%" y="735.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.01%)</title><rect x="16.6231%" y="693" width="0.0128%" height="15" fill="rgb(240,169,18)" fg:x="2605" fg:w="2"/><text x="16.8731%" y="703.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="16.6231%" y="677" width="0.0128%" height="15" fill="rgb(230,187,49)" fg:x="2605" fg:w="2"/><text x="16.8731%" y="687.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="16.6358%" y="677" width="0.0128%" height="15" fill="rgb(209,44,26)" fg:x="2607" fg:w="2"/><text x="16.8858%" y="687.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::pending_next_all (3 samples, 0.02%)</title><rect x="16.6358%" y="693" width="0.0191%" height="15" fill="rgb(244,0,6)" fg:x="2607" fg:w="3"/><text x="16.8858%" y="703.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::len (6 samples, 0.04%)</title><rect x="16.6231%" y="725" width="0.0383%" height="15" fill="rgb(248,18,21)" fg:x="2605" fg:w="6"/><text x="16.8731%" y="735.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::atomic_load_head_and_len_all (6 samples, 0.04%)</title><rect x="16.6231%" y="709" width="0.0383%" height="15" fill="rgb(245,180,19)" fg:x="2605" fg:w="6"/><text x="16.8731%" y="719.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="16.6996%" y="693" width="0.0128%" height="15" fill="rgb(252,118,36)" fg:x="2617" fg:w="2"/><text x="16.9496%" y="703.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="16.6996%" y="677" width="0.0128%" height="15" fill="rgb(210,224,19)" fg:x="2617" fg:w="2"/><text x="16.9496%" y="687.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="16.6933%" y="709" width="0.0255%" height="15" fill="rgb(218,30,24)" fg:x="2616" fg:w="4"/><text x="16.9433%" y="719.50"></text></g><g><title>deno`alloc::sync::data_offset (2 samples, 0.01%)</title><rect x="16.7252%" y="693" width="0.0128%" height="15" fill="rgb(219,75,50)" fg:x="2621" fg:w="2"/><text x="16.9752%" y="703.50"></text></g><g><title>deno`alloc::sync::data_offset_align (2 samples, 0.01%)</title><rect x="16.7252%" y="677" width="0.0128%" height="15" fill="rgb(234,72,50)" fg:x="2621" fg:w="2"/><text x="16.9752%" y="687.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (4 samples, 0.03%)</title><rect x="16.7188%" y="709" width="0.0255%" height="15" fill="rgb(219,100,48)" fg:x="2620" fg:w="4"/><text x="16.9688%" y="719.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::store (2 samples, 0.01%)</title><rect x="16.7634%" y="709" width="0.0128%" height="15" fill="rgb(253,5,41)" fg:x="2627" fg:w="2"/><text x="17.0134%" y="719.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::unlink (19 samples, 0.12%)</title><rect x="16.6613%" y="725" width="0.1212%" height="15" fill="rgb(247,181,11)" fg:x="2611" fg:w="19"/><text x="16.9113%" y="735.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::ready_to_run_queue::ReadyToRunQueue&lt;Fut&gt;::dequeue (10 samples, 0.06%)</title><rect x="16.7826%" y="725" width="0.0638%" height="15" fill="rgb(222,223,25)" fg:x="2630" fg:w="10"/><text x="17.0326%" y="735.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::ready_to_run_queue::ReadyToRunQueue&lt;Fut&gt;::enqueue (3 samples, 0.02%)</title><rect x="16.8273%" y="709" width="0.0191%" height="15" fill="rgb(214,198,28)" fg:x="2637" fg:w="3"/><text x="17.0773%" y="719.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::swap (2 samples, 0.01%)</title><rect x="16.8336%" y="693" width="0.0128%" height="15" fill="rgb(230,46,43)" fg:x="2638" fg:w="2"/><text x="17.0836%" y="703.50"></text></g><g><title>deno`core::task::wake::RawWaker::new (2 samples, 0.01%)</title><rect x="16.8592%" y="709" width="0.0128%" height="15" fill="rgb(233,65,53)" fg:x="2642" fg:w="2"/><text x="17.1092%" y="719.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (181 samples, 1.15%)</title><rect x="15.7297%" y="741" width="1.1550%" height="15" fill="rgb(221,121,27)" fg:x="2465" fg:w="181"/><text x="15.9797%" y="751.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::task::Task&lt;Fut&gt;::waker_ref (5 samples, 0.03%)</title><rect x="16.8528%" y="725" width="0.0319%" height="15" fill="rgb(247,70,47)" fg:x="2641" fg:w="5"/><text x="17.1028%" y="735.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="16.8847%" y="741" width="0.0128%" height="15" fill="rgb(228,85,35)" fg:x="2646" fg:w="2"/><text x="17.1347%" y="751.50"></text></g><g><title>deno`core::task::wake::Context::from_waker (2 samples, 0.01%)</title><rect x="16.8975%" y="741" width="0.0128%" height="15" fill="rgb(209,50,18)" fg:x="2648" fg:w="2"/><text x="17.1475%" y="751.50"></text></g><g><title>deno`futures_util::stream::stream::StreamExt::poll_next_unpin (189 samples, 1.21%)</title><rect x="15.7105%" y="757" width="1.2060%" height="15" fill="rgb(250,19,35)" fg:x="2462" fg:w="189"/><text x="15.9605%" y="767.50"></text></g><g><title>deno`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.02%)</title><rect x="16.9485%" y="677" width="0.0191%" height="15" fill="rgb(253,107,29)" fg:x="2656" fg:w="3"/><text x="17.1985%" y="687.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.01%)</title><rect x="16.9740%" y="629" width="0.0128%" height="15" fill="rgb(252,179,29)" fg:x="2660" fg:w="2"/><text x="17.2240%" y="639.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.09%)</title><rect x="16.9676%" y="661" width="0.0893%" height="15" fill="rgb(238,194,6)" fg:x="2659" fg:w="14"/><text x="17.2176%" y="671.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 0.08%)</title><rect x="16.9740%" y="645" width="0.0830%" height="15" fill="rgb(238,164,29)" fg:x="2660" fg:w="13"/><text x="17.2240%" y="655.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 0.07%)</title><rect x="16.9868%" y="629" width="0.0702%" height="15" fill="rgb(224,25,9)" fg:x="2662" fg:w="11"/><text x="17.2368%" y="639.50"></text></g><g><title>deno`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.01%)</title><rect x="17.0570%" y="661" width="0.0128%" height="15" fill="rgb(244,153,23)" fg:x="2673" fg:w="2"/><text x="17.3070%" y="671.50"></text></g><g><title>deno`core::hash::sip::u8to64_le (2 samples, 0.01%)</title><rect x="17.0953%" y="549" width="0.0128%" height="15" fill="rgb(212,203,14)" fg:x="2679" fg:w="2"/><text x="17.3453%" y="559.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.04%)</title><rect x="17.0761%" y="661" width="0.0447%" height="15" fill="rgb(220,164,20)" fg:x="2676" fg:w="7"/><text x="17.3261%" y="671.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for i32&gt;::hash (7 samples, 0.04%)</title><rect x="17.0761%" y="645" width="0.0447%" height="15" fill="rgb(222,203,48)" fg:x="2676" fg:w="7"/><text x="17.3261%" y="655.50"></text></g><g><title>deno`core::hash::Hasher::write_i32 (7 samples, 0.04%)</title><rect x="17.0761%" y="629" width="0.0447%" height="15" fill="rgb(215,159,22)" fg:x="2676" fg:w="7"/><text x="17.3261%" y="639.50"></text></g><g><title>deno`core::hash::Hasher::write_u32 (7 samples, 0.04%)</title><rect x="17.0761%" y="613" width="0.0447%" height="15" fill="rgb(216,183,47)" fg:x="2676" fg:w="7"/><text x="17.3261%" y="623.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.04%)</title><rect x="17.0761%" y="597" width="0.0447%" height="15" fill="rgb(229,195,25)" fg:x="2676" fg:w="7"/><text x="17.3261%" y="607.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.04%)</title><rect x="17.0761%" y="581" width="0.0447%" height="15" fill="rgb(224,132,51)" fg:x="2676" fg:w="7"/><text x="17.3261%" y="591.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.04%)</title><rect x="17.0761%" y="565" width="0.0447%" height="15" fill="rgb(240,63,7)" fg:x="2676" fg:w="7"/><text x="17.3261%" y="575.50"></text></g><g><title>deno`core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="17.1080%" y="549" width="0.0128%" height="15" fill="rgb(249,182,41)" fg:x="2681" fg:w="2"/><text x="17.3580%" y="559.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (25 samples, 0.16%)</title><rect x="16.9676%" y="677" width="0.1595%" height="15" fill="rgb(243,47,26)" fg:x="2659" fg:w="25"/><text x="17.2176%" y="687.50"></text></g><g><title>deno`hashbrown::map::make_hash (30 samples, 0.19%)</title><rect x="16.9485%" y="693" width="0.1914%" height="15" fill="rgb(233,48,2)" fg:x="2656" fg:w="30"/><text x="17.1985%" y="703.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.01%)</title><rect x="17.1272%" y="677" width="0.0128%" height="15" fill="rgb(244,165,34)" fg:x="2684" fg:w="2"/><text x="17.3772%" y="687.50"></text></g><g><title>deno`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="17.1655%" y="645" width="0.0319%" height="15" fill="rgb(207,89,7)" fg:x="2690" fg:w="5"/><text x="17.4155%" y="655.50"></text></g><g><title>deno`hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.01%)</title><rect x="17.1846%" y="629" width="0.0128%" height="15" fill="rgb(244,117,36)" fg:x="2693" fg:w="2"/><text x="17.4346%" y="639.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (2 samples, 0.01%)</title><rect x="17.1974%" y="645" width="0.0128%" height="15" fill="rgb(226,144,34)" fg:x="2695" fg:w="2"/><text x="17.4474%" y="655.50"></text></g><g><title>deno`core::ptr::read_unaligned (2 samples, 0.01%)</title><rect x="17.1974%" y="629" width="0.0128%" height="15" fill="rgb(213,23,19)" fg:x="2695" fg:w="2"/><text x="17.4474%" y="639.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (13 samples, 0.08%)</title><rect x="17.1399%" y="661" width="0.0830%" height="15" fill="rgb(217,75,12)" fg:x="2686" fg:w="13"/><text x="17.3899%" y="671.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (47 samples, 0.30%)</title><rect x="16.9357%" y="709" width="0.2999%" height="15" fill="rgb(224,159,17)" fg:x="2654" fg:w="47"/><text x="17.1857%" y="719.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (15 samples, 0.10%)</title><rect x="17.1399%" y="693" width="0.0957%" height="15" fill="rgb(217,118,1)" fg:x="2686" fg:w="15"/><text x="17.3899%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (15 samples, 0.10%)</title><rect x="17.1399%" y="677" width="0.0957%" height="15" fill="rgb(232,180,48)" fg:x="2686" fg:w="15"/><text x="17.3899%" y="687.50"></text></g><g><title>deno`std::collections::hash::set::HashSet&lt;T,S&gt;::remove (55 samples, 0.35%)</title><rect x="16.9166%" y="757" width="0.3510%" height="15" fill="rgb(230,27,33)" fg:x="2651" fg:w="55"/><text x="17.1666%" y="767.50"></text></g><g><title>deno`hashbrown::set::HashSet&lt;T,S,A&gt;::remove (54 samples, 0.34%)</title><rect x="16.9230%" y="741" width="0.3446%" height="15" fill="rgb(205,31,21)" fg:x="2652" fg:w="54"/><text x="17.1730%" y="751.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (54 samples, 0.34%)</title><rect x="16.9230%" y="725" width="0.3446%" height="15" fill="rgb(253,59,4)" fg:x="2652" fg:w="54"/><text x="17.1730%" y="735.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (5 samples, 0.03%)</title><rect x="17.2357%" y="709" width="0.0319%" height="15" fill="rgb(224,201,9)" fg:x="2701" fg:w="5"/><text x="17.4857%" y="719.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (2 samples, 0.01%)</title><rect x="17.2995%" y="693" width="0.0128%" height="15" fill="rgb(229,206,30)" fg:x="2711" fg:w="2"/><text x="17.5495%" y="703.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.03%)</title><rect x="17.2867%" y="741" width="0.0319%" height="15" fill="rgb(212,67,47)" fg:x="2709" fg:w="5"/><text x="17.5367%" y="751.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (5 samples, 0.03%)</title><rect x="17.2867%" y="725" width="0.0319%" height="15" fill="rgb(211,96,50)" fg:x="2709" fg:w="5"/><text x="17.5367%" y="735.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (5 samples, 0.03%)</title><rect x="17.2867%" y="709" width="0.0319%" height="15" fill="rgb(252,114,18)" fg:x="2709" fg:w="5"/><text x="17.5367%" y="719.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (2 samples, 0.01%)</title><rect x="17.4207%" y="693" width="0.0128%" height="15" fill="rgb(223,58,37)" fg:x="2730" fg:w="2"/><text x="17.6707%" y="703.50"></text></g><g><title>0x110054180 (2 samples, 0.01%)</title><rect x="17.5101%" y="645" width="0.0128%" height="15" fill="rgb(237,70,4)" fg:x="2744" fg:w="2"/><text x="17.7601%" y="655.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (2 samples, 0.01%)</title><rect x="17.5483%" y="581" width="0.0128%" height="15" fill="rgb(244,85,46)" fg:x="2750" fg:w="2"/><text x="17.7983%" y="591.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (7 samples, 0.04%)</title><rect x="17.5420%" y="613" width="0.0447%" height="15" fill="rgb(223,39,52)" fg:x="2749" fg:w="7"/><text x="17.7920%" y="623.50"></text></g><g><title>deno`Builtins_ResolvePromise (6 samples, 0.04%)</title><rect x="17.5483%" y="597" width="0.0383%" height="15" fill="rgb(218,200,14)" fg:x="2750" fg:w="6"/><text x="17.7983%" y="607.50"></text></g><g><title>deno`Builtins_FulfillPromise (4 samples, 0.03%)</title><rect x="17.5611%" y="581" width="0.0255%" height="15" fill="rgb(208,171,16)" fg:x="2752" fg:w="4"/><text x="17.8111%" y="591.50"></text></g><g><title>0x110054300 (8 samples, 0.05%)</title><rect x="17.5420%" y="629" width="0.0510%" height="15" fill="rgb(234,200,18)" fg:x="2749" fg:w="8"/><text x="17.7920%" y="639.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (5 samples, 0.03%)</title><rect x="17.5994%" y="629" width="0.0319%" height="15" fill="rgb(228,45,11)" fg:x="2758" fg:w="5"/><text x="17.8494%" y="639.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (31 samples, 0.20%)</title><rect x="17.4399%" y="677" width="0.1978%" height="15" fill="rgb(237,182,11)" fg:x="2733" fg:w="31"/><text x="17.6899%" y="687.50"></text></g><g><title>deno`Builtins_JSEntry (21 samples, 0.13%)</title><rect x="17.5037%" y="661" width="0.1340%" height="15" fill="rgb(241,175,49)" fg:x="2743" fg:w="21"/><text x="17.7537%" y="671.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (18 samples, 0.11%)</title><rect x="17.5228%" y="645" width="0.1149%" height="15" fill="rgb(247,38,35)" fg:x="2746" fg:w="18"/><text x="17.7728%" y="655.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (3 samples, 0.02%)</title><rect x="17.6377%" y="677" width="0.0191%" height="15" fill="rgb(228,39,49)" fg:x="2764" fg:w="3"/><text x="17.8877%" y="687.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (2 samples, 0.01%)</title><rect x="17.6568%" y="677" width="0.0128%" height="15" fill="rgb(226,101,26)" fg:x="2767" fg:w="2"/><text x="17.9068%" y="687.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (2 samples, 0.01%)</title><rect x="17.6696%" y="677" width="0.0128%" height="15" fill="rgb(206,141,19)" fg:x="2769" fg:w="2"/><text x="17.9196%" y="687.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (39 samples, 0.25%)</title><rect x="17.4399%" y="693" width="0.2489%" height="15" fill="rgb(211,200,13)" fg:x="2733" fg:w="39"/><text x="17.6899%" y="703.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (3 samples, 0.02%)</title><rect x="17.6887%" y="693" width="0.0191%" height="15" fill="rgb(241,121,6)" fg:x="2772" fg:w="3"/><text x="17.9387%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (2 samples, 0.01%)</title><rect x="17.7206%" y="677" width="0.0128%" height="15" fill="rgb(234,221,29)" fg:x="2777" fg:w="2"/><text x="17.9706%" y="687.50"></text></g><g><title>deno`v8::Isolate::SuppressMicrotaskExecutionScope::~SuppressMicrotaskExecutionScope (2 samples, 0.01%)</title><rect x="17.7653%" y="661" width="0.0128%" height="15" fill="rgb(229,136,5)" fg:x="2784" fg:w="2"/><text x="18.0153%" y="671.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (2 samples, 0.01%)</title><rect x="17.8993%" y="613" width="0.0128%" height="15" fill="rgb(238,36,11)" fg:x="2805" fg:w="2"/><text x="18.1493%" y="623.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (11 samples, 0.07%)</title><rect x="18.0652%" y="565" width="0.0702%" height="15" fill="rgb(251,55,41)" fg:x="2831" fg:w="11"/><text x="18.3152%" y="575.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (7 samples, 0.04%)</title><rect x="18.1354%" y="565" width="0.0447%" height="15" fill="rgb(242,34,40)" fg:x="2842" fg:w="7"/><text x="18.3854%" y="575.50"></text></g><g><title>0x110051680 (3 samples, 0.02%)</title><rect x="18.2184%" y="549" width="0.0191%" height="15" fill="rgb(215,42,17)" fg:x="2855" fg:w="3"/><text x="18.4684%" y="559.50"></text></g><g><title>deno`deno_core::runtime::queue_async_op (2 samples, 0.01%)</title><rect x="18.2758%" y="373" width="0.0128%" height="15" fill="rgb(207,44,46)" fg:x="2864" fg:w="2"/><text x="18.5258%" y="383.50"></text></g><g><title>0x1100510f8 (3 samples, 0.02%)</title><rect x="18.2758%" y="517" width="0.0191%" height="15" fill="rgb(211,206,28)" fg:x="2864" fg:w="3"/><text x="18.5258%" y="527.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (3 samples, 0.02%)</title><rect x="18.2758%" y="501" width="0.0191%" height="15" fill="rgb(237,167,16)" fg:x="2864" fg:w="3"/><text x="18.5258%" y="511.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.02%)</title><rect x="18.2758%" y="485" width="0.0191%" height="15" fill="rgb(233,66,6)" fg:x="2864" fg:w="3"/><text x="18.5258%" y="495.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (3 samples, 0.02%)</title><rect x="18.2758%" y="469" width="0.0191%" height="15" fill="rgb(246,123,29)" fg:x="2864" fg:w="3"/><text x="18.5258%" y="479.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::Call (3 samples, 0.02%)</title><rect x="18.2758%" y="453" width="0.0191%" height="15" fill="rgb(209,62,40)" fg:x="2864" fg:w="3"/><text x="18.5258%" y="463.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.02%)</title><rect x="18.2758%" y="437" width="0.0191%" height="15" fill="rgb(218,4,25)" fg:x="2864" fg:w="3"/><text x="18.5258%" y="447.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::support::MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const v8::function::FunctionCallbackInfo)&gt;::mapping::_{{closure}} (3 samples, 0.02%)</title><rect x="18.2758%" y="421" width="0.0191%" height="15" fill="rgb(253,91,49)" fg:x="2864" fg:w="3"/><text x="18.5258%" y="431.50"></text></g><g><title>deno`core::ops::function::Fn::call (3 samples, 0.02%)</title><rect x="18.2758%" y="405" width="0.0191%" height="15" fill="rgb(228,155,29)" fg:x="2864" fg:w="3"/><text x="18.5258%" y="415.50"></text></g><g><title>deno`deno_flash::op_next::v8_func (3 samples, 0.02%)</title><rect x="18.2758%" y="389" width="0.0191%" height="15" fill="rgb(243,57,37)" fg:x="2864" fg:w="3"/><text x="18.5258%" y="399.50"></text></g><g><title>0x11004b794 (4 samples, 0.03%)</title><rect x="18.2758%" y="533" width="0.0255%" height="15" fill="rgb(244,167,17)" fg:x="2864" fg:w="4"/><text x="18.5258%" y="543.50"></text></g><g><title>0x11004b954 (3 samples, 0.02%)</title><rect x="18.3077%" y="533" width="0.0191%" height="15" fill="rgb(207,181,38)" fg:x="2869" fg:w="3"/><text x="18.5577%" y="543.50"></text></g><g><title>0x11004a780 (3 samples, 0.02%)</title><rect x="18.3077%" y="517" width="0.0191%" height="15" fill="rgb(211,8,23)" fg:x="2869" fg:w="3"/><text x="18.5577%" y="527.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (3 samples, 0.02%)</title><rect x="18.3077%" y="501" width="0.0191%" height="15" fill="rgb(235,11,44)" fg:x="2869" fg:w="3"/><text x="18.5577%" y="511.50"></text></g><g><title>deno`&lt;deno_flash::Stream as std::io::Write&gt;::write (8 samples, 0.05%)</title><rect x="18.3332%" y="373" width="0.0510%" height="15" fill="rgb(248,18,52)" fg:x="2873" fg:w="8"/><text x="18.5832%" y="383.50"></text></g><g><title>deno`&lt;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (8 samples, 0.05%)</title><rect x="18.3332%" y="357" width="0.0510%" height="15" fill="rgb(208,4,7)" fg:x="2873" fg:w="8"/><text x="18.5832%" y="367.50"></text></g><g><title>deno`mio::io_source::IoSource&lt;T&gt;::do_io (8 samples, 0.05%)</title><rect x="18.3332%" y="341" width="0.0510%" height="15" fill="rgb(240,17,39)" fg:x="2873" fg:w="8"/><text x="18.5832%" y="351.50"></text></g><g><title>deno`mio::sys::unix::IoSourceState::do_io (8 samples, 0.05%)</title><rect x="18.3332%" y="325" width="0.0510%" height="15" fill="rgb(207,170,3)" fg:x="2873" fg:w="8"/><text x="18.5832%" y="335.50"></text></g><g><title>deno`&lt;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (8 samples, 0.05%)</title><rect x="18.3332%" y="309" width="0.0510%" height="15" fill="rgb(236,100,52)" fg:x="2873" fg:w="8"/><text x="18.5832%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (8 samples, 0.05%)</title><rect x="18.3332%" y="293" width="0.0510%" height="15" fill="rgb(246,78,51)" fg:x="2873" fg:w="8"/><text x="18.5832%" y="303.50"></text></g><g><title>deno`deno_flash::op_respond::call (10 samples, 0.06%)</title><rect x="18.3332%" y="389" width="0.0638%" height="15" fill="rgb(211,17,15)" fg:x="2873" fg:w="10"/><text x="18.5832%" y="399.50"></text></g><g><title>deno`core::ops::function::Fn::call (12 samples, 0.08%)</title><rect x="18.3332%" y="421" width="0.0766%" height="15" fill="rgb(209,59,46)" fg:x="2873" fg:w="12"/><text x="18.5832%" y="431.50"></text></g><g><title>deno`deno_flash::op_respond::v8_func (12 samples, 0.08%)</title><rect x="18.3332%" y="405" width="0.0766%" height="15" fill="rgb(210,92,25)" fg:x="2873" fg:w="12"/><text x="18.5832%" y="415.50"></text></g><g><title>deno`serde_v8::de::from_v8 (2 samples, 0.01%)</title><rect x="18.3970%" y="389" width="0.0128%" height="15" fill="rgb(238,174,52)" fg:x="2883" fg:w="2"/><text x="18.6470%" y="399.50"></text></g><g><title>0x11004d06c (13 samples, 0.08%)</title><rect x="18.3332%" y="533" width="0.0830%" height="15" fill="rgb(230,73,7)" fg:x="2873" fg:w="13"/><text x="18.5832%" y="543.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (13 samples, 0.08%)</title><rect x="18.3332%" y="517" width="0.0830%" height="15" fill="rgb(243,124,40)" fg:x="2873" fg:w="13"/><text x="18.5832%" y="527.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (13 samples, 0.08%)</title><rect x="18.3332%" y="501" width="0.0830%" height="15" fill="rgb(244,170,11)" fg:x="2873" fg:w="13"/><text x="18.5832%" y="511.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (13 samples, 0.08%)</title><rect x="18.3332%" y="485" width="0.0830%" height="15" fill="rgb(207,114,54)" fg:x="2873" fg:w="13"/><text x="18.5832%" y="495.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::Call (13 samples, 0.08%)</title><rect x="18.3332%" y="469" width="0.0830%" height="15" fill="rgb(205,42,20)" fg:x="2873" fg:w="13"/><text x="18.5832%" y="479.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (13 samples, 0.08%)</title><rect x="18.3332%" y="453" width="0.0830%" height="15" fill="rgb(230,30,28)" fg:x="2873" fg:w="13"/><text x="18.5832%" y="463.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::support::MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const v8::function::FunctionCallbackInfo)&gt;::mapping::_{{closure}} (13 samples, 0.08%)</title><rect x="18.3332%" y="437" width="0.0830%" height="15" fill="rgb(205,73,54)" fg:x="2873" fg:w="13"/><text x="18.5832%" y="447.50"></text></g><g><title>0x1100516c0 (2 samples, 0.01%)</title><rect x="18.4162%" y="533" width="0.0128%" height="15" fill="rgb(254,227,23)" fg:x="2886" fg:w="2"/><text x="18.6662%" y="543.50"></text></g><g><title>0x110051850 (2 samples, 0.01%)</title><rect x="18.4353%" y="533" width="0.0128%" height="15" fill="rgb(228,202,34)" fg:x="2889" fg:w="2"/><text x="18.6853%" y="543.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (7 samples, 0.04%)</title><rect x="18.4800%" y="517" width="0.0447%" height="15" fill="rgb(222,225,37)" fg:x="2896" fg:w="7"/><text x="18.7300%" y="527.50"></text></g><g><title>0x110051aa8 (9 samples, 0.06%)</title><rect x="18.4800%" y="533" width="0.0574%" height="15" fill="rgb(221,14,54)" fg:x="2896" fg:w="9"/><text x="18.7300%" y="543.50"></text></g><g><title>deno`v8::internal::ComputeSeededIntegerHash (2 samples, 0.01%)</title><rect x="18.5247%" y="517" width="0.0128%" height="15" fill="rgb(254,102,2)" fg:x="2903" fg:w="2"/><text x="18.7747%" y="527.50"></text></g><g><title>0x110051ab4 (3 samples, 0.02%)</title><rect x="18.5438%" y="533" width="0.0191%" height="15" fill="rgb(232,104,17)" fg:x="2906" fg:w="3"/><text x="18.7938%" y="543.50"></text></g><g><title>deno`Builtins_ToString (3 samples, 0.02%)</title><rect x="18.5438%" y="517" width="0.0191%" height="15" fill="rgb(250,220,14)" fg:x="2906" fg:w="3"/><text x="18.7938%" y="527.50"></text></g><g><title>0x110051bac (2 samples, 0.01%)</title><rect x="18.5949%" y="533" width="0.0128%" height="15" fill="rgb(241,158,9)" fg:x="2914" fg:w="2"/><text x="18.8449%" y="543.50"></text></g><g><title>0x110051c08 (2 samples, 0.01%)</title><rect x="18.6140%" y="533" width="0.0128%" height="15" fill="rgb(246,9,43)" fg:x="2917" fg:w="2"/><text x="18.8640%" y="543.50"></text></g><g><title>deno`Builtins_ToString (2 samples, 0.01%)</title><rect x="18.6140%" y="517" width="0.0128%" height="15" fill="rgb(206,73,33)" fg:x="2917" fg:w="2"/><text x="18.8640%" y="527.50"></text></g><g><title>deno`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (5 samples, 0.03%)</title><rect x="18.8118%" y="485" width="0.0319%" height="15" fill="rgb(222,79,8)" fg:x="2948" fg:w="5"/><text x="19.0618%" y="495.50"></text></g><g><title>deno`core::intrinsics::write_bytes (3 samples, 0.02%)</title><rect x="18.8246%" y="469" width="0.0191%" height="15" fill="rgb(234,8,54)" fg:x="2950" fg:w="3"/><text x="19.0746%" y="479.50"></text></g><g><title>deno`core::ops::function::Fn::call (2 samples, 0.01%)</title><rect x="18.8437%" y="485" width="0.0128%" height="15" fill="rgb(209,134,38)" fg:x="2953" fg:w="2"/><text x="19.0937%" y="495.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="19.0033%" y="405" width="0.0191%" height="15" fill="rgb(230,127,29)" fg:x="2978" fg:w="3"/><text x="19.2533%" y="415.50"></text></g><g><title>deno`core::num::nonzero::NonZeroUsize::new_unchecked (2 samples, 0.01%)</title><rect x="19.0096%" y="389" width="0.0128%" height="15" fill="rgb(242,44,41)" fg:x="2979" fg:w="2"/><text x="19.2596%" y="399.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (7 samples, 0.04%)</title><rect x="18.9905%" y="421" width="0.0447%" height="15" fill="rgb(222,56,43)" fg:x="2976" fg:w="7"/><text x="19.2405%" y="431.50"></text></g><g><title>deno`&lt;core::num::nonzero::NonZeroUsize as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="19.0224%" y="405" width="0.0128%" height="15" fill="rgb(238,39,47)" fg:x="2981" fg:w="2"/><text x="19.2724%" y="415.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (6 samples, 0.04%)</title><rect x="19.0352%" y="421" width="0.0383%" height="15" fill="rgb(226,79,43)" fg:x="2983" fg:w="6"/><text x="19.2852%" y="431.50"></text></g><g><title>deno`core::alloc::layout::Layout::from_size_align_unchecked (5 samples, 0.03%)</title><rect x="19.0415%" y="405" width="0.0319%" height="15" fill="rgb(242,105,53)" fg:x="2984" fg:w="5"/><text x="19.2915%" y="415.50"></text></g><g><title>deno`&lt;v8::scope::CallbackScope as core::ops::deref::DerefMut&gt;::deref_mut (27 samples, 0.17%)</title><rect x="18.9267%" y="469" width="0.1723%" height="15" fill="rgb(251,132,46)" fg:x="2966" fg:w="27"/><text x="19.1767%" y="479.50"></text></g><g><title>deno`&lt;v8::scope::CallbackScope as core::convert::AsMut&lt;v8::scope::HandleScope&gt;&gt;::as_mut (26 samples, 0.17%)</title><rect x="18.9331%" y="453" width="0.1659%" height="15" fill="rgb(231,77,14)" fg:x="2967" fg:w="26"/><text x="19.1831%" y="463.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (25 samples, 0.16%)</title><rect x="18.9394%" y="437" width="0.1595%" height="15" fill="rgb(240,135,9)" fg:x="2968" fg:w="25"/><text x="19.1894%" y="447.50"></text></g><g><title>deno`core::alloc::layout::size_align (4 samples, 0.03%)</title><rect x="19.0734%" y="421" width="0.0255%" height="15" fill="rgb(248,109,14)" fg:x="2989" fg:w="4"/><text x="19.3234%" y="431.50"></text></g><g><title>deno`core::intrinsics::write_bytes (2 samples, 0.01%)</title><rect x="19.1117%" y="453" width="0.0128%" height="15" fill="rgb(227,146,52)" fg:x="2995" fg:w="2"/><text x="19.3617%" y="463.50"></text></g><g><title>deno`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (4 samples, 0.03%)</title><rect x="19.1054%" y="469" width="0.0255%" height="15" fill="rgb(232,54,3)" fg:x="2994" fg:w="4"/><text x="19.3554%" y="479.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (5 samples, 0.03%)</title><rect x="19.1883%" y="453" width="0.0319%" height="15" fill="rgb(229,201,43)" fg:x="3007" fg:w="5"/><text x="19.4383%" y="463.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="19.2266%" y="453" width="0.0128%" height="15" fill="rgb(252,161,33)" fg:x="3013" fg:w="2"/><text x="19.4766%" y="463.50"></text></g><g><title>deno`&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.03%)</title><rect x="19.4882%" y="437" width="0.0319%" height="15" fill="rgb(226,146,40)" fg:x="3054" fg:w="5"/><text x="19.7382%" y="447.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.05%)</title><rect x="19.5201%" y="437" width="0.0510%" height="15" fill="rgb(219,47,25)" fg:x="3059" fg:w="8"/><text x="19.7701%" y="447.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="19.5903%" y="437" width="0.0128%" height="15" fill="rgb(250,135,13)" fg:x="3070" fg:w="2"/><text x="19.8403%" y="447.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (6 samples, 0.04%)</title><rect x="19.6031%" y="437" width="0.0383%" height="15" fill="rgb(219,229,18)" fg:x="3072" fg:w="6"/><text x="19.8531%" y="447.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="19.6988%" y="357" width="0.0191%" height="15" fill="rgb(217,152,27)" fg:x="3087" fg:w="3"/><text x="19.9488%" y="367.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (13 samples, 0.08%)</title><rect x="19.6478%" y="421" width="0.0830%" height="15" fill="rgb(225,71,47)" fg:x="3079" fg:w="13"/><text x="19.8978%" y="431.50"></text></g><g><title>deno`core::cell::BorrowRef::new (10 samples, 0.06%)</title><rect x="19.6669%" y="405" width="0.0638%" height="15" fill="rgb(220,139,14)" fg:x="3082" fg:w="10"/><text x="19.9169%" y="415.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (6 samples, 0.04%)</title><rect x="19.6924%" y="389" width="0.0383%" height="15" fill="rgb(247,54,32)" fg:x="3086" fg:w="6"/><text x="19.9424%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (6 samples, 0.04%)</title><rect x="19.6924%" y="373" width="0.0383%" height="15" fill="rgb(252,131,39)" fg:x="3086" fg:w="6"/><text x="19.9424%" y="383.50"></text></g><g><title>deno`core::ptr::write (2 samples, 0.01%)</title><rect x="19.7180%" y="357" width="0.0128%" height="15" fill="rgb(210,108,39)" fg:x="3090" fg:w="2"/><text x="19.9680%" y="367.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (16 samples, 0.10%)</title><rect x="19.6414%" y="437" width="0.1021%" height="15" fill="rgb(205,23,29)" fg:x="3078" fg:w="16"/><text x="19.8914%" y="447.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.01%)</title><rect x="19.7307%" y="421" width="0.0128%" height="15" fill="rgb(246,139,46)" fg:x="3092" fg:w="2"/><text x="19.9807%" y="431.50"></text></g><g><title>deno`core::mem::replace (9 samples, 0.06%)</title><rect x="19.8520%" y="357" width="0.0574%" height="15" fill="rgb(250,81,26)" fg:x="3111" fg:w="9"/><text x="20.1020%" y="367.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="19.9094%" y="357" width="0.0191%" height="15" fill="rgb(214,104,7)" fg:x="3120" fg:w="3"/><text x="20.1594%" y="367.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (26 samples, 0.17%)</title><rect x="19.7818%" y="405" width="0.1659%" height="15" fill="rgb(233,189,8)" fg:x="3100" fg:w="26"/><text x="20.0318%" y="415.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (16 samples, 0.10%)</title><rect x="19.8456%" y="389" width="0.1021%" height="15" fill="rgb(228,141,17)" fg:x="3110" fg:w="16"/><text x="20.0956%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (15 samples, 0.10%)</title><rect x="19.8520%" y="373" width="0.0957%" height="15" fill="rgb(247,157,1)" fg:x="3111" fg:w="15"/><text x="20.1020%" y="383.50"></text></g><g><title>deno`core::ptr::write (3 samples, 0.02%)</title><rect x="19.9285%" y="357" width="0.0191%" height="15" fill="rgb(249,225,5)" fg:x="3123" fg:w="3"/><text x="20.1785%" y="367.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (30 samples, 0.19%)</title><rect x="19.7626%" y="421" width="0.1914%" height="15" fill="rgb(242,55,13)" fg:x="3097" fg:w="30"/><text x="20.0126%" y="431.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (35 samples, 0.22%)</title><rect x="19.7435%" y="437" width="0.2233%" height="15" fill="rgb(230,49,50)" fg:x="3094" fg:w="35"/><text x="19.9935%" y="447.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.01%)</title><rect x="19.9541%" y="421" width="0.0128%" height="15" fill="rgb(241,111,38)" fg:x="3127" fg:w="2"/><text x="20.2041%" y="431.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap_unchecked (3 samples, 0.02%)</title><rect x="19.9668%" y="437" width="0.0191%" height="15" fill="rgb(252,155,4)" fg:x="3129" fg:w="3"/><text x="20.2168%" y="447.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="20.0242%" y="389" width="0.0128%" height="15" fill="rgb(212,69,32)" fg:x="3138" fg:w="2"/><text x="20.2742%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="20.0242%" y="373" width="0.0128%" height="15" fill="rgb(243,107,47)" fg:x="3138" fg:w="2"/><text x="20.2742%" y="383.50"></text></g><g><title>deno`core::ptr::write (2 samples, 0.01%)</title><rect x="20.0242%" y="357" width="0.0128%" height="15" fill="rgb(247,130,12)" fg:x="3138" fg:w="2"/><text x="20.2742%" y="367.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (8 samples, 0.05%)</title><rect x="19.9923%" y="405" width="0.0510%" height="15" fill="rgb(233,74,16)" fg:x="3133" fg:w="8"/><text x="20.2423%" y="415.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::ops::OpState&gt;&gt; (10 samples, 0.06%)</title><rect x="19.9860%" y="437" width="0.0638%" height="15" fill="rgb(208,58,18)" fg:x="3132" fg:w="10"/><text x="20.2360%" y="447.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (9 samples, 0.06%)</title><rect x="19.9923%" y="421" width="0.0574%" height="15" fill="rgb(242,225,1)" fg:x="3133" fg:w="9"/><text x="20.2423%" y="431.50"></text></g><g><title>deno`core::mem::replace (5 samples, 0.03%)</title><rect x="20.0817%" y="357" width="0.0319%" height="15" fill="rgb(249,39,40)" fg:x="3147" fg:w="5"/><text x="20.3317%" y="367.50"></text></g><g><title>deno`core::ptr::read (5 samples, 0.03%)</title><rect x="20.1136%" y="357" width="0.0319%" height="15" fill="rgb(207,72,44)" fg:x="3152" fg:w="5"/><text x="20.3636%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::ops::OpState&gt;&gt; (17 samples, 0.11%)</title><rect x="20.0498%" y="437" width="0.1085%" height="15" fill="rgb(215,193,12)" fg:x="3142" fg:w="17"/><text x="20.2998%" y="447.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (15 samples, 0.10%)</title><rect x="20.0625%" y="421" width="0.0957%" height="15" fill="rgb(248,41,39)" fg:x="3144" fg:w="15"/><text x="20.3125%" y="431.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (15 samples, 0.10%)</title><rect x="20.0625%" y="405" width="0.0957%" height="15" fill="rgb(253,85,4)" fg:x="3144" fg:w="15"/><text x="20.3125%" y="415.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (13 samples, 0.08%)</title><rect x="20.0753%" y="389" width="0.0830%" height="15" fill="rgb(243,70,31)" fg:x="3146" fg:w="13"/><text x="20.3253%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (12 samples, 0.08%)</title><rect x="20.0817%" y="373" width="0.0766%" height="15" fill="rgb(253,195,26)" fg:x="3147" fg:w="12"/><text x="20.3317%" y="383.50"></text></g><g><title>deno`core::ptr::write (2 samples, 0.01%)</title><rect x="20.1455%" y="357" width="0.0128%" height="15" fill="rgb(243,42,11)" fg:x="3157" fg:w="2"/><text x="20.3955%" y="367.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4 samples, 0.03%)</title><rect x="20.1710%" y="437" width="0.0255%" height="15" fill="rgb(239,66,17)" fg:x="3161" fg:w="4"/><text x="20.4210%" y="447.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4 samples, 0.03%)</title><rect x="20.1965%" y="437" width="0.0255%" height="15" fill="rgb(217,132,21)" fg:x="3165" fg:w="4"/><text x="20.4465%" y="447.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (7 samples, 0.04%)</title><rect x="20.3114%" y="389" width="0.0447%" height="15" fill="rgb(252,202,21)" fg:x="3183" fg:w="7"/><text x="20.5614%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (6 samples, 0.04%)</title><rect x="20.3178%" y="373" width="0.0383%" height="15" fill="rgb(233,98,36)" fg:x="3184" fg:w="6"/><text x="20.5678%" y="383.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (5 samples, 0.03%)</title><rect x="20.3242%" y="357" width="0.0319%" height="15" fill="rgb(216,153,54)" fg:x="3185" fg:w="5"/><text x="20.5742%" y="367.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="20.3433%" y="341" width="0.0128%" height="15" fill="rgb(250,99,7)" fg:x="3188" fg:w="2"/><text x="20.5933%" y="351.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::ops_metrics::OpMetrics&gt;&gt; (11 samples, 0.07%)</title><rect x="20.2923%" y="421" width="0.0702%" height="15" fill="rgb(207,56,50)" fg:x="3180" fg:w="11"/><text x="20.5423%" y="431.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (10 samples, 0.06%)</title><rect x="20.2986%" y="405" width="0.0638%" height="15" fill="rgb(244,61,34)" fg:x="3181" fg:w="10"/><text x="20.5486%" y="415.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (14 samples, 0.09%)</title><rect x="20.4007%" y="373" width="0.0893%" height="15" fill="rgb(241,50,38)" fg:x="3197" fg:w="14"/><text x="20.6507%" y="383.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (10 samples, 0.06%)</title><rect x="20.4263%" y="357" width="0.0638%" height="15" fill="rgb(212,166,30)" fg:x="3201" fg:w="10"/><text x="20.6763%" y="367.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (7 samples, 0.04%)</title><rect x="20.4454%" y="341" width="0.0447%" height="15" fill="rgb(249,127,32)" fg:x="3204" fg:w="7"/><text x="20.6954%" y="351.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="20.4709%" y="325" width="0.0191%" height="15" fill="rgb(209,103,0)" fg:x="3208" fg:w="3"/><text x="20.7209%" y="335.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (18 samples, 0.11%)</title><rect x="20.3880%" y="389" width="0.1149%" height="15" fill="rgb(238,209,51)" fg:x="3195" fg:w="18"/><text x="20.6380%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="20.4901%" y="373" width="0.0128%" height="15" fill="rgb(237,56,23)" fg:x="3211" fg:w="2"/><text x="20.7401%" y="383.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (20 samples, 0.13%)</title><rect x="20.3880%" y="405" width="0.1276%" height="15" fill="rgb(215,153,46)" fg:x="3195" fg:w="20"/><text x="20.6380%" y="415.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.01%)</title><rect x="20.5028%" y="389" width="0.0128%" height="15" fill="rgb(224,49,31)" fg:x="3213" fg:w="2"/><text x="20.7528%" y="399.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.01%)</title><rect x="20.5475%" y="389" width="0.0128%" height="15" fill="rgb(250,18,42)" fg:x="3220" fg:w="2"/><text x="20.7975%" y="399.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.02%)</title><rect x="20.6368%" y="309" width="0.0191%" height="15" fill="rgb(215,176,39)" fg:x="3234" fg:w="3"/><text x="20.8868%" y="319.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.04%)</title><rect x="20.6305%" y="325" width="0.0383%" height="15" fill="rgb(223,77,29)" fg:x="3233" fg:w="6"/><text x="20.8805%" y="335.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="20.6560%" y="309" width="0.0128%" height="15" fill="rgb(234,94,52)" fg:x="3237" fg:w="2"/><text x="20.9060%" y="319.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (4 samples, 0.03%)</title><rect x="20.6688%" y="325" width="0.0255%" height="15" fill="rgb(220,154,50)" fg:x="3239" fg:w="4"/><text x="20.9188%" y="335.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="20.6943%" y="325" width="0.0128%" height="15" fill="rgb(212,11,10)" fg:x="3243" fg:w="2"/><text x="20.9443%" y="335.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (16 samples, 0.10%)</title><rect x="20.6113%" y="341" width="0.1021%" height="15" fill="rgb(205,166,19)" fg:x="3230" fg:w="16"/><text x="20.8613%" y="351.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts_mut (5 samples, 0.03%)</title><rect x="20.7326%" y="325" width="0.0319%" height="15" fill="rgb(244,198,16)" fg:x="3249" fg:w="5"/><text x="20.9826%" y="335.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (33 samples, 0.21%)</title><rect x="20.5922%" y="357" width="0.2106%" height="15" fill="rgb(219,69,12)" fg:x="3227" fg:w="33"/><text x="20.8422%" y="367.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts_mut (14 samples, 0.09%)</title><rect x="20.7134%" y="341" width="0.0893%" height="15" fill="rgb(245,30,7)" fg:x="3246" fg:w="14"/><text x="20.9634%" y="351.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts_mut (6 samples, 0.04%)</title><rect x="20.7645%" y="325" width="0.0383%" height="15" fill="rgb(218,221,48)" fg:x="3254" fg:w="6"/><text x="21.0145%" y="335.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.03%)</title><rect x="20.8091%" y="357" width="0.0255%" height="15" fill="rgb(216,66,15)" fg:x="3261" fg:w="4"/><text x="21.0591%" y="367.50"></text></g><g><title>deno`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.02%)</title><rect x="20.8347%" y="357" width="0.0191%" height="15" fill="rgb(226,122,50)" fg:x="3265" fg:w="3"/><text x="21.0847%" y="367.50"></text></g><g><title>deno`deno_core::ops_metrics::OpsTracker::track_sync (107 samples, 0.68%)</title><rect x="20.2221%" y="437" width="0.6828%" height="15" fill="rgb(239,156,16)" fg:x="3169" fg:w="107"/><text x="20.4721%" y="447.50"></text></g><g><title>deno`deno_core::ops_metrics::OpsTracker::metrics_mut (85 samples, 0.54%)</title><rect x="20.3625%" y="421" width="0.5424%" height="15" fill="rgb(224,27,38)" fg:x="3191" fg:w="85"/><text x="20.6125%" y="431.50"></text></g><g><title>deno`core::cell::RefMut&lt;T&gt;::map (61 samples, 0.39%)</title><rect x="20.5156%" y="405" width="0.3893%" height="15" fill="rgb(224,39,27)" fg:x="3215" fg:w="61"/><text x="20.7656%" y="415.50"></text></g><g><title>deno`deno_core::ops_metrics::OpsTracker::metrics_mut::_{{closure}} (54 samples, 0.34%)</title><rect x="20.5603%" y="389" width="0.3446%" height="15" fill="rgb(215,92,29)" fg:x="3222" fg:w="54"/><text x="20.8103%" y="399.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (53 samples, 0.34%)</title><rect x="20.5667%" y="373" width="0.3382%" height="15" fill="rgb(207,159,16)" fg:x="3223" fg:w="53"/><text x="20.8167%" y="383.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts_mut (8 samples, 0.05%)</title><rect x="20.8538%" y="357" width="0.0510%" height="15" fill="rgb(238,163,47)" fg:x="3268" fg:w="8"/><text x="21.1038%" y="367.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.01%)</title><rect x="21.0389%" y="357" width="0.0128%" height="15" fill="rgb(219,91,49)" fg:x="3297" fg:w="2"/><text x="21.2889%" y="367.50"></text></g><g><title>libsystem_c.dylib`send (2 samples, 0.01%)</title><rect x="21.0771%" y="341" width="0.0128%" height="15" fill="rgb(227,167,31)" fg:x="3303" fg:w="2"/><text x="21.3271%" y="351.50"></text></g><g><title>deno`&lt;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1,367 samples, 8.72%)</title><rect x="20.9814%" y="405" width="8.7231%" height="15" fill="rgb(234,80,54)" fg:x="3288" fg:w="1367"/><text x="21.2314%" y="415.50">deno`&lt;mio::n..</text></g><g><title>deno`mio::io_source::IoSource&lt;T&gt;::do_io (1,367 samples, 8.72%)</title><rect x="20.9814%" y="389" width="8.7231%" height="15" fill="rgb(212,114,2)" fg:x="3288" fg:w="1367"/><text x="21.2314%" y="399.50">deno`mio::io..</text></g><g><title>deno`mio::sys::unix::IoSourceState::do_io (1,362 samples, 8.69%)</title><rect x="21.0133%" y="373" width="8.6912%" height="15" fill="rgb(234,50,24)" fg:x="3293" fg:w="1362"/><text x="21.2633%" y="383.50">deno`mio::sy..</text></g><g><title>deno`&lt;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (1,356 samples, 8.65%)</title><rect x="21.0516%" y="357" width="8.6529%" height="15" fill="rgb(221,68,8)" fg:x="3299" fg:w="1356"/><text x="21.3016%" y="367.50">deno`&lt;mio::n..</text></g><g><title>libsystem_kernel.dylib`__sendto (1,350 samples, 8.61%)</title><rect x="21.0899%" y="341" width="8.6146%" height="15" fill="rgb(254,180,31)" fg:x="3305" fg:w="1350"/><text x="21.3399%" y="351.50">libsystem_ke..</text></g><g><title>deno`&lt;deno_flash::Stream as std::io::Write&gt;::write (1,371 samples, 8.75%)</title><rect x="20.9687%" y="421" width="8.7486%" height="15" fill="rgb(247,130,50)" fg:x="3286" fg:w="1371"/><text x="21.2187%" y="431.50">deno`&lt;deno_f..</text></g><g><title>deno`mio::io_source::IoSource&lt;T&gt;::do_io (2 samples, 0.01%)</title><rect x="29.7045%" y="405" width="0.0128%" height="15" fill="rgb(211,109,4)" fg:x="4655" fg:w="2"/><text x="29.9545%" y="415.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.01%)</title><rect x="29.8258%" y="357" width="0.0128%" height="15" fill="rgb(238,50,21)" fg:x="4674" fg:w="2"/><text x="30.0758%" y="367.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="29.8386%" y="357" width="0.0191%" height="15" fill="rgb(225,57,45)" fg:x="4676" fg:w="3"/><text x="30.0886%" y="367.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_ptr (10 samples, 0.06%)</title><rect x="29.8003%" y="373" width="0.0638%" height="15" fill="rgb(209,196,50)" fg:x="4670" fg:w="10"/><text x="30.0503%" y="383.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::cast (2 samples, 0.01%)</title><rect x="29.8641%" y="357" width="0.0128%" height="15" fill="rgb(242,140,13)" fg:x="4680" fg:w="2"/><text x="30.1141%" y="367.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (2 samples, 0.01%)</title><rect x="29.8768%" y="357" width="0.0128%" height="15" fill="rgb(217,111,7)" fg:x="4682" fg:w="2"/><text x="30.1268%" y="367.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.11%)</title><rect x="29.7875%" y="389" width="0.1149%" height="15" fill="rgb(253,193,51)" fg:x="4668" fg:w="18"/><text x="30.0375%" y="399.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (6 samples, 0.04%)</title><rect x="29.8641%" y="373" width="0.0383%" height="15" fill="rgb(252,70,29)" fg:x="4680" fg:w="6"/><text x="30.1141%" y="383.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (2 samples, 0.01%)</title><rect x="29.8896%" y="357" width="0.0128%" height="15" fill="rgb(232,127,12)" fg:x="4684" fg:w="2"/><text x="30.1396%" y="367.50"></text></g><g><title>deno`&lt;serde_v8::magic::string_or_buffer::StringOrBuffer as core::ops::deref::Deref&gt;::deref (29 samples, 0.19%)</title><rect x="29.7237%" y="421" width="0.1851%" height="15" fill="rgb(211,180,21)" fg:x="4658" fg:w="29"/><text x="29.9737%" y="431.50"></text></g><g><title>deno`alloc::string::String::as_bytes (21 samples, 0.13%)</title><rect x="29.7747%" y="405" width="0.1340%" height="15" fill="rgb(229,72,13)" fg:x="4666" fg:w="21"/><text x="30.0247%" y="415.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap (4 samples, 0.03%)</title><rect x="29.9087%" y="421" width="0.0255%" height="15" fill="rgb(240,211,49)" fg:x="4687" fg:w="4"/><text x="30.1587%" y="431.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::result::Result&lt;usize,std::io::error::Error&gt;&gt; (2 samples, 0.01%)</title><rect x="29.9470%" y="421" width="0.0128%" height="15" fill="rgb(219,149,40)" fg:x="4693" fg:w="2"/><text x="30.1970%" y="431.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.02%)</title><rect x="30.0810%" y="325" width="0.0191%" height="15" fill="rgb(210,127,46)" fg:x="4714" fg:w="3"/><text x="30.3310%" y="335.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.03%)</title><rect x="30.0810%" y="341" width="0.0319%" height="15" fill="rgb(220,106,7)" fg:x="4714" fg:w="5"/><text x="30.3310%" y="351.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="30.1002%" y="325" width="0.0128%" height="15" fill="rgb(249,31,22)" fg:x="4717" fg:w="2"/><text x="30.3502%" y="335.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11 samples, 0.07%)</title><rect x="30.0491%" y="357" width="0.0702%" height="15" fill="rgb(253,1,49)" fg:x="4709" fg:w="11"/><text x="30.2991%" y="367.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts_mut (2 samples, 0.01%)</title><rect x="30.1193%" y="357" width="0.0128%" height="15" fill="rgb(227,144,33)" fg:x="4720" fg:w="2"/><text x="30.3693%" y="367.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="30.1321%" y="357" width="0.0191%" height="15" fill="rgb(249,163,44)" fg:x="4722" fg:w="3"/><text x="30.3821%" y="367.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.15%)</title><rect x="30.0045%" y="373" width="0.1531%" height="15" fill="rgb(234,15,39)" fg:x="4702" fg:w="24"/><text x="30.2545%" y="383.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.01%)</title><rect x="30.1576%" y="373" width="0.0128%" height="15" fill="rgb(207,66,16)" fg:x="4726" fg:w="2"/><text x="30.4076%" y="383.50"></text></g><g><title>deno`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="30.2342%" y="325" width="0.0128%" height="15" fill="rgb(233,112,24)" fg:x="4738" fg:w="2"/><text x="30.4842%" y="335.50"></text></g><g><title>deno`__rdl_dealloc (2 samples, 0.01%)</title><rect x="30.2470%" y="325" width="0.0128%" height="15" fill="rgb(230,90,22)" fg:x="4740" fg:w="2"/><text x="30.4970%" y="335.50"></text></g><g><title>deno`core::alloc::layout::Layout::align (10 samples, 0.06%)</title><rect x="30.2789%" y="309" width="0.0638%" height="15" fill="rgb(229,61,13)" fg:x="4745" fg:w="10"/><text x="30.5289%" y="319.50"></text></g><g><title>deno`core::num::nonzero::NonZeroUsize::new_unchecked (8 samples, 0.05%)</title><rect x="30.2916%" y="293" width="0.0510%" height="15" fill="rgb(225,57,24)" fg:x="4747" fg:w="8"/><text x="30.5416%" y="303.50"></text></g><g><title>deno`core::mem::valid_align::ValidAlign::as_nonzero (2 samples, 0.01%)</title><rect x="30.3427%" y="309" width="0.0128%" height="15" fill="rgb(208,169,48)" fg:x="4755" fg:w="2"/><text x="30.5927%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="30.3937%" y="293" width="0.0191%" height="15" fill="rgb(244,218,51)" fg:x="4763" fg:w="3"/><text x="30.6437%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.06%)</title><rect x="30.3618%" y="309" width="0.0574%" height="15" fill="rgb(214,148,10)" fg:x="4758" fg:w="9"/><text x="30.6118%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.03%)</title><rect x="30.4192%" y="309" width="0.0319%" height="15" fill="rgb(225,174,27)" fg:x="4767" fg:w="5"/><text x="30.6692%" y="319.50"></text></g><g><title>deno`alloc::alloc::dealloc (34 samples, 0.22%)</title><rect x="30.2597%" y="325" width="0.2170%" height="15" fill="rgb(230,96,26)" fg:x="4742" fg:w="34"/><text x="30.5097%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.03%)</title><rect x="30.4512%" y="309" width="0.0255%" height="15" fill="rgb(232,10,30)" fg:x="4772" fg:w="4"/><text x="30.7012%" y="319.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.33%)</title><rect x="30.1895%" y="341" width="0.3254%" height="15" fill="rgb(222,8,50)" fg:x="4731" fg:w="51"/><text x="30.4395%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="30.4958%" y="325" width="0.0191%" height="15" fill="rgb(213,81,27)" fg:x="4779" fg:w="3"/><text x="30.7458%" y="335.50"></text></g><g><title>deno`&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (5 samples, 0.03%)</title><rect x="30.5660%" y="309" width="0.0319%" height="15" fill="rgb(245,50,10)" fg:x="4790" fg:w="5"/><text x="30.8160%" y="319.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="30.5852%" y="293" width="0.0128%" height="15" fill="rgb(216,100,18)" fg:x="4793" fg:w="2"/><text x="30.8352%" y="303.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (9 samples, 0.06%)</title><rect x="30.5533%" y="325" width="0.0574%" height="15" fill="rgb(236,147,54)" fg:x="4788" fg:w="9"/><text x="30.8033%" y="335.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.03%)</title><rect x="30.6107%" y="325" width="0.0319%" height="15" fill="rgb(205,143,26)" fg:x="4797" fg:w="5"/><text x="30.8607%" y="335.50"></text></g><g><title>deno`core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.01%)</title><rect x="30.6617%" y="309" width="0.0128%" height="15" fill="rgb(236,26,9)" fg:x="4805" fg:w="2"/><text x="30.9117%" y="319.50"></text></g><g><title>deno`core::alloc::layout::Layout::array (7 samples, 0.04%)</title><rect x="30.6426%" y="325" width="0.0447%" height="15" fill="rgb(221,165,53)" fg:x="4802" fg:w="7"/><text x="30.8926%" y="335.50"></text></g><g><title>deno`core::mem::valid_align::ValidAlign::new_unchecked (2 samples, 0.01%)</title><rect x="30.6745%" y="309" width="0.0128%" height="15" fill="rgb(214,110,17)" fg:x="4807" fg:w="2"/><text x="30.9245%" y="319.50"></text></g><g><title>deno`core::num::_&lt;impl usize&gt;::checked_mul (2 samples, 0.01%)</title><rect x="30.6936%" y="325" width="0.0128%" height="15" fill="rgb(237,197,12)" fg:x="4810" fg:w="2"/><text x="30.9436%" y="335.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (6 samples, 0.04%)</title><rect x="30.7064%" y="325" width="0.0383%" height="15" fill="rgb(205,84,17)" fg:x="4812" fg:w="6"/><text x="30.9564%" y="335.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::cast (6 samples, 0.04%)</title><rect x="30.7511%" y="325" width="0.0383%" height="15" fill="rgb(237,18,45)" fg:x="4819" fg:w="6"/><text x="31.0011%" y="335.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (3 samples, 0.02%)</title><rect x="30.7702%" y="309" width="0.0191%" height="15" fill="rgb(221,87,14)" fg:x="4822" fg:w="3"/><text x="31.0202%" y="319.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (45 samples, 0.29%)</title><rect x="30.5150%" y="341" width="0.2872%" height="15" fill="rgb(238,186,15)" fg:x="4782" fg:w="45"/><text x="30.7650%" y="351.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::unwrap_unchecked (2 samples, 0.01%)</title><rect x="30.7894%" y="325" width="0.0128%" height="15" fill="rgb(208,115,11)" fg:x="4825" fg:w="2"/><text x="31.0394%" y="335.50"></text></g><g><title>deno`core::alloc::layout::Layout::array (2 samples, 0.01%)</title><rect x="30.8021%" y="341" width="0.0128%" height="15" fill="rgb(254,175,0)" fg:x="4827" fg:w="2"/><text x="31.0521%" y="351.50"></text></g><g><title>deno`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.64%)</title><rect x="30.1768%" y="357" width="0.6445%" height="15" fill="rgb(227,24,42)" fg:x="4729" fg:w="101"/><text x="30.4268%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (104 samples, 0.66%)</title><rect x="30.1704%" y="373" width="0.6636%" height="15" fill="rgb(223,211,37)" fg:x="4728" fg:w="104"/><text x="30.4204%" y="383.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="30.8213%" y="357" width="0.0128%" height="15" fill="rgb(235,49,27)" fg:x="4830" fg:w="2"/><text x="31.0713%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::string::String&gt; (138 samples, 0.88%)</title><rect x="29.9598%" y="405" width="0.8806%" height="15" fill="rgb(254,97,51)" fg:x="4695" fg:w="138"/><text x="30.2098%" y="415.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (136 samples, 0.87%)</title><rect x="29.9726%" y="389" width="0.8678%" height="15" fill="rgb(249,51,40)" fg:x="4697" fg:w="136"/><text x="30.2226%" y="399.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;serde_v8::magic::string_or_buffer::StringOrBuffer&gt; (139 samples, 0.89%)</title><rect x="29.9598%" y="421" width="0.8870%" height="15" fill="rgb(210,128,45)" fg:x="4695" fg:w="139"/><text x="30.2098%" y="431.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap_or_else (4 samples, 0.03%)</title><rect x="30.8723%" y="405" width="0.0255%" height="15" fill="rgb(224,137,50)" fg:x="4838" fg:w="4"/><text x="31.1223%" y="415.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.03%)</title><rect x="30.9680%" y="389" width="0.0255%" height="15" fill="rgb(242,15,9)" fg:x="4853" fg:w="4"/><text x="31.2180%" y="399.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::into_leaf_mut (3 samples, 0.02%)</title><rect x="31.1276%" y="357" width="0.0191%" height="15" fill="rgb(233,187,41)" fg:x="4878" fg:w="3"/><text x="31.3776%" y="367.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf_ptr (2 samples, 0.01%)</title><rect x="31.1339%" y="341" width="0.0128%" height="15" fill="rgb(227,2,29)" fg:x="4879" fg:w="2"/><text x="31.3839%" y="351.50"></text></g><g><title>deno`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (11 samples, 0.07%)</title><rect x="31.0829%" y="373" width="0.0702%" height="15" fill="rgb(222,70,3)" fg:x="4871" fg:w="11"/><text x="31.3329%" y="383.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;::as_internal_ptr (2 samples, 0.01%)</title><rect x="31.3126%" y="341" width="0.0128%" height="15" fill="rgb(213,11,42)" fg:x="4907" fg:w="2"/><text x="31.5626%" y="351.50"></text></g><g><title>deno`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (12 samples, 0.08%)</title><rect x="31.2871%" y="357" width="0.0766%" height="15" fill="rgb(225,150,9)" fg:x="4903" fg:w="12"/><text x="31.5371%" y="367.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="31.3381%" y="341" width="0.0255%" height="15" fill="rgb(230,162,45)" fg:x="4911" fg:w="4"/><text x="31.5881%" y="351.50"></text></g><g><title>deno`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (3 samples, 0.02%)</title><rect x="31.3637%" y="357" width="0.0191%" height="15" fill="rgb(222,14,52)" fg:x="4915" fg:w="3"/><text x="31.6137%" y="367.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (4 samples, 0.03%)</title><rect x="31.3828%" y="357" width="0.0255%" height="15" fill="rgb(254,198,14)" fg:x="4918" fg:w="4"/><text x="31.6328%" y="367.50"></text></g><g><title>deno`&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (2 samples, 0.01%)</title><rect x="31.4530%" y="341" width="0.0128%" height="15" fill="rgb(220,217,30)" fg:x="4929" fg:w="2"/><text x="31.7030%" y="351.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::reborrow (3 samples, 0.02%)</title><rect x="31.4658%" y="341" width="0.0191%" height="15" fill="rgb(215,146,41)" fg:x="4931" fg:w="3"/><text x="31.7158%" y="351.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::cmp::Ord&gt;::cmp (3 samples, 0.02%)</title><rect x="31.6700%" y="325" width="0.0191%" height="15" fill="rgb(217,27,36)" fg:x="4963" fg:w="3"/><text x="31.9200%" y="335.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (7 samples, 0.04%)</title><rect x="32.1230%" y="293" width="0.0447%" height="15" fill="rgb(219,218,39)" fg:x="5034" fg:w="7"/><text x="32.3730%" y="303.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (7 samples, 0.04%)</title><rect x="32.1677%" y="293" width="0.0447%" height="15" fill="rgb(219,4,42)" fg:x="5041" fg:w="7"/><text x="32.4177%" y="303.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (8 samples, 0.05%)</title><rect x="32.2124%" y="293" width="0.0510%" height="15" fill="rgb(249,119,36)" fg:x="5048" fg:w="8"/><text x="32.4624%" y="303.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.44%)</title><rect x="31.8614%" y="309" width="0.4403%" height="15" fill="rgb(209,23,33)" fg:x="4993" fg:w="69"/><text x="32.1114%" y="319.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (6 samples, 0.04%)</title><rect x="32.2634%" y="293" width="0.0383%" height="15" fill="rgb(211,10,0)" fg:x="5056" fg:w="6"/><text x="32.5134%" y="303.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (7 samples, 0.04%)</title><rect x="32.3017%" y="309" width="0.0447%" height="15" fill="rgb(208,99,37)" fg:x="5062" fg:w="7"/><text x="32.5517%" y="319.50"></text></g><g><title>deno`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 0.66%)</title><rect x="31.6891%" y="325" width="0.6636%" height="15" fill="rgb(213,132,31)" fg:x="4966" fg:w="104"/><text x="31.9391%" y="335.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="32.3528%" y="325" width="0.0191%" height="15" fill="rgb(243,129,40)" fg:x="5070" fg:w="3"/><text x="32.6028%" y="335.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="32.3719%" y="325" width="0.0128%" height="15" fill="rgb(210,66,33)" fg:x="5073" fg:w="2"/><text x="32.6219%" y="335.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf_ptr (3 samples, 0.02%)</title><rect x="32.4868%" y="293" width="0.0191%" height="15" fill="rgb(209,189,4)" fg:x="5091" fg:w="3"/><text x="32.7368%" y="303.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_leaf (8 samples, 0.05%)</title><rect x="32.4612%" y="309" width="0.0510%" height="15" fill="rgb(214,107,37)" fg:x="5087" fg:w="8"/><text x="32.7112%" y="319.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (3 samples, 0.02%)</title><rect x="32.5761%" y="261" width="0.0191%" height="15" fill="rgb(245,88,54)" fg:x="5105" fg:w="3"/><text x="32.8261%" y="271.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (13 samples, 0.08%)</title><rect x="32.5378%" y="277" width="0.0830%" height="15" fill="rgb(205,146,20)" fg:x="5099" fg:w="13"/><text x="32.7878%" y="287.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (4 samples, 0.03%)</title><rect x="32.5952%" y="261" width="0.0255%" height="15" fill="rgb(220,161,25)" fg:x="5108" fg:w="4"/><text x="32.8452%" y="271.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const [T]&gt;::as_ptr (2 samples, 0.01%)</title><rect x="32.6208%" y="277" width="0.0128%" height="15" fill="rgb(215,152,15)" fg:x="5112" fg:w="2"/><text x="32.8708%" y="287.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (39 samples, 0.25%)</title><rect x="32.3910%" y="325" width="0.2489%" height="15" fill="rgb(233,192,44)" fg:x="5076" fg:w="39"/><text x="32.6410%" y="335.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (20 samples, 0.13%)</title><rect x="32.5123%" y="309" width="0.1276%" height="15" fill="rgb(240,170,46)" fg:x="5095" fg:w="20"/><text x="32.7623%" y="319.50"></text></g><g><title>deno`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (17 samples, 0.11%)</title><rect x="32.5314%" y="293" width="0.1085%" height="15" fill="rgb(207,104,33)" fg:x="5098" fg:w="17"/><text x="32.7814%" y="303.50"></text></g><g><title>deno`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (25 samples, 0.16%)</title><rect x="32.6399%" y="325" width="0.1595%" height="15" fill="rgb(219,21,39)" fg:x="5115" fg:w="25"/><text x="32.8899%" y="335.50"></text></g><g><title>deno`core::iter::adapters::enumerate::Enumerate&lt;I&gt;::new (2 samples, 0.01%)</title><rect x="32.8058%" y="325" width="0.0128%" height="15" fill="rgb(214,133,29)" fg:x="5141" fg:w="2"/><text x="33.0558%" y="335.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (12 samples, 0.08%)</title><rect x="32.9143%" y="293" width="0.0766%" height="15" fill="rgb(226,93,6)" fg:x="5158" fg:w="12"/><text x="33.1643%" y="303.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (3 samples, 0.02%)</title><rect x="32.9717%" y="277" width="0.0191%" height="15" fill="rgb(252,222,34)" fg:x="5167" fg:w="3"/><text x="33.2217%" y="287.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const [T]&gt;::len (3 samples, 0.02%)</title><rect x="32.9909%" y="293" width="0.0191%" height="15" fill="rgb(252,92,48)" fg:x="5170" fg:w="3"/><text x="33.2409%" y="303.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (32 samples, 0.20%)</title><rect x="32.8250%" y="325" width="0.2042%" height="15" fill="rgb(245,223,24)" fg:x="5144" fg:w="32"/><text x="33.0750%" y="335.50"></text></g><g><title>deno`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (29 samples, 0.19%)</title><rect x="32.8441%" y="309" width="0.1851%" height="15" fill="rgb(205,176,3)" fg:x="5147" fg:w="29"/><text x="33.0941%" y="319.50"></text></g><g><title>deno`core::ptr::metadata::metadata (3 samples, 0.02%)</title><rect x="33.0100%" y="293" width="0.0191%" height="15" fill="rgb(235,151,15)" fg:x="5173" fg:w="3"/><text x="33.2600%" y="303.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (9 samples, 0.06%)</title><rect x="33.1057%" y="293" width="0.0574%" height="15" fill="rgb(237,209,11)" fg:x="5188" fg:w="9"/><text x="33.3557%" y="303.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::iter (28 samples, 0.18%)</title><rect x="33.0292%" y="325" width="0.1787%" height="15" fill="rgb(243,227,24)" fg:x="5176" fg:w="28"/><text x="33.2792%" y="335.50"></text></g><g><title>deno`core::slice::iter::Iter&lt;T&gt;::new (22 samples, 0.14%)</title><rect x="33.0674%" y="309" width="0.1404%" height="15" fill="rgb(239,193,16)" fg:x="5182" fg:w="22"/><text x="33.3174%" y="319.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (7 samples, 0.04%)</title><rect x="33.1632%" y="293" width="0.0447%" height="15" fill="rgb(231,27,9)" fg:x="5197" fg:w="7"/><text x="33.4132%" y="303.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (278 samples, 1.77%)</title><rect x="31.4849%" y="341" width="1.7740%" height="15" fill="rgb(219,169,10)" fg:x="4934" fg:w="278"/><text x="31.7349%" y="351.50">d..</text></g><g><title>deno`core::slice::iter::Iter&lt;T&gt;::new (8 samples, 0.05%)</title><rect x="33.2078%" y="325" width="0.0510%" height="15" fill="rgb(244,229,43)" fg:x="5204" fg:w="8"/><text x="33.4578%" y="335.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (291 samples, 1.86%)</title><rect x="31.4147%" y="357" width="1.8569%" height="15" fill="rgb(254,38,20)" fg:x="4923" fg:w="291"/><text x="31.6647%" y="367.50">d..</text></g><g><title>deno`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::get_mut (358 samples, 2.28%)</title><rect x="30.9936%" y="389" width="2.2845%" height="15" fill="rgb(250,47,30)" fg:x="4857" fg:w="358"/><text x="31.2436%" y="399.50">d..</text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (331 samples, 2.11%)</title><rect x="31.1658%" y="373" width="2.1122%" height="15" fill="rgb(224,124,36)" fg:x="4884" fg:w="331"/><text x="31.4158%" y="383.50">d..</text></g><g><title>deno`&lt;dyn core::any::Any&gt;::is (6 samples, 0.04%)</title><rect x="33.3291%" y="341" width="0.0383%" height="15" fill="rgb(246,68,51)" fg:x="5223" fg:w="6"/><text x="33.5791%" y="351.50"></text></g><g><title>deno`&lt;dyn core::any::Any&gt;::downcast_mut (12 samples, 0.08%)</title><rect x="33.2972%" y="357" width="0.0766%" height="15" fill="rgb(253,43,49)" fg:x="5218" fg:w="12"/><text x="33.5472%" y="367.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::and_then (15 samples, 0.10%)</title><rect x="33.2844%" y="389" width="0.0957%" height="15" fill="rgb(219,54,36)" fg:x="5216" fg:w="15"/><text x="33.5344%" y="399.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::try_borrow_mut::_{{closure}} (13 samples, 0.08%)</title><rect x="33.2972%" y="373" width="0.0830%" height="15" fill="rgb(227,133,34)" fg:x="5218" fg:w="13"/><text x="33.5472%" y="383.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_mut (5 samples, 0.03%)</title><rect x="33.3801%" y="389" width="0.0319%" height="15" fill="rgb(247,227,15)" fg:x="5231" fg:w="5"/><text x="33.6301%" y="399.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (409 samples, 2.61%)</title><rect x="30.8468%" y="421" width="2.6099%" height="15" fill="rgb(229,96,14)" fg:x="4834" fg:w="409"/><text x="31.0968%" y="431.50">de..</text></g><g><title>deno`deno_core::gotham_state::GothamState::try_borrow_mut (400 samples, 2.55%)</title><rect x="30.9042%" y="405" width="2.5525%" height="15" fill="rgb(220,79,17)" fg:x="4843" fg:w="400"/><text x="31.1542%" y="415.50">de..</text></g><g><title>deno`core::sync::atomic::AtomicUsize::load (7 samples, 0.04%)</title><rect x="33.4120%" y="389" width="0.0447%" height="15" fill="rgb(205,131,53)" fg:x="5236" fg:w="7"/><text x="33.6620%" y="399.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="33.4439%" y="373" width="0.0128%" height="15" fill="rgb(209,50,29)" fg:x="5241" fg:w="2"/><text x="33.6939%" y="383.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="33.5269%" y="373" width="0.0191%" height="15" fill="rgb(245,86,46)" fg:x="5254" fg:w="3"/><text x="33.7769%" y="383.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.01%)</title><rect x="33.5779%" y="309" width="0.0128%" height="15" fill="rgb(235,66,46)" fg:x="5262" fg:w="2"/><text x="33.8279%" y="319.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.08%)</title><rect x="33.5907%" y="309" width="0.0766%" height="15" fill="rgb(232,148,31)" fg:x="5264" fg:w="12"/><text x="33.8407%" y="319.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (71 samples, 0.45%)</title><rect x="33.5716%" y="341" width="0.4531%" height="15" fill="rgb(217,149,8)" fg:x="5261" fg:w="71"/><text x="33.8216%" y="351.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (70 samples, 0.45%)</title><rect x="33.5779%" y="325" width="0.4467%" height="15" fill="rgb(209,183,11)" fg:x="5262" fg:w="70"/><text x="33.8279%" y="335.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (56 samples, 0.36%)</title><rect x="33.6673%" y="309" width="0.3573%" height="15" fill="rgb(208,55,20)" fg:x="5276" fg:w="56"/><text x="33.9173%" y="319.50"></text></g><g><title>deno`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (5 samples, 0.03%)</title><rect x="34.0502%" y="309" width="0.0319%" height="15" fill="rgb(218,39,14)" fg:x="5336" fg:w="5"/><text x="34.3002%" y="319.50"></text></g><g><title>deno`core::hash::sip::SipHasher13::new_with_keys (10 samples, 0.06%)</title><rect x="34.0374%" y="325" width="0.0638%" height="15" fill="rgb(216,169,33)" fg:x="5334" fg:w="10"/><text x="34.2874%" y="335.50"></text></g><g><title>deno`core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.02%)</title><rect x="34.0821%" y="309" width="0.0191%" height="15" fill="rgb(233,80,24)" fg:x="5341" fg:w="3"/><text x="34.3321%" y="319.50"></text></g><g><title>deno`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (15 samples, 0.10%)</title><rect x="34.0246%" y="341" width="0.0957%" height="15" fill="rgb(213,179,31)" fg:x="5332" fg:w="15"/><text x="34.2746%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="34.1012%" y="325" width="0.0191%" height="15" fill="rgb(209,19,5)" fg:x="5344" fg:w="3"/><text x="34.3512%" y="335.50"></text></g><g><title>deno`core::intrinsics::copy_nonoverlapping (5 samples, 0.03%)</title><rect x="34.2671%" y="229" width="0.0319%" height="15" fill="rgb(219,18,35)" fg:x="5370" fg:w="5"/><text x="34.5171%" y="239.50"></text></g><g><title>deno`core::hash::sip::u8to64_le (15 samples, 0.10%)</title><rect x="34.2224%" y="245" width="0.0957%" height="15" fill="rgb(209,169,16)" fg:x="5363" fg:w="15"/><text x="34.4724%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="34.2990%" y="229" width="0.0191%" height="15" fill="rgb(245,90,51)" fg:x="5375" fg:w="3"/><text x="34.5490%" y="239.50"></text></g><g><title>deno`core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="34.3182%" y="245" width="0.0128%" height="15" fill="rgb(220,99,45)" fg:x="5378" fg:w="2"/><text x="34.5682%" y="255.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (38 samples, 0.24%)</title><rect x="34.1203%" y="341" width="0.2425%" height="15" fill="rgb(249,89,25)" fg:x="5347" fg:w="38"/><text x="34.3703%" y="351.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (34 samples, 0.22%)</title><rect x="34.1459%" y="325" width="0.2170%" height="15" fill="rgb(239,193,0)" fg:x="5351" fg:w="34"/><text x="34.3959%" y="335.50"></text></g><g><title>deno`core::hash::Hasher::write_u32 (32 samples, 0.20%)</title><rect x="34.1586%" y="309" width="0.2042%" height="15" fill="rgb(231,126,1)" fg:x="5353" fg:w="32"/><text x="34.4086%" y="319.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 0.18%)</title><rect x="34.1842%" y="293" width="0.1787%" height="15" fill="rgb(243,166,3)" fg:x="5357" fg:w="28"/><text x="34.4342%" y="303.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (26 samples, 0.17%)</title><rect x="34.1969%" y="277" width="0.1659%" height="15" fill="rgb(223,22,34)" fg:x="5359" fg:w="26"/><text x="34.4469%" y="287.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.15%)</title><rect x="34.2097%" y="261" width="0.1531%" height="15" fill="rgb(251,52,51)" fg:x="5361" fg:w="24"/><text x="34.4597%" y="271.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::as_ptr (5 samples, 0.03%)</title><rect x="34.3309%" y="245" width="0.0319%" height="15" fill="rgb(221,165,28)" fg:x="5380" fg:w="5"/><text x="34.5809%" y="255.50"></text></g><g><title>deno`hashbrown::map::make_hash (129 samples, 0.82%)</title><rect x="33.5460%" y="373" width="0.8232%" height="15" fill="rgb(218,121,47)" fg:x="5257" fg:w="129"/><text x="33.7960%" y="383.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (128 samples, 0.82%)</title><rect x="33.5524%" y="357" width="0.8168%" height="15" fill="rgb(209,120,9)" fg:x="5258" fg:w="128"/><text x="33.8024%" y="367.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (3 samples, 0.02%)</title><rect x="34.4139%" y="341" width="0.0191%" height="15" fill="rgb(236,68,12)" fg:x="5393" fg:w="3"/><text x="34.6639%" y="351.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (11 samples, 0.07%)</title><rect x="34.3947%" y="357" width="0.0702%" height="15" fill="rgb(225,194,26)" fg:x="5390" fg:w="11"/><text x="34.6447%" y="367.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (4 samples, 0.03%)</title><rect x="34.4394%" y="341" width="0.0255%" height="15" fill="rgb(231,84,39)" fg:x="5397" fg:w="4"/><text x="34.6894%" y="351.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (7 samples, 0.04%)</title><rect x="34.4905%" y="341" width="0.0447%" height="15" fill="rgb(210,11,45)" fg:x="5405" fg:w="7"/><text x="34.7405%" y="351.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4 samples, 0.03%)</title><rect x="34.5096%" y="325" width="0.0255%" height="15" fill="rgb(224,54,52)" fg:x="5408" fg:w="4"/><text x="34.7596%" y="335.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.03%)</title><rect x="34.6436%" y="325" width="0.0255%" height="15" fill="rgb(238,102,14)" fg:x="5429" fg:w="4"/><text x="34.8936%" y="335.50"></text></g><g><title>deno`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.05%)</title><rect x="34.6691%" y="325" width="0.0510%" height="15" fill="rgb(243,160,52)" fg:x="5433" fg:w="8"/><text x="34.9191%" y="335.50"></text></g><g><title>deno`core::ptr::read_unaligned (6 samples, 0.04%)</title><rect x="34.7202%" y="325" width="0.0383%" height="15" fill="rgb(216,114,19)" fg:x="5441" fg:w="6"/><text x="34.9702%" y="335.50"></text></g><g><title>deno`&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (2 samples, 0.01%)</title><rect x="34.7968%" y="309" width="0.0128%" height="15" fill="rgb(244,166,37)" fg:x="5453" fg:w="2"/><text x="35.0468%" y="319.50"></text></g><g><title>deno`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u32&gt;::eq (2 samples, 0.01%)</title><rect x="34.8095%" y="309" width="0.0128%" height="15" fill="rgb(246,29,44)" fg:x="5455" fg:w="2"/><text x="35.0595%" y="319.50"></text></g><g><title>deno`hashbrown::map::equivalent_key::_{{closure}} (3 samples, 0.02%)</title><rect x="34.8223%" y="309" width="0.0191%" height="15" fill="rgb(215,56,53)" fg:x="5457" fg:w="3"/><text x="35.0723%" y="319.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="34.8478%" y="293" width="0.0128%" height="15" fill="rgb(217,60,2)" fg:x="5461" fg:w="2"/><text x="35.0978%" y="303.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="34.8478%" y="309" width="0.0191%" height="15" fill="rgb(207,26,24)" fg:x="5461" fg:w="3"/><text x="35.0978%" y="319.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.01%)</title><rect x="34.8670%" y="309" width="0.0128%" height="15" fill="rgb(252,210,15)" fg:x="5464" fg:w="2"/><text x="35.1170%" y="319.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (6 samples, 0.04%)</title><rect x="34.9308%" y="293" width="0.0383%" height="15" fill="rgb(253,209,26)" fg:x="5474" fg:w="6"/><text x="35.1808%" y="303.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (4 samples, 0.03%)</title><rect x="34.9691%" y="293" width="0.0255%" height="15" fill="rgb(238,170,14)" fg:x="5480" fg:w="4"/><text x="35.2191%" y="303.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (41 samples, 0.26%)</title><rect x="34.7649%" y="325" width="0.2616%" height="15" fill="rgb(216,178,15)" fg:x="5448" fg:w="41"/><text x="35.0149%" y="335.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (23 samples, 0.15%)</title><rect x="34.8797%" y="309" width="0.1468%" height="15" fill="rgb(250,197,2)" fg:x="5466" fg:w="23"/><text x="35.1297%" y="319.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::data_end (4 samples, 0.03%)</title><rect x="35.0010%" y="293" width="0.0255%" height="15" fill="rgb(212,70,42)" fg:x="5485" fg:w="4"/><text x="35.2510%" y="303.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (3 samples, 0.02%)</title><rect x="35.0265%" y="325" width="0.0191%" height="15" fill="rgb(227,213,9)" fg:x="5489" fg:w="3"/><text x="35.2765%" y="335.50"></text></g><g><title>deno`hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.02%)</title><rect x="35.0520%" y="325" width="0.0191%" height="15" fill="rgb(245,99,25)" fg:x="5493" fg:w="3"/><text x="35.3020%" y="335.50"></text></g><g><title>deno`core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="35.1477%" y="293" width="0.0191%" height="15" fill="rgb(250,82,29)" fg:x="5508" fg:w="3"/><text x="35.3977%" y="303.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (17 samples, 0.11%)</title><rect x="35.0712%" y="325" width="0.1085%" height="15" fill="rgb(241,226,54)" fg:x="5496" fg:w="17"/><text x="35.3212%" y="335.50"></text></g><g><title>deno`core::ptr::read_unaligned (14 samples, 0.09%)</title><rect x="35.0903%" y="309" width="0.0893%" height="15" fill="rgb(221,99,41)" fg:x="5499" fg:w="14"/><text x="35.3403%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="35.1669%" y="293" width="0.0128%" height="15" fill="rgb(213,90,21)" fg:x="5511" fg:w="2"/><text x="35.4169%" y="303.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (7 samples, 0.04%)</title><rect x="35.1796%" y="325" width="0.0447%" height="15" fill="rgb(205,208,24)" fg:x="5513" fg:w="7"/><text x="35.4296%" y="335.50"></text></g><g><title>deno`hashbrown::raw::generic::repeat (3 samples, 0.02%)</title><rect x="35.2052%" y="309" width="0.0191%" height="15" fill="rgb(246,31,12)" fg:x="5517" fg:w="3"/><text x="35.4552%" y="319.50"></text></g><g><title>deno`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="35.2753%" y="277" width="0.0128%" height="15" fill="rgb(213,154,6)" fg:x="5528" fg:w="2"/><text x="35.5253%" y="287.50"></text></g><g><title>deno`core::cmp::min_by (8 samples, 0.05%)</title><rect x="35.2498%" y="293" width="0.0510%" height="15" fill="rgb(222,163,29)" fg:x="5524" fg:w="8"/><text x="35.4998%" y="303.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="35.2881%" y="277" width="0.0128%" height="15" fill="rgb(227,201,8)" fg:x="5530" fg:w="2"/><text x="35.5381%" y="287.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (120 samples, 0.77%)</title><rect x="34.5415%" y="341" width="0.7657%" height="15" fill="rgb(233,9,32)" fg:x="5413" fg:w="120"/><text x="34.7915%" y="351.50"></text></g><g><title>deno`hashbrown::raw::h2 (13 samples, 0.08%)</title><rect x="35.2243%" y="325" width="0.0830%" height="15" fill="rgb(217,54,24)" fg:x="5520" fg:w="13"/><text x="35.4743%" y="335.50"></text></g><g><title>deno`core::cmp::Ord::min (10 samples, 0.06%)</title><rect x="35.2434%" y="309" width="0.0638%" height="15" fill="rgb(235,192,0)" fg:x="5523" fg:w="10"/><text x="35.4934%" y="319.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (2 samples, 0.01%)</title><rect x="35.3073%" y="341" width="0.0128%" height="15" fill="rgb(235,45,9)" fg:x="5533" fg:w="2"/><text x="35.5573%" y="351.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (138 samples, 0.88%)</title><rect x="34.4713%" y="357" width="0.8806%" height="15" fill="rgb(246,42,40)" fg:x="5402" fg:w="138"/><text x="34.7213%" y="367.50"></text></g><g><title>deno`hashbrown::raw::h2 (5 samples, 0.03%)</title><rect x="35.3200%" y="341" width="0.0319%" height="15" fill="rgb(248,111,24)" fg:x="5535" fg:w="5"/><text x="35.5700%" y="351.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (296 samples, 1.89%)</title><rect x="33.4758%" y="389" width="1.8888%" height="15" fill="rgb(249,65,22)" fg:x="5246" fg:w="296"/><text x="33.7258%" y="399.50">d..</text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (155 samples, 0.99%)</title><rect x="34.3756%" y="373" width="0.9891%" height="15" fill="rgb(238,111,51)" fg:x="5387" fg:w="155"/><text x="34.6256%" y="383.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.01%)</title><rect x="35.3519%" y="357" width="0.0128%" height="15" fill="rgb(250,118,22)" fg:x="5540" fg:w="2"/><text x="35.6019%" y="367.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (299 samples, 1.91%)</title><rect x="33.4695%" y="405" width="1.9080%" height="15" fill="rgb(234,84,26)" fg:x="5245" fg:w="299"/><text x="33.7195%" y="415.50">d..</text></g><g><title>deno`deno_flash::op_respond::call (2,269 samples, 14.48%)</title><rect x="20.9049%" y="437" width="14.4790%" height="15" fill="rgb(243,172,12)" fg:x="3276" fg:w="2269"/><text x="21.1549%" y="447.50">deno`deno_flash::op_re..</text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (302 samples, 1.93%)</title><rect x="33.4567%" y="421" width="1.9271%" height="15" fill="rgb(236,150,49)" fg:x="5243" fg:w="302"/><text x="33.7067%" y="431.50">d..</text></g><g><title>deno`serde::de::impls::_&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.02%)</title><rect x="35.3838%" y="437" width="0.0191%" height="15" fill="rgb(225,197,26)" fg:x="5545" fg:w="3"/><text x="35.6338%" y="447.50"></text></g><g><title>deno`serde_v8::de::Deserializer::new (4 samples, 0.03%)</title><rect x="35.4030%" y="437" width="0.0255%" height="15" fill="rgb(214,17,42)" fg:x="5548" fg:w="4"/><text x="35.6530%" y="447.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.04%)</title><rect x="35.5753%" y="421" width="0.0447%" height="15" fill="rgb(224,165,40)" fg:x="5575" fg:w="7"/><text x="35.8253%" y="431.50"></text></g><g><title>deno`&lt;&amp;mut serde_v8::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.01%)</title><rect x="35.6263%" y="405" width="0.0128%" height="15" fill="rgb(246,100,4)" fg:x="5583" fg:w="2"/><text x="35.8763%" y="415.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="35.7220%" y="373" width="0.0128%" height="15" fill="rgb(222,103,0)" fg:x="5598" fg:w="2"/><text x="35.9720%" y="383.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.04%)</title><rect x="35.8050%" y="357" width="0.0447%" height="15" fill="rgb(227,189,26)" fg:x="5611" fg:w="7"/><text x="36.0550%" y="367.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (2 samples, 0.01%)</title><rect x="35.9199%" y="341" width="0.0128%" height="15" fill="rgb(214,202,17)" fg:x="5629" fg:w="2"/><text x="36.1699%" y="351.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8::_{{closure}} (2 samples, 0.01%)</title><rect x="35.9518%" y="325" width="0.0128%" height="15" fill="rgb(229,111,3)" fg:x="5634" fg:w="2"/><text x="36.2018%" y="335.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (7 samples, 0.04%)</title><rect x="35.9645%" y="325" width="0.0447%" height="15" fill="rgb(229,172,15)" fg:x="5636" fg:w="7"/><text x="36.2145%" y="335.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.03%)</title><rect x="36.0092%" y="325" width="0.0255%" height="15" fill="rgb(230,224,35)" fg:x="5643" fg:w="4"/><text x="36.2592%" y="335.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.02%)</title><rect x="36.0347%" y="325" width="0.0191%" height="15" fill="rgb(251,141,6)" fg:x="5647" fg:w="3"/><text x="36.2847%" y="335.50"></text></g><g><title>deno`core::any::type_name (2 samples, 0.01%)</title><rect x="36.1304%" y="277" width="0.0128%" height="15" fill="rgb(225,208,6)" fg:x="5662" fg:w="2"/><text x="36.3804%" y="287.50"></text></g><g><title>deno`v8::Value::IsArrayBuffer (2 samples, 0.01%)</title><rect x="36.1432%" y="277" width="0.0128%" height="15" fill="rgb(246,181,16)" fg:x="5664" fg:w="2"/><text x="36.3932%" y="287.50"></text></g><g><title>deno`v8::data::DataError::bad_type (3 samples, 0.02%)</title><rect x="36.1560%" y="277" width="0.0191%" height="15" fill="rgb(227,129,36)" fg:x="5666" fg:w="3"/><text x="36.4060%" y="287.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::ArrayBuffer&gt;&gt;::try_from (16 samples, 0.10%)</title><rect x="36.0794%" y="293" width="0.1021%" height="15" fill="rgb(248,117,24)" fg:x="5654" fg:w="16"/><text x="36.3294%" y="303.50"></text></g><g><title>deno`&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (19 samples, 0.12%)</title><rect x="36.0730%" y="309" width="0.1212%" height="15" fill="rgb(214,185,35)" fg:x="5653" fg:w="19"/><text x="36.3230%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="36.1815%" y="293" width="0.0128%" height="15" fill="rgb(236,150,34)" fg:x="5670" fg:w="2"/><text x="36.4315%" y="303.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (5 samples, 0.03%)</title><rect x="36.1942%" y="309" width="0.0319%" height="15" fill="rgb(243,228,27)" fg:x="5672" fg:w="5"/><text x="36.4442%" y="319.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="36.2262%" y="309" width="0.0191%" height="15" fill="rgb(245,77,44)" fg:x="5677" fg:w="3"/><text x="36.4762%" y="319.50"></text></g><g><title>deno`core::any::type_name (4 samples, 0.03%)</title><rect x="36.2644%" y="293" width="0.0255%" height="15" fill="rgb(235,214,42)" fg:x="5683" fg:w="4"/><text x="36.5144%" y="303.50"></text></g><g><title>deno`v8::Value::IsArrayBufferView (2 samples, 0.01%)</title><rect x="36.2900%" y="293" width="0.0128%" height="15" fill="rgb(221,74,3)" fg:x="5687" fg:w="2"/><text x="36.5400%" y="303.50"></text></g><g><title>deno`v8::data::DataError::bad_type (3 samples, 0.02%)</title><rect x="36.3027%" y="293" width="0.0191%" height="15" fill="rgb(206,121,29)" fg:x="5689" fg:w="3"/><text x="36.5527%" y="303.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::ArrayBufferView&gt;&gt;::try_from (13 samples, 0.08%)</title><rect x="36.2453%" y="309" width="0.0830%" height="15" fill="rgb(249,131,53)" fg:x="5680" fg:w="13"/><text x="36.4953%" y="319.50"></text></g><g><title>deno`serde_v8::magic::v8slice::to_ranged_buffer (63 samples, 0.40%)</title><rect x="36.0539%" y="325" width="0.4020%" height="15" fill="rgb(236,170,29)" fg:x="5650" fg:w="63"/><text x="36.3039%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.13%)</title><rect x="36.3282%" y="309" width="0.1276%" height="15" fill="rgb(247,96,15)" fg:x="5693" fg:w="20"/><text x="36.5782%" y="319.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (104 samples, 0.66%)</title><rect x="35.9326%" y="341" width="0.6636%" height="15" fill="rgb(211,210,7)" fg:x="5631" fg:w="104"/><text x="36.1826%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.14%)</title><rect x="36.4559%" y="325" width="0.1404%" height="15" fill="rgb(240,88,50)" fg:x="5713" fg:w="22"/><text x="36.7059%" y="335.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as serde_v8::magic::transl8::FromV8&gt;::from_v8 (118 samples, 0.75%)</title><rect x="35.8497%" y="357" width="0.7530%" height="15" fill="rgb(209,229,26)" fg:x="5618" fg:w="118"/><text x="36.0997%" y="367.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (7 samples, 0.04%)</title><rect x="36.6026%" y="357" width="0.0447%" height="15" fill="rgb(210,68,23)" fg:x="5736" fg:w="7"/><text x="36.8526%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::result::Result&lt;serde_v8::magic::buffer::ZeroCopyBuf,serde_v8::error::Error&gt;&gt; (5 samples, 0.03%)</title><rect x="36.6473%" y="357" width="0.0319%" height="15" fill="rgb(229,180,13)" fg:x="5743" fg:w="5"/><text x="36.8973%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;serde_v8::error::Error&gt; (4 samples, 0.03%)</title><rect x="36.6537%" y="341" width="0.0255%" height="15" fill="rgb(236,53,44)" fg:x="5744" fg:w="4"/><text x="36.9037%" y="351.50"></text></g><g><title>deno`serde_v8::de::Deserializer::new (2 samples, 0.01%)</title><rect x="36.6792%" y="357" width="0.0128%" height="15" fill="rgb(244,214,29)" fg:x="5748" fg:w="2"/><text x="36.9292%" y="367.50"></text></g><g><title>deno`&lt;&amp;mut serde_v8::de::Deserializer as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.01%)</title><rect x="36.7175%" y="341" width="0.0128%" height="15" fill="rgb(220,75,29)" fg:x="5754" fg:w="2"/><text x="36.9675%" y="351.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="36.8196%" y="309" width="0.0255%" height="15" fill="rgb(214,183,37)" fg:x="5770" fg:w="4"/><text x="37.0696%" y="319.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="36.8260%" y="293" width="0.0191%" height="15" fill="rgb(239,117,29)" fg:x="5771" fg:w="3"/><text x="37.0760%" y="303.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.01%)</title><rect x="36.8451%" y="309" width="0.0128%" height="15" fill="rgb(237,171,35)" fg:x="5774" fg:w="2"/><text x="37.0951%" y="319.50"></text></g><g><title>deno`alloc::string::String::from_utf8_unchecked (3 samples, 0.02%)</title><rect x="36.8770%" y="293" width="0.0191%" height="15" fill="rgb(229,178,53)" fg:x="5779" fg:w="3"/><text x="37.1270%" y="303.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="36.9855%" y="277" width="0.0191%" height="15" fill="rgb(210,102,19)" fg:x="5796" fg:w="3"/><text x="37.2355%" y="287.50"></text></g><g><title>deno`core::mem::valid_align::ValidAlign::as_nonzero (4 samples, 0.03%)</title><rect x="37.0940%" y="197" width="0.0255%" height="15" fill="rgb(235,127,22)" fg:x="5813" fg:w="4"/><text x="37.3440%" y="207.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (7 samples, 0.04%)</title><rect x="37.0876%" y="213" width="0.0447%" height="15" fill="rgb(244,31,31)" fg:x="5812" fg:w="7"/><text x="37.3376%" y="223.50"></text></g><g><title>deno`core::num::nonzero::NonZeroUsize::new_unchecked (2 samples, 0.01%)</title><rect x="37.1195%" y="197" width="0.0128%" height="15" fill="rgb(231,43,21)" fg:x="5817" fg:w="2"/><text x="37.3695%" y="207.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (15 samples, 0.10%)</title><rect x="37.0493%" y="229" width="0.0957%" height="15" fill="rgb(217,131,35)" fg:x="5806" fg:w="15"/><text x="37.2993%" y="239.50"></text></g><g><title>deno`&lt;core::num::nonzero::NonZeroUsize as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="37.1323%" y="213" width="0.0128%" height="15" fill="rgb(221,149,4)" fg:x="5819" fg:w="2"/><text x="37.3823%" y="223.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (5 samples, 0.03%)</title><rect x="37.1514%" y="229" width="0.0319%" height="15" fill="rgb(232,170,28)" fg:x="5822" fg:w="5"/><text x="37.4014%" y="239.50"></text></g><g><title>deno`core::alloc::layout::Layout::from_size_align_unchecked (3 samples, 0.02%)</title><rect x="37.1642%" y="213" width="0.0191%" height="15" fill="rgb(238,56,10)" fg:x="5824" fg:w="3"/><text x="37.4142%" y="223.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (27 samples, 0.17%)</title><rect x="37.0238%" y="245" width="0.1723%" height="15" fill="rgb(235,196,14)" fg:x="5802" fg:w="27"/><text x="37.2738%" y="255.50"></text></g><g><title>deno`core::alloc::layout::size_align (2 samples, 0.01%)</title><rect x="37.1833%" y="229" width="0.0128%" height="15" fill="rgb(216,45,48)" fg:x="5827" fg:w="2"/><text x="37.4333%" y="239.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope as core::ops::deref::DerefMut&gt;::deref_mut (32 samples, 0.20%)</title><rect x="37.0047%" y="277" width="0.2042%" height="15" fill="rgb(238,213,17)" fg:x="5799" fg:w="32"/><text x="37.2547%" y="287.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (30 samples, 0.19%)</title><rect x="37.0174%" y="261" width="0.1914%" height="15" fill="rgb(212,13,2)" fg:x="5801" fg:w="30"/><text x="37.2674%" y="271.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (2 samples, 0.01%)</title><rect x="37.1961%" y="245" width="0.0128%" height="15" fill="rgb(240,114,20)" fg:x="5829" fg:w="2"/><text x="37.4461%" y="255.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_isolate_mut (5 samples, 0.03%)</title><rect x="37.2535%" y="245" width="0.0319%" height="15" fill="rgb(228,41,40)" fg:x="5838" fg:w="5"/><text x="37.5035%" y="255.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_mut (2 samples, 0.01%)</title><rect x="37.2727%" y="229" width="0.0128%" height="15" fill="rgb(244,132,35)" fg:x="5841" fg:w="2"/><text x="37.5227%" y="239.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.03%)</title><rect x="37.3173%" y="229" width="0.0319%" height="15" fill="rgb(253,189,4)" fg:x="5848" fg:w="5"/><text x="37.5673%" y="239.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_mut (4 samples, 0.03%)</title><rect x="37.3492%" y="229" width="0.0255%" height="15" fill="rgb(224,37,19)" fg:x="5853" fg:w="4"/><text x="37.5992%" y="239.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (6 samples, 0.04%)</title><rect x="37.3811%" y="229" width="0.0383%" height="15" fill="rgb(235,223,18)" fg:x="5858" fg:w="6"/><text x="37.6311%" y="239.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="37.4067%" y="213" width="0.0128%" height="15" fill="rgb(235,163,25)" fg:x="5862" fg:w="2"/><text x="37.6567%" y="223.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (4 samples, 0.03%)</title><rect x="37.4450%" y="213" width="0.0255%" height="15" fill="rgb(217,145,28)" fg:x="5868" fg:w="4"/><text x="37.6950%" y="223.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="37.4577%" y="197" width="0.0128%" height="15" fill="rgb(223,223,32)" fg:x="5870" fg:w="2"/><text x="37.7077%" y="207.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (13 samples, 0.08%)</title><rect x="37.4194%" y="229" width="0.0830%" height="15" fill="rgb(227,189,39)" fg:x="5864" fg:w="13"/><text x="37.6694%" y="239.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (5 samples, 0.03%)</title><rect x="37.4705%" y="213" width="0.0319%" height="15" fill="rgb(248,10,22)" fg:x="5872" fg:w="5"/><text x="37.7205%" y="223.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (49 samples, 0.31%)</title><rect x="37.2089%" y="277" width="0.3127%" height="15" fill="rgb(248,46,39)" fg:x="5831" fg:w="49"/><text x="37.4589%" y="287.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsMut&lt;v8::isolate::Isolate&gt;&gt;::as_mut (49 samples, 0.31%)</title><rect x="37.2089%" y="261" width="0.3127%" height="15" fill="rgb(248,113,48)" fg:x="5831" fg:w="49"/><text x="37.4589%" y="271.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (37 samples, 0.24%)</title><rect x="37.2854%" y="245" width="0.2361%" height="15" fill="rgb(245,16,25)" fg:x="5843" fg:w="37"/><text x="37.5354%" y="255.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_isolate (3 samples, 0.02%)</title><rect x="37.5024%" y="229" width="0.0191%" height="15" fill="rgb(249,152,16)" fg:x="5877" fg:w="3"/><text x="37.7524%" y="239.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="37.5088%" y="213" width="0.0128%" height="15" fill="rgb(250,16,1)" fg:x="5878" fg:w="2"/><text x="37.7588%" y="223.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.03%)</title><rect x="37.5407%" y="261" width="0.0255%" height="15" fill="rgb(249,138,3)" fg:x="5883" fg:w="4"/><text x="37.7907%" y="271.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (10 samples, 0.06%)</title><rect x="37.5215%" y="277" width="0.0638%" height="15" fill="rgb(227,71,41)" fg:x="5880" fg:w="10"/><text x="37.7715%" y="287.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="37.5726%" y="261" width="0.0128%" height="15" fill="rgb(209,184,23)" fg:x="5888" fg:w="2"/><text x="37.8226%" y="271.50"></text></g><g><title>deno`core::alloc::layout::Layout::align (3 samples, 0.02%)</title><rect x="37.8661%" y="165" width="0.0191%" height="15" fill="rgb(223,215,31)" fg:x="5934" fg:w="3"/><text x="38.1161%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.11%)</title><rect x="37.8916%" y="165" width="0.1085%" height="15" fill="rgb(210,146,28)" fg:x="5938" fg:w="17"/><text x="38.1416%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.08%)</title><rect x="37.9236%" y="149" width="0.0766%" height="15" fill="rgb(209,183,41)" fg:x="5943" fg:w="12"/><text x="38.1736%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.06%)</title><rect x="37.9363%" y="133" width="0.0638%" height="15" fill="rgb(209,224,45)" fg:x="5945" fg:w="10"/><text x="38.1863%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.03%)</title><rect x="37.9682%" y="117" width="0.0319%" height="15" fill="rgb(224,209,51)" fg:x="5950" fg:w="5"/><text x="38.2182%" y="127.50"></text></g><g><title>deno`alloc::alloc::alloc (26 samples, 0.17%)</title><rect x="37.8470%" y="181" width="0.1659%" height="15" fill="rgb(223,17,39)" fg:x="5931" fg:w="26"/><text x="38.0970%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="38.0001%" y="165" width="0.0128%" height="15" fill="rgb(234,204,37)" fg:x="5955" fg:w="2"/><text x="38.2501%" y="175.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (4 samples, 0.03%)</title><rect x="38.0129%" y="181" width="0.0255%" height="15" fill="rgb(236,120,5)" fg:x="5957" fg:w="4"/><text x="38.2629%" y="191.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="38.0384%" y="181" width="0.0128%" height="15" fill="rgb(248,97,27)" fg:x="5961" fg:w="2"/><text x="38.2884%" y="191.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (6 samples, 0.04%)</title><rect x="38.0512%" y="181" width="0.0383%" height="15" fill="rgb(240,66,17)" fg:x="5963" fg:w="6"/><text x="38.3012%" y="191.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (3 samples, 0.02%)</title><rect x="38.0703%" y="165" width="0.0191%" height="15" fill="rgb(210,79,3)" fg:x="5966" fg:w="3"/><text x="38.3203%" y="175.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.01%)</title><rect x="38.0895%" y="181" width="0.0128%" height="15" fill="rgb(214,176,27)" fg:x="5969" fg:w="2"/><text x="38.3395%" y="191.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (9 samples, 0.06%)</title><rect x="38.1022%" y="181" width="0.0574%" height="15" fill="rgb(235,185,3)" fg:x="5971" fg:w="9"/><text x="38.3522%" y="191.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts_mut (3 samples, 0.02%)</title><rect x="38.1405%" y="165" width="0.0191%" height="15" fill="rgb(227,24,12)" fg:x="5977" fg:w="3"/><text x="38.3905%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="38.1597%" y="181" width="0.0510%" height="15" fill="rgb(252,169,48)" fg:x="5980" fg:w="8"/><text x="38.4097%" y="191.50"></text></g><g><title>deno`alloc::alloc::Global::alloc_impl (74 samples, 0.47%)</title><rect x="37.7449%" y="197" width="0.4722%" height="15" fill="rgb(212,65,1)" fg:x="5915" fg:w="74"/><text x="37.9949%" y="207.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (83 samples, 0.53%)</title><rect x="37.7194%" y="213" width="0.5296%" height="15" fill="rgb(242,39,24)" fg:x="5911" fg:w="83"/><text x="37.9694%" y="223.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (5 samples, 0.03%)</title><rect x="38.2171%" y="197" width="0.0319%" height="15" fill="rgb(249,32,23)" fg:x="5989" fg:w="5"/><text x="38.4671%" y="207.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="38.2490%" y="213" width="0.0128%" height="15" fill="rgb(251,195,23)" fg:x="5994" fg:w="2"/><text x="38.4990%" y="223.50"></text></g><g><title>deno`alloc::raw_vec::alloc_guard (3 samples, 0.02%)</title><rect x="38.2618%" y="213" width="0.0191%" height="15" fill="rgb(236,174,8)" fg:x="5996" fg:w="3"/><text x="38.5118%" y="223.50"></text></g><g><title>deno`core::alloc::layout::Layout::array (4 samples, 0.03%)</title><rect x="38.2809%" y="213" width="0.0255%" height="15" fill="rgb(220,197,8)" fg:x="5999" fg:w="4"/><text x="38.5309%" y="223.50"></text></g><g><title>deno`core::num::_&lt;impl usize&gt;::checked_mul (4 samples, 0.03%)</title><rect x="38.3064%" y="213" width="0.0255%" height="15" fill="rgb(240,108,37)" fg:x="6003" fg:w="4"/><text x="38.5564%" y="223.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (4 samples, 0.03%)</title><rect x="38.3320%" y="213" width="0.0255%" height="15" fill="rgb(232,176,24)" fg:x="6007" fg:w="4"/><text x="38.5820%" y="223.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (120 samples, 0.77%)</title><rect x="37.6045%" y="229" width="0.7657%" height="15" fill="rgb(243,35,29)" fg:x="5893" fg:w="120"/><text x="37.8545%" y="239.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T&gt;::with_capacity (125 samples, 0.80%)</title><rect x="37.5853%" y="277" width="0.7977%" height="15" fill="rgb(210,37,18)" fg:x="5890" fg:w="125"/><text x="37.8353%" y="287.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (125 samples, 0.80%)</title><rect x="37.5853%" y="261" width="0.7977%" height="15" fill="rgb(224,184,40)" fg:x="5890" fg:w="125"/><text x="37.8353%" y="271.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (123 samples, 0.78%)</title><rect x="37.5981%" y="245" width="0.7849%" height="15" fill="rgb(236,39,29)" fg:x="5892" fg:w="123"/><text x="37.8481%" y="255.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::unwrap_or (2 samples, 0.01%)</title><rect x="38.3830%" y="277" width="0.0128%" height="15" fill="rgb(232,48,39)" fg:x="6015" fg:w="2"/><text x="38.6330%" y="287.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts_mut (6 samples, 0.04%)</title><rect x="38.4021%" y="277" width="0.0383%" height="15" fill="rgb(236,34,42)" fg:x="6018" fg:w="6"/><text x="38.6521%" y="287.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts_mut (2 samples, 0.01%)</title><rect x="38.4277%" y="261" width="0.0128%" height="15" fill="rgb(243,106,37)" fg:x="6022" fg:w="2"/><text x="38.6777%" y="271.50"></text></g><g><title>deno`v8::String::WriteUtf8 (3 samples, 0.02%)</title><rect x="38.4404%" y="277" width="0.0191%" height="15" fill="rgb(218,96,6)" fg:x="6024" fg:w="3"/><text x="38.6904%" y="287.50"></text></g><g><title>deno`&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3 samples, 0.02%)</title><rect x="38.5170%" y="261" width="0.0191%" height="15" fill="rgb(235,130,12)" fg:x="6036" fg:w="3"/><text x="38.7670%" y="271.50"></text></g><g><title>deno`core::convert::num::ptr_try_from_impls::_&lt;impl core::convert::TryFrom&lt;usize&gt; for i32&gt;::try_from (6 samples, 0.04%)</title><rect x="38.5361%" y="261" width="0.0383%" height="15" fill="rgb(231,95,0)" fg:x="6039" fg:w="6"/><text x="38.7861%" y="271.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawOneByteString (5 samples, 0.03%)</title><rect x="38.7148%" y="245" width="0.0319%" height="15" fill="rgb(228,12,23)" fg:x="6067" fg:w="5"/><text x="38.9648%" y="255.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (2 samples, 0.01%)</title><rect x="38.7467%" y="245" width="0.0128%" height="15" fill="rgb(216,12,1)" fg:x="6072" fg:w="2"/><text x="38.9967%" y="255.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (2 samples, 0.01%)</title><rect x="38.7850%" y="229" width="0.0128%" height="15" fill="rgb(219,59,3)" fg:x="6078" fg:w="2"/><text x="39.0350%" y="239.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (10 samples, 0.06%)</title><rect x="38.7978%" y="229" width="0.0638%" height="15" fill="rgb(215,208,46)" fg:x="6080" fg:w="10"/><text x="39.0478%" y="239.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (8 samples, 0.05%)</title><rect x="38.8105%" y="213" width="0.0510%" height="15" fill="rgb(254,224,29)" fg:x="6082" fg:w="8"/><text x="39.0605%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (3 samples, 0.02%)</title><rect x="38.8424%" y="197" width="0.0191%" height="15" fill="rgb(232,14,29)" fg:x="6087" fg:w="3"/><text x="39.0924%" y="207.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (3 samples, 0.02%)</title><rect x="38.8424%" y="181" width="0.0191%" height="15" fill="rgb(208,45,52)" fg:x="6087" fg:w="3"/><text x="39.0924%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (3 samples, 0.02%)</title><rect x="38.8424%" y="165" width="0.0191%" height="15" fill="rgb(234,191,28)" fg:x="6087" fg:w="3"/><text x="39.0924%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (3 samples, 0.02%)</title><rect x="38.8424%" y="149" width="0.0191%" height="15" fill="rgb(244,67,43)" fg:x="6087" fg:w="3"/><text x="39.0924%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (3 samples, 0.02%)</title><rect x="38.8424%" y="133" width="0.0191%" height="15" fill="rgb(236,189,24)" fg:x="6087" fg:w="3"/><text x="39.0924%" y="143.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.02%)</title><rect x="38.8424%" y="117" width="0.0191%" height="15" fill="rgb(239,214,33)" fg:x="6087" fg:w="3"/><text x="39.0924%" y="127.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (3 samples, 0.02%)</title><rect x="38.8424%" y="101" width="0.0191%" height="15" fill="rgb(226,176,41)" fg:x="6087" fg:w="3"/><text x="39.0924%" y="111.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (2 samples, 0.01%)</title><rect x="38.8488%" y="85" width="0.0128%" height="15" fill="rgb(248,47,8)" fg:x="6088" fg:w="2"/><text x="39.0988%" y="95.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (2 samples, 0.01%)</title><rect x="39.0147%" y="213" width="0.0128%" height="15" fill="rgb(218,81,44)" fg:x="6114" fg:w="2"/><text x="39.2647%" y="223.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (55 samples, 0.35%)</title><rect x="38.7595%" y="245" width="0.3510%" height="15" fill="rgb(213,98,6)" fg:x="6074" fg:w="55"/><text x="39.0095%" y="255.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (39 samples, 0.25%)</title><rect x="38.8616%" y="229" width="0.2489%" height="15" fill="rgb(222,85,22)" fg:x="6090" fg:w="39"/><text x="39.1116%" y="239.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (13 samples, 0.08%)</title><rect x="39.0275%" y="213" width="0.0830%" height="15" fill="rgb(239,46,39)" fg:x="6116" fg:w="13"/><text x="39.2775%" y="223.50"></text></g><g><title>deno`v8::String::WriteUtf8 (86 samples, 0.55%)</title><rect x="38.5744%" y="261" width="0.5488%" height="15" fill="rgb(237,12,29)" fg:x="6045" fg:w="86"/><text x="38.8244%" y="271.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (2 samples, 0.01%)</title><rect x="39.1105%" y="245" width="0.0128%" height="15" fill="rgb(214,77,8)" fg:x="6129" fg:w="2"/><text x="39.3605%" y="255.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.01%)</title><rect x="39.1232%" y="261" width="0.0128%" height="15" fill="rgb(217,168,37)" fg:x="6131" fg:w="2"/><text x="39.3732%" y="271.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (364 samples, 2.32%)</title><rect x="36.8579%" y="309" width="2.3228%" height="15" fill="rgb(221,217,23)" fg:x="5776" fg:w="364"/><text x="37.1079%" y="319.50">d..</text></g><g><title>deno`serde_v8::de::to_utf8_fast (355 samples, 2.27%)</title><rect x="36.9153%" y="293" width="2.2653%" height="15" fill="rgb(243,229,36)" fg:x="5785" fg:w="355"/><text x="37.1653%" y="303.50">d..</text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8 (112 samples, 0.71%)</title><rect x="38.4660%" y="277" width="0.7147%" height="15" fill="rgb(251,163,40)" fg:x="6028" fg:w="112"/><text x="38.7160%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.04%)</title><rect x="39.1360%" y="261" width="0.0447%" height="15" fill="rgb(237,222,12)" fg:x="6133" fg:w="7"/><text x="39.3860%" y="271.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="39.2189%" y="293" width="0.0191%" height="15" fill="rgb(248,132,6)" fg:x="6146" fg:w="3"/><text x="39.4689%" y="303.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::String&gt;&gt;::try_from (10 samples, 0.06%)</title><rect x="39.1807%" y="309" width="0.0638%" height="15" fill="rgb(227,167,50)" fg:x="6140" fg:w="10"/><text x="39.4307%" y="319.50"></text></g><g><title>deno`&lt;serde_v8::magic::string_or_buffer::StringOrBuffer as serde_v8::magic::transl8::FromV8&gt;::from_v8 (551 samples, 3.52%)</title><rect x="35.7348%" y="373" width="3.5160%" height="15" fill="rgb(242,84,37)" fg:x="5600" fg:w="551"/><text x="35.9848%" y="383.50">den..</text></g><g><title>deno`serde_v8::de::from_v8 (401 samples, 2.56%)</title><rect x="36.6920%" y="357" width="2.5589%" height="15" fill="rgb(212,4,50)" fg:x="5750" fg:w="401"/><text x="36.9420%" y="367.50">de..</text></g><g><title>deno`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (395 samples, 2.52%)</title><rect x="36.7303%" y="341" width="2.5206%" height="15" fill="rgb(230,228,32)" fg:x="5756" fg:w="395"/><text x="36.9803%" y="351.50">de..</text></g><g><title>deno`&lt;&amp;mut serde_v8::de::Deserializer as serde::de::Deserializer&gt;::deserialize_string (393 samples, 2.51%)</title><rect x="36.7430%" y="325" width="2.5078%" height="15" fill="rgb(248,217,23)" fg:x="5758" fg:w="393"/><text x="36.9930%" y="335.50">de..</text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="39.2508%" y="373" width="0.0128%" height="15" fill="rgb(238,197,32)" fg:x="6151" fg:w="2"/><text x="39.5008%" y="383.50"></text></g><g><title>deno`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (28 samples, 0.18%)</title><rect x="39.5252%" y="325" width="0.1787%" height="15" fill="rgb(236,106,1)" fg:x="6194" fg:w="28"/><text x="39.7752%" y="335.50"></text></g><g><title>deno`core::mem::size_of_val (7 samples, 0.04%)</title><rect x="39.7039%" y="325" width="0.0447%" height="15" fill="rgb(219,228,13)" fg:x="6222" fg:w="7"/><text x="39.9539%" y="335.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::as_ptr (2 samples, 0.01%)</title><rect x="39.7486%" y="325" width="0.0128%" height="15" fill="rgb(238,30,35)" fg:x="6229" fg:w="2"/><text x="39.9986%" y="335.50"></text></g><g><title>deno`core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (83 samples, 0.53%)</title><rect x="39.2764%" y="373" width="0.5296%" height="15" fill="rgb(236,70,23)" fg:x="6155" fg:w="83"/><text x="39.5264%" y="383.50"></text></g><g><title>deno`core::cmp::impls::_&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (59 samples, 0.38%)</title><rect x="39.4295%" y="357" width="0.3765%" height="15" fill="rgb(249,104,48)" fg:x="6179" fg:w="59"/><text x="39.6795%" y="367.50"></text></g><g><title>deno`core::slice::cmp::_&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (51 samples, 0.33%)</title><rect x="39.4806%" y="341" width="0.3254%" height="15" fill="rgb(254,117,50)" fg:x="6187" fg:w="51"/><text x="39.7306%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.04%)</title><rect x="39.7613%" y="325" width="0.0447%" height="15" fill="rgb(223,152,4)" fg:x="6231" fg:w="7"/><text x="40.0113%" y="335.50"></text></g><g><title>deno`serde_v8::magic::string_or_buffer::StringOrBuffer::String (3 samples, 0.02%)</title><rect x="39.8060%" y="373" width="0.0191%" height="15" fill="rgb(245,6,2)" fg:x="6238" fg:w="3"/><text x="40.0560%" y="383.50"></text></g><g><title>deno`serde_v8::magic::transl8::opaque_send (3 samples, 0.02%)</title><rect x="39.8252%" y="373" width="0.0191%" height="15" fill="rgb(249,150,24)" fg:x="6241" fg:w="3"/><text x="40.0752%" y="383.50"></text></g><g><title>deno`core::ptr::read (4 samples, 0.03%)</title><rect x="39.9017%" y="309" width="0.0255%" height="15" fill="rgb(228,185,42)" fg:x="6253" fg:w="4"/><text x="40.1517%" y="319.50"></text></g><g><title>deno`core::mem::transmute_copy (13 samples, 0.08%)</title><rect x="39.8762%" y="325" width="0.0830%" height="15" fill="rgb(226,39,33)" fg:x="6249" fg:w="13"/><text x="40.1262%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.03%)</title><rect x="39.9273%" y="309" width="0.0319%" height="15" fill="rgb(221,166,19)" fg:x="6257" fg:w="5"/><text x="40.1773%" y="319.50"></text></g><g><title>deno`&lt;serde_v8::magic::transl8::magic_deserialize::ValueVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_u64 (20 samples, 0.13%)</title><rect x="39.8507%" y="357" width="0.1276%" height="15" fill="rgb(209,109,2)" fg:x="6245" fg:w="20"/><text x="40.1007%" y="367.50"></text></g><g><title>deno`serde_v8::magic::transl8::opaque_take (18 samples, 0.11%)</title><rect x="39.8634%" y="341" width="0.1149%" height="15" fill="rgb(252,216,26)" fg:x="6247" fg:w="18"/><text x="40.1134%" y="351.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="39.9592%" y="325" width="0.0191%" height="15" fill="rgb(227,173,36)" fg:x="6262" fg:w="3"/><text x="40.2092%" y="335.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="39.9783%" y="357" width="0.0191%" height="15" fill="rgb(209,90,7)" fg:x="6265" fg:w="3"/><text x="40.2283%" y="367.50"></text></g><g><title>deno`core::mem::forget (3 samples, 0.02%)</title><rect x="39.9974%" y="357" width="0.0191%" height="15" fill="rgb(250,194,11)" fg:x="6268" fg:w="3"/><text x="40.2474%" y="367.50"></text></g><g><title>deno`serde_v8::magic::transl8::visit_magic (33 samples, 0.21%)</title><rect x="39.8443%" y="373" width="0.2106%" height="15" fill="rgb(220,72,50)" fg:x="6244" fg:w="33"/><text x="40.0943%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.04%)</title><rect x="40.0166%" y="357" width="0.0383%" height="15" fill="rgb(222,106,48)" fg:x="6271" fg:w="6"/><text x="40.2666%" y="367.50"></text></g><g><title>deno`&lt;&amp;mut serde_v8::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (695 samples, 4.43%)</title><rect x="35.6710%" y="389" width="4.4349%" height="15" fill="rgb(216,220,45)" fg:x="5590" fg:w="695"/><text x="35.9210%" y="399.50">deno`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.05%)</title><rect x="40.0549%" y="373" width="0.0510%" height="15" fill="rgb(234,112,18)" fg:x="6277" fg:w="8"/><text x="40.3049%" y="383.50"></text></g><g><title>deno`&lt;serde_v8::magic::string_or_buffer::StringOrBuffer as serde::de::Deserialize&gt;::deserialize (708 samples, 4.52%)</title><rect x="35.6199%" y="421" width="4.5179%" height="15" fill="rgb(206,179,9)" fg:x="5582" fg:w="708"/><text x="35.8699%" y="431.50">deno`..</text></g><g><title>deno`serde_v8::magic::transl8::magic_deserialize (705 samples, 4.50%)</title><rect x="35.6391%" y="405" width="4.4988%" height="15" fill="rgb(215,115,40)" fg:x="5585" fg:w="705"/><text x="35.8891%" y="415.50">deno`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="40.1187%" y="389" width="0.0191%" height="15" fill="rgb(222,69,34)" fg:x="6287" fg:w="3"/><text x="40.3687%" y="399.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="40.1378%" y="421" width="0.0128%" height="15" fill="rgb(209,161,10)" fg:x="6290" fg:w="2"/><text x="40.3878%" y="431.50"></text></g><g><title>deno`v8::Value::IsTrue (4 samples, 0.03%)</title><rect x="40.1953%" y="389" width="0.0255%" height="15" fill="rgb(217,6,38)" fg:x="6299" fg:w="4"/><text x="40.4453%" y="399.50"></text></g><g><title>deno`&lt;&amp;mut serde_v8::de::Deserializer as serde::de::Deserializer&gt;::deserialize_bool (9 samples, 0.06%)</title><rect x="40.1761%" y="405" width="0.0574%" height="15" fill="rgb(229,229,48)" fg:x="6296" fg:w="9"/><text x="40.4261%" y="415.50"></text></g><g><title>deno`v8::value::_&lt;impl v8::data::Value&gt;::is_true (2 samples, 0.01%)</title><rect x="40.2208%" y="389" width="0.0128%" height="15" fill="rgb(225,21,28)" fg:x="6303" fg:w="2"/><text x="40.4708%" y="399.50"></text></g><g><title>deno`serde::de::impls::_&lt;impl serde::de::Deserialize for bool&gt;::deserialize (15 samples, 0.10%)</title><rect x="40.1506%" y="421" width="0.0957%" height="15" fill="rgb(206,33,13)" fg:x="6292" fg:w="15"/><text x="40.4006%" y="431.50"></text></g><g><title>deno`&lt;serde::de::impls::BoolVisitor as serde::de::Visitor&gt;::visit_bool (2 samples, 0.01%)</title><rect x="40.2336%" y="405" width="0.0128%" height="15" fill="rgb(242,178,17)" fg:x="6305" fg:w="2"/><text x="40.4836%" y="415.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="40.2974%" y="389" width="0.0191%" height="15" fill="rgb(220,162,5)" fg:x="6315" fg:w="3"/><text x="40.5474%" y="399.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="40.3037%" y="373" width="0.0128%" height="15" fill="rgb(210,33,43)" fg:x="6316" fg:w="2"/><text x="40.5537%" y="383.50"></text></g><g><title>deno`v8::value::_&lt;impl v8::data::Value&gt;::is_null_or_undefined (3 samples, 0.02%)</title><rect x="40.3293%" y="389" width="0.0191%" height="15" fill="rgb(216,116,54)" fg:x="6320" fg:w="3"/><text x="40.5793%" y="399.50"></text></g><g><title>deno`v8__Value__IsNullOrUndefined (4 samples, 0.03%)</title><rect x="40.3484%" y="389" width="0.0255%" height="15" fill="rgb(249,92,24)" fg:x="6323" fg:w="4"/><text x="40.5984%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="40.3739%" y="389" width="0.0191%" height="15" fill="rgb(231,189,14)" fg:x="6327" fg:w="3"/><text x="40.6239%" y="399.50"></text></g><g><title>deno`&lt;&amp;mut serde_v8::de::Deserializer as serde::de::Deserializer&gt;::deserialize_option (22 samples, 0.14%)</title><rect x="40.2591%" y="405" width="0.1404%" height="15" fill="rgb(230,8,41)" fg:x="6309" fg:w="22"/><text x="40.5091%" y="415.50"></text></g><g><title>deno`serde::de::impls::_&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (27 samples, 0.17%)</title><rect x="40.2463%" y="421" width="0.1723%" height="15" fill="rgb(249,7,27)" fg:x="6307" fg:w="27"/><text x="40.4963%" y="431.50"></text></g><g><title>deno`v8::value::_&lt;impl v8::data::Value&gt;::is_null_or_undefined (3 samples, 0.02%)</title><rect x="40.3995%" y="405" width="0.0191%" height="15" fill="rgb(232,86,5)" fg:x="6331" fg:w="3"/><text x="40.6495%" y="415.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="40.4824%" y="389" width="0.0128%" height="15" fill="rgb(224,175,18)" fg:x="6344" fg:w="2"/><text x="40.7324%" y="399.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="40.4824%" y="373" width="0.0128%" height="15" fill="rgb(220,129,12)" fg:x="6344" fg:w="2"/><text x="40.7324%" y="383.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="40.5335%" y="373" width="0.0447%" height="15" fill="rgb(210,19,36)" fg:x="6352" fg:w="7"/><text x="40.7835%" y="383.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="40.5590%" y="357" width="0.0191%" height="15" fill="rgb(219,96,14)" fg:x="6356" fg:w="3"/><text x="40.8090%" y="367.50"></text></g><g><title>deno`v8::Value::IsNumber (4 samples, 0.03%)</title><rect x="40.5781%" y="373" width="0.0255%" height="15" fill="rgb(249,106,1)" fg:x="6359" fg:w="4"/><text x="40.8281%" y="383.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Number&gt;&gt;::try_from (17 samples, 0.11%)</title><rect x="40.5016%" y="389" width="0.1085%" height="15" fill="rgb(249,155,20)" fg:x="6347" fg:w="17"/><text x="40.7516%" y="399.50"></text></g><g><title>deno`&lt;&amp;mut serde_v8::de::Deserializer as serde::de::Deserializer&gt;::deserialize_u32 (27 samples, 0.17%)</title><rect x="40.4441%" y="405" width="0.1723%" height="15" fill="rgb(244,168,9)" fg:x="6338" fg:w="27"/><text x="40.6941%" y="415.50"></text></g><g><title>deno`serde::de::impls::_&lt;impl serde::de::Deserialize for u32&gt;::deserialize (32 samples, 0.20%)</title><rect x="40.4186%" y="421" width="0.2042%" height="15" fill="rgb(216,23,50)" fg:x="6334" fg:w="32"/><text x="40.6686%" y="431.50"></text></g><g><title>deno`serde_v8::de::from_v8 (825 samples, 5.26%)</title><rect x="35.4285%" y="437" width="5.2645%" height="15" fill="rgb(224,219,20)" fg:x="5552" fg:w="825"/><text x="35.6785%" y="447.50">deno`s..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.06%)</title><rect x="40.6292%" y="421" width="0.0638%" height="15" fill="rgb(222,156,15)" fg:x="6367" fg:w="10"/><text x="40.8792%" y="431.50"></text></g><g><title>deno`v8::external::_&lt;impl v8::data::External&gt;::value (2 samples, 0.01%)</title><rect x="40.6930%" y="437" width="0.0128%" height="15" fill="rgb(231,97,17)" fg:x="6377" fg:w="2"/><text x="40.9430%" y="447.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="40.7440%" y="405" width="0.0191%" height="15" fill="rgb(218,70,48)" fg:x="6385" fg:w="3"/><text x="40.9940%" y="415.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw::_{{closure}} (2 samples, 0.01%)</title><rect x="40.7504%" y="389" width="0.0128%" height="15" fill="rgb(212,196,52)" fg:x="6386" fg:w="2"/><text x="41.0004%" y="399.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (12 samples, 0.08%)</title><rect x="40.7632%" y="405" width="0.0766%" height="15" fill="rgb(243,203,18)" fg:x="6388" fg:w="12"/><text x="41.0132%" y="415.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.01%)</title><rect x="40.8270%" y="389" width="0.0128%" height="15" fill="rgb(252,125,41)" fg:x="6398" fg:w="2"/><text x="41.0770%" y="399.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.01%)</title><rect x="40.8398%" y="405" width="0.0128%" height="15" fill="rgb(223,180,33)" fg:x="6400" fg:w="2"/><text x="41.0898%" y="415.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::data (24 samples, 0.15%)</title><rect x="40.7058%" y="437" width="0.1531%" height="15" fill="rgb(254,159,46)" fg:x="6379" fg:w="24"/><text x="40.9558%" y="447.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw (22 samples, 0.14%)</title><rect x="40.7185%" y="421" width="0.1404%" height="15" fill="rgb(254,38,10)" fg:x="6381" fg:w="22"/><text x="40.9685%" y="431.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap (4 samples, 0.03%)</title><rect x="40.9227%" y="421" width="0.0255%" height="15" fill="rgb(208,217,32)" fg:x="6413" fg:w="4"/><text x="41.1727%" y="431.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (19 samples, 0.12%)</title><rect x="41.0057%" y="405" width="0.1212%" height="15" fill="rgb(221,120,13)" fg:x="6426" fg:w="19"/><text x="41.2557%" y="415.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw::_{{closure}} (7 samples, 0.04%)</title><rect x="41.0823%" y="389" width="0.0447%" height="15" fill="rgb(246,54,52)" fg:x="6438" fg:w="7"/><text x="41.3323%" y="399.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (4 samples, 0.03%)</title><rect x="41.2354%" y="389" width="0.0255%" height="15" fill="rgb(242,34,25)" fg:x="6462" fg:w="4"/><text x="41.4854%" y="399.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::get (65 samples, 0.41%)</title><rect x="40.8589%" y="437" width="0.4148%" height="15" fill="rgb(247,209,9)" fg:x="6403" fg:w="65"/><text x="41.1089%" y="447.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw (51 samples, 0.33%)</title><rect x="40.9482%" y="421" width="0.3254%" height="15" fill="rgb(228,71,26)" fg:x="6417" fg:w="51"/><text x="41.1982%" y="431.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (23 samples, 0.15%)</title><rect x="41.1269%" y="405" width="0.1468%" height="15" fill="rgb(222,145,49)" fg:x="6445" fg:w="23"/><text x="41.3769%" y="415.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="41.2609%" y="389" width="0.0128%" height="15" fill="rgb(218,121,17)" fg:x="6466" fg:w="2"/><text x="41.5109%" y="399.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw (2 samples, 0.01%)</title><rect x="41.2737%" y="437" width="0.0128%" height="15" fill="rgb(244,50,7)" fg:x="6468" fg:w="2"/><text x="41.5237%" y="447.50"></text></g><g><title>deno`deno_flash::op_respond::v8_func (3,488 samples, 22.26%)</title><rect x="19.2394%" y="453" width="22.2577%" height="15" fill="rgb(246,229,37)" fg:x="3015" fg:w="3488"/><text x="19.4894%" y="463.50">deno`deno_flash::op_respond::v8_func</text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.20%)</title><rect x="41.2992%" y="437" width="0.1978%" height="15" fill="rgb(225,18,5)" fg:x="6472" fg:w="31"/><text x="41.5492%" y="447.50"></text></g><g><title>deno`serde_v8::de::from_v8 (3 samples, 0.02%)</title><rect x="41.4970%" y="453" width="0.0191%" height="15" fill="rgb(213,204,8)" fg:x="6503" fg:w="3"/><text x="41.7470%" y="463.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::cast (3 samples, 0.02%)</title><rect x="41.5162%" y="453" width="0.0191%" height="15" fill="rgb(238,103,6)" fg:x="6506" fg:w="3"/><text x="41.7662%" y="463.50"></text></g><g><title>deno`core::ops::function::Fn::call (3,528 samples, 22.51%)</title><rect x="19.1309%" y="469" width="22.5129%" height="15" fill="rgb(222,25,35)" fg:x="2998" fg:w="3528"/><text x="19.3809%" y="479.50">deno`core::ops::function::Fn::call</text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.11%)</title><rect x="41.5353%" y="453" width="0.1085%" height="15" fill="rgb(213,203,35)" fg:x="6509" fg:w="17"/><text x="41.7853%" y="463.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="41.6629%" y="421" width="0.0255%" height="15" fill="rgb(221,79,53)" fg:x="6529" fg:w="4"/><text x="41.9129%" y="431.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.01%)</title><rect x="41.7395%" y="405" width="0.0128%" height="15" fill="rgb(243,200,35)" fg:x="6541" fg:w="2"/><text x="41.9895%" y="415.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (9 samples, 0.06%)</title><rect x="41.7012%" y="421" width="0.0574%" height="15" fill="rgb(248,60,25)" fg:x="6535" fg:w="9"/><text x="41.9512%" y="431.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.01%)</title><rect x="41.7587%" y="421" width="0.0128%" height="15" fill="rgb(227,53,46)" fg:x="6544" fg:w="2"/><text x="42.0087%" y="431.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (4 samples, 0.03%)</title><rect x="41.8480%" y="373" width="0.0255%" height="15" fill="rgb(216,120,32)" fg:x="6558" fg:w="4"/><text x="42.0980%" y="383.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (13 samples, 0.08%)</title><rect x="41.7969%" y="405" width="0.0830%" height="15" fill="rgb(220,134,1)" fg:x="6550" fg:w="13"/><text x="42.0469%" y="415.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (8 samples, 0.05%)</title><rect x="41.8289%" y="389" width="0.0510%" height="15" fill="rgb(237,168,5)" fg:x="6555" fg:w="8"/><text x="42.0789%" y="399.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (3 samples, 0.02%)</title><rect x="41.9118%" y="389" width="0.0191%" height="15" fill="rgb(231,100,33)" fg:x="6568" fg:w="3"/><text x="42.1618%" y="399.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (26 samples, 0.17%)</title><rect x="41.7714%" y="421" width="0.1659%" height="15" fill="rgb(236,177,47)" fg:x="6546" fg:w="26"/><text x="42.0214%" y="431.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (8 samples, 0.05%)</title><rect x="41.8863%" y="405" width="0.0510%" height="15" fill="rgb(235,7,49)" fg:x="6564" fg:w="8"/><text x="42.1363%" y="415.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_isolate (3 samples, 0.02%)</title><rect x="41.9373%" y="421" width="0.0191%" height="15" fill="rgb(232,119,22)" fg:x="6572" fg:w="3"/><text x="42.1873%" y="431.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="41.9437%" y="405" width="0.0128%" height="15" fill="rgb(254,73,53)" fg:x="6573" fg:w="2"/><text x="42.1937%" y="415.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (49 samples, 0.31%)</title><rect x="41.6502%" y="437" width="0.3127%" height="15" fill="rgb(251,35,20)" fg:x="6527" fg:w="49"/><text x="41.9002%" y="447.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="41.9820%" y="421" width="0.0191%" height="15" fill="rgb(241,119,20)" fg:x="6579" fg:w="3"/><text x="42.2320%" y="431.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="42.0011%" y="421" width="0.0128%" height="15" fill="rgb(207,102,14)" fg:x="6582" fg:w="2"/><text x="42.2511%" y="431.50"></text></g><g><title>deno`core::mem::replace (6 samples, 0.04%)</title><rect x="42.1543%" y="373" width="0.0383%" height="15" fill="rgb(248,201,50)" fg:x="6606" fg:w="6"/><text x="42.4043%" y="383.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (18 samples, 0.11%)</title><rect x="42.1352%" y="389" width="0.1149%" height="15" fill="rgb(222,185,44)" fg:x="6603" fg:w="18"/><text x="42.3852%" y="399.50"></text></g><g><title>deno`core::ptr::read (9 samples, 0.06%)</title><rect x="42.1926%" y="373" width="0.0574%" height="15" fill="rgb(218,107,18)" fg:x="6612" fg:w="9"/><text x="42.4426%" y="383.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (22 samples, 0.14%)</title><rect x="42.1224%" y="405" width="0.1404%" height="15" fill="rgb(237,177,39)" fg:x="6601" fg:w="22"/><text x="42.3724%" y="415.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="42.2500%" y="389" width="0.0128%" height="15" fill="rgb(246,69,6)" fg:x="6621" fg:w="2"/><text x="42.5000%" y="399.50"></text></g><g><title>deno`core::mem::drop (2 samples, 0.01%)</title><rect x="42.2628%" y="405" width="0.0128%" height="15" fill="rgb(234,208,37)" fg:x="6623" fg:w="2"/><text x="42.5128%" y="415.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (4 samples, 0.03%)</title><rect x="42.2883%" y="405" width="0.0255%" height="15" fill="rgb(225,4,6)" fg:x="6627" fg:w="4"/><text x="42.5383%" y="415.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (4 samples, 0.03%)</title><rect x="42.4032%" y="373" width="0.0255%" height="15" fill="rgb(233,45,0)" fg:x="6645" fg:w="4"/><text x="42.6532%" y="383.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (16 samples, 0.10%)</title><rect x="42.3394%" y="389" width="0.1021%" height="15" fill="rgb(226,136,5)" fg:x="6635" fg:w="16"/><text x="42.5894%" y="399.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="42.4287%" y="373" width="0.0128%" height="15" fill="rgb(211,91,47)" fg:x="6649" fg:w="2"/><text x="42.6787%" y="383.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (22 samples, 0.14%)</title><rect x="42.3138%" y="405" width="0.1404%" height="15" fill="rgb(242,88,51)" fg:x="6631" fg:w="22"/><text x="42.5638%" y="415.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap_or_else (2 samples, 0.01%)</title><rect x="42.4415%" y="389" width="0.0128%" height="15" fill="rgb(230,91,28)" fg:x="6651" fg:w="2"/><text x="42.6915%" y="399.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_isolate_mut (9 samples, 0.06%)</title><rect x="42.4542%" y="405" width="0.0574%" height="15" fill="rgb(254,186,29)" fg:x="6653" fg:w="9"/><text x="42.7042%" y="415.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_mut (5 samples, 0.03%)</title><rect x="42.4797%" y="389" width="0.0319%" height="15" fill="rgb(238,6,4)" fg:x="6657" fg:w="5"/><text x="42.7297%" y="399.50"></text></g><g><title>deno`v8::scope::data::ScopeData::exit_scope (78 samples, 0.50%)</title><rect x="42.0203%" y="421" width="0.4977%" height="15" fill="rgb(221,151,16)" fg:x="6585" fg:w="78"/><text x="42.2703%" y="431.50"></text></g><g><title>deno`&lt;v8::scope::CallbackScope&lt;C&gt; as core::ops::drop::Drop&gt;::drop (141 samples, 0.90%)</title><rect x="41.6438%" y="453" width="0.8998%" height="15" fill="rgb(251,143,52)" fg:x="6526" fg:w="141"/><text x="41.8938%" y="463.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (91 samples, 0.58%)</title><rect x="41.9629%" y="437" width="0.5807%" height="15" fill="rgb(206,90,15)" fg:x="6576" fg:w="91"/><text x="42.2129%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="42.5180%" y="421" width="0.0255%" height="15" fill="rgb(218,35,8)" fg:x="6663" fg:w="4"/><text x="42.7680%" y="431.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::CallbackScope&gt; (143 samples, 0.91%)</title><rect x="41.6438%" y="469" width="0.9125%" height="15" fill="rgb(239,215,6)" fg:x="6526" fg:w="143"/><text x="41.8938%" y="479.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (2 samples, 0.01%)</title><rect x="42.5436%" y="453" width="0.0128%" height="15" fill="rgb(245,116,39)" fg:x="6667" fg:w="2"/><text x="42.7936%" y="463.50"></text></g><g><title>deno`deno_flash::op_respond::v8_func (2 samples, 0.01%)</title><rect x="42.5563%" y="469" width="0.0128%" height="15" fill="rgb(242,65,28)" fg:x="6669" fg:w="2"/><text x="42.8063%" y="479.50"></text></g><g><title>deno`v8::function::ReturnValue::from_function_callback_info (5 samples, 0.03%)</title><rect x="42.5691%" y="469" width="0.0319%" height="15" fill="rgb(252,132,53)" fg:x="6671" fg:w="5"/><text x="42.8191%" y="479.50"></text></g><g><title>deno`&lt;v8::scope::data::ScopeStatus as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="42.6457%" y="453" width="0.0128%" height="15" fill="rgb(224,159,50)" fg:x="6683" fg:w="2"/><text x="42.8957%" y="463.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (3 samples, 0.02%)</title><rect x="42.6584%" y="453" width="0.0191%" height="15" fill="rgb(224,93,4)" fg:x="6685" fg:w="3"/><text x="42.9084%" y="463.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="42.6839%" y="453" width="0.0128%" height="15" fill="rgb(208,81,34)" fg:x="6689" fg:w="2"/><text x="42.9339%" y="463.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="42.7988%" y="421" width="0.0255%" height="15" fill="rgb(233,92,54)" fg:x="6707" fg:w="4"/><text x="43.0488%" y="431.50"></text></g><g><title>deno`core::mem::valid_align::ValidAlign::as_nonzero (2 samples, 0.01%)</title><rect x="42.8116%" y="405" width="0.0128%" height="15" fill="rgb(237,21,14)" fg:x="6709" fg:w="2"/><text x="43.0616%" y="415.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (9 samples, 0.06%)</title><rect x="42.7733%" y="437" width="0.0574%" height="15" fill="rgb(249,128,51)" fg:x="6703" fg:w="9"/><text x="43.0233%" y="447.50"></text></g><g><title>deno`core::alloc::layout::Layout::from_size_align_unchecked (6 samples, 0.04%)</title><rect x="42.8499%" y="421" width="0.0383%" height="15" fill="rgb(223,129,24)" fg:x="6715" fg:w="6"/><text x="43.0999%" y="431.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (10 samples, 0.06%)</title><rect x="42.8307%" y="437" width="0.0638%" height="15" fill="rgb(231,168,25)" fg:x="6712" fg:w="10"/><text x="43.0807%" y="447.50"></text></g><g><title>deno`core::alloc::layout::size_align (3 samples, 0.02%)</title><rect x="42.8945%" y="437" width="0.0191%" height="15" fill="rgb(224,39,20)" fg:x="6722" fg:w="3"/><text x="43.1445%" y="447.50"></text></g><g><title>deno`core::mem::replace (6 samples, 0.04%)</title><rect x="42.9519%" y="405" width="0.0383%" height="15" fill="rgb(225,152,53)" fg:x="6731" fg:w="6"/><text x="43.2019%" y="415.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="42.9902%" y="405" width="0.0128%" height="15" fill="rgb(252,17,24)" fg:x="6737" fg:w="2"/><text x="43.2402%" y="415.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (50 samples, 0.32%)</title><rect x="42.6967%" y="453" width="0.3191%" height="15" fill="rgb(250,114,30)" fg:x="6691" fg:w="50"/><text x="42.9467%" y="463.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (16 samples, 0.10%)</title><rect x="42.9137%" y="437" width="0.1021%" height="15" fill="rgb(229,5,4)" fg:x="6725" fg:w="16"/><text x="43.1637%" y="447.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (14 samples, 0.09%)</title><rect x="42.9264%" y="421" width="0.0893%" height="15" fill="rgb(225,176,49)" fg:x="6727" fg:w="14"/><text x="43.1764%" y="431.50"></text></g><g><title>deno`core::ptr::write (2 samples, 0.01%)</title><rect x="43.0030%" y="405" width="0.0128%" height="15" fill="rgb(224,221,49)" fg:x="6739" fg:w="2"/><text x="43.2530%" y="415.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (9 samples, 0.06%)</title><rect x="43.0285%" y="437" width="0.0574%" height="15" fill="rgb(253,169,27)" fg:x="6743" fg:w="9"/><text x="43.2785%" y="447.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="43.0732%" y="421" width="0.0128%" height="15" fill="rgb(211,206,16)" fg:x="6750" fg:w="2"/><text x="43.3232%" y="431.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (4 samples, 0.03%)</title><rect x="43.1051%" y="421" width="0.0255%" height="15" fill="rgb(244,87,35)" fg:x="6755" fg:w="4"/><text x="43.3551%" y="431.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="43.1179%" y="405" width="0.0128%" height="15" fill="rgb(246,28,10)" fg:x="6757" fg:w="2"/><text x="43.3679%" y="415.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (7 samples, 0.04%)</title><rect x="43.0923%" y="437" width="0.0447%" height="15" fill="rgb(229,12,44)" fg:x="6753" fg:w="7"/><text x="43.3423%" y="447.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (20 samples, 0.13%)</title><rect x="43.0158%" y="453" width="0.1276%" height="15" fill="rgb(210,145,37)" fg:x="6741" fg:w="20"/><text x="43.2658%" y="463.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="43.1561%" y="437" width="0.0128%" height="15" fill="rgb(227,112,52)" fg:x="6763" fg:w="2"/><text x="43.4061%" y="447.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="43.1689%" y="437" width="0.0128%" height="15" fill="rgb(238,155,34)" fg:x="6765" fg:w="2"/><text x="43.4189%" y="447.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="43.2710%" y="421" width="0.0128%" height="15" fill="rgb(239,226,36)" fg:x="6781" fg:w="2"/><text x="43.5210%" y="431.50"></text></g><g><title>deno`&lt;v8::scope::data::ScopeStatus as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="43.2838%" y="421" width="0.0128%" height="15" fill="rgb(230,16,23)" fg:x="6783" fg:w="2"/><text x="43.5338%" y="431.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="43.3157%" y="389" width="0.0128%" height="15" fill="rgb(236,171,36)" fg:x="6788" fg:w="2"/><text x="43.5657%" y="399.50"></text></g><g><title>deno`core::ptr::read (5 samples, 0.03%)</title><rect x="43.3284%" y="389" width="0.0319%" height="15" fill="rgb(221,22,14)" fg:x="6790" fg:w="5"/><text x="43.5784%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (10 samples, 0.06%)</title><rect x="43.3029%" y="421" width="0.0638%" height="15" fill="rgb(242,43,11)" fg:x="6786" fg:w="10"/><text x="43.5529%" y="431.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (8 samples, 0.05%)</title><rect x="43.3157%" y="405" width="0.0510%" height="15" fill="rgb(232,69,23)" fg:x="6788" fg:w="8"/><text x="43.5657%" y="415.50"></text></g><g><title>deno`core::mem::drop (3 samples, 0.02%)</title><rect x="43.3667%" y="421" width="0.0191%" height="15" fill="rgb(216,180,54)" fg:x="6796" fg:w="3"/><text x="43.6167%" y="431.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (3 samples, 0.02%)</title><rect x="43.4561%" y="373" width="0.0191%" height="15" fill="rgb(216,5,24)" fg:x="6810" fg:w="3"/><text x="43.7061%" y="383.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (8 samples, 0.05%)</title><rect x="43.4305%" y="389" width="0.0510%" height="15" fill="rgb(225,89,9)" fg:x="6806" fg:w="8"/><text x="43.6805%" y="399.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (11 samples, 0.07%)</title><rect x="43.4178%" y="405" width="0.0702%" height="15" fill="rgb(243,75,33)" fg:x="6804" fg:w="11"/><text x="43.6678%" y="415.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (20 samples, 0.13%)</title><rect x="43.3859%" y="421" width="0.1276%" height="15" fill="rgb(247,141,45)" fg:x="6799" fg:w="20"/><text x="43.6359%" y="431.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap_or_else (4 samples, 0.03%)</title><rect x="43.4880%" y="405" width="0.0255%" height="15" fill="rgb(232,177,36)" fg:x="6815" fg:w="4"/><text x="43.7380%" y="415.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.03%)</title><rect x="43.5645%" y="405" width="0.0319%" height="15" fill="rgb(219,125,36)" fg:x="6827" fg:w="5"/><text x="43.8145%" y="415.50"></text></g><g><title>deno`v8::scope::data::ScopeData::allocate_or_reuse_scope_data (16 samples, 0.10%)</title><rect x="43.5135%" y="421" width="0.1021%" height="15" fill="rgb(227,94,9)" fg:x="6819" fg:w="16"/><text x="43.7635%" y="431.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="43.5965%" y="405" width="0.0191%" height="15" fill="rgb(240,34,52)" fg:x="6832" fg:w="3"/><text x="43.8465%" y="415.50"></text></g><g><title>deno`core::mem::replace (5 samples, 0.03%)</title><rect x="43.6730%" y="373" width="0.0319%" height="15" fill="rgb(216,45,12)" fg:x="6844" fg:w="5"/><text x="43.9230%" y="383.50"></text></g><g><title>deno`core::ptr::read (4 samples, 0.03%)</title><rect x="43.7049%" y="373" width="0.0255%" height="15" fill="rgb(246,21,19)" fg:x="6849" fg:w="4"/><text x="43.9549%" y="383.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (11 samples, 0.07%)</title><rect x="43.6666%" y="389" width="0.0702%" height="15" fill="rgb(213,98,42)" fg:x="6843" fg:w="11"/><text x="43.9166%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (15 samples, 0.10%)</title><rect x="43.6539%" y="405" width="0.0957%" height="15" fill="rgb(250,136,47)" fg:x="6841" fg:w="15"/><text x="43.9039%" y="415.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="43.7368%" y="389" width="0.0128%" height="15" fill="rgb(251,124,27)" fg:x="6854" fg:w="2"/><text x="43.9868%" y="399.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data::_{{closure}} (22 samples, 0.14%)</title><rect x="43.6220%" y="421" width="0.1404%" height="15" fill="rgb(229,180,14)" fg:x="6836" fg:w="22"/><text x="43.8720%" y="431.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (100 samples, 0.64%)</title><rect x="43.1434%" y="453" width="0.6381%" height="15" fill="rgb(245,216,25)" fg:x="6761" fg:w="100"/><text x="43.3934%" y="463.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_scope_data_with (92 samples, 0.59%)</title><rect x="43.1944%" y="437" width="0.5871%" height="15" fill="rgb(251,43,5)" fg:x="6769" fg:w="92"/><text x="43.4444%" y="447.50"></text></g><g><title>deno`v8::scope::data::ScopeTypeSpecificData::is_none (3 samples, 0.02%)</title><rect x="43.7624%" y="421" width="0.0191%" height="15" fill="rgb(250,128,24)" fg:x="6858" fg:w="3"/><text x="44.0124%" y="431.50"></text></g><g><title>deno`v8::scope::CallbackScope::new (187 samples, 1.19%)</title><rect x="42.6010%" y="469" width="1.1933%" height="15" fill="rgb(217,117,27)" fg:x="6676" fg:w="187"/><text x="42.8510%" y="479.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (2 samples, 0.01%)</title><rect x="43.7943%" y="469" width="0.0128%" height="15" fill="rgb(245,147,4)" fg:x="6863" fg:w="2"/><text x="44.0443%" y="479.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::support::MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const v8::function::FunctionCallbackInfo)&gt;::mapping::_{{closure}} (3,911 samples, 24.96%)</title><rect x="18.8565%" y="485" width="24.9569%" height="15" fill="rgb(242,201,35)" fg:x="2955" fg:w="3911"/><text x="19.1065%" y="495.50">deno`v8::function::_&lt;impl v8::support::M..</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3,932 samples, 25.09%)</title><rect x="18.7416%" y="501" width="25.0909%" height="15" fill="rgb(218,181,1)" fg:x="2937" fg:w="3932"/><text x="18.9916%" y="511.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::supp..</text></g><g><title>deno`v8::scope::CallbackScope::new (3 samples, 0.02%)</title><rect x="43.8134%" y="485" width="0.0191%" height="15" fill="rgb(222,6,29)" fg:x="6866" fg:w="3"/><text x="44.0634%" y="495.50"></text></g><g><title>deno`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (4 samples, 0.03%)</title><rect x="43.8326%" y="501" width="0.0255%" height="15" fill="rgb(208,186,3)" fg:x="6869" fg:w="4"/><text x="44.0826%" y="511.50"></text></g><g><title>0x110051dd0 (3,954 samples, 25.23%)</title><rect x="18.6395%" y="533" width="25.2313%" height="15" fill="rgb(216,36,26)" fg:x="2921" fg:w="3954"/><text x="18.8895%" y="543.50">0x110051dd0</text></g><g><title>deno`Builtins_CallApiCallback (3,949 samples, 25.20%)</title><rect x="18.6714%" y="517" width="25.1994%" height="15" fill="rgb(248,201,23)" fg:x="2926" fg:w="3949"/><text x="18.9214%" y="527.50">deno`Builtins_CallApiCallback</text></g><g><title>deno`v8::function::_&lt;impl v8::support::MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const v8::function::FunctionCallbackInfo)&gt;::mapping::_{{closure}} (2 samples, 0.01%)</title><rect x="43.8581%" y="501" width="0.0128%" height="15" fill="rgb(251,170,31)" fg:x="6873" fg:w="2"/><text x="44.1081%" y="511.50"></text></g><g><title>0x110051e0c (2 samples, 0.01%)</title><rect x="43.8836%" y="533" width="0.0128%" height="15" fill="rgb(207,110,25)" fg:x="6877" fg:w="2"/><text x="44.1336%" y="543.50"></text></g><g><title>0x110052100 (2 samples, 0.01%)</title><rect x="43.9028%" y="533" width="0.0128%" height="15" fill="rgb(250,54,15)" fg:x="6880" fg:w="2"/><text x="44.1528%" y="543.50"></text></g><g><title>0x110053b28 (3 samples, 0.02%)</title><rect x="43.9410%" y="517" width="0.0191%" height="15" fill="rgb(227,68,33)" fg:x="6886" fg:w="3"/><text x="44.1910%" y="527.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (3 samples, 0.02%)</title><rect x="43.9410%" y="501" width="0.0191%" height="15" fill="rgb(238,34,41)" fg:x="6886" fg:w="3"/><text x="44.1910%" y="511.50"></text></g><g><title>deno`Builtins_LoadIC (5 samples, 0.03%)</title><rect x="43.9793%" y="517" width="0.0319%" height="15" fill="rgb(220,11,15)" fg:x="6892" fg:w="5"/><text x="44.2293%" y="527.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (3 samples, 0.02%)</title><rect x="44.0112%" y="517" width="0.0191%" height="15" fill="rgb(246,111,35)" fg:x="6897" fg:w="3"/><text x="44.2612%" y="527.50"></text></g><g><title>0x110052274 (17 samples, 0.11%)</title><rect x="43.9347%" y="533" width="0.1085%" height="15" fill="rgb(209,88,53)" fg:x="6885" fg:w="17"/><text x="44.1847%" y="543.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (2 samples, 0.01%)</title><rect x="44.0304%" y="517" width="0.0128%" height="15" fill="rgb(231,185,47)" fg:x="6900" fg:w="2"/><text x="44.2804%" y="527.50"></text></g><g><title>0x110055538 (3 samples, 0.02%)</title><rect x="44.0495%" y="517" width="0.0191%" height="15" fill="rgb(233,154,1)" fg:x="6903" fg:w="3"/><text x="44.2995%" y="527.50"></text></g><g><title>0x110052324 (6 samples, 0.04%)</title><rect x="44.0495%" y="533" width="0.0383%" height="15" fill="rgb(225,15,46)" fg:x="6903" fg:w="6"/><text x="44.2995%" y="543.50"></text></g><g><title>0x110052334 (2 samples, 0.01%)</title><rect x="44.0878%" y="533" width="0.0128%" height="15" fill="rgb(211,135,41)" fg:x="6909" fg:w="2"/><text x="44.3378%" y="543.50"></text></g><g><title>0x110052430 (2 samples, 0.01%)</title><rect x="44.1006%" y="533" width="0.0128%" height="15" fill="rgb(208,54,0)" fg:x="6911" fg:w="2"/><text x="44.3506%" y="543.50"></text></g><g><title>0x110053f1c (7 samples, 0.04%)</title><rect x="44.1133%" y="517" width="0.0447%" height="15" fill="rgb(244,136,14)" fg:x="6913" fg:w="7"/><text x="44.3633%" y="527.50"></text></g><g><title>0x1100524f8 (11 samples, 0.07%)</title><rect x="44.1133%" y="533" width="0.0702%" height="15" fill="rgb(241,56,14)" fg:x="6913" fg:w="11"/><text x="44.3633%" y="543.50"></text></g><g><title>0x110052538 (4 samples, 0.03%)</title><rect x="44.1835%" y="533" width="0.0255%" height="15" fill="rgb(205,80,24)" fg:x="6924" fg:w="4"/><text x="44.4335%" y="543.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.01%)</title><rect x="44.2665%" y="341" width="0.0128%" height="15" fill="rgb(220,57,4)" fg:x="6937" fg:w="2"/><text x="44.5165%" y="351.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (3 samples, 0.02%)</title><rect x="44.2665%" y="357" width="0.0191%" height="15" fill="rgb(226,193,50)" fg:x="6937" fg:w="3"/><text x="44.5165%" y="367.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (5 samples, 0.03%)</title><rect x="44.2665%" y="501" width="0.0319%" height="15" fill="rgb(231,168,22)" fg:x="6937" fg:w="5"/><text x="44.5165%" y="511.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (5 samples, 0.03%)</title><rect x="44.2665%" y="485" width="0.0319%" height="15" fill="rgb(254,215,14)" fg:x="6937" fg:w="5"/><text x="44.5165%" y="495.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (5 samples, 0.03%)</title><rect x="44.2665%" y="469" width="0.0319%" height="15" fill="rgb(211,115,16)" fg:x="6937" fg:w="5"/><text x="44.5165%" y="479.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (5 samples, 0.03%)</title><rect x="44.2665%" y="453" width="0.0319%" height="15" fill="rgb(236,210,16)" fg:x="6937" fg:w="5"/><text x="44.5165%" y="463.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (5 samples, 0.03%)</title><rect x="44.2665%" y="437" width="0.0319%" height="15" fill="rgb(221,94,12)" fg:x="6937" fg:w="5"/><text x="44.5165%" y="447.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (5 samples, 0.03%)</title><rect x="44.2665%" y="421" width="0.0319%" height="15" fill="rgb(235,218,49)" fg:x="6937" fg:w="5"/><text x="44.5165%" y="431.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (5 samples, 0.03%)</title><rect x="44.2665%" y="405" width="0.0319%" height="15" fill="rgb(217,114,14)" fg:x="6937" fg:w="5"/><text x="44.5165%" y="415.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (5 samples, 0.03%)</title><rect x="44.2665%" y="389" width="0.0319%" height="15" fill="rgb(216,145,22)" fg:x="6937" fg:w="5"/><text x="44.5165%" y="399.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (5 samples, 0.03%)</title><rect x="44.2665%" y="373" width="0.0319%" height="15" fill="rgb(217,112,39)" fg:x="6937" fg:w="5"/><text x="44.5165%" y="383.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (10 samples, 0.06%)</title><rect x="44.2984%" y="501" width="0.0638%" height="15" fill="rgb(225,85,32)" fg:x="6942" fg:w="10"/><text x="44.5484%" y="511.50"></text></g><g><title>deno`Builtins_FulfillPromise (2 samples, 0.01%)</title><rect x="44.3622%" y="501" width="0.0128%" height="15" fill="rgb(245,209,47)" fg:x="6952" fg:w="2"/><text x="44.6122%" y="511.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (7 samples, 0.04%)</title><rect x="44.3813%" y="501" width="0.0447%" height="15" fill="rgb(218,220,15)" fg:x="6955" fg:w="7"/><text x="44.6313%" y="511.50"></text></g><g><title>deno`Builtins_FulfillPromise (5 samples, 0.03%)</title><rect x="44.4579%" y="485" width="0.0319%" height="15" fill="rgb(222,202,31)" fg:x="6967" fg:w="5"/><text x="44.7079%" y="495.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (72 samples, 0.46%)</title><rect x="44.2154%" y="517" width="0.4594%" height="15" fill="rgb(243,203,4)" fg:x="6929" fg:w="72"/><text x="44.4654%" y="527.50"></text></g><g><title>deno`Builtins_ResolvePromise (39 samples, 0.25%)</title><rect x="44.4260%" y="501" width="0.2489%" height="15" fill="rgb(237,92,17)" fg:x="6962" fg:w="39"/><text x="44.6760%" y="511.50"></text></g><g><title>deno`Builtins_GetProperty (29 samples, 0.19%)</title><rect x="44.4898%" y="485" width="0.1851%" height="15" fill="rgb(231,119,7)" fg:x="6972" fg:w="29"/><text x="44.7398%" y="495.50"></text></g><g><title>0x110052584 (74 samples, 0.47%)</title><rect x="44.2154%" y="533" width="0.4722%" height="15" fill="rgb(237,82,41)" fg:x="6929" fg:w="74"/><text x="44.4654%" y="543.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.01%)</title><rect x="44.6749%" y="517" width="0.0128%" height="15" fill="rgb(226,81,48)" fg:x="7001" fg:w="2"/><text x="44.9249%" y="527.50"></text></g><g><title>0x110052648 (2 samples, 0.01%)</title><rect x="44.7132%" y="533" width="0.0128%" height="15" fill="rgb(234,70,51)" fg:x="7007" fg:w="2"/><text x="44.9632%" y="543.50"></text></g><g><title>deno`tokio::coop::poll_proceed (4 samples, 0.03%)</title><rect x="44.7961%" y="165" width="0.0255%" height="15" fill="rgb(251,86,4)" fg:x="7020" fg:w="4"/><text x="45.0461%" y="175.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.03%)</title><rect x="44.7961%" y="149" width="0.0255%" height="15" fill="rgb(244,144,28)" fg:x="7020" fg:w="4"/><text x="45.0461%" y="159.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.03%)</title><rect x="44.7961%" y="133" width="0.0255%" height="15" fill="rgb(232,161,39)" fg:x="7020" fg:w="4"/><text x="45.0461%" y="143.50"></text></g><g><title>deno`core::mem::drop (3 samples, 0.02%)</title><rect x="44.8344%" y="85" width="0.0191%" height="15" fill="rgb(247,34,51)" fg:x="7026" fg:w="3"/><text x="45.0844%" y="95.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (2 samples, 0.01%)</title><rect x="44.8408%" y="69" width="0.0128%" height="15" fill="rgb(225,132,2)" fg:x="7027" fg:w="2"/><text x="45.0908%" y="79.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::sync::batch_semaphore::Waitlist&gt;&gt; (2 samples, 0.01%)</title><rect x="44.8408%" y="53" width="0.0128%" height="15" fill="rgb(209,159,44)" fg:x="7027" fg:w="2"/><text x="45.0908%" y="63.50"></text></g><g><title>deno`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="44.8408%" y="37" width="0.0128%" height="15" fill="rgb(251,214,1)" fg:x="7027" fg:w="2"/><text x="45.0908%" y="47.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (6 samples, 0.04%)</title><rect x="44.8216%" y="133" width="0.0383%" height="15" fill="rgb(247,84,47)" fg:x="7024" fg:w="6"/><text x="45.0716%" y="143.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::release (6 samples, 0.04%)</title><rect x="44.8216%" y="117" width="0.0383%" height="15" fill="rgb(240,111,43)" fg:x="7024" fg:w="6"/><text x="45.0716%" y="127.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (5 samples, 0.03%)</title><rect x="44.8280%" y="101" width="0.0319%" height="15" fill="rgb(215,214,35)" fg:x="7025" fg:w="5"/><text x="45.0780%" y="111.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.08%)</title><rect x="44.7897%" y="245" width="0.0766%" height="15" fill="rgb(248,207,23)" fg:x="7019" fg:w="12"/><text x="45.0397%" y="255.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::_{{closure}} (12 samples, 0.08%)</title><rect x="44.7897%" y="229" width="0.0766%" height="15" fill="rgb(214,186,4)" fg:x="7019" fg:w="12"/><text x="45.0397%" y="239.50"></text></g><g><title>deno`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (11 samples, 0.07%)</title><rect x="44.7961%" y="213" width="0.0702%" height="15" fill="rgb(220,133,22)" fg:x="7020" fg:w="11"/><text x="45.0461%" y="223.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::_{{closure}}::_{{closure}} (11 samples, 0.07%)</title><rect x="44.7961%" y="197" width="0.0702%" height="15" fill="rgb(239,134,19)" fg:x="7020" fg:w="11"/><text x="45.0461%" y="207.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (11 samples, 0.07%)</title><rect x="44.7961%" y="181" width="0.0702%" height="15" fill="rgb(250,140,9)" fg:x="7020" fg:w="11"/><text x="45.0461%" y="191.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (7 samples, 0.04%)</title><rect x="44.8216%" y="165" width="0.0447%" height="15" fill="rgb(225,59,14)" fg:x="7024" fg:w="7"/><text x="45.0716%" y="175.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::_{{closure}} (7 samples, 0.04%)</title><rect x="44.8216%" y="149" width="0.0447%" height="15" fill="rgb(214,152,51)" fg:x="7024" fg:w="7"/><text x="45.0716%" y="159.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="44.8855%" y="149" width="0.0128%" height="15" fill="rgb(251,227,43)" fg:x="7034" fg:w="2"/><text x="45.1355%" y="159.50"></text></g><g><title>deno`core::alloc::layout::Layout::array (2 samples, 0.01%)</title><rect x="44.8982%" y="133" width="0.0128%" height="15" fill="rgb(241,96,17)" fg:x="7036" fg:w="2"/><text x="45.1482%" y="143.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.03%)</title><rect x="44.8982%" y="149" width="0.0255%" height="15" fill="rgb(234,198,43)" fg:x="7036" fg:w="4"/><text x="45.1482%" y="159.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::unwrap_unchecked (2 samples, 0.01%)</title><rect x="44.9110%" y="133" width="0.0128%" height="15" fill="rgb(220,108,29)" fg:x="7038" fg:w="2"/><text x="45.1610%" y="143.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_flash::NextRequest&gt;&gt; (9 samples, 0.06%)</title><rect x="44.8727%" y="245" width="0.0574%" height="15" fill="rgb(226,163,33)" fg:x="7032" fg:w="9"/><text x="45.1227%" y="255.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_flash::NextRequest&gt; (9 samples, 0.06%)</title><rect x="44.8727%" y="229" width="0.0574%" height="15" fill="rgb(205,194,45)" fg:x="7032" fg:w="9"/><text x="45.1227%" y="239.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_flash::InnerRequest&gt; (9 samples, 0.06%)</title><rect x="44.8727%" y="213" width="0.0574%" height="15" fill="rgb(206,143,44)" fg:x="7032" fg:w="9"/><text x="45.1227%" y="223.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;httparse::Header&gt;&gt; (9 samples, 0.06%)</title><rect x="44.8727%" y="197" width="0.0574%" height="15" fill="rgb(236,136,36)" fg:x="7032" fg:w="9"/><text x="45.1227%" y="207.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;httparse::Header&gt;&gt; (8 samples, 0.05%)</title><rect x="44.8791%" y="181" width="0.0510%" height="15" fill="rgb(249,172,42)" fg:x="7033" fg:w="8"/><text x="45.1291%" y="191.50"></text></g><g><title>deno`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.05%)</title><rect x="44.8791%" y="165" width="0.0510%" height="15" fill="rgb(216,139,23)" fg:x="7033" fg:w="8"/><text x="45.1291%" y="175.50"></text></g><g><title>deno`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::get_mut (5 samples, 0.03%)</title><rect x="44.9301%" y="213" width="0.0319%" height="15" fill="rgb(207,166,20)" fg:x="7041" fg:w="5"/><text x="45.1801%" y="223.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (4 samples, 0.03%)</title><rect x="44.9365%" y="197" width="0.0255%" height="15" fill="rgb(210,209,22)" fg:x="7042" fg:w="4"/><text x="45.1865%" y="207.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (4 samples, 0.03%)</title><rect x="44.9365%" y="181" width="0.0255%" height="15" fill="rgb(232,118,20)" fg:x="7042" fg:w="4"/><text x="45.1865%" y="191.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.03%)</title><rect x="44.9365%" y="165" width="0.0255%" height="15" fill="rgb(238,113,42)" fg:x="7042" fg:w="4"/><text x="45.1865%" y="175.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (6 samples, 0.04%)</title><rect x="44.9301%" y="245" width="0.0383%" height="15" fill="rgb(231,42,5)" fg:x="7041" fg:w="6"/><text x="45.1801%" y="255.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::try_borrow_mut (6 samples, 0.04%)</title><rect x="44.9301%" y="229" width="0.0383%" height="15" fill="rgb(243,166,24)" fg:x="7041" fg:w="6"/><text x="45.1801%" y="239.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="44.9812%" y="213" width="0.0191%" height="15" fill="rgb(237,226,12)" fg:x="7049" fg:w="3"/><text x="45.2312%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="44.9876%" y="197" width="0.0128%" height="15" fill="rgb(229,133,24)" fg:x="7050" fg:w="2"/><text x="45.2376%" y="207.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.03%)</title><rect x="45.0003%" y="181" width="0.0319%" height="15" fill="rgb(238,33,43)" fg:x="7052" fg:w="5"/><text x="45.2503%" y="191.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.03%)</title><rect x="45.0003%" y="165" width="0.0319%" height="15" fill="rgb(227,59,38)" fg:x="7052" fg:w="5"/><text x="45.2503%" y="175.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.02%)</title><rect x="45.0131%" y="149" width="0.0191%" height="15" fill="rgb(230,97,0)" fg:x="7054" fg:w="3"/><text x="45.2631%" y="159.50"></text></g><g><title>deno`hashbrown::map::make_insert_hash (11 samples, 0.07%)</title><rect x="45.0003%" y="213" width="0.0702%" height="15" fill="rgb(250,173,50)" fg:x="7052" fg:w="11"/><text x="45.2503%" y="223.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (11 samples, 0.07%)</title><rect x="45.0003%" y="197" width="0.0702%" height="15" fill="rgb(240,15,50)" fg:x="7052" fg:w="11"/><text x="45.2503%" y="207.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.03%)</title><rect x="45.0386%" y="181" width="0.0319%" height="15" fill="rgb(221,93,22)" fg:x="7058" fg:w="5"/><text x="45.2886%" y="191.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (5 samples, 0.03%)</title><rect x="45.0386%" y="165" width="0.0319%" height="15" fill="rgb(245,180,53)" fg:x="7058" fg:w="5"/><text x="45.2886%" y="175.50"></text></g><g><title>deno`core::hash::Hasher::write_u32 (4 samples, 0.03%)</title><rect x="45.0450%" y="149" width="0.0255%" height="15" fill="rgb(231,88,51)" fg:x="7059" fg:w="4"/><text x="45.2950%" y="159.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="45.0514%" y="133" width="0.0191%" height="15" fill="rgb(240,58,21)" fg:x="7060" fg:w="3"/><text x="45.3014%" y="143.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="45.0514%" y="117" width="0.0191%" height="15" fill="rgb(237,21,10)" fg:x="7060" fg:w="3"/><text x="45.3014%" y="127.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="45.0514%" y="101" width="0.0191%" height="15" fill="rgb(218,43,11)" fg:x="7060" fg:w="3"/><text x="45.3014%" y="111.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.01%)</title><rect x="45.0960%" y="165" width="0.0128%" height="15" fill="rgb(218,221,29)" fg:x="7067" fg:w="2"/><text x="45.3460%" y="175.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.01%)</title><rect x="45.0960%" y="149" width="0.0128%" height="15" fill="rgb(214,118,42)" fg:x="7067" fg:w="2"/><text x="45.3460%" y="159.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (23 samples, 0.15%)</title><rect x="44.9684%" y="245" width="0.1468%" height="15" fill="rgb(251,200,26)" fg:x="7047" fg:w="23"/><text x="45.2184%" y="255.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 0.14%)</title><rect x="44.9748%" y="229" width="0.1404%" height="15" fill="rgb(237,101,39)" fg:x="7048" fg:w="22"/><text x="45.2248%" y="239.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (7 samples, 0.04%)</title><rect x="45.0705%" y="213" width="0.0447%" height="15" fill="rgb(251,117,11)" fg:x="7063" fg:w="7"/><text x="45.3205%" y="223.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.04%)</title><rect x="45.0769%" y="197" width="0.0383%" height="15" fill="rgb(216,223,23)" fg:x="7064" fg:w="6"/><text x="45.3269%" y="207.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.03%)</title><rect x="45.0833%" y="181" width="0.0319%" height="15" fill="rgb(251,54,12)" fg:x="7065" fg:w="5"/><text x="45.3333%" y="191.50"></text></g><g><title>deno`tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.01%)</title><rect x="45.1216%" y="149" width="0.0128%" height="15" fill="rgb(254,176,54)" fg:x="7071" fg:w="2"/><text x="45.3716%" y="159.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.01%)</title><rect x="45.1216%" y="133" width="0.0128%" height="15" fill="rgb(210,32,8)" fg:x="7071" fg:w="2"/><text x="45.3716%" y="143.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.01%)</title><rect x="45.1216%" y="117" width="0.0128%" height="15" fill="rgb(235,52,38)" fg:x="7071" fg:w="2"/><text x="45.3716%" y="127.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.01%)</title><rect x="45.1216%" y="101" width="0.0128%" height="15" fill="rgb(231,4,44)" fg:x="7071" fg:w="2"/><text x="45.3716%" y="111.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (5 samples, 0.03%)</title><rect x="45.1216%" y="181" width="0.0319%" height="15" fill="rgb(249,2,32)" fg:x="7071" fg:w="5"/><text x="45.3716%" y="191.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::release (5 samples, 0.03%)</title><rect x="45.1216%" y="165" width="0.0319%" height="15" fill="rgb(224,65,26)" fg:x="7071" fg:w="5"/><text x="45.3716%" y="175.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.02%)</title><rect x="45.1343%" y="149" width="0.0191%" height="15" fill="rgb(250,73,40)" fg:x="7073" fg:w="3"/><text x="45.3843%" y="159.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (65 samples, 0.41%)</title><rect x="44.7642%" y="277" width="0.4148%" height="15" fill="rgb(253,177,16)" fg:x="7015" fg:w="65"/><text x="45.0142%" y="287.50"></text></g><g><title>deno`deno_flash::op_next::call::_{{closure}} (64 samples, 0.41%)</title><rect x="44.7706%" y="261" width="0.4084%" height="15" fill="rgb(217,32,34)" fg:x="7016" fg:w="64"/><text x="45.0206%" y="271.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (10 samples, 0.06%)</title><rect x="45.1152%" y="245" width="0.0638%" height="15" fill="rgb(212,7,10)" fg:x="7070" fg:w="10"/><text x="45.3652%" y="255.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::try_recv (10 samples, 0.06%)</title><rect x="45.1152%" y="229" width="0.0638%" height="15" fill="rgb(245,89,8)" fg:x="7070" fg:w="10"/><text x="45.3652%" y="239.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (10 samples, 0.06%)</title><rect x="45.1152%" y="213" width="0.0638%" height="15" fill="rgb(237,16,53)" fg:x="7070" fg:w="10"/><text x="45.3652%" y="223.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::try_recv::_{{closure}} (10 samples, 0.06%)</title><rect x="45.1152%" y="197" width="0.0638%" height="15" fill="rgb(250,204,30)" fg:x="7070" fg:w="10"/><text x="45.3652%" y="207.50"></text></g><g><title>deno`deno_core::ops::to_op_result (2 samples, 0.01%)</title><rect x="45.1790%" y="277" width="0.0128%" height="15" fill="rgb(208,77,27)" fg:x="7080" fg:w="2"/><text x="45.4290%" y="287.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="45.1790%" y="261" width="0.0128%" height="15" fill="rgb(250,204,28)" fg:x="7080" fg:w="2"/><text x="45.4290%" y="271.50"></text></g><g><title>deno`&lt;serde_v8::serializable::SerializablePkg as core::convert::From&lt;T&gt;&gt;::from (2 samples, 0.01%)</title><rect x="45.1790%" y="245" width="0.0128%" height="15" fill="rgb(244,63,21)" fg:x="7080" fg:w="2"/><text x="45.4290%" y="255.50"></text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (68 samples, 0.43%)</title><rect x="44.7642%" y="325" width="0.4339%" height="15" fill="rgb(236,85,44)" fg:x="7015" fg:w="68"/><text x="45.0142%" y="335.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (68 samples, 0.43%)</title><rect x="44.7642%" y="309" width="0.4339%" height="15" fill="rgb(215,98,4)" fg:x="7015" fg:w="68"/><text x="45.0142%" y="319.50"></text></g><g><title>deno`deno_flash::op_next::v8_func::_{{closure}} (68 samples, 0.43%)</title><rect x="44.7642%" y="293" width="0.4339%" height="15" fill="rgb(235,38,11)" fg:x="7015" fg:w="68"/><text x="45.0142%" y="303.50"></text></g><g><title>deno`alloc::alloc::box_free (2 samples, 0.01%)</title><rect x="45.1981%" y="277" width="0.0128%" height="15" fill="rgb(254,186,25)" fg:x="7083" fg:w="2"/><text x="45.4481%" y="287.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = (i32,usize,deno_core::ops::OpResult)&gt;&gt; (4 samples, 0.03%)</title><rect x="45.1981%" y="293" width="0.0255%" height="15" fill="rgb(225,55,31)" fg:x="7083" fg:w="4"/><text x="45.4481%" y="303.50"></text></g><g><title>deno`&lt;futures_util::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (73 samples, 0.47%)</title><rect x="44.7642%" y="341" width="0.4658%" height="15" fill="rgb(211,15,21)" fg:x="7015" fg:w="73"/><text x="45.0142%" y="351.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;futures_util::future::maybe_done::MaybeDone&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = (i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="45.1981%" y="325" width="0.0319%" height="15" fill="rgb(215,187,41)" fg:x="7083" fg:w="5"/><text x="45.4481%" y="335.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = (i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="45.1981%" y="309" width="0.0319%" height="15" fill="rgb(248,69,32)" fg:x="7083" fg:w="5"/><text x="45.4481%" y="319.50"></text></g><g><title>deno`deno_core::ops::OpCall&lt;T&gt;::eager (74 samples, 0.47%)</title><rect x="44.7642%" y="357" width="0.4722%" height="15" fill="rgb(252,102,52)" fg:x="7015" fg:w="74"/><text x="45.0142%" y="367.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (2 samples, 0.01%)</title><rect x="45.2364%" y="357" width="0.0128%" height="15" fill="rgb(253,140,32)" fg:x="7089" fg:w="2"/><text x="45.4864%" y="367.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (2 samples, 0.01%)</title><rect x="45.2364%" y="341" width="0.0128%" height="15" fill="rgb(216,56,42)" fg:x="7089" fg:w="2"/><text x="45.4864%" y="351.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.01%)</title><rect x="45.2364%" y="325" width="0.0128%" height="15" fill="rgb(216,184,14)" fg:x="7089" fg:w="2"/><text x="45.4864%" y="335.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.01%)</title><rect x="45.2364%" y="309" width="0.0128%" height="15" fill="rgb(237,187,27)" fg:x="7089" fg:w="2"/><text x="45.4864%" y="319.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.01%)</title><rect x="45.2364%" y="293" width="0.0128%" height="15" fill="rgb(219,65,3)" fg:x="7089" fg:w="2"/><text x="45.4864%" y="303.50"></text></g><g><title>deno`core::ops::function::Fn::call (78 samples, 0.50%)</title><rect x="44.7578%" y="405" width="0.4977%" height="15" fill="rgb(245,83,25)" fg:x="7014" fg:w="78"/><text x="45.0078%" y="415.50"></text></g><g><title>deno`deno_flash::op_next::v8_func (78 samples, 0.50%)</title><rect x="44.7578%" y="389" width="0.4977%" height="15" fill="rgb(214,205,45)" fg:x="7014" fg:w="78"/><text x="45.0078%" y="399.50"></text></g><g><title>deno`deno_core::runtime::queue_async_op (77 samples, 0.49%)</title><rect x="44.7642%" y="373" width="0.4914%" height="15" fill="rgb(241,20,18)" fg:x="7015" fg:w="77"/><text x="45.0142%" y="383.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (84 samples, 0.54%)</title><rect x="44.7323%" y="437" width="0.5360%" height="15" fill="rgb(232,163,23)" fg:x="7010" fg:w="84"/><text x="44.9823%" y="447.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::support::MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const v8::function::FunctionCallbackInfo)&gt;::mapping::_{{closure}} (83 samples, 0.53%)</title><rect x="44.7387%" y="421" width="0.5296%" height="15" fill="rgb(214,5,46)" fg:x="7011" fg:w="83"/><text x="44.9887%" y="431.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::CallbackScope&gt; (2 samples, 0.01%)</title><rect x="45.2556%" y="405" width="0.0128%" height="15" fill="rgb(229,78,17)" fg:x="7092" fg:w="2"/><text x="45.5056%" y="415.50"></text></g><g><title>deno`&lt;v8::scope::CallbackScope&lt;C&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="45.2556%" y="389" width="0.0128%" height="15" fill="rgb(248,89,10)" fg:x="7092" fg:w="2"/><text x="45.5056%" y="399.50"></text></g><g><title>0x1100510f8 (85 samples, 0.54%)</title><rect x="44.7323%" y="517" width="0.5424%" height="15" fill="rgb(248,54,15)" fg:x="7010" fg:w="85"/><text x="44.9823%" y="527.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (85 samples, 0.54%)</title><rect x="44.7323%" y="501" width="0.5424%" height="15" fill="rgb(223,116,6)" fg:x="7010" fg:w="85"/><text x="44.9823%" y="511.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (85 samples, 0.54%)</title><rect x="44.7323%" y="485" width="0.5424%" height="15" fill="rgb(205,125,38)" fg:x="7010" fg:w="85"/><text x="44.9823%" y="495.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (85 samples, 0.54%)</title><rect x="44.7323%" y="469" width="0.5424%" height="15" fill="rgb(251,78,38)" fg:x="7010" fg:w="85"/><text x="44.9823%" y="479.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::Call (85 samples, 0.54%)</title><rect x="44.7323%" y="453" width="0.5424%" height="15" fill="rgb(253,78,28)" fg:x="7010" fg:w="85"/><text x="44.9823%" y="463.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.01%)</title><rect x="45.3002%" y="213" width="0.0128%" height="15" fill="rgb(209,120,3)" fg:x="7099" fg:w="2"/><text x="45.5502%" y="223.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.01%)</title><rect x="45.3002%" y="197" width="0.0128%" height="15" fill="rgb(238,229,9)" fg:x="7099" fg:w="2"/><text x="45.5502%" y="207.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.01%)</title><rect x="45.3002%" y="181" width="0.0128%" height="15" fill="rgb(253,159,18)" fg:x="7099" fg:w="2"/><text x="45.5502%" y="191.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.03%)</title><rect x="45.2939%" y="277" width="0.0255%" height="15" fill="rgb(244,42,34)" fg:x="7098" fg:w="4"/><text x="45.5439%" y="287.50"></text></g><g><title>deno`deno_flash::op_next::call::_{{closure}} (4 samples, 0.03%)</title><rect x="45.2939%" y="261" width="0.0255%" height="15" fill="rgb(224,8,7)" fg:x="7098" fg:w="4"/><text x="45.5439%" y="271.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.02%)</title><rect x="45.3002%" y="245" width="0.0191%" height="15" fill="rgb(210,201,45)" fg:x="7099" fg:w="3"/><text x="45.5502%" y="255.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.02%)</title><rect x="45.3002%" y="229" width="0.0191%" height="15" fill="rgb(252,185,21)" fg:x="7099" fg:w="3"/><text x="45.5502%" y="239.50"></text></g><g><title>deno`deno_core::ops::OpCall&lt;T&gt;::eager (7 samples, 0.04%)</title><rect x="45.2875%" y="357" width="0.0447%" height="15" fill="rgb(223,131,1)" fg:x="7097" fg:w="7"/><text x="45.5375%" y="367.50"></text></g><g><title>deno`&lt;futures_util::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (7 samples, 0.04%)</title><rect x="45.2875%" y="341" width="0.0447%" height="15" fill="rgb(245,141,16)" fg:x="7097" fg:w="7"/><text x="45.5375%" y="351.50"></text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (7 samples, 0.04%)</title><rect x="45.2875%" y="325" width="0.0447%" height="15" fill="rgb(229,55,45)" fg:x="7097" fg:w="7"/><text x="45.5375%" y="335.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.04%)</title><rect x="45.2875%" y="309" width="0.0447%" height="15" fill="rgb(208,92,15)" fg:x="7097" fg:w="7"/><text x="45.5375%" y="319.50"></text></g><g><title>deno`deno_flash::op_next::v8_func::_{{closure}} (7 samples, 0.04%)</title><rect x="45.2875%" y="293" width="0.0447%" height="15" fill="rgb(234,185,47)" fg:x="7097" fg:w="7"/><text x="45.5375%" y="303.50"></text></g><g><title>deno`deno_core::ops::to_op_result (2 samples, 0.01%)</title><rect x="45.3194%" y="277" width="0.0128%" height="15" fill="rgb(253,104,50)" fg:x="7102" fg:w="2"/><text x="45.5694%" y="287.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="45.3194%" y="261" width="0.0128%" height="15" fill="rgb(205,70,7)" fg:x="7102" fg:w="2"/><text x="45.5694%" y="271.50"></text></g><g><title>deno`deno_core::runtime::queue_async_op (9 samples, 0.06%)</title><rect x="45.2875%" y="373" width="0.0574%" height="15" fill="rgb(240,178,43)" fg:x="7097" fg:w="9"/><text x="45.5375%" y="383.50"></text></g><g><title>deno`core::ops::function::Fn::call (10 samples, 0.06%)</title><rect x="45.2875%" y="405" width="0.0638%" height="15" fill="rgb(214,112,2)" fg:x="7097" fg:w="10"/><text x="45.5375%" y="415.50"></text></g><g><title>deno`deno_flash::op_next::v8_func (10 samples, 0.06%)</title><rect x="45.2875%" y="389" width="0.0638%" height="15" fill="rgb(206,46,17)" fg:x="7097" fg:w="10"/><text x="45.5375%" y="399.50"></text></g><g><title>0x110054cac (12 samples, 0.08%)</title><rect x="45.2875%" y="517" width="0.0766%" height="15" fill="rgb(225,220,16)" fg:x="7097" fg:w="12"/><text x="45.5375%" y="527.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (12 samples, 0.08%)</title><rect x="45.2875%" y="501" width="0.0766%" height="15" fill="rgb(238,65,40)" fg:x="7097" fg:w="12"/><text x="45.5375%" y="511.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (12 samples, 0.08%)</title><rect x="45.2875%" y="485" width="0.0766%" height="15" fill="rgb(230,151,21)" fg:x="7097" fg:w="12"/><text x="45.5375%" y="495.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (12 samples, 0.08%)</title><rect x="45.2875%" y="469" width="0.0766%" height="15" fill="rgb(218,58,49)" fg:x="7097" fg:w="12"/><text x="45.5375%" y="479.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::Call (12 samples, 0.08%)</title><rect x="45.2875%" y="453" width="0.0766%" height="15" fill="rgb(219,179,14)" fg:x="7097" fg:w="12"/><text x="45.5375%" y="463.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (12 samples, 0.08%)</title><rect x="45.2875%" y="437" width="0.0766%" height="15" fill="rgb(223,72,1)" fg:x="7097" fg:w="12"/><text x="45.5375%" y="447.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::support::MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const v8::function::FunctionCallbackInfo)&gt;::mapping::_{{closure}} (12 samples, 0.08%)</title><rect x="45.2875%" y="421" width="0.0766%" height="15" fill="rgb(238,126,10)" fg:x="7097" fg:w="12"/><text x="45.5375%" y="431.50"></text></g><g><title>deno`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (3 samples, 0.02%)</title><rect x="45.5363%" y="421" width="0.0191%" height="15" fill="rgb(224,206,38)" fg:x="7136" fg:w="3"/><text x="45.7863%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="45.5427%" y="405" width="0.0128%" height="15" fill="rgb(212,201,54)" fg:x="7137" fg:w="2"/><text x="45.7927%" y="415.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="45.5874%" y="357" width="0.0128%" height="15" fill="rgb(218,154,48)" fg:x="7144" fg:w="2"/><text x="45.8374%" y="367.50"></text></g><g><title>deno`&lt;v8::scope::CallbackScope as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.04%)</title><rect x="45.5746%" y="405" width="0.0447%" height="15" fill="rgb(232,93,24)" fg:x="7142" fg:w="7"/><text x="45.8246%" y="415.50"></text></g><g><title>deno`&lt;v8::scope::CallbackScope as core::convert::AsMut&lt;v8::scope::HandleScope&gt;&gt;::as_mut (6 samples, 0.04%)</title><rect x="45.5810%" y="389" width="0.0383%" height="15" fill="rgb(245,30,21)" fg:x="7143" fg:w="6"/><text x="45.8310%" y="399.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (6 samples, 0.04%)</title><rect x="45.5810%" y="373" width="0.0383%" height="15" fill="rgb(242,148,29)" fg:x="7143" fg:w="6"/><text x="45.8310%" y="383.50"></text></g><g><title>deno`core::alloc::layout::size_align (2 samples, 0.01%)</title><rect x="45.6065%" y="357" width="0.0128%" height="15" fill="rgb(244,153,54)" fg:x="7147" fg:w="2"/><text x="45.8565%" y="367.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="45.6512%" y="389" width="0.0128%" height="15" fill="rgb(252,87,22)" fg:x="7154" fg:w="2"/><text x="45.9012%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="45.7278%" y="341" width="0.0128%" height="15" fill="rgb(210,51,29)" fg:x="7166" fg:w="2"/><text x="45.9778%" y="351.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (9 samples, 0.06%)</title><rect x="45.7278%" y="357" width="0.0574%" height="15" fill="rgb(242,136,47)" fg:x="7166" fg:w="9"/><text x="45.9778%" y="367.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (6 samples, 0.04%)</title><rect x="45.7469%" y="341" width="0.0383%" height="15" fill="rgb(238,68,4)" fg:x="7169" fg:w="6"/><text x="45.9969%" y="351.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="45.7597%" y="325" width="0.0255%" height="15" fill="rgb(242,161,30)" fg:x="7171" fg:w="4"/><text x="46.0097%" y="335.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="45.7724%" y="309" width="0.0128%" height="15" fill="rgb(218,58,44)" fg:x="7173" fg:w="2"/><text x="46.0224%" y="319.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::strong (2 samples, 0.01%)</title><rect x="45.7852%" y="357" width="0.0128%" height="15" fill="rgb(252,125,32)" fg:x="7175" fg:w="2"/><text x="46.0352%" y="367.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.08%)</title><rect x="45.7278%" y="373" width="0.0766%" height="15" fill="rgb(219,178,0)" fg:x="7166" fg:w="12"/><text x="45.9778%" y="383.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="45.8171%" y="325" width="0.0128%" height="15" fill="rgb(213,152,7)" fg:x="7180" fg:w="2"/><text x="46.0671%" y="335.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="45.8107%" y="373" width="0.0255%" height="15" fill="rgb(249,109,34)" fg:x="7179" fg:w="4"/><text x="46.0607%" y="383.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsRef&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_ref (4 samples, 0.03%)</title><rect x="45.8107%" y="357" width="0.0255%" height="15" fill="rgb(232,96,21)" fg:x="7179" fg:w="4"/><text x="46.0607%" y="367.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_ref (3 samples, 0.02%)</title><rect x="45.8171%" y="341" width="0.0191%" height="15" fill="rgb(228,27,39)" fg:x="7180" fg:w="3"/><text x="46.0671%" y="351.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="45.8490%" y="325" width="0.0191%" height="15" fill="rgb(211,182,52)" fg:x="7185" fg:w="3"/><text x="46.0990%" y="335.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="45.8363%" y="373" width="0.0383%" height="15" fill="rgb(234,178,38)" fg:x="7183" fg:w="6"/><text x="46.0863%" y="383.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;C&gt; as core::convert::AsRef&lt;v8::isolate::Isolate&gt;&gt;::as_ref (6 samples, 0.04%)</title><rect x="45.8363%" y="357" width="0.0383%" height="15" fill="rgb(221,111,3)" fg:x="7183" fg:w="6"/><text x="46.0863%" y="367.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get (5 samples, 0.03%)</title><rect x="45.8426%" y="341" width="0.0319%" height="15" fill="rgb(228,175,21)" fg:x="7184" fg:w="5"/><text x="46.0926%" y="351.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (3 samples, 0.02%)</title><rect x="45.8937%" y="341" width="0.0191%" height="15" fill="rgb(228,174,43)" fg:x="7192" fg:w="3"/><text x="46.1437%" y="351.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (7 samples, 0.04%)</title><rect x="45.8809%" y="373" width="0.0447%" height="15" fill="rgb(211,191,0)" fg:x="7190" fg:w="7"/><text x="46.1309%" y="383.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="45.8873%" y="357" width="0.0383%" height="15" fill="rgb(253,117,3)" fg:x="7191" fg:w="6"/><text x="46.1373%" y="367.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="45.9128%" y="341" width="0.0128%" height="15" fill="rgb(241,127,19)" fg:x="7195" fg:w="2"/><text x="46.1628%" y="351.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="45.9256%" y="373" width="0.0128%" height="15" fill="rgb(218,103,12)" fg:x="7197" fg:w="2"/><text x="46.1756%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::ops::OpState&gt;&gt; (2 samples, 0.01%)</title><rect x="45.9384%" y="373" width="0.0128%" height="15" fill="rgb(236,214,43)" fg:x="7199" fg:w="2"/><text x="46.1884%" y="383.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (2 samples, 0.01%)</title><rect x="45.9384%" y="357" width="0.0128%" height="15" fill="rgb(244,144,19)" fg:x="7199" fg:w="2"/><text x="46.1884%" y="367.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::map (3 samples, 0.02%)</title><rect x="45.9511%" y="373" width="0.0191%" height="15" fill="rgb(246,188,10)" fg:x="7201" fg:w="3"/><text x="46.2011%" y="383.50"></text></g><g><title>deno`deno_flash::op_next::v8_func::_{{closure}} (2 samples, 0.01%)</title><rect x="45.9575%" y="357" width="0.0128%" height="15" fill="rgb(212,193,33)" fg:x="7202" fg:w="2"/><text x="46.2075%" y="367.50"></text></g><g><title>deno`&lt;v8::handle::Local&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="45.9575%" y="341" width="0.0128%" height="15" fill="rgb(241,51,29)" fg:x="7202" fg:w="2"/><text x="46.2075%" y="351.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="45.9575%" y="325" width="0.0128%" height="15" fill="rgb(211,58,19)" fg:x="7202" fg:w="2"/><text x="46.2075%" y="335.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="46.0022%" y="325" width="0.0128%" height="15" fill="rgb(229,111,26)" fg:x="7209" fg:w="2"/><text x="46.2522%" y="335.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::ops_metrics::OpMetrics&gt;&gt; (4 samples, 0.03%)</title><rect x="45.9958%" y="357" width="0.0255%" height="15" fill="rgb(213,115,40)" fg:x="7208" fg:w="4"/><text x="46.2458%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.02%)</title><rect x="46.0022%" y="341" width="0.0191%" height="15" fill="rgb(209,56,44)" fg:x="7209" fg:w="3"/><text x="46.2522%" y="351.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.01%)</title><rect x="46.0213%" y="341" width="0.0128%" height="15" fill="rgb(230,108,32)" fg:x="7212" fg:w="2"/><text x="46.2713%" y="351.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.01%)</title><rect x="46.0213%" y="325" width="0.0128%" height="15" fill="rgb(216,165,31)" fg:x="7212" fg:w="2"/><text x="46.2713%" y="335.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (2 samples, 0.01%)</title><rect x="46.0213%" y="309" width="0.0128%" height="15" fill="rgb(218,122,21)" fg:x="7212" fg:w="2"/><text x="46.2713%" y="319.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="46.0213%" y="293" width="0.0128%" height="15" fill="rgb(223,224,47)" fg:x="7212" fg:w="2"/><text x="46.2713%" y="303.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="46.0213%" y="277" width="0.0128%" height="15" fill="rgb(238,102,44)" fg:x="7212" fg:w="2"/><text x="46.2713%" y="287.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.02%)</title><rect x="46.0341%" y="293" width="0.0191%" height="15" fill="rgb(236,46,40)" fg:x="7214" fg:w="3"/><text x="46.2841%" y="303.50"></text></g><g><title>deno`deno_core::ops_metrics::OpsTracker::track_async (13 samples, 0.08%)</title><rect x="45.9766%" y="373" width="0.0830%" height="15" fill="rgb(247,202,50)" fg:x="7205" fg:w="13"/><text x="46.2266%" y="383.50"></text></g><g><title>deno`deno_core::ops_metrics::OpsTracker::metrics_mut (6 samples, 0.04%)</title><rect x="46.0213%" y="357" width="0.0383%" height="15" fill="rgb(209,99,20)" fg:x="7212" fg:w="6"/><text x="46.2713%" y="367.50"></text></g><g><title>deno`core::cell::RefMut&lt;T&gt;::map (4 samples, 0.03%)</title><rect x="46.0341%" y="341" width="0.0255%" height="15" fill="rgb(252,27,34)" fg:x="7214" fg:w="4"/><text x="46.2841%" y="351.50"></text></g><g><title>deno`deno_core::ops_metrics::OpsTracker::metrics_mut::_{{closure}} (4 samples, 0.03%)</title><rect x="46.0341%" y="325" width="0.0255%" height="15" fill="rgb(215,206,23)" fg:x="7214" fg:w="4"/><text x="46.2841%" y="335.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.03%)</title><rect x="46.0341%" y="309" width="0.0255%" height="15" fill="rgb(212,135,36)" fg:x="7214" fg:w="4"/><text x="46.2841%" y="319.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::runtime::JsRuntimeState&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="46.0915%" y="357" width="0.0255%" height="15" fill="rgb(240,189,1)" fg:x="7223" fg:w="4"/><text x="46.3415%" y="367.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="46.0979%" y="341" width="0.0191%" height="15" fill="rgb(242,56,20)" fg:x="7224" fg:w="3"/><text x="46.3479%" y="351.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="46.1234%" y="325" width="0.0191%" height="15" fill="rgb(247,132,33)" fg:x="7228" fg:w="3"/><text x="46.3734%" y="335.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="46.1234%" y="309" width="0.0191%" height="15" fill="rgb(208,149,11)" fg:x="7228" fg:w="3"/><text x="46.3734%" y="319.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="46.1298%" y="293" width="0.0128%" height="15" fill="rgb(211,33,11)" fg:x="7229" fg:w="2"/><text x="46.3798%" y="303.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::runtime::JsRuntimeState&gt;&gt; (5 samples, 0.03%)</title><rect x="46.1170%" y="357" width="0.0319%" height="15" fill="rgb(221,29,38)" fg:x="7227" fg:w="5"/><text x="46.3670%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (4 samples, 0.03%)</title><rect x="46.1234%" y="341" width="0.0255%" height="15" fill="rgb(206,182,49)" fg:x="7228" fg:w="4"/><text x="46.3734%" y="351.50"></text></g><g><title>deno`core::sync::atomic::AtomicBool::new (2 samples, 0.01%)</title><rect x="46.1553%" y="357" width="0.0128%" height="15" fill="rgb(216,140,1)" fg:x="7233" fg:w="2"/><text x="46.4053%" y="367.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="46.2255%" y="293" width="0.0128%" height="15" fill="rgb(232,57,40)" fg:x="7244" fg:w="2"/><text x="46.4755%" y="303.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="46.2829%" y="277" width="0.0255%" height="15" fill="rgb(224,186,18)" fg:x="7253" fg:w="4"/><text x="46.5329%" y="287.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.03%)</title><rect x="46.2829%" y="261" width="0.0255%" height="15" fill="rgb(215,121,11)" fg:x="7253" fg:w="4"/><text x="46.5329%" y="271.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="46.2893%" y="245" width="0.0191%" height="15" fill="rgb(245,147,10)" fg:x="7254" fg:w="3"/><text x="46.5393%" y="255.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="46.2893%" y="229" width="0.0191%" height="15" fill="rgb(238,153,13)" fg:x="7254" fg:w="3"/><text x="46.5393%" y="239.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="46.4616%" y="149" width="0.0128%" height="15" fill="rgb(233,108,0)" fg:x="7281" fg:w="2"/><text x="46.7116%" y="159.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="46.4552%" y="165" width="0.0255%" height="15" fill="rgb(212,157,17)" fg:x="7280" fg:w="4"/><text x="46.7052%" y="175.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::coop::RestoreOnPending&gt; (5 samples, 0.03%)</title><rect x="46.4808%" y="165" width="0.0319%" height="15" fill="rgb(225,213,38)" fg:x="7284" fg:w="5"/><text x="46.7308%" y="175.50"></text></g><g><title>deno`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="46.4935%" y="149" width="0.0191%" height="15" fill="rgb(248,16,11)" fg:x="7286" fg:w="3"/><text x="46.7435%" y="159.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.01%)</title><rect x="46.5190%" y="149" width="0.0128%" height="15" fill="rgb(241,33,4)" fg:x="7290" fg:w="2"/><text x="46.7690%" y="159.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="46.5637%" y="117" width="0.0128%" height="15" fill="rgb(222,26,43)" fg:x="7297" fg:w="2"/><text x="46.8137%" y="127.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="46.5765%" y="117" width="0.0128%" height="15" fill="rgb(243,29,36)" fg:x="7299" fg:w="2"/><text x="46.8265%" y="127.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (6 samples, 0.04%)</title><rect x="46.6339%" y="85" width="0.0383%" height="15" fill="rgb(241,9,27)" fg:x="7308" fg:w="6"/><text x="46.8839%" y="95.50"></text></g><g><title>deno`core::ptr::read (5 samples, 0.03%)</title><rect x="46.6403%" y="69" width="0.0319%" height="15" fill="rgb(205,117,26)" fg:x="7309" fg:w="5"/><text x="46.8903%" y="79.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (9 samples, 0.06%)</title><rect x="46.6339%" y="101" width="0.0574%" height="15" fill="rgb(209,80,39)" fg:x="7308" fg:w="9"/><text x="46.8839%" y="111.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="46.6722%" y="85" width="0.0191%" height="15" fill="rgb(239,155,6)" fg:x="7314" fg:w="3"/><text x="46.9222%" y="95.50"></text></g><g><title>deno`core::mem::drop (5 samples, 0.03%)</title><rect x="46.6913%" y="101" width="0.0319%" height="15" fill="rgb(212,104,12)" fg:x="7317" fg:w="5"/><text x="46.9413%" y="111.50"></text></g><g><title>deno`tokio::coop::poll_proceed::_{{closure}} (21 samples, 0.13%)</title><rect x="46.5956%" y="117" width="0.1340%" height="15" fill="rgb(234,204,3)" fg:x="7302" fg:w="21"/><text x="46.8456%" y="127.50"></text></g><g><title>deno`tokio::coop::poll_proceed (38 samples, 0.24%)</title><rect x="46.5127%" y="165" width="0.2425%" height="15" fill="rgb(251,218,7)" fg:x="7289" fg:w="38"/><text x="46.7627%" y="175.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (35 samples, 0.22%)</title><rect x="46.5318%" y="149" width="0.2233%" height="15" fill="rgb(221,81,32)" fg:x="7292" fg:w="35"/><text x="46.7818%" y="159.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (33 samples, 0.21%)</title><rect x="46.5446%" y="133" width="0.2106%" height="15" fill="rgb(214,152,26)" fg:x="7294" fg:w="33"/><text x="46.7946%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.03%)</title><rect x="46.7296%" y="117" width="0.0255%" height="15" fill="rgb(223,22,3)" fg:x="7323" fg:w="4"/><text x="46.9796%" y="127.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.01%)</title><rect x="46.7998%" y="101" width="0.0128%" height="15" fill="rgb(207,174,7)" fg:x="7334" fg:w="2"/><text x="47.0498%" y="111.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange_weak (3 samples, 0.02%)</title><rect x="46.8253%" y="53" width="0.0191%" height="15" fill="rgb(224,19,52)" fg:x="7338" fg:w="3"/><text x="47.0753%" y="63.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.02%)</title><rect x="46.8253%" y="37" width="0.0191%" height="15" fill="rgb(228,24,14)" fg:x="7338" fg:w="3"/><text x="47.0753%" y="47.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.04%)</title><rect x="46.8126%" y="69" width="0.0383%" height="15" fill="rgb(230,153,43)" fg:x="7336" fg:w="6"/><text x="47.0626%" y="79.50"></text></g><g><title>deno`tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (8 samples, 0.05%)</title><rect x="46.8126%" y="101" width="0.0510%" height="15" fill="rgb(231,106,12)" fg:x="7336" fg:w="8"/><text x="47.0626%" y="111.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::lock (8 samples, 0.05%)</title><rect x="46.8126%" y="85" width="0.0510%" height="15" fill="rgb(215,92,2)" fg:x="7336" fg:w="8"/><text x="47.0626%" y="95.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::sync::batch_semaphore::Waitlist&gt;&gt; (3 samples, 0.02%)</title><rect x="46.8955%" y="69" width="0.0191%" height="15" fill="rgb(249,143,25)" fg:x="7349" fg:w="3"/><text x="47.1455%" y="79.50"></text></g><g><title>deno`core::mem::drop (6 samples, 0.04%)</title><rect x="46.8955%" y="85" width="0.0383%" height="15" fill="rgb(252,7,35)" fg:x="7349" fg:w="6"/><text x="47.1455%" y="95.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (3 samples, 0.02%)</title><rect x="46.9147%" y="69" width="0.0191%" height="15" fill="rgb(216,69,40)" fg:x="7352" fg:w="3"/><text x="47.1647%" y="79.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap_or_else (3 samples, 0.02%)</title><rect x="46.9402%" y="85" width="0.0191%" height="15" fill="rgb(240,36,33)" fg:x="7356" fg:w="3"/><text x="47.1902%" y="95.50"></text></g><g><title>deno`&lt;tokio::util::wake_list::WakeList as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="46.9594%" y="69" width="0.0255%" height="15" fill="rgb(231,128,14)" fg:x="7359" fg:w="4"/><text x="47.2094%" y="79.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts_mut (3 samples, 0.02%)</title><rect x="46.9657%" y="53" width="0.0191%" height="15" fill="rgb(245,143,14)" fg:x="7360" fg:w="3"/><text x="47.2157%" y="63.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::util::wake_list::WakeList&gt; (5 samples, 0.03%)</title><rect x="46.9594%" y="85" width="0.0319%" height="15" fill="rgb(222,130,28)" fg:x="7359" fg:w="5"/><text x="47.2094%" y="95.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.01%)</title><rect x="46.9913%" y="85" width="0.0128%" height="15" fill="rgb(212,10,48)" fg:x="7364" fg:w="2"/><text x="47.2413%" y="95.50"></text></g><g><title>deno`core::sync::atomic::atomic_add (5 samples, 0.03%)</title><rect x="47.0040%" y="85" width="0.0319%" height="15" fill="rgb(254,118,45)" fg:x="7366" fg:w="5"/><text x="47.2540%" y="95.50"></text></g><g><title>deno`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::last (2 samples, 0.01%)</title><rect x="47.0359%" y="85" width="0.0128%" height="15" fill="rgb(228,6,45)" fg:x="7371" fg:w="2"/><text x="47.2859%" y="95.50"></text></g><g><title>deno`tokio::util::wake_list::WakeList::new (2 samples, 0.01%)</title><rect x="47.0487%" y="85" width="0.0128%" height="15" fill="rgb(241,18,35)" fg:x="7373" fg:w="2"/><text x="47.2987%" y="95.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (33 samples, 0.21%)</title><rect x="46.8636%" y="101" width="0.2106%" height="15" fill="rgb(227,214,53)" fg:x="7344" fg:w="33"/><text x="47.1136%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="47.0615%" y="85" width="0.0128%" height="15" fill="rgb(224,107,51)" fg:x="7375" fg:w="2"/><text x="47.3115%" y="95.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (48 samples, 0.31%)</title><rect x="46.7807%" y="133" width="0.3063%" height="15" fill="rgb(248,60,28)" fg:x="7331" fg:w="48"/><text x="47.0307%" y="143.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::release (47 samples, 0.30%)</title><rect x="46.7871%" y="117" width="0.2999%" height="15" fill="rgb(249,101,23)" fg:x="7332" fg:w="47"/><text x="47.0371%" y="127.50"></text></g><g><title>deno`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::last (2 samples, 0.01%)</title><rect x="47.0742%" y="101" width="0.0128%" height="15" fill="rgb(228,51,19)" fg:x="7377" fg:w="2"/><text x="47.3242%" y="111.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="47.0997%" y="117" width="0.0128%" height="15" fill="rgb(213,20,6)" fg:x="7381" fg:w="2"/><text x="47.3497%" y="127.50"></text></g><g><title>deno`tokio::coop::RestoreOnPending::made_progress (4 samples, 0.03%)</title><rect x="47.0934%" y="133" width="0.0255%" height="15" fill="rgb(212,124,10)" fg:x="7380" fg:w="4"/><text x="47.3434%" y="143.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::release (2 samples, 0.01%)</title><rect x="47.1189%" y="133" width="0.0128%" height="15" fill="rgb(248,3,40)" fg:x="7384" fg:w="2"/><text x="47.3689%" y="143.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (4 samples, 0.03%)</title><rect x="47.1699%" y="101" width="0.0255%" height="15" fill="rgb(223,178,23)" fg:x="7392" fg:w="4"/><text x="47.4199%" y="111.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::read::_{{closure}} (4 samples, 0.03%)</title><rect x="47.1699%" y="85" width="0.0255%" height="15" fill="rgb(240,132,45)" fg:x="7392" fg:w="4"/><text x="47.4199%" y="95.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::read (9 samples, 0.06%)</title><rect x="47.1444%" y="117" width="0.0574%" height="15" fill="rgb(245,164,36)" fg:x="7388" fg:w="9"/><text x="47.3944%" y="127.50"></text></g><g><title>deno`tokio::sync::mpsc::block::is_ready (4 samples, 0.03%)</title><rect x="47.2018%" y="117" width="0.0255%" height="15" fill="rgb(231,188,53)" fg:x="7397" fg:w="4"/><text x="47.4518%" y="127.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (5 samples, 0.03%)</title><rect x="47.2274%" y="117" width="0.0319%" height="15" fill="rgb(237,198,39)" fg:x="7401" fg:w="5"/><text x="47.4774%" y="127.50"></text></g><g><title>deno`core::cmp::PartialEq::ne (3 samples, 0.02%)</title><rect x="47.2401%" y="101" width="0.0191%" height="15" fill="rgb(223,120,35)" fg:x="7403" fg:w="3"/><text x="47.4901%" y="111.50"></text></g><g><title>deno`&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="47.2465%" y="85" width="0.0128%" height="15" fill="rgb(253,107,49)" fg:x="7404" fg:w="2"/><text x="47.4965%" y="95.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (4 samples, 0.03%)</title><rect x="47.2593%" y="117" width="0.0255%" height="15" fill="rgb(216,44,31)" fg:x="7406" fg:w="4"/><text x="47.5093%" y="127.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (2 samples, 0.01%)</title><rect x="47.2720%" y="101" width="0.0128%" height="15" fill="rgb(253,87,21)" fg:x="7408" fg:w="2"/><text x="47.5220%" y="111.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (25 samples, 0.16%)</title><rect x="47.1316%" y="133" width="0.1595%" height="15" fill="rgb(226,18,2)" fg:x="7386" fg:w="25"/><text x="47.3816%" y="143.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::_{{closure}} (84 samples, 0.54%)</title><rect x="46.7615%" y="149" width="0.5360%" height="15" fill="rgb(216,8,46)" fg:x="7328" fg:w="84"/><text x="47.0115%" y="159.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::_{{closure}}::_{{closure}} (135 samples, 0.86%)</title><rect x="46.4489%" y="197" width="0.8615%" height="15" fill="rgb(226,140,39)" fg:x="7279" fg:w="135"/><text x="46.6989%" y="207.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (135 samples, 0.86%)</title><rect x="46.4489%" y="181" width="0.8615%" height="15" fill="rgb(221,194,54)" fg:x="7279" fg:w="135"/><text x="46.6989%" y="191.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (87 samples, 0.56%)</title><rect x="46.7552%" y="165" width="0.5552%" height="15" fill="rgb(213,92,11)" fg:x="7327" fg:w="87"/><text x="47.0052%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="47.2976%" y="149" width="0.0128%" height="15" fill="rgb(229,162,46)" fg:x="7412" fg:w="2"/><text x="47.5476%" y="159.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (145 samples, 0.93%)</title><rect x="46.3978%" y="245" width="0.9253%" height="15" fill="rgb(214,111,36)" fg:x="7271" fg:w="145"/><text x="46.6478%" y="255.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::_{{closure}} (141 samples, 0.90%)</title><rect x="46.4233%" y="229" width="0.8998%" height="15" fill="rgb(207,6,21)" fg:x="7275" fg:w="141"/><text x="46.6733%" y="239.50"></text></g><g><title>deno`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (139 samples, 0.89%)</title><rect x="46.4361%" y="213" width="0.8870%" height="15" fill="rgb(213,127,38)" fg:x="7277" fg:w="139"/><text x="46.6861%" y="223.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (2 samples, 0.01%)</title><rect x="47.3103%" y="197" width="0.0128%" height="15" fill="rgb(238,118,32)" fg:x="7414" fg:w="2"/><text x="47.5603%" y="207.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (3 samples, 0.02%)</title><rect x="47.3295%" y="213" width="0.0191%" height="15" fill="rgb(240,139,39)" fg:x="7417" fg:w="3"/><text x="47.5795%" y="223.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="47.3358%" y="197" width="0.0128%" height="15" fill="rgb(235,10,37)" fg:x="7418" fg:w="2"/><text x="47.5858%" y="207.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.03%)</title><rect x="47.3295%" y="229" width="0.0255%" height="15" fill="rgb(249,171,38)" fg:x="7417" fg:w="4"/><text x="47.5795%" y="239.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (6 samples, 0.04%)</title><rect x="47.3231%" y="245" width="0.0383%" height="15" fill="rgb(242,144,32)" fg:x="7416" fg:w="6"/><text x="47.5731%" y="255.50"></text></g><g><title>deno`core::future::get_context (2 samples, 0.01%)</title><rect x="47.3677%" y="245" width="0.0128%" height="15" fill="rgb(217,117,21)" fg:x="7423" fg:w="2"/><text x="47.6177%" y="255.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::dec_strong (3 samples, 0.02%)</title><rect x="47.3869%" y="213" width="0.0191%" height="15" fill="rgb(249,87,1)" fg:x="7426" fg:w="3"/><text x="47.6369%" y="223.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="47.3933%" y="197" width="0.0128%" height="15" fill="rgb(248,196,48)" fg:x="7427" fg:w="2"/><text x="47.6433%" y="207.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="47.3805%" y="229" width="0.0319%" height="15" fill="rgb(251,206,33)" fg:x="7425" fg:w="5"/><text x="47.6305%" y="239.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (7 samples, 0.04%)</title><rect x="47.3805%" y="245" width="0.0447%" height="15" fill="rgb(232,141,28)" fg:x="7425" fg:w="7"/><text x="47.6305%" y="255.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="47.4124%" y="229" width="0.0128%" height="15" fill="rgb(209,167,14)" fg:x="7430" fg:w="2"/><text x="47.6624%" y="239.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::ops::OpState&gt;&gt; (4 samples, 0.03%)</title><rect x="47.4252%" y="245" width="0.0255%" height="15" fill="rgb(225,11,50)" fg:x="7432" fg:w="4"/><text x="47.6752%" y="255.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (4 samples, 0.03%)</title><rect x="47.4252%" y="229" width="0.0255%" height="15" fill="rgb(209,50,20)" fg:x="7432" fg:w="4"/><text x="47.6752%" y="239.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="47.4252%" y="213" width="0.0255%" height="15" fill="rgb(212,17,46)" fg:x="7432" fg:w="4"/><text x="47.6752%" y="223.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="47.4316%" y="197" width="0.0191%" height="15" fill="rgb(216,101,39)" fg:x="7433" fg:w="3"/><text x="47.6816%" y="207.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="47.4316%" y="181" width="0.0191%" height="15" fill="rgb(212,228,48)" fg:x="7433" fg:w="3"/><text x="47.6816%" y="191.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="47.4379%" y="165" width="0.0128%" height="15" fill="rgb(250,6,50)" fg:x="7434" fg:w="2"/><text x="47.6879%" y="175.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="47.5145%" y="149" width="0.0128%" height="15" fill="rgb(250,160,48)" fg:x="7446" fg:w="2"/><text x="47.7645%" y="159.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.03%)</title><rect x="47.5018%" y="165" width="0.0319%" height="15" fill="rgb(244,216,33)" fg:x="7444" fg:w="5"/><text x="47.7518%" y="175.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.07%)</title><rect x="47.4890%" y="181" width="0.0702%" height="15" fill="rgb(207,157,5)" fg:x="7442" fg:w="11"/><text x="47.7390%" y="191.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts_mut (3 samples, 0.02%)</title><rect x="47.5400%" y="165" width="0.0191%" height="15" fill="rgb(228,199,8)" fg:x="7450" fg:w="3"/><text x="47.7900%" y="175.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="47.5656%" y="149" width="0.0128%" height="15" fill="rgb(227,80,20)" fg:x="7454" fg:w="2"/><text x="47.8156%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.01%)</title><rect x="47.6932%" y="101" width="0.0128%" height="15" fill="rgb(222,9,33)" fg:x="7474" fg:w="2"/><text x="47.9432%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.06%)</title><rect x="47.6613%" y="117" width="0.0574%" height="15" fill="rgb(239,44,28)" fg:x="7469" fg:w="9"/><text x="47.9113%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="47.7060%" y="101" width="0.0128%" height="15" fill="rgb(249,187,43)" fg:x="7476" fg:w="2"/><text x="47.9560%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.02%)</title><rect x="47.8081%" y="101" width="0.0191%" height="15" fill="rgb(216,141,28)" fg:x="7492" fg:w="3"/><text x="48.0581%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.01%)</title><rect x="47.8272%" y="101" width="0.0128%" height="15" fill="rgb(230,154,53)" fg:x="7495" fg:w="2"/><text x="48.0772%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.14%)</title><rect x="47.7187%" y="117" width="0.1404%" height="15" fill="rgb(227,82,4)" fg:x="7478" fg:w="22"/><text x="47.9687%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="47.8400%" y="101" width="0.0191%" height="15" fill="rgb(220,107,16)" fg:x="7497" fg:w="3"/><text x="48.0900%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="47.8591%" y="117" width="0.0128%" height="15" fill="rgb(207,187,2)" fg:x="7500" fg:w="2"/><text x="48.1091%" y="127.50"></text></g><g><title>deno`alloc::alloc::dealloc (47 samples, 0.30%)</title><rect x="47.6166%" y="133" width="0.2999%" height="15" fill="rgb(210,162,52)" fg:x="7462" fg:w="47"/><text x="47.8666%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.03%)</title><rect x="47.8846%" y="117" width="0.0319%" height="15" fill="rgb(217,216,49)" fg:x="7504" fg:w="5"/><text x="48.1346%" y="127.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (58 samples, 0.37%)</title><rect x="47.5783%" y="149" width="0.3701%" height="15" fill="rgb(218,146,49)" fg:x="7456" fg:w="58"/><text x="47.8283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="47.9293%" y="133" width="0.0191%" height="15" fill="rgb(216,55,40)" fg:x="7511" fg:w="3"/><text x="48.1793%" y="143.50"></text></g><g><title>deno`&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (5 samples, 0.03%)</title><rect x="48.0059%" y="117" width="0.0319%" height="15" fill="rgb(208,196,21)" fg:x="7523" fg:w="5"/><text x="48.2559%" y="127.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ptr (3 samples, 0.02%)</title><rect x="48.0186%" y="101" width="0.0191%" height="15" fill="rgb(242,117,42)" fg:x="7525" fg:w="3"/><text x="48.2686%" y="111.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (9 samples, 0.06%)</title><rect x="47.9867%" y="133" width="0.0574%" height="15" fill="rgb(210,11,23)" fg:x="7520" fg:w="9"/><text x="48.2367%" y="143.50"></text></g><g><title>deno`&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (4 samples, 0.03%)</title><rect x="48.0442%" y="133" width="0.0255%" height="15" fill="rgb(217,110,2)" fg:x="7529" fg:w="4"/><text x="48.2942%" y="143.50"></text></g><g><title>deno`&lt;core::ptr::unique::Unique&lt;T&gt; as core::convert::From&lt;core::ptr::non_null::NonNull&lt;T&gt;&gt;&gt;::from (2 samples, 0.01%)</title><rect x="48.0697%" y="133" width="0.0128%" height="15" fill="rgb(229,77,54)" fg:x="7533" fg:w="2"/><text x="48.3197%" y="143.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="48.0824%" y="133" width="0.0128%" height="15" fill="rgb(218,53,16)" fg:x="7535" fg:w="2"/><text x="48.3324%" y="143.50"></text></g><g><title>deno`core::alloc::layout::Layout::array (5 samples, 0.03%)</title><rect x="48.0952%" y="133" width="0.0319%" height="15" fill="rgb(215,38,13)" fg:x="7537" fg:w="5"/><text x="48.3452%" y="143.50"></text></g><g><title>deno`core::num::_&lt;impl usize&gt;::checked_mul (5 samples, 0.03%)</title><rect x="48.1271%" y="133" width="0.0319%" height="15" fill="rgb(235,42,18)" fg:x="7542" fg:w="5"/><text x="48.3771%" y="143.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (3 samples, 0.02%)</title><rect x="48.1590%" y="133" width="0.0191%" height="15" fill="rgb(219,66,54)" fg:x="7547" fg:w="3"/><text x="48.4090%" y="143.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="48.1782%" y="117" width="0.0128%" height="15" fill="rgb(222,205,4)" fg:x="7550" fg:w="2"/><text x="48.4282%" y="127.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (2 samples, 0.01%)</title><rect x="48.1909%" y="117" width="0.0128%" height="15" fill="rgb(227,213,46)" fg:x="7552" fg:w="2"/><text x="48.4409%" y="127.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::cast (5 samples, 0.03%)</title><rect x="48.1782%" y="133" width="0.0319%" height="15" fill="rgb(250,145,42)" fg:x="7550" fg:w="5"/><text x="48.4282%" y="143.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (43 samples, 0.27%)</title><rect x="47.9484%" y="149" width="0.2744%" height="15" fill="rgb(219,15,2)" fg:x="7514" fg:w="43"/><text x="48.1984%" y="159.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::unwrap_unchecked (2 samples, 0.01%)</title><rect x="48.2101%" y="133" width="0.0128%" height="15" fill="rgb(231,181,52)" fg:x="7555" fg:w="2"/><text x="48.4601%" y="143.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_flash::NextRequest&gt;&gt; (124 samples, 0.79%)</title><rect x="47.4507%" y="245" width="0.7913%" height="15" fill="rgb(235,1,42)" fg:x="7436" fg:w="124"/><text x="47.7007%" y="255.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_flash::NextRequest&gt; (121 samples, 0.77%)</title><rect x="47.4698%" y="229" width="0.7721%" height="15" fill="rgb(249,88,27)" fg:x="7439" fg:w="121"/><text x="47.7198%" y="239.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_flash::InnerRequest&gt; (120 samples, 0.77%)</title><rect x="47.4762%" y="213" width="0.7657%" height="15" fill="rgb(235,145,16)" fg:x="7440" fg:w="120"/><text x="47.7262%" y="223.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;httparse::Header&gt;&gt; (120 samples, 0.77%)</title><rect x="47.4762%" y="197" width="0.7657%" height="15" fill="rgb(237,114,19)" fg:x="7440" fg:w="120"/><text x="47.7262%" y="207.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;httparse::Header&gt;&gt; (107 samples, 0.68%)</title><rect x="47.5592%" y="181" width="0.6828%" height="15" fill="rgb(238,51,50)" fg:x="7453" fg:w="107"/><text x="47.8092%" y="191.50"></text></g><g><title>deno`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (106 samples, 0.68%)</title><rect x="47.5656%" y="165" width="0.6764%" height="15" fill="rgb(205,194,25)" fg:x="7454" fg:w="106"/><text x="47.8156%" y="175.50"></text></g><g><title>deno`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (2 samples, 0.01%)</title><rect x="48.2611%" y="197" width="0.0128%" height="15" fill="rgb(215,203,17)" fg:x="7563" fg:w="2"/><text x="48.5111%" y="207.50"></text></g><g><title>deno`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (2 samples, 0.01%)</title><rect x="48.2803%" y="181" width="0.0128%" height="15" fill="rgb(233,112,49)" fg:x="7566" fg:w="2"/><text x="48.5303%" y="191.50"></text></g><g><title>deno`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (4 samples, 0.03%)</title><rect x="48.2994%" y="181" width="0.0255%" height="15" fill="rgb(241,130,26)" fg:x="7569" fg:w="4"/><text x="48.5494%" y="191.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (3 samples, 0.02%)</title><rect x="48.4143%" y="117" width="0.0191%" height="15" fill="rgb(252,223,19)" fg:x="7587" fg:w="3"/><text x="48.6643%" y="127.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.08%)</title><rect x="48.3760%" y="133" width="0.0766%" height="15" fill="rgb(211,95,25)" fg:x="7581" fg:w="12"/><text x="48.6260%" y="143.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="48.4398%" y="117" width="0.0128%" height="15" fill="rgb(251,182,27)" fg:x="7591" fg:w="2"/><text x="48.6898%" y="127.50"></text></g><g><title>deno`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.09%)</title><rect x="48.3696%" y="149" width="0.0893%" height="15" fill="rgb(238,24,4)" fg:x="7580" fg:w="14"/><text x="48.6196%" y="159.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="48.4589%" y="149" width="0.0128%" height="15" fill="rgb(224,220,25)" fg:x="7594" fg:w="2"/><text x="48.7089%" y="159.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="48.4717%" y="149" width="0.0191%" height="15" fill="rgb(239,133,26)" fg:x="7596" fg:w="3"/><text x="48.7217%" y="159.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_leaf (2 samples, 0.01%)</title><rect x="48.4972%" y="133" width="0.0128%" height="15" fill="rgb(211,94,48)" fg:x="7600" fg:w="2"/><text x="48.7472%" y="143.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="48.5164%" y="101" width="0.0255%" height="15" fill="rgb(239,87,6)" fg:x="7603" fg:w="4"/><text x="48.7664%" y="111.50"></text></g><g><title>deno`alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (9 samples, 0.06%)</title><rect x="48.4908%" y="149" width="0.0574%" height="15" fill="rgb(227,62,0)" fg:x="7599" fg:w="9"/><text x="48.7408%" y="159.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (6 samples, 0.04%)</title><rect x="48.5100%" y="133" width="0.0383%" height="15" fill="rgb(211,226,4)" fg:x="7602" fg:w="6"/><text x="48.7600%" y="143.50"></text></g><g><title>deno`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.04%)</title><rect x="48.5100%" y="117" width="0.0383%" height="15" fill="rgb(253,38,52)" fg:x="7602" fg:w="6"/><text x="48.7600%" y="127.50"></text></g><g><title>deno`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (3 samples, 0.02%)</title><rect x="48.5483%" y="149" width="0.0191%" height="15" fill="rgb(229,126,40)" fg:x="7608" fg:w="3"/><text x="48.7983%" y="159.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="48.5802%" y="117" width="0.0191%" height="15" fill="rgb(229,165,44)" fg:x="7613" fg:w="3"/><text x="48.8302%" y="127.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (5 samples, 0.03%)</title><rect x="48.5738%" y="149" width="0.0319%" height="15" fill="rgb(247,95,47)" fg:x="7612" fg:w="5"/><text x="48.8238%" y="159.50"></text></g><g><title>deno`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.03%)</title><rect x="48.5738%" y="133" width="0.0319%" height="15" fill="rgb(216,140,30)" fg:x="7612" fg:w="5"/><text x="48.8238%" y="143.50"></text></g><g><title>deno`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::get_mut (57 samples, 0.36%)</title><rect x="48.2547%" y="213" width="0.3637%" height="15" fill="rgb(246,214,8)" fg:x="7562" fg:w="57"/><text x="48.5047%" y="223.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (54 samples, 0.34%)</title><rect x="48.2739%" y="197" width="0.3446%" height="15" fill="rgb(227,224,15)" fg:x="7565" fg:w="54"/><text x="48.5239%" y="207.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (46 samples, 0.29%)</title><rect x="48.3249%" y="181" width="0.2935%" height="15" fill="rgb(233,175,4)" fg:x="7573" fg:w="46"/><text x="48.5749%" y="191.50"></text></g><g><title>deno`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (44 samples, 0.28%)</title><rect x="48.3377%" y="165" width="0.2808%" height="15" fill="rgb(221,66,45)" fg:x="7575" fg:w="44"/><text x="48.5877%" y="175.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::iter (2 samples, 0.01%)</title><rect x="48.6057%" y="149" width="0.0128%" height="15" fill="rgb(221,178,18)" fg:x="7617" fg:w="2"/><text x="48.8557%" y="159.50"></text></g><g><title>deno`core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="48.6057%" y="133" width="0.0128%" height="15" fill="rgb(213,81,29)" fg:x="7617" fg:w="2"/><text x="48.8557%" y="143.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::and_then (2 samples, 0.01%)</title><rect x="48.6185%" y="213" width="0.0128%" height="15" fill="rgb(220,89,49)" fg:x="7619" fg:w="2"/><text x="48.8685%" y="223.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (61 samples, 0.39%)</title><rect x="48.2484%" y="245" width="0.3893%" height="15" fill="rgb(227,60,33)" fg:x="7561" fg:w="61"/><text x="48.4984%" y="255.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::try_borrow_mut (60 samples, 0.38%)</title><rect x="48.2547%" y="229" width="0.3829%" height="15" fill="rgb(205,113,12)" fg:x="7562" fg:w="60"/><text x="48.5047%" y="239.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.01%)</title><rect x="48.6376%" y="245" width="0.0128%" height="15" fill="rgb(211,32,1)" fg:x="7622" fg:w="2"/><text x="48.8876%" y="255.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="48.7269%" y="197" width="0.0128%" height="15" fill="rgb(246,2,12)" fg:x="7636" fg:w="2"/><text x="48.9769%" y="207.50"></text></g><g><title>deno`core::mem::replace (14 samples, 0.09%)</title><rect x="48.7142%" y="213" width="0.0893%" height="15" fill="rgb(243,37,27)" fg:x="7634" fg:w="14"/><text x="48.9642%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.05%)</title><rect x="48.7525%" y="197" width="0.0510%" height="15" fill="rgb(248,211,31)" fg:x="7640" fg:w="8"/><text x="49.0025%" y="207.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.04%)</title><rect x="48.8418%" y="149" width="0.0447%" height="15" fill="rgb(242,146,47)" fg:x="7654" fg:w="7"/><text x="49.0918%" y="159.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (23 samples, 0.15%)</title><rect x="48.8865%" y="149" width="0.1468%" height="15" fill="rgb(206,70,20)" fg:x="7661" fg:w="23"/><text x="49.1365%" y="159.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (81 samples, 0.52%)</title><rect x="48.8227%" y="181" width="0.5169%" height="15" fill="rgb(215,10,51)" fg:x="7651" fg:w="81"/><text x="49.0727%" y="191.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (81 samples, 0.52%)</title><rect x="48.8227%" y="165" width="0.5169%" height="15" fill="rgb(243,178,53)" fg:x="7651" fg:w="81"/><text x="49.0727%" y="175.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (48 samples, 0.31%)</title><rect x="49.0332%" y="149" width="0.3063%" height="15" fill="rgb(233,221,20)" fg:x="7684" fg:w="48"/><text x="49.2832%" y="159.50"></text></g><g><title>deno`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (7 samples, 0.04%)</title><rect x="49.3523%" y="149" width="0.0447%" height="15" fill="rgb(218,95,35)" fg:x="7734" fg:w="7"/><text x="49.6023%" y="159.50"></text></g><g><title>deno`core::hash::sip::SipHasher13::new_with_keys (10 samples, 0.06%)</title><rect x="49.3459%" y="165" width="0.0638%" height="15" fill="rgb(229,13,5)" fg:x="7733" fg:w="10"/><text x="49.5959%" y="175.50"></text></g><g><title>deno`core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.01%)</title><rect x="49.3970%" y="149" width="0.0128%" height="15" fill="rgb(252,164,30)" fg:x="7741" fg:w="2"/><text x="49.6470%" y="159.50"></text></g><g><title>deno`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (15 samples, 0.10%)</title><rect x="49.3395%" y="181" width="0.0957%" height="15" fill="rgb(232,68,36)" fg:x="7732" fg:w="15"/><text x="49.5895%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="49.4097%" y="165" width="0.0255%" height="15" fill="rgb(219,59,54)" fg:x="7743" fg:w="4"/><text x="49.6597%" y="175.50"></text></g><g><title>deno`core::hash::sip::u8to64_le (15 samples, 0.10%)</title><rect x="49.5310%" y="85" width="0.0957%" height="15" fill="rgb(250,92,33)" fg:x="7762" fg:w="15"/><text x="49.7810%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.03%)</title><rect x="49.5948%" y="69" width="0.0319%" height="15" fill="rgb(229,162,54)" fg:x="7772" fg:w="5"/><text x="49.8448%" y="79.50"></text></g><g><title>deno`core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="49.6267%" y="85" width="0.0128%" height="15" fill="rgb(244,114,52)" fg:x="7777" fg:w="2"/><text x="49.8767%" y="95.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (32 samples, 0.20%)</title><rect x="49.4416%" y="181" width="0.2042%" height="15" fill="rgb(212,211,43)" fg:x="7748" fg:w="32"/><text x="49.6916%" y="191.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (29 samples, 0.19%)</title><rect x="49.4608%" y="165" width="0.1851%" height="15" fill="rgb(226,147,8)" fg:x="7751" fg:w="29"/><text x="49.7108%" y="175.50"></text></g><g><title>deno`core::hash::Hasher::write_u32 (28 samples, 0.18%)</title><rect x="49.4672%" y="149" width="0.1787%" height="15" fill="rgb(226,23,13)" fg:x="7752" fg:w="28"/><text x="49.7172%" y="159.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.15%)</title><rect x="49.4927%" y="133" width="0.1531%" height="15" fill="rgb(240,63,4)" fg:x="7756" fg:w="24"/><text x="49.7427%" y="143.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (22 samples, 0.14%)</title><rect x="49.5055%" y="117" width="0.1404%" height="15" fill="rgb(221,1,32)" fg:x="7758" fg:w="22"/><text x="49.7555%" y="127.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.14%)</title><rect x="49.5055%" y="101" width="0.1404%" height="15" fill="rgb(242,117,10)" fg:x="7758" fg:w="22"/><text x="49.7555%" y="111.50"></text></g><g><title>deno`hashbrown::map::make_insert_hash (133 samples, 0.85%)</title><rect x="48.8099%" y="213" width="0.8487%" height="15" fill="rgb(249,172,44)" fg:x="7649" fg:w="133"/><text x="49.0599%" y="223.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (132 samples, 0.84%)</title><rect x="48.8163%" y="197" width="0.8423%" height="15" fill="rgb(244,46,45)" fg:x="7650" fg:w="132"/><text x="49.0663%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="49.6458%" y="181" width="0.0128%" height="15" fill="rgb(206,43,17)" fg:x="7780" fg:w="2"/><text x="49.8958%" y="191.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (5 samples, 0.03%)</title><rect x="49.6905%" y="181" width="0.0319%" height="15" fill="rgb(239,218,39)" fg:x="7787" fg:w="5"/><text x="49.9405%" y="191.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_mut (7 samples, 0.04%)</title><rect x="49.6841%" y="197" width="0.0447%" height="15" fill="rgb(208,169,54)" fg:x="7786" fg:w="7"/><text x="49.9341%" y="207.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (8 samples, 0.05%)</title><rect x="49.7416%" y="181" width="0.0510%" height="15" fill="rgb(247,25,42)" fg:x="7795" fg:w="8"/><text x="49.9916%" y="191.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5 samples, 0.03%)</title><rect x="49.7607%" y="165" width="0.0319%" height="15" fill="rgb(226,23,31)" fg:x="7798" fg:w="5"/><text x="50.0107%" y="175.50"></text></g><g><title>deno`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="49.8373%" y="165" width="0.0447%" height="15" fill="rgb(247,16,28)" fg:x="7810" fg:w="7"/><text x="50.0873%" y="175.50"></text></g><g><title>deno`hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.02%)</title><rect x="49.8628%" y="149" width="0.0191%" height="15" fill="rgb(231,147,38)" fg:x="7814" fg:w="3"/><text x="50.1128%" y="159.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="49.9139%" y="133" width="0.0128%" height="15" fill="rgb(253,81,48)" fg:x="7822" fg:w="2"/><text x="50.1639%" y="143.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (10 samples, 0.06%)</title><rect x="49.8947%" y="149" width="0.0638%" height="15" fill="rgb(249,222,43)" fg:x="7819" fg:w="10"/><text x="50.1447%" y="159.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (4 samples, 0.03%)</title><rect x="49.9330%" y="133" width="0.0255%" height="15" fill="rgb(221,3,27)" fg:x="7825" fg:w="4"/><text x="50.1830%" y="143.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (8 samples, 0.05%)</title><rect x="49.9777%" y="133" width="0.0510%" height="15" fill="rgb(228,180,5)" fg:x="7832" fg:w="8"/><text x="50.2277%" y="143.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="50.0287%" y="133" width="0.0128%" height="15" fill="rgb(227,131,42)" fg:x="7840" fg:w="2"/><text x="50.2787%" y="143.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (10 samples, 0.06%)</title><rect x="50.0415%" y="133" width="0.0638%" height="15" fill="rgb(212,3,39)" fg:x="7842" fg:w="10"/><text x="50.2915%" y="143.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (36 samples, 0.23%)</title><rect x="49.8883%" y="165" width="0.2297%" height="15" fill="rgb(226,45,5)" fg:x="7818" fg:w="36"/><text x="50.1383%" y="175.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (25 samples, 0.16%)</title><rect x="49.9585%" y="149" width="0.1595%" height="15" fill="rgb(215,167,45)" fg:x="7829" fg:w="25"/><text x="50.2085%" y="159.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::data_end (2 samples, 0.01%)</title><rect x="50.1053%" y="133" width="0.0128%" height="15" fill="rgb(250,218,53)" fg:x="7852" fg:w="2"/><text x="50.3553%" y="143.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (2 samples, 0.01%)</title><rect x="50.1181%" y="165" width="0.0128%" height="15" fill="rgb(207,140,0)" fg:x="7854" fg:w="2"/><text x="50.3681%" y="175.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.01%)</title><rect x="50.1308%" y="165" width="0.0128%" height="15" fill="rgb(238,133,51)" fg:x="7856" fg:w="2"/><text x="50.3808%" y="175.50"></text></g><g><title>deno`hashbrown::raw::bitmask::BitMask::remove_lowest_bit (2 samples, 0.01%)</title><rect x="50.1436%" y="165" width="0.0128%" height="15" fill="rgb(218,203,53)" fg:x="7858" fg:w="2"/><text x="50.3936%" y="175.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (13 samples, 0.08%)</title><rect x="50.1563%" y="165" width="0.0830%" height="15" fill="rgb(226,184,25)" fg:x="7860" fg:w="13"/><text x="50.4063%" y="175.50"></text></g><g><title>deno`core::ptr::read_unaligned (9 samples, 0.06%)</title><rect x="50.1819%" y="149" width="0.0574%" height="15" fill="rgb(231,121,21)" fg:x="7864" fg:w="9"/><text x="50.4319%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="50.2138%" y="133" width="0.0255%" height="15" fill="rgb(251,14,34)" fg:x="7869" fg:w="4"/><text x="50.4638%" y="143.50"></text></g><g><title>deno`core::num::_&lt;impl u64&gt;::from_ne_bytes (4 samples, 0.03%)</title><rect x="50.2712%" y="149" width="0.0255%" height="15" fill="rgb(249,193,11)" fg:x="7878" fg:w="4"/><text x="50.5212%" y="159.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (10 samples, 0.06%)</title><rect x="50.2393%" y="165" width="0.0638%" height="15" fill="rgb(220,172,37)" fg:x="7873" fg:w="10"/><text x="50.4893%" y="175.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (272 samples, 1.74%)</title><rect x="48.6759%" y="229" width="1.7357%" height="15" fill="rgb(231,229,43)" fg:x="7628" fg:w="272"/><text x="48.9259%" y="239.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (116 samples, 0.74%)</title><rect x="49.6714%" y="213" width="0.7402%" height="15" fill="rgb(250,161,5)" fg:x="7784" fg:w="116"/><text x="49.9214%" y="223.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (107 samples, 0.68%)</title><rect x="49.7288%" y="197" width="0.6828%" height="15" fill="rgb(218,225,18)" fg:x="7793" fg:w="107"/><text x="49.9788%" y="207.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (97 samples, 0.62%)</title><rect x="49.7926%" y="181" width="0.6190%" height="15" fill="rgb(245,45,42)" fg:x="7803" fg:w="97"/><text x="50.0426%" y="191.50"></text></g><g><title>deno`hashbrown::raw::h2 (17 samples, 0.11%)</title><rect x="50.3031%" y="165" width="0.1085%" height="15" fill="rgb(211,115,1)" fg:x="7883" fg:w="17"/><text x="50.5531%" y="175.50"></text></g><g><title>deno`core::cmp::Ord::min (15 samples, 0.10%)</title><rect x="50.3159%" y="149" width="0.0957%" height="15" fill="rgb(248,133,52)" fg:x="7885" fg:w="15"/><text x="50.5659%" y="159.50"></text></g><g><title>deno`core::cmp::min_by (14 samples, 0.09%)</title><rect x="50.3223%" y="133" width="0.0893%" height="15" fill="rgb(238,100,21)" fg:x="7886" fg:w="14"/><text x="50.5723%" y="143.50"></text></g><g><title>deno`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="50.3988%" y="117" width="0.0128%" height="15" fill="rgb(247,144,11)" fg:x="7898" fg:w="2"/><text x="50.6488%" y="127.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (280 samples, 1.79%)</title><rect x="48.6504%" y="245" width="1.7867%" height="15" fill="rgb(206,164,16)" fg:x="7624" fg:w="280"/><text x="48.9004%" y="255.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="50.4180%" y="229" width="0.0191%" height="15" fill="rgb(222,34,3)" fg:x="7901" fg:w="3"/><text x="50.6680%" y="239.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="50.4563%" y="213" width="0.0191%" height="15" fill="rgb(248,82,4)" fg:x="7907" fg:w="3"/><text x="50.7063%" y="223.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="50.4754%" y="197" width="0.0191%" height="15" fill="rgb(228,81,46)" fg:x="7910" fg:w="3"/><text x="50.7254%" y="207.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.01%)</title><rect x="50.5584%" y="165" width="0.0128%" height="15" fill="rgb(227,67,47)" fg:x="7923" fg:w="2"/><text x="50.8084%" y="175.50"></text></g><g><title>deno`tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (22 samples, 0.14%)</title><rect x="50.5839%" y="149" width="0.1404%" height="15" fill="rgb(215,93,53)" fg:x="7927" fg:w="22"/><text x="50.8339%" y="159.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::lock (20 samples, 0.13%)</title><rect x="50.5966%" y="133" width="0.1276%" height="15" fill="rgb(248,194,39)" fg:x="7929" fg:w="20"/><text x="50.8466%" y="143.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (18 samples, 0.11%)</title><rect x="50.6094%" y="117" width="0.1149%" height="15" fill="rgb(215,5,19)" fg:x="7931" fg:w="18"/><text x="50.8594%" y="127.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange_weak (13 samples, 0.08%)</title><rect x="50.6413%" y="101" width="0.0830%" height="15" fill="rgb(226,215,51)" fg:x="7936" fg:w="13"/><text x="50.8913%" y="111.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange_weak (11 samples, 0.07%)</title><rect x="50.6541%" y="85" width="0.0702%" height="15" fill="rgb(225,56,26)" fg:x="7938" fg:w="11"/><text x="50.9041%" y="95.50"></text></g><g><title>deno`&lt;tokio::loom::std::parking_lot::MutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="50.7945%" y="133" width="0.0191%" height="15" fill="rgb(222,75,29)" fg:x="7960" fg:w="3"/><text x="51.0445%" y="143.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="50.8136%" y="133" width="0.0128%" height="15" fill="rgb(236,139,6)" fg:x="7963" fg:w="2"/><text x="51.0636%" y="143.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange (7 samples, 0.04%)</title><rect x="50.8391%" y="53" width="0.0447%" height="15" fill="rgb(223,137,36)" fg:x="7967" fg:w="7"/><text x="51.0891%" y="63.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (6 samples, 0.04%)</title><rect x="50.8455%" y="37" width="0.0383%" height="15" fill="rgb(226,99,2)" fg:x="7968" fg:w="6"/><text x="51.0955%" y="47.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (9 samples, 0.06%)</title><rect x="50.8391%" y="69" width="0.0574%" height="15" fill="rgb(206,133,23)" fg:x="7967" fg:w="9"/><text x="51.0891%" y="79.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (2 samples, 0.01%)</title><rect x="50.8838%" y="53" width="0.0128%" height="15" fill="rgb(243,173,15)" fg:x="7974" fg:w="2"/><text x="51.1338%" y="63.50"></text></g><g><title>deno`core::mem::drop (14 samples, 0.09%)</title><rect x="50.8264%" y="133" width="0.0893%" height="15" fill="rgb(228,69,28)" fg:x="7965" fg:w="14"/><text x="51.0764%" y="143.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (14 samples, 0.09%)</title><rect x="50.8264%" y="117" width="0.0893%" height="15" fill="rgb(212,51,22)" fg:x="7965" fg:w="14"/><text x="51.0764%" y="127.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::sync::batch_semaphore::Waitlist&gt;&gt; (14 samples, 0.09%)</title><rect x="50.8264%" y="101" width="0.0893%" height="15" fill="rgb(227,113,0)" fg:x="7965" fg:w="14"/><text x="51.0764%" y="111.50"></text></g><g><title>deno`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.08%)</title><rect x="50.8327%" y="85" width="0.0830%" height="15" fill="rgb(252,84,27)" fg:x="7966" fg:w="13"/><text x="51.0827%" y="95.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::is_ok (3 samples, 0.02%)</title><rect x="50.8966%" y="69" width="0.0191%" height="15" fill="rgb(223,145,39)" fg:x="7976" fg:w="3"/><text x="51.1466%" y="79.50"></text></g><g><title>deno`core::ptr::read (5 samples, 0.03%)</title><rect x="50.9221%" y="117" width="0.0319%" height="15" fill="rgb(239,219,30)" fg:x="7980" fg:w="5"/><text x="51.1721%" y="127.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (8 samples, 0.05%)</title><rect x="50.9157%" y="133" width="0.0510%" height="15" fill="rgb(224,196,39)" fg:x="7979" fg:w="8"/><text x="51.1657%" y="143.50"></text></g><g><title>deno`core::ptr::write (2 samples, 0.01%)</title><rect x="50.9540%" y="117" width="0.0128%" height="15" fill="rgb(205,35,43)" fg:x="7985" fg:w="2"/><text x="51.2040%" y="127.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap_or_else (5 samples, 0.03%)</title><rect x="50.9668%" y="133" width="0.0319%" height="15" fill="rgb(228,201,21)" fg:x="7987" fg:w="5"/><text x="51.2168%" y="143.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::util::wake_list::WakeList&gt; (5 samples, 0.03%)</title><rect x="51.0050%" y="133" width="0.0319%" height="15" fill="rgb(237,118,16)" fg:x="7993" fg:w="5"/><text x="51.2550%" y="143.50"></text></g><g><title>deno`&lt;tokio::util::wake_list::WakeList as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="51.0050%" y="117" width="0.0319%" height="15" fill="rgb(241,17,19)" fg:x="7993" fg:w="5"/><text x="51.2550%" y="127.50"></text></g><g><title>deno`core::sync::atomic::atomic_add (3 samples, 0.02%)</title><rect x="51.0369%" y="133" width="0.0191%" height="15" fill="rgb(214,10,25)" fg:x="7998" fg:w="3"/><text x="51.2869%" y="143.50"></text></g><g><title>deno`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::last (4 samples, 0.03%)</title><rect x="51.0561%" y="133" width="0.0255%" height="15" fill="rgb(238,37,29)" fg:x="8001" fg:w="4"/><text x="51.3061%" y="143.50"></text></g><g><title>deno`tokio::util::wake_list::WakeList::new (2 samples, 0.01%)</title><rect x="51.0816%" y="133" width="0.0128%" height="15" fill="rgb(253,83,25)" fg:x="8005" fg:w="2"/><text x="51.3316%" y="143.50"></text></g><g><title>deno`tokio::util::wake_list::WakeList::wake_all (3 samples, 0.02%)</title><rect x="51.0944%" y="133" width="0.0191%" height="15" fill="rgb(234,192,12)" fg:x="8007" fg:w="3"/><text x="51.3444%" y="143.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (70 samples, 0.45%)</title><rect x="50.7243%" y="149" width="0.4467%" height="15" fill="rgb(241,216,45)" fg:x="7949" fg:w="70"/><text x="50.9743%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.06%)</title><rect x="51.1135%" y="133" width="0.0574%" height="15" fill="rgb(242,22,33)" fg:x="8010" fg:w="9"/><text x="51.3635%" y="143.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (100 samples, 0.64%)</title><rect x="50.5520%" y="181" width="0.6381%" height="15" fill="rgb(231,105,49)" fg:x="7922" fg:w="100"/><text x="50.8020%" y="191.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::release (97 samples, 0.62%)</title><rect x="50.5711%" y="165" width="0.6190%" height="15" fill="rgb(218,204,15)" fg:x="7925" fg:w="97"/><text x="50.8211%" y="175.50"></text></g><g><title>deno`tokio::util::wake_list::WakeList::new (2 samples, 0.01%)</title><rect x="51.1773%" y="149" width="0.0128%" height="15" fill="rgb(235,138,41)" fg:x="8020" fg:w="2"/><text x="51.4273%" y="159.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="51.1901%" y="181" width="0.0191%" height="15" fill="rgb(246,0,9)" fg:x="8022" fg:w="3"/><text x="51.4401%" y="191.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.02%)</title><rect x="51.1901%" y="165" width="0.0191%" height="15" fill="rgb(210,74,4)" fg:x="8022" fg:w="3"/><text x="51.4401%" y="175.50"></text></g><g><title>deno`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="51.2092%" y="181" width="0.0128%" height="15" fill="rgb(250,60,41)" fg:x="8025" fg:w="2"/><text x="51.4592%" y="191.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="51.2667%" y="165" width="0.0191%" height="15" fill="rgb(220,115,12)" fg:x="8034" fg:w="3"/><text x="51.5167%" y="175.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="51.2858%" y="165" width="0.0128%" height="15" fill="rgb(237,100,13)" fg:x="8037" fg:w="2"/><text x="51.5358%" y="175.50"></text></g><g><title>deno`&lt;tokio::sync::mpsc::block::Values&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (10 samples, 0.06%)</title><rect x="51.4390%" y="133" width="0.0638%" height="15" fill="rgb(213,55,26)" fg:x="8061" fg:w="10"/><text x="51.6890%" y="143.50"></text></g><g><title>deno`core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T (5 samples, 0.03%)</title><rect x="51.4709%" y="117" width="0.0319%" height="15" fill="rgb(216,17,4)" fg:x="8066" fg:w="5"/><text x="51.7209%" y="127.50"></text></g><g><title> N]&gt;::index (5 samples, 0.03%)</title><rect x="51.4709%" y="101" width="0.0319%" height="15" fill="rgb(220,153,47)" fg:x="8066" fg:w="5"/><text x="51.7209%" y="111.50"></text></g><g><title>deno`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.03%)</title><rect x="51.4709%" y="85" width="0.0319%" height="15" fill="rgb(215,131,9)" fg:x="8066" fg:w="5"/><text x="51.7209%" y="95.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.03%)</title><rect x="51.4709%" y="69" width="0.0319%" height="15" fill="rgb(233,46,42)" fg:x="8066" fg:w="5"/><text x="51.7209%" y="79.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::load (3 samples, 0.02%)</title><rect x="51.5028%" y="133" width="0.0191%" height="15" fill="rgb(226,86,7)" fg:x="8071" fg:w="3"/><text x="51.7528%" y="143.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="51.5092%" y="117" width="0.0128%" height="15" fill="rgb(239,226,21)" fg:x="8072" fg:w="2"/><text x="51.7592%" y="127.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="51.5411%" y="101" width="0.0128%" height="15" fill="rgb(244,137,22)" fg:x="8077" fg:w="2"/><text x="51.7911%" y="111.50"></text></g><g><title>deno`core::ptr::read (8 samples, 0.05%)</title><rect x="51.5538%" y="101" width="0.0510%" height="15" fill="rgb(211,139,35)" fg:x="8079" fg:w="8"/><text x="51.8038%" y="111.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (16 samples, 0.10%)</title><rect x="51.5219%" y="133" width="0.1021%" height="15" fill="rgb(214,62,50)" fg:x="8074" fg:w="16"/><text x="51.7719%" y="143.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::read::_{{closure}} (13 samples, 0.08%)</title><rect x="51.5411%" y="117" width="0.0830%" height="15" fill="rgb(212,113,44)" fg:x="8077" fg:w="13"/><text x="51.7911%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="51.6049%" y="101" width="0.0191%" height="15" fill="rgb(226,150,43)" fg:x="8087" fg:w="3"/><text x="51.8549%" y="111.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::read (40 samples, 0.26%)</title><rect x="51.3752%" y="149" width="0.2552%" height="15" fill="rgb(250,71,37)" fg:x="8051" fg:w="40"/><text x="51.6252%" y="159.50"></text></g><g><title>deno`core::cmp::PartialEq::ne (2 samples, 0.01%)</title><rect x="51.6495%" y="133" width="0.0128%" height="15" fill="rgb(219,76,19)" fg:x="8094" fg:w="2"/><text x="51.8995%" y="143.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (11 samples, 0.07%)</title><rect x="51.6304%" y="149" width="0.0702%" height="15" fill="rgb(250,39,11)" fg:x="8091" fg:w="11"/><text x="51.8804%" y="159.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::reclaim_block (4 samples, 0.03%)</title><rect x="51.6751%" y="133" width="0.0255%" height="15" fill="rgb(230,64,31)" fg:x="8098" fg:w="4"/><text x="51.9251%" y="143.50"></text></g><g><title>deno`core::hint::spin_loop (3 samples, 0.02%)</title><rect x="51.7261%" y="133" width="0.0191%" height="15" fill="rgb(208,222,23)" fg:x="8106" fg:w="3"/><text x="51.9761%" y="143.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (11 samples, 0.07%)</title><rect x="51.7006%" y="149" width="0.0702%" height="15" fill="rgb(227,125,18)" fg:x="8102" fg:w="11"/><text x="51.9506%" y="159.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (4 samples, 0.03%)</title><rect x="51.7453%" y="133" width="0.0255%" height="15" fill="rgb(234,210,9)" fg:x="8109" fg:w="4"/><text x="51.9953%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.04%)</title><rect x="51.7708%" y="149" width="0.0383%" height="15" fill="rgb(217,127,24)" fg:x="8113" fg:w="6"/><text x="52.0208%" y="159.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::try_pop (92 samples, 0.59%)</title><rect x="51.2284%" y="181" width="0.5871%" height="15" fill="rgb(239,141,48)" fg:x="8028" fg:w="92"/><text x="51.4784%" y="191.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (80 samples, 0.51%)</title><rect x="51.3050%" y="165" width="0.5105%" height="15" fill="rgb(227,109,8)" fg:x="8040" fg:w="80"/><text x="51.5550%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="51.8218%" y="181" width="0.0128%" height="15" fill="rgb(235,184,23)" fg:x="8121" fg:w="2"/><text x="52.0718%" y="191.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::try_recv::_{{closure}} (211 samples, 1.35%)</title><rect x="50.4945%" y="197" width="1.3464%" height="15" fill="rgb(227,226,48)" fg:x="7913" fg:w="211"/><text x="50.7445%" y="207.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (219 samples, 1.40%)</title><rect x="50.4754%" y="213" width="1.3975%" height="15" fill="rgb(206,150,11)" fg:x="7910" fg:w="219"/><text x="50.7254%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="51.8474%" y="197" width="0.0255%" height="15" fill="rgb(254,2,33)" fg:x="8125" fg:w="4"/><text x="52.0974%" y="207.50"></text></g><g><title>deno`deno_flash::op_next::call::_{{closure}} (869 samples, 5.55%)</title><rect x="46.3340%" y="261" width="5.5453%" height="15" fill="rgb(243,160,20)" fg:x="7261" fg:w="869"/><text x="46.5840%" y="271.50">deno`de..</text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (225 samples, 1.44%)</title><rect x="50.4435%" y="245" width="1.4358%" height="15" fill="rgb(218,208,30)" fg:x="7905" fg:w="225"/><text x="50.6935%" y="255.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::try_recv (225 samples, 1.44%)</title><rect x="50.4435%" y="229" width="1.4358%" height="15" fill="rgb(224,120,49)" fg:x="7905" fg:w="225"/><text x="50.6935%" y="239.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (875 samples, 5.58%)</title><rect x="46.3085%" y="277" width="5.5836%" height="15" fill="rgb(246,12,2)" fg:x="7257" fg:w="875"/><text x="46.5585%" y="287.50">deno`&lt;c..</text></g><g><title>deno`&lt;core::any::TypeId as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="51.9176%" y="245" width="0.0191%" height="15" fill="rgb(236,117,3)" fg:x="8136" fg:w="3"/><text x="52.1676%" y="255.50"></text></g><g><title>deno`core::mem::transmute_copy (3 samples, 0.02%)</title><rect x="51.9622%" y="229" width="0.0191%" height="15" fill="rgb(216,128,52)" fg:x="8143" fg:w="3"/><text x="52.2122%" y="239.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="51.9814%" y="229" width="0.0191%" height="15" fill="rgb(246,145,19)" fg:x="8146" fg:w="3"/><text x="52.2314%" y="239.50"></text></g><g><title>deno`&lt;serde_v8::serializable::SerializablePkg as core::convert::From&lt;T&gt;&gt;::from (13 samples, 0.08%)</title><rect x="51.9367%" y="245" width="0.0830%" height="15" fill="rgb(222,11,46)" fg:x="8139" fg:w="13"/><text x="52.1867%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="52.0005%" y="229" width="0.0191%" height="15" fill="rgb(245,82,36)" fg:x="8149" fg:w="3"/><text x="52.2505%" y="239.50"></text></g><g><title>deno`core::any::TypeId::of (3 samples, 0.02%)</title><rect x="52.0197%" y="245" width="0.0191%" height="15" fill="rgb(250,73,51)" fg:x="8152" fg:w="3"/><text x="52.2697%" y="255.50"></text></g><g><title>deno`core::mem::forget (2 samples, 0.01%)</title><rect x="52.0388%" y="245" width="0.0128%" height="15" fill="rgb(221,189,23)" fg:x="8155" fg:w="2"/><text x="52.2888%" y="255.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (23 samples, 0.15%)</title><rect x="51.9112%" y="261" width="0.1468%" height="15" fill="rgb(210,33,7)" fg:x="8135" fg:w="23"/><text x="52.1612%" y="271.50"></text></g><g><title>deno`deno_core::ops::to_op_result (25 samples, 0.16%)</title><rect x="51.9112%" y="277" width="0.1595%" height="15" fill="rgb(210,107,22)" fg:x="8135" fg:w="25"/><text x="52.1612%" y="287.50"></text></g><g><title>deno`&lt;serde_v8::serializable::SerializablePkg as core::convert::From&lt;T&gt;&gt;::from (2 samples, 0.01%)</title><rect x="52.0579%" y="261" width="0.0128%" height="15" fill="rgb(222,116,37)" fg:x="8158" fg:w="2"/><text x="52.3079%" y="271.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (918 samples, 5.86%)</title><rect x="46.2191%" y="309" width="5.8580%" height="15" fill="rgb(254,17,48)" fg:x="7243" fg:w="918"/><text x="46.4691%" y="319.50">deno`&lt;c..</text></g><g><title>deno`deno_flash::op_next::v8_func::_{{closure}} (914 samples, 5.83%)</title><rect x="46.2447%" y="293" width="5.8324%" height="15" fill="rgb(224,36,32)" fg:x="7247" fg:w="914"/><text x="46.4947%" y="303.50">deno`de..</text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (2 samples, 0.01%)</title><rect x="52.0898%" y="309" width="0.0128%" height="15" fill="rgb(232,90,46)" fg:x="8163" fg:w="2"/><text x="52.3398%" y="319.50"></text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (923 samples, 5.89%)</title><rect x="46.2191%" y="325" width="5.8899%" height="15" fill="rgb(241,66,40)" fg:x="7243" fg:w="923"/><text x="46.4691%" y="335.50">deno`&lt;c..</text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = (i32,usize,deno_core::ops::OpResult)&gt;&gt; (2 samples, 0.01%)</title><rect x="52.1154%" y="309" width="0.0128%" height="15" fill="rgb(249,184,29)" fg:x="8167" fg:w="2"/><text x="52.3654%" y="319.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.03%)</title><rect x="52.1345%" y="277" width="0.0255%" height="15" fill="rgb(231,181,1)" fg:x="8170" fg:w="4"/><text x="52.3845%" y="287.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.03%)</title><rect x="52.1919%" y="261" width="0.0255%" height="15" fill="rgb(224,94,2)" fg:x="8179" fg:w="4"/><text x="52.4419%" y="271.50"></text></g><g><title>deno`alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="52.1983%" y="245" width="0.0191%" height="15" fill="rgb(229,170,15)" fg:x="8180" fg:w="3"/><text x="52.4483%" y="255.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="52.2175%" y="261" width="0.0128%" height="15" fill="rgb(240,127,35)" fg:x="8183" fg:w="2"/><text x="52.4675%" y="271.50"></text></g><g><title>deno`alloc::alloc::box_free (12 samples, 0.08%)</title><rect x="52.1664%" y="277" width="0.0766%" height="15" fill="rgb(248,196,34)" fg:x="8175" fg:w="12"/><text x="52.4164%" y="287.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::cast (2 samples, 0.01%)</title><rect x="52.2302%" y="261" width="0.0128%" height="15" fill="rgb(236,137,7)" fg:x="8185" fg:w="2"/><text x="52.4802%" y="271.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="52.2494%" y="277" width="0.0128%" height="15" fill="rgb(235,127,16)" fg:x="8188" fg:w="2"/><text x="52.4994%" y="287.50"></text></g><g><title>deno`&lt;futures_util::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (954 samples, 6.09%)</title><rect x="46.1808%" y="341" width="6.0877%" height="15" fill="rgb(250,192,54)" fg:x="7237" fg:w="954"/><text x="46.4308%" y="351.50">deno`&lt;fu..</text></g><g><title>deno`core::ptr::drop_in_place&lt;futures_util::future::maybe_done::MaybeDone&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = (i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt;&gt; (24 samples, 0.15%)</title><rect x="52.1154%" y="325" width="0.1531%" height="15" fill="rgb(218,98,20)" fg:x="8167" fg:w="24"/><text x="52.3654%" y="335.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = (i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt; (22 samples, 0.14%)</title><rect x="52.1281%" y="309" width="0.1404%" height="15" fill="rgb(230,176,47)" fg:x="8169" fg:w="22"/><text x="52.3781%" y="319.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = (i32,usize,deno_core::ops::OpResult)&gt;&gt; (22 samples, 0.14%)</title><rect x="52.1281%" y="293" width="0.1404%" height="15" fill="rgb(244,2,33)" fg:x="8169" fg:w="22"/><text x="52.3781%" y="303.50"></text></g><g><title>deno`alloc::alloc::alloc (6 samples, 0.04%)</title><rect x="52.3068%" y="293" width="0.0383%" height="15" fill="rgb(231,100,17)" fg:x="8197" fg:w="6"/><text x="52.5568%" y="303.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="52.3515%" y="293" width="0.0128%" height="15" fill="rgb(245,23,12)" fg:x="8204" fg:w="2"/><text x="52.6015%" y="303.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (2 samples, 0.01%)</title><rect x="52.3642%" y="293" width="0.0128%" height="15" fill="rgb(249,55,22)" fg:x="8206" fg:w="2"/><text x="52.6142%" y="303.50"></text></g><g><title>deno`alloc::alloc::Global::alloc_impl (16 samples, 0.10%)</title><rect x="52.2813%" y="309" width="0.1021%" height="15" fill="rgb(207,134,9)" fg:x="8193" fg:w="16"/><text x="52.5313%" y="319.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.11%)</title><rect x="52.2813%" y="325" width="0.1149%" height="15" fill="rgb(218,134,0)" fg:x="8193" fg:w="18"/><text x="52.5313%" y="335.50"></text></g><g><title>deno`alloc::alloc::exchange_malloc (21 samples, 0.13%)</title><rect x="52.2749%" y="341" width="0.1340%" height="15" fill="rgb(213,212,33)" fg:x="8192" fg:w="21"/><text x="52.5249%" y="351.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;[T]&gt;::as_mut_ptr (2 samples, 0.01%)</title><rect x="52.3961%" y="325" width="0.0128%" height="15" fill="rgb(252,106,18)" fg:x="8211" fg:w="2"/><text x="52.6461%" y="335.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (2 samples, 0.01%)</title><rect x="52.4089%" y="341" width="0.0128%" height="15" fill="rgb(208,126,42)" fg:x="8213" fg:w="2"/><text x="52.6589%" y="351.50"></text></g><g><title>deno`core::task::wake::Waker::from_raw (2 samples, 0.01%)</title><rect x="52.4217%" y="341" width="0.0128%" height="15" fill="rgb(246,175,29)" fg:x="8215" fg:w="2"/><text x="52.6717%" y="351.50"></text></g><g><title>deno`futures_util::future::maybe_done::maybe_done (2 samples, 0.01%)</title><rect x="52.4408%" y="341" width="0.0128%" height="15" fill="rgb(215,13,50)" fg:x="8218" fg:w="2"/><text x="52.6908%" y="351.50"></text></g><g><title>deno`deno_core::ops::OpCall&lt;T&gt;::eager (987 samples, 6.30%)</title><rect x="46.1681%" y="357" width="6.2983%" height="15" fill="rgb(216,172,15)" fg:x="7235" fg:w="987"/><text x="46.4181%" y="367.50">deno`den..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="52.4536%" y="341" width="0.0128%" height="15" fill="rgb(212,103,13)" fg:x="8220" fg:w="2"/><text x="52.7036%" y="351.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="52.4727%" y="341" width="0.0191%" height="15" fill="rgb(231,171,36)" fg:x="8223" fg:w="3"/><text x="52.7227%" y="351.50"></text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.01%)</title><rect x="52.4791%" y="325" width="0.0128%" height="15" fill="rgb(250,123,20)" fg:x="8224" fg:w="2"/><text x="52.7291%" y="335.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="52.5238%" y="325" width="0.0128%" height="15" fill="rgb(212,53,50)" fg:x="8231" fg:w="2"/><text x="52.7738%" y="335.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="52.5621%" y="261" width="0.0383%" height="15" fill="rgb(243,54,12)" fg:x="8237" fg:w="6"/><text x="52.8121%" y="271.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="52.5812%" y="245" width="0.0191%" height="15" fill="rgb(234,101,34)" fg:x="8240" fg:w="3"/><text x="52.8312%" y="255.50"></text></g><g><title>deno`&lt;core::any::TypeId as core::hash::Hash&gt;::hash (3 samples, 0.02%)</title><rect x="52.5812%" y="229" width="0.0191%" height="15" fill="rgb(254,67,22)" fg:x="8240" fg:w="3"/><text x="52.8312%" y="239.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (2 samples, 0.01%)</title><rect x="52.5876%" y="213" width="0.0128%" height="15" fill="rgb(250,35,47)" fg:x="8241" fg:w="2"/><text x="52.8376%" y="223.50"></text></g><g><title>deno`&lt;v8::isolate::TypeIdHasher as core::hash::Hasher&gt;::write_u64 (2 samples, 0.01%)</title><rect x="52.5876%" y="197" width="0.0128%" height="15" fill="rgb(226,126,38)" fg:x="8241" fg:w="2"/><text x="52.8376%" y="207.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="52.5876%" y="181" width="0.0128%" height="15" fill="rgb(216,138,53)" fg:x="8241" fg:w="2"/><text x="52.8376%" y="191.50"></text></g><g><title>deno`hashbrown::map::make_hash (7 samples, 0.04%)</title><rect x="52.5621%" y="277" width="0.0447%" height="15" fill="rgb(246,199,43)" fg:x="8237" fg:w="7"/><text x="52.8121%" y="287.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (4 samples, 0.03%)</title><rect x="52.6067%" y="261" width="0.0255%" height="15" fill="rgb(232,125,11)" fg:x="8244" fg:w="4"/><text x="52.8567%" y="271.50"></text></g><g><title>deno`hashbrown::map::equivalent_key::_{{closure}} (2 samples, 0.01%)</title><rect x="52.6833%" y="213" width="0.0128%" height="15" fill="rgb(218,219,45)" fg:x="8256" fg:w="2"/><text x="52.9333%" y="223.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (6 samples, 0.04%)</title><rect x="52.6833%" y="229" width="0.0383%" height="15" fill="rgb(216,102,54)" fg:x="8256" fg:w="6"/><text x="52.9333%" y="239.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.02%)</title><rect x="52.7024%" y="213" width="0.0191%" height="15" fill="rgb(250,228,7)" fg:x="8259" fg:w="3"/><text x="52.9524%" y="223.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="52.7088%" y="197" width="0.0128%" height="15" fill="rgb(226,125,25)" fg:x="8260" fg:w="2"/><text x="52.9588%" y="207.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (2 samples, 0.01%)</title><rect x="52.7280%" y="229" width="0.0128%" height="15" fill="rgb(224,165,27)" fg:x="8263" fg:w="2"/><text x="52.9780%" y="239.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (24 samples, 0.15%)</title><rect x="52.6067%" y="277" width="0.1531%" height="15" fill="rgb(233,86,3)" fg:x="8244" fg:w="24"/><text x="52.8567%" y="287.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (20 samples, 0.13%)</title><rect x="52.6323%" y="261" width="0.1276%" height="15" fill="rgb(228,116,20)" fg:x="8248" fg:w="20"/><text x="52.8823%" y="271.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (18 samples, 0.11%)</title><rect x="52.6450%" y="245" width="0.1149%" height="15" fill="rgb(209,192,17)" fg:x="8250" fg:w="18"/><text x="52.8950%" y="255.50"></text></g><g><title>deno`hashbrown::raw::h2 (3 samples, 0.02%)</title><rect x="52.7407%" y="229" width="0.0191%" height="15" fill="rgb(224,88,34)" fg:x="8265" fg:w="3"/><text x="52.9907%" y="239.50"></text></g><g><title>deno`core::cmp::Ord::min (2 samples, 0.01%)</title><rect x="52.7471%" y="213" width="0.0128%" height="15" fill="rgb(233,38,6)" fg:x="8266" fg:w="2"/><text x="52.9971%" y="223.50"></text></g><g><title>deno`core::cmp::min_by (2 samples, 0.01%)</title><rect x="52.7471%" y="197" width="0.0128%" height="15" fill="rgb(212,59,30)" fg:x="8266" fg:w="2"/><text x="52.9971%" y="207.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (35 samples, 0.22%)</title><rect x="52.5493%" y="293" width="0.2233%" height="15" fill="rgb(213,80,3)" fg:x="8235" fg:w="35"/><text x="52.7993%" y="303.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.01%)</title><rect x="52.7599%" y="277" width="0.0128%" height="15" fill="rgb(251,178,7)" fg:x="8268" fg:w="2"/><text x="53.0099%" y="287.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (50 samples, 0.32%)</title><rect x="52.4663%" y="357" width="0.3191%" height="15" fill="rgb(213,154,26)" fg:x="8222" fg:w="50"/><text x="52.7163%" y="367.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (44 samples, 0.28%)</title><rect x="52.5046%" y="341" width="0.2808%" height="15" fill="rgb(238,165,49)" fg:x="8228" fg:w="44"/><text x="52.7546%" y="351.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (39 samples, 0.25%)</title><rect x="52.5365%" y="325" width="0.2489%" height="15" fill="rgb(248,91,46)" fg:x="8233" fg:w="39"/><text x="52.7865%" y="335.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (38 samples, 0.24%)</title><rect x="52.5429%" y="309" width="0.2425%" height="15" fill="rgb(244,21,52)" fg:x="8234" fg:w="38"/><text x="52.7929%" y="319.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::compare_exchange_weak (3 samples, 0.02%)</title><rect x="52.8301%" y="325" width="0.0191%" height="15" fill="rgb(247,122,20)" fg:x="8279" fg:w="3"/><text x="53.0801%" y="335.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::downgrade (6 samples, 0.04%)</title><rect x="52.8173%" y="341" width="0.0383%" height="15" fill="rgb(218,27,9)" fg:x="8277" fg:w="6"/><text x="53.0673%" y="351.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="52.8747%" y="293" width="0.0128%" height="15" fill="rgb(246,7,6)" fg:x="8286" fg:w="2"/><text x="53.1247%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="52.9066%" y="229" width="0.0128%" height="15" fill="rgb(227,135,54)" fg:x="8291" fg:w="2"/><text x="53.1566%" y="239.50"></text></g><g><title>deno`alloc::alloc::alloc (6 samples, 0.04%)</title><rect x="52.8875%" y="277" width="0.0383%" height="15" fill="rgb(247,14,11)" fg:x="8288" fg:w="6"/><text x="53.1375%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="52.9003%" y="261" width="0.0255%" height="15" fill="rgb(206,149,34)" fg:x="8290" fg:w="4"/><text x="53.1503%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="52.9003%" y="245" width="0.0255%" height="15" fill="rgb(227,228,4)" fg:x="8290" fg:w="4"/><text x="53.1503%" y="255.50"></text></g><g><title>deno`alloc::alloc::Global::alloc_impl (10 samples, 0.06%)</title><rect x="52.8875%" y="293" width="0.0638%" height="15" fill="rgb(238,218,28)" fg:x="8288" fg:w="10"/><text x="53.1375%" y="303.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (2 samples, 0.01%)</title><rect x="52.9577%" y="293" width="0.0128%" height="15" fill="rgb(252,86,40)" fg:x="8299" fg:w="2"/><text x="53.2077%" y="303.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.10%)</title><rect x="52.8747%" y="309" width="0.1021%" height="15" fill="rgb(251,225,11)" fg:x="8286" fg:w="16"/><text x="53.1247%" y="319.50"></text></g><g><title>deno`alloc::alloc::exchange_malloc (17 samples, 0.11%)</title><rect x="52.8747%" y="325" width="0.1085%" height="15" fill="rgb(206,46,49)" fg:x="8286" fg:w="17"/><text x="53.1247%" y="335.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::new (22 samples, 0.14%)</title><rect x="52.8556%" y="341" width="0.1404%" height="15" fill="rgb(245,128,24)" fg:x="8283" fg:w="22"/><text x="53.1056%" y="351.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="52.9960%" y="341" width="0.0191%" height="15" fill="rgb(219,177,34)" fg:x="8305" fg:w="3"/><text x="53.2460%" y="351.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="53.0279%" y="309" width="0.0128%" height="15" fill="rgb(218,60,48)" fg:x="8310" fg:w="2"/><text x="53.2779%" y="319.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="53.0279%" y="325" width="0.0191%" height="15" fill="rgb(221,11,5)" fg:x="8310" fg:w="3"/><text x="53.2779%" y="335.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::pending_next_all (3 samples, 0.02%)</title><rect x="53.0662%" y="325" width="0.0191%" height="15" fill="rgb(220,148,13)" fg:x="8316" fg:w="3"/><text x="53.3162%" y="335.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::link (12 samples, 0.08%)</title><rect x="53.0151%" y="341" width="0.0766%" height="15" fill="rgb(210,16,3)" fg:x="8308" fg:w="12"/><text x="53.2651%" y="351.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="53.0917%" y="325" width="0.0128%" height="15" fill="rgb(236,80,2)" fg:x="8320" fg:w="2"/><text x="53.3417%" y="335.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::pending_next_all (3 samples, 0.02%)</title><rect x="53.0917%" y="341" width="0.0191%" height="15" fill="rgb(239,129,19)" fg:x="8320" fg:w="3"/><text x="53.3417%" y="351.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (56 samples, 0.36%)</title><rect x="52.7918%" y="357" width="0.3573%" height="15" fill="rgb(220,106,35)" fg:x="8273" fg:w="56"/><text x="53.0418%" y="367.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::ready_to_run_queue::ReadyToRunQueue&lt;Fut&gt;::enqueue (6 samples, 0.04%)</title><rect x="53.1108%" y="341" width="0.0383%" height="15" fill="rgb(252,139,45)" fg:x="8323" fg:w="6"/><text x="53.3608%" y="351.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::store (3 samples, 0.02%)</title><rect x="53.1300%" y="325" width="0.0191%" height="15" fill="rgb(229,8,36)" fg:x="8326" fg:w="3"/><text x="53.3800%" y="335.50"></text></g><g><title>deno`core::sync::atomic::atomic_store (2 samples, 0.01%)</title><rect x="53.1364%" y="309" width="0.0128%" height="15" fill="rgb(230,126,33)" fg:x="8327" fg:w="2"/><text x="53.3864%" y="319.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (2 samples, 0.01%)</title><rect x="53.1491%" y="357" width="0.0128%" height="15" fill="rgb(239,140,21)" fg:x="8329" fg:w="2"/><text x="53.3991%" y="367.50"></text></g><g><title>deno`deno_core::runtime::queue_async_op (1,113 samples, 7.10%)</title><rect x="46.0660%" y="373" width="7.1023%" height="15" fill="rgb(254,104,9)" fg:x="7219" fg:w="1113"/><text x="46.3160%" y="383.50">deno`deno_..</text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (2 samples, 0.01%)</title><rect x="53.1747%" y="373" width="0.0128%" height="15" fill="rgb(239,52,14)" fg:x="8333" fg:w="2"/><text x="53.4247%" y="383.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (3 samples, 0.02%)</title><rect x="53.1938%" y="373" width="0.0191%" height="15" fill="rgb(208,227,44)" fg:x="8336" fg:w="3"/><text x="53.4438%" y="383.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::data (4 samples, 0.03%)</title><rect x="53.2129%" y="373" width="0.0255%" height="15" fill="rgb(246,18,19)" fg:x="8339" fg:w="4"/><text x="53.4629%" y="383.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw (3 samples, 0.02%)</title><rect x="53.2193%" y="357" width="0.0191%" height="15" fill="rgb(235,228,25)" fg:x="8340" fg:w="3"/><text x="53.4693%" y="367.50"></text></g><g><title>deno`core::ops::function::Fn::call (1,195 samples, 7.63%)</title><rect x="45.6321%" y="405" width="7.6256%" height="15" fill="rgb(240,156,20)" fg:x="7151" fg:w="1195"/><text x="45.8821%" y="415.50">deno`core:..</text></g><g><title>deno`deno_flash::op_next::v8_func (1,189 samples, 7.59%)</title><rect x="45.6703%" y="389" width="7.5873%" height="15" fill="rgb(224,8,20)" fg:x="7157" fg:w="1189"/><text x="45.9203%" y="399.50">deno`deno_..</text></g><g><title>deno`v8::function::FunctionCallbackArguments::get (3 samples, 0.02%)</title><rect x="53.2385%" y="373" width="0.0191%" height="15" fill="rgb(214,12,52)" fg:x="8343" fg:w="3"/><text x="53.4885%" y="383.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap (2 samples, 0.01%)</title><rect x="53.2448%" y="357" width="0.0128%" height="15" fill="rgb(211,220,47)" fg:x="8344" fg:w="2"/><text x="53.4948%" y="367.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (5 samples, 0.03%)</title><rect x="53.2704%" y="373" width="0.0319%" height="15" fill="rgb(250,173,5)" fg:x="8348" fg:w="5"/><text x="53.5204%" y="383.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (3 samples, 0.02%)</title><rect x="53.2831%" y="357" width="0.0191%" height="15" fill="rgb(250,125,52)" fg:x="8350" fg:w="3"/><text x="53.5331%" y="367.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="53.2895%" y="341" width="0.0128%" height="15" fill="rgb(209,133,18)" fg:x="8351" fg:w="2"/><text x="53.5395%" y="351.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="53.3150%" y="341" width="0.0255%" height="15" fill="rgb(216,173,22)" fg:x="8355" fg:w="4"/><text x="53.5650%" y="351.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="53.3150%" y="325" width="0.0255%" height="15" fill="rgb(205,3,22)" fg:x="8355" fg:w="4"/><text x="53.5650%" y="335.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="53.3278%" y="309" width="0.0128%" height="15" fill="rgb(248,22,20)" fg:x="8357" fg:w="2"/><text x="53.5778%" y="319.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.01%)</title><rect x="53.3469%" y="341" width="0.0128%" height="15" fill="rgb(233,6,29)" fg:x="8360" fg:w="2"/><text x="53.5969%" y="351.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (4 samples, 0.03%)</title><rect x="53.3597%" y="341" width="0.0255%" height="15" fill="rgb(240,22,54)" fg:x="8362" fg:w="4"/><text x="53.6097%" y="351.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (4 samples, 0.03%)</title><rect x="53.3597%" y="325" width="0.0255%" height="15" fill="rgb(231,133,32)" fg:x="8362" fg:w="4"/><text x="53.6097%" y="335.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::CallbackScope&gt; (21 samples, 0.13%)</title><rect x="53.2576%" y="405" width="0.1340%" height="15" fill="rgb(248,193,4)" fg:x="8346" fg:w="21"/><text x="53.5076%" y="415.50"></text></g><g><title>deno`&lt;v8::scope::CallbackScope&lt;C&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.13%)</title><rect x="53.2576%" y="389" width="0.1340%" height="15" fill="rgb(211,178,46)" fg:x="8346" fg:w="21"/><text x="53.5076%" y="399.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (14 samples, 0.09%)</title><rect x="53.3023%" y="373" width="0.0893%" height="15" fill="rgb(224,5,42)" fg:x="8353" fg:w="14"/><text x="53.5523%" y="383.50"></text></g><g><title>deno`v8::scope::data::ScopeData::exit_scope (13 samples, 0.08%)</title><rect x="53.3087%" y="357" width="0.0830%" height="15" fill="rgb(239,176,25)" fg:x="8354" fg:w="13"/><text x="53.5587%" y="367.50"></text></g><g><title>deno`v8::function::ReturnValue::from_function_callback_info (2 samples, 0.01%)</title><rect x="53.3980%" y="405" width="0.0128%" height="15" fill="rgb(245,187,50)" fg:x="8368" fg:w="2"/><text x="53.6480%" y="415.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="53.4427%" y="373" width="0.0128%" height="15" fill="rgb(248,24,15)" fg:x="8375" fg:w="2"/><text x="53.6927%" y="383.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (5 samples, 0.03%)</title><rect x="53.4363%" y="389" width="0.0319%" height="15" fill="rgb(205,166,13)" fg:x="8374" fg:w="5"/><text x="53.6863%" y="399.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="53.4554%" y="373" width="0.0128%" height="15" fill="rgb(208,114,23)" fg:x="8377" fg:w="2"/><text x="53.7054%" y="383.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="53.4554%" y="357" width="0.0128%" height="15" fill="rgb(239,127,18)" fg:x="8377" fg:w="2"/><text x="53.7054%" y="367.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (5 samples, 0.03%)</title><rect x="53.4682%" y="389" width="0.0319%" height="15" fill="rgb(219,154,28)" fg:x="8379" fg:w="5"/><text x="53.7182%" y="399.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="53.4873%" y="373" width="0.0128%" height="15" fill="rgb(225,157,23)" fg:x="8382" fg:w="2"/><text x="53.7373%" y="383.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="53.4873%" y="357" width="0.0128%" height="15" fill="rgb(219,8,6)" fg:x="8382" fg:w="2"/><text x="53.7373%" y="367.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="53.4873%" y="341" width="0.0128%" height="15" fill="rgb(212,47,6)" fg:x="8382" fg:w="2"/><text x="53.7373%" y="351.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (2 samples, 0.01%)</title><rect x="53.4873%" y="325" width="0.0128%" height="15" fill="rgb(224,190,4)" fg:x="8382" fg:w="2"/><text x="53.7373%" y="335.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (5 samples, 0.03%)</title><rect x="53.5256%" y="357" width="0.0319%" height="15" fill="rgb(239,183,29)" fg:x="8388" fg:w="5"/><text x="53.7756%" y="367.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="53.5384%" y="341" width="0.0191%" height="15" fill="rgb(213,57,7)" fg:x="8390" fg:w="3"/><text x="53.7884%" y="351.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="53.5448%" y="325" width="0.0128%" height="15" fill="rgb(216,148,1)" fg:x="8391" fg:w="2"/><text x="53.7948%" y="335.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="53.5639%" y="341" width="0.0128%" height="15" fill="rgb(236,182,29)" fg:x="8394" fg:w="2"/><text x="53.8139%" y="351.50"></text></g><g><title>deno`v8::scope::data::ScopeData::allocate_or_reuse_scope_data (4 samples, 0.03%)</title><rect x="53.5575%" y="357" width="0.0255%" height="15" fill="rgb(244,120,48)" fg:x="8393" fg:w="4"/><text x="53.8075%" y="367.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="53.5831%" y="309" width="0.0128%" height="15" fill="rgb(206,71,34)" fg:x="8397" fg:w="2"/><text x="53.8331%" y="319.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1,266 samples, 8.08%)</title><rect x="45.5236%" y="437" width="8.0786%" height="15" fill="rgb(242,32,6)" fg:x="7134" fg:w="1266"/><text x="45.7736%" y="447.50">deno`&lt;exter..</text></g><g><title>deno`v8::function::_&lt;impl v8::support::MapFnFrom&lt;F&gt; for extern &quot;C&quot; fn(*const v8::function::FunctionCallbackInfo)&gt;::mapping::_{{closure}} (1,261 samples, 8.05%)</title><rect x="45.5555%" y="421" width="8.0467%" height="15" fill="rgb(241,35,3)" fg:x="7139" fg:w="1261"/><text x="45.8055%" y="431.50">deno`v8::fu..</text></g><g><title>deno`v8::scope::CallbackScope::new (30 samples, 0.19%)</title><rect x="53.4108%" y="405" width="0.1914%" height="15" fill="rgb(222,62,19)" fg:x="8370" fg:w="30"/><text x="53.6608%" y="415.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (16 samples, 0.10%)</title><rect x="53.5001%" y="389" width="0.1021%" height="15" fill="rgb(223,110,41)" fg:x="8384" fg:w="16"/><text x="53.7501%" y="399.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_scope_data_with (16 samples, 0.10%)</title><rect x="53.5001%" y="373" width="0.1021%" height="15" fill="rgb(208,224,4)" fg:x="8384" fg:w="16"/><text x="53.7501%" y="383.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data::_{{closure}} (3 samples, 0.02%)</title><rect x="53.5831%" y="357" width="0.0191%" height="15" fill="rgb(241,137,19)" fg:x="8397" fg:w="3"/><text x="53.8331%" y="367.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="53.5831%" y="341" width="0.0191%" height="15" fill="rgb(244,24,17)" fg:x="8397" fg:w="3"/><text x="53.8331%" y="351.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="53.5831%" y="325" width="0.0191%" height="15" fill="rgb(245,178,49)" fg:x="8397" fg:w="3"/><text x="53.8331%" y="335.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (2 samples, 0.01%)</title><rect x="53.6022%" y="437" width="0.0128%" height="15" fill="rgb(219,160,38)" fg:x="8400" fg:w="2"/><text x="53.8522%" y="447.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1,288 samples, 8.22%)</title><rect x="45.4023%" y="501" width="8.2190%" height="15" fill="rgb(228,137,14)" fg:x="7115" fg:w="1288"/><text x="45.6523%" y="511.50">deno`Builti..</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1,287 samples, 8.21%)</title><rect x="45.4087%" y="485" width="8.2126%" height="15" fill="rgb(237,134,11)" fg:x="7116" fg:w="1287"/><text x="45.6587%" y="495.50">deno`v8::in..</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1,280 samples, 8.17%)</title><rect x="45.4534%" y="469" width="8.1680%" height="15" fill="rgb(211,126,44)" fg:x="7123" fg:w="1280"/><text x="45.7034%" y="479.50">deno`v8::in..</text></g><g><title>deno`v8::internal::FunctionCallbackArguments::Call (1,271 samples, 8.11%)</title><rect x="45.5108%" y="453" width="8.1105%" height="15" fill="rgb(226,171,33)" fg:x="7132" fg:w="1271"/><text x="45.7608%" y="463.50">deno`v8::in..</text></g><g><title>0x11005582c (1,293 samples, 8.25%)</title><rect x="45.3896%" y="517" width="8.2509%" height="15" fill="rgb(253,99,13)" fg:x="7113" fg:w="1293"/><text x="45.6396%" y="527.50">0x11005582c</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.02%)</title><rect x="53.6213%" y="501" width="0.0191%" height="15" fill="rgb(244,48,7)" fg:x="8403" fg:w="3"/><text x="53.8713%" y="511.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (3 samples, 0.02%)</title><rect x="53.6915%" y="517" width="0.0191%" height="15" fill="rgb(244,217,54)" fg:x="8414" fg:w="3"/><text x="53.9415%" y="527.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (3 samples, 0.02%)</title><rect x="53.7107%" y="517" width="0.0191%" height="15" fill="rgb(224,15,18)" fg:x="8417" fg:w="3"/><text x="53.9607%" y="527.50"></text></g><g><title>deno`Builtins_KeyedLoadICTrampoline (2 samples, 0.01%)</title><rect x="53.7362%" y="517" width="0.0128%" height="15" fill="rgb(244,99,12)" fg:x="8421" fg:w="2"/><text x="53.9862%" y="527.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_PolymorphicName (2 samples, 0.01%)</title><rect x="53.7490%" y="517" width="0.0128%" height="15" fill="rgb(233,226,8)" fg:x="8423" fg:w="2"/><text x="53.9990%" y="527.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (2 samples, 0.01%)</title><rect x="53.7617%" y="517" width="0.0128%" height="15" fill="rgb(229,211,3)" fg:x="8425" fg:w="2"/><text x="54.0117%" y="527.50"></text></g><g><title>0x1100526f4 (1,418 samples, 9.05%)</title><rect x="44.7323%" y="533" width="9.0486%" height="15" fill="rgb(216,140,21)" fg:x="7010" fg:w="1418"/><text x="44.9823%" y="543.50">0x1100526f4</text></g><g><title>0x1100526fc (2 samples, 0.01%)</title><rect x="53.7809%" y="533" width="0.0128%" height="15" fill="rgb(234,122,30)" fg:x="8428" fg:w="2"/><text x="54.0309%" y="543.50"></text></g><g><title>0x110052708 (4 samples, 0.03%)</title><rect x="53.7936%" y="533" width="0.0255%" height="15" fill="rgb(236,25,46)" fg:x="8430" fg:w="4"/><text x="54.0436%" y="543.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (4 samples, 0.03%)</title><rect x="53.7936%" y="517" width="0.0255%" height="15" fill="rgb(217,52,54)" fg:x="8430" fg:w="4"/><text x="54.0436%" y="527.50"></text></g><g><title>0x110052cc8 (2 samples, 0.01%)</title><rect x="53.8447%" y="533" width="0.0128%" height="15" fill="rgb(222,29,26)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="543.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="53.8447%" y="517" width="0.0128%" height="15" fill="rgb(216,177,29)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="527.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="53.8447%" y="501" width="0.0128%" height="15" fill="rgb(247,136,51)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="511.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="53.8447%" y="485" width="0.0128%" height="15" fill="rgb(231,47,47)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="495.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="53.8447%" y="469" width="0.0128%" height="15" fill="rgb(211,192,36)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="479.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="53.8447%" y="453" width="0.0128%" height="15" fill="rgb(229,156,32)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="463.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="53.8447%" y="437" width="0.0128%" height="15" fill="rgb(248,213,20)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="447.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="53.8447%" y="421" width="0.0128%" height="15" fill="rgb(217,64,7)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="431.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="53.8447%" y="405" width="0.0128%" height="15" fill="rgb(232,142,8)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="415.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="53.8447%" y="389" width="0.0128%" height="15" fill="rgb(224,92,44)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="399.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.01%)</title><rect x="53.8447%" y="373" width="0.0128%" height="15" fill="rgb(214,169,17)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="383.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.01%)</title><rect x="53.8447%" y="357" width="0.0128%" height="15" fill="rgb(210,59,37)" fg:x="8438" fg:w="2"/><text x="54.0947%" y="367.50"></text></g><g><title>0x110053ac0 (3 samples, 0.02%)</title><rect x="53.9021%" y="533" width="0.0191%" height="15" fill="rgb(214,116,48)" fg:x="8447" fg:w="3"/><text x="54.1521%" y="543.50"></text></g><g><title>0x1100554a0 (2 samples, 0.01%)</title><rect x="53.9276%" y="533" width="0.0128%" height="15" fill="rgb(244,191,6)" fg:x="8451" fg:w="2"/><text x="54.1776%" y="543.50"></text></g><g><title>0x1100554b8 (2 samples, 0.01%)</title><rect x="53.9404%" y="533" width="0.0128%" height="15" fill="rgb(241,50,52)" fg:x="8453" fg:w="2"/><text x="54.1904%" y="543.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (4 samples, 0.03%)</title><rect x="53.9595%" y="533" width="0.0255%" height="15" fill="rgb(236,75,39)" fg:x="8456" fg:w="4"/><text x="54.2095%" y="543.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (3 samples, 0.02%)</title><rect x="53.9851%" y="533" width="0.0191%" height="15" fill="rgb(236,99,0)" fg:x="8460" fg:w="3"/><text x="54.2351%" y="543.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="53.9914%" y="517" width="0.0128%" height="15" fill="rgb(207,202,15)" fg:x="8461" fg:w="2"/><text x="54.2414%" y="527.50"></text></g><g><title>deno`Builtins_LoadIC (20 samples, 0.13%)</title><rect x="54.0042%" y="533" width="0.1276%" height="15" fill="rgb(233,207,14)" fg:x="8463" fg:w="20"/><text x="54.2542%" y="543.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (2 samples, 0.01%)</title><rect x="54.1318%" y="533" width="0.0128%" height="15" fill="rgb(226,27,51)" fg:x="8483" fg:w="2"/><text x="54.3818%" y="543.50"></text></g><g><title>deno`Builtins_NumberToString (7 samples, 0.04%)</title><rect x="54.1446%" y="533" width="0.0447%" height="15" fill="rgb(206,104,42)" fg:x="8485" fg:w="7"/><text x="54.3946%" y="543.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (19 samples, 0.12%)</title><rect x="54.1893%" y="533" width="0.1212%" height="15" fill="rgb(212,225,4)" fg:x="8492" fg:w="19"/><text x="54.4393%" y="543.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (5,653 samples, 36.07%)</title><rect x="18.2439%" y="549" width="36.0730%" height="15" fill="rgb(233,96,42)" fg:x="2859" fg:w="5653"/><text x="18.4939%" y="559.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (5,675 samples, 36.21%)</title><rect x="18.1865%" y="565" width="36.2134%" height="15" fill="rgb(229,21,32)" fg:x="2850" fg:w="5675"/><text x="18.4365%" y="575.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (11 samples, 0.07%)</title><rect x="54.3297%" y="549" width="0.0702%" height="15" fill="rgb(226,216,24)" fg:x="8514" fg:w="11"/><text x="54.5797%" y="559.50"></text></g><g><title>deno`Builtins_RecordWriteIgnoreFP (4 samples, 0.03%)</title><rect x="54.3743%" y="533" width="0.0255%" height="15" fill="rgb(221,163,17)" fg:x="8521" fg:w="4"/><text x="54.6243%" y="543.50"></text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (5,715 samples, 36.47%)</title><rect x="17.9376%" y="597" width="36.4686%" height="15" fill="rgb(216,216,42)" fg:x="2811" fg:w="5715"/><text x="18.1876%" y="607.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (5,714 samples, 36.46%)</title><rect x="17.9440%" y="581" width="36.4623%" height="15" fill="rgb(240,118,7)" fg:x="2812" fg:w="5714"/><text x="18.1940%" y="591.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (5,721 samples, 36.51%)</title><rect x="17.9121%" y="613" width="36.5069%" height="15" fill="rgb(221,67,37)" fg:x="2807" fg:w="5721"/><text x="18.1621%" y="623.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::intern..</text></g><g><title>deno`v8::internal::SaveContext::SaveContext (2 samples, 0.01%)</title><rect x="54.4062%" y="597" width="0.0128%" height="15" fill="rgb(241,32,44)" fg:x="8526" fg:w="2"/><text x="54.6562%" y="607.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (5,810 samples, 37.07%)</title><rect x="17.3760%" y="709" width="37.0749%" height="15" fill="rgb(235,204,43)" fg:x="2723" fg:w="5810"/><text x="17.6260%" y="719.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8..</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (5,758 samples, 36.74%)</title><rect x="17.7079%" y="693" width="36.7430%" height="15" fill="rgb(213,116,10)" fg:x="2775" fg:w="5758"/><text x="17.9579%" y="703.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (5,753 samples, 36.71%)</title><rect x="17.7398%" y="677" width="36.7111%" height="15" fill="rgb(239,15,48)" fg:x="2780" fg:w="5753"/><text x="17.9898%" y="687.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (5,747 samples, 36.67%)</title><rect x="17.7781%" y="661" width="36.6728%" height="15" fill="rgb(207,123,36)" fg:x="2786" fg:w="5747"/><text x="18.0281%" y="671.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*, v8::internal::MaybeHandle (5,735 samples, 36.60%)</title><rect x="17.8546%" y="645" width="36.5963%" height="15" fill="rgb(209,103,30)" fg:x="2798" fg:w="5735"/><text x="18.1046%" y="655.50">deno`v8::internal::Execution::TryRunMicrotasks(v8::internal:..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (5,730 samples, 36.56%)</title><rect x="17.8865%" y="629" width="36.5644%" height="15" fill="rgb(238,100,19)" fg:x="2803" fg:w="5730"/><text x="18.1365%" y="639.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatc..</text></g><g><title>deno`v8::internal::SaveContext::~SaveContext (3 samples, 0.02%)</title><rect x="54.4318%" y="613" width="0.0191%" height="15" fill="rgb(244,30,14)" fg:x="8530" fg:w="3"/><text x="54.6818%" y="623.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (2 samples, 0.01%)</title><rect x="54.4509%" y="709" width="0.0128%" height="15" fill="rgb(249,174,6)" fg:x="8533" fg:w="2"/><text x="54.7009%" y="719.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (2 samples, 0.01%)</title><rect x="54.4700%" y="709" width="0.0128%" height="15" fill="rgb(235,213,41)" fg:x="8536" fg:w="2"/><text x="54.7200%" y="719.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call::_{{closure}} (5,820 samples, 37.14%)</title><rect x="17.3569%" y="725" width="37.1387%" height="15" fill="rgb(213,118,6)" fg:x="2720" fg:w="5820"/><text x="17.6069%" y="735.50">deno`v8::function::_&lt;impl v8::data::Function&gt;::call::_{{clos..</text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (2 samples, 0.01%)</title><rect x="54.4828%" y="709" width="0.0128%" height="15" fill="rgb(235,44,51)" fg:x="8538" fg:w="2"/><text x="54.7328%" y="719.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="54.5083%" y="709" width="0.0128%" height="15" fill="rgb(217,9,53)" fg:x="8542" fg:w="2"/><text x="54.7583%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="54.5211%" y="693" width="0.0128%" height="15" fill="rgb(237,172,34)" fg:x="8544" fg:w="2"/><text x="54.7711%" y="703.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (3 samples, 0.02%)</title><rect x="54.5211%" y="709" width="0.0191%" height="15" fill="rgb(206,206,11)" fg:x="8544" fg:w="3"/><text x="54.7711%" y="719.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call (5,841 samples, 37.27%)</title><rect x="17.2739%" y="757" width="37.2727%" height="15" fill="rgb(214,149,29)" fg:x="2707" fg:w="5841"/><text x="17.5239%" y="767.50">deno`v8::function::_&lt;impl v8::data::Function&gt;::call</text></g><g><title>deno`v8::scope::HandleScope&lt;()&gt;::cast_local (5,832 samples, 37.22%)</title><rect x="17.3314%" y="741" width="37.2152%" height="15" fill="rgb(208,123,3)" fg:x="2716" fg:w="5832"/><text x="17.5814%" y="751.50">deno`v8::scope::HandleScope&lt;()&gt;::cast_local</text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (7 samples, 0.04%)</title><rect x="54.5019%" y="725" width="0.0447%" height="15" fill="rgb(229,126,4)" fg:x="8541" fg:w="7"/><text x="54.7519%" y="735.50"></text></g><g><title>deno`&lt;v8::handle::Global&lt;T&gt; as v8::handle::Handle&gt;::get_handle_info (3 samples, 0.02%)</title><rect x="54.5594%" y="725" width="0.0191%" height="15" fill="rgb(222,92,36)" fg:x="8550" fg:w="3"/><text x="54.8094%" y="735.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="54.5658%" y="709" width="0.0128%" height="15" fill="rgb(216,39,41)" fg:x="8551" fg:w="2"/><text x="54.8158%" y="719.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_host (5 samples, 0.03%)</title><rect x="54.5849%" y="709" width="0.0319%" height="15" fill="rgb(253,127,28)" fg:x="8554" fg:w="5"/><text x="54.8349%" y="719.50"></text></g><g><title>deno`v8::handle::HandleHost::match_host (5 samples, 0.03%)</title><rect x="54.5849%" y="693" width="0.0319%" height="15" fill="rgb(249,152,51)" fg:x="8554" fg:w="5"/><text x="54.8349%" y="703.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="54.6040%" y="677" width="0.0128%" height="15" fill="rgb(209,123,42)" fg:x="8557" fg:w="2"/><text x="54.8540%" y="687.50"></text></g><g><title>deno`v8::handle::Global&lt;T&gt;::open (12 samples, 0.08%)</title><rect x="54.5466%" y="757" width="0.0766%" height="15" fill="rgb(241,118,22)" fg:x="8548" fg:w="12"/><text x="54.7966%" y="767.50"></text></g><g><title>deno`v8::handle::Handle::open (11 samples, 0.07%)</title><rect x="54.5530%" y="741" width="0.0702%" height="15" fill="rgb(208,25,7)" fg:x="8549" fg:w="11"/><text x="54.8030%" y="751.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (7 samples, 0.04%)</title><rect x="54.5785%" y="725" width="0.0447%" height="15" fill="rgb(243,144,39)" fg:x="8553" fg:w="7"/><text x="54.8285%" y="735.50"></text></g><g><title>deno`v8::Integer::New (3 samples, 0.02%)</title><rect x="54.6296%" y="725" width="0.0191%" height="15" fill="rgb(250,50,5)" fg:x="8561" fg:w="3"/><text x="54.8796%" y="735.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="54.6551%" y="709" width="0.0128%" height="15" fill="rgb(207,67,11)" fg:x="8565" fg:w="2"/><text x="54.9051%" y="719.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw::_{{closure}} (2 samples, 0.01%)</title><rect x="54.6551%" y="693" width="0.0128%" height="15" fill="rgb(245,204,40)" fg:x="8565" fg:w="2"/><text x="54.9051%" y="703.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw (4 samples, 0.03%)</title><rect x="54.6487%" y="725" width="0.0255%" height="15" fill="rgb(238,228,24)" fg:x="8564" fg:w="4"/><text x="54.8987%" y="735.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new::_{{closure}} (2 samples, 0.01%)</title><rect x="54.6742%" y="725" width="0.0128%" height="15" fill="rgb(217,116,22)" fg:x="8568" fg:w="2"/><text x="54.9242%" y="735.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="54.6870%" y="709" width="0.0255%" height="15" fill="rgb(234,98,12)" fg:x="8570" fg:w="4"/><text x="54.9370%" y="719.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new (18 samples, 0.11%)</title><rect x="54.6232%" y="757" width="0.1149%" height="15" fill="rgb(242,170,50)" fg:x="8560" fg:w="18"/><text x="54.8732%" y="767.50"></text></g><g><title>deno`v8::scope::HandleScope&lt;()&gt;::cast_local (17 samples, 0.11%)</title><rect x="54.6296%" y="741" width="0.1085%" height="15" fill="rgb(235,7,5)" fg:x="8561" fg:w="17"/><text x="54.8796%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (8 samples, 0.05%)</title><rect x="54.6870%" y="725" width="0.0510%" height="15" fill="rgb(241,114,28)" fg:x="8570" fg:w="8"/><text x="54.9370%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (3 samples, 0.02%)</title><rect x="54.7189%" y="709" width="0.0191%" height="15" fill="rgb(246,112,42)" fg:x="8575" fg:w="3"/><text x="54.9689%" y="719.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="54.7253%" y="693" width="0.0128%" height="15" fill="rgb(248,228,14)" fg:x="8576" fg:w="2"/><text x="54.9753%" y="703.50"></text></g><g><title>deno`v8::handle::Local&lt;T&gt;::from_raw (3 samples, 0.02%)</title><rect x="54.7636%" y="725" width="0.0191%" height="15" fill="rgb(208,133,18)" fg:x="8582" fg:w="3"/><text x="55.0136%" y="735.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="54.7636%" y="709" width="0.0191%" height="15" fill="rgb(207,35,49)" fg:x="8582" fg:w="3"/><text x="55.0136%" y="719.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="54.7636%" y="693" width="0.0191%" height="15" fill="rgb(205,68,36)" fg:x="8582" fg:w="3"/><text x="55.0136%" y="703.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="54.7827%" y="709" width="0.0128%" height="15" fill="rgb(245,62,40)" fg:x="8585" fg:w="2"/><text x="55.0327%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="54.8019%" y="709" width="0.0128%" height="15" fill="rgb(228,27,24)" fg:x="8588" fg:w="2"/><text x="55.0519%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (8 samples, 0.05%)</title><rect x="54.7827%" y="725" width="0.0510%" height="15" fill="rgb(253,19,12)" fg:x="8585" fg:w="8"/><text x="55.0327%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_isolate (3 samples, 0.02%)</title><rect x="54.8146%" y="709" width="0.0191%" height="15" fill="rgb(232,28,20)" fg:x="8590" fg:w="3"/><text x="55.0646%" y="719.50"></text></g><g><title>deno`v8::primitives::undefined (16 samples, 0.10%)</title><rect x="54.7381%" y="757" width="0.1021%" height="15" fill="rgb(218,35,51)" fg:x="8578" fg:w="16"/><text x="54.9881%" y="767.50"></text></g><g><title>deno`v8::scope::HandleScope&lt;()&gt;::cast_local (15 samples, 0.10%)</title><rect x="54.7444%" y="741" width="0.0957%" height="15" fill="rgb(212,90,40)" fg:x="8579" fg:w="15"/><text x="54.9944%" y="751.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="54.8402%" y="709" width="0.0191%" height="15" fill="rgb(220,172,12)" fg:x="8594" fg:w="3"/><text x="55.0902%" y="719.50"></text></g><g><title>deno`&lt;core::num::nonzero::NonZeroUsize as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="54.8465%" y="693" width="0.0128%" height="15" fill="rgb(226,159,20)" fg:x="8595" fg:w="2"/><text x="55.0965%" y="703.50"></text></g><g><title>deno`&lt;v8::scope::TryCatch&lt;v8::scope::HandleScope&lt;C&gt;&gt; as core::convert::AsMut&lt;v8::scope::HandleScope&lt;()&gt;&gt;&gt;::as_mut (4 samples, 0.03%)</title><rect x="54.8402%" y="741" width="0.0255%" height="15" fill="rgb(234,205,16)" fg:x="8594" fg:w="4"/><text x="55.0902%" y="751.50"></text></g><g><title>deno`&lt;T as v8::scope::ScopeCast&gt;::cast_mut (4 samples, 0.03%)</title><rect x="54.8402%" y="725" width="0.0255%" height="15" fill="rgb(207,9,39)" fg:x="8594" fg:w="4"/><text x="55.0902%" y="735.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="54.8721%" y="709" width="0.0128%" height="15" fill="rgb(249,143,15)" fg:x="8599" fg:w="2"/><text x="55.1221%" y="719.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::exception::_{{closure}} (3 samples, 0.02%)</title><rect x="54.8721%" y="725" width="0.0191%" height="15" fill="rgb(253,133,29)" fg:x="8599" fg:w="3"/><text x="55.1221%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (4 samples, 0.03%)</title><rect x="54.8912%" y="725" width="0.0255%" height="15" fill="rgb(221,187,0)" fg:x="8602" fg:w="4"/><text x="55.1412%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (3 samples, 0.02%)</title><rect x="54.8976%" y="709" width="0.0191%" height="15" fill="rgb(205,204,26)" fg:x="8603" fg:w="3"/><text x="55.1476%" y="719.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="54.9040%" y="693" width="0.0128%" height="15" fill="rgb(224,68,54)" fg:x="8604" fg:w="2"/><text x="55.1540%" y="703.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::exception (13 samples, 0.08%)</title><rect x="54.8402%" y="757" width="0.0830%" height="15" fill="rgb(209,67,4)" fg:x="8594" fg:w="13"/><text x="55.0902%" y="767.50"></text></g><g><title>deno`v8::scope::HandleScope&lt;()&gt;::cast_local (9 samples, 0.06%)</title><rect x="54.8657%" y="741" width="0.0574%" height="15" fill="rgb(228,229,18)" fg:x="8598" fg:w="9"/><text x="55.1157%" y="751.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="54.9295%" y="709" width="0.0191%" height="15" fill="rgb(231,89,13)" fg:x="8608" fg:w="3"/><text x="55.1795%" y="719.50"></text></g><g><title>deno`&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="54.9359%" y="693" width="0.0128%" height="15" fill="rgb(210,182,18)" fg:x="8609" fg:w="2"/><text x="55.1859%" y="703.50"></text></g><g><title>deno`&lt;T as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (6 samples, 0.04%)</title><rect x="54.9231%" y="741" width="0.0383%" height="15" fill="rgb(240,105,2)" fg:x="8607" fg:w="6"/><text x="55.1731%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_mut (6 samples, 0.04%)</title><rect x="54.9231%" y="725" width="0.0383%" height="15" fill="rgb(207,170,50)" fg:x="8607" fg:w="6"/><text x="55.1731%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_current_scope_data (2 samples, 0.01%)</title><rect x="54.9486%" y="709" width="0.0128%" height="15" fill="rgb(232,133,24)" fg:x="8611" fg:w="2"/><text x="55.1986%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="54.9486%" y="693" width="0.0128%" height="15" fill="rgb(235,166,27)" fg:x="8611" fg:w="2"/><text x="55.1986%" y="703.50"></text></g><g><title>deno`&lt;core::alloc::layout::Layout as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="54.9933%" y="725" width="0.0191%" height="15" fill="rgb(209,19,13)" fg:x="8618" fg:w="3"/><text x="55.2433%" y="735.50"></text></g><g><title>deno`&lt;core::mem::valid_align::ValidAlign as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="54.9933%" y="709" width="0.0191%" height="15" fill="rgb(226,79,39)" fg:x="8618" fg:w="3"/><text x="55.2433%" y="719.50"></text></g><g><title>deno`core::mem::valid_align::ValidAlign::as_nonzero (2 samples, 0.01%)</title><rect x="54.9997%" y="693" width="0.0128%" height="15" fill="rgb(222,163,10)" fg:x="8619" fg:w="2"/><text x="55.2497%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::as_scope (10 samples, 0.06%)</title><rect x="54.9678%" y="741" width="0.0638%" height="15" fill="rgb(214,44,19)" fg:x="8614" fg:w="10"/><text x="55.2178%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="55.0188%" y="725" width="0.0128%" height="15" fill="rgb(210,217,13)" fg:x="8622" fg:w="2"/><text x="55.2688%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="55.0188%" y="709" width="0.0128%" height="15" fill="rgb(237,61,54)" fg:x="8622" fg:w="2"/><text x="55.2688%" y="719.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="55.0188%" y="693" width="0.0128%" height="15" fill="rgb(226,184,24)" fg:x="8622" fg:w="2"/><text x="55.2688%" y="703.50"></text></g><g><title>deno`v8::isolate::Isolate::set_current_scope_data (6 samples, 0.04%)</title><rect x="55.0699%" y="709" width="0.0383%" height="15" fill="rgb(223,226,4)" fg:x="8630" fg:w="6"/><text x="55.3199%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (6 samples, 0.04%)</title><rect x="55.0699%" y="693" width="0.0383%" height="15" fill="rgb(210,26,41)" fg:x="8630" fg:w="6"/><text x="55.3199%" y="703.50"></text></g><g><title>deno`&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="55.1082%" y="693" width="0.0128%" height="15" fill="rgb(220,221,6)" fg:x="8636" fg:w="2"/><text x="55.3582%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::allocate_or_reuse_scope_data (4 samples, 0.03%)</title><rect x="55.1082%" y="709" width="0.0255%" height="15" fill="rgb(225,89,49)" fg:x="8636" fg:w="4"/><text x="55.3582%" y="719.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::new (40 samples, 0.26%)</title><rect x="54.9231%" y="757" width="0.2552%" height="15" fill="rgb(218,70,45)" fg:x="8607" fg:w="40"/><text x="55.1731%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (22 samples, 0.14%)</title><rect x="55.0380%" y="741" width="0.1404%" height="15" fill="rgb(238,166,21)" fg:x="8625" fg:w="22"/><text x="55.2880%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_scope_data_with (21 samples, 0.13%)</title><rect x="55.0443%" y="725" width="0.1340%" height="15" fill="rgb(224,141,44)" fg:x="8626" fg:w="21"/><text x="55.2943%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data::_{{closure}} (7 samples, 0.04%)</title><rect x="55.1337%" y="709" width="0.0447%" height="15" fill="rgb(230,12,49)" fg:x="8640" fg:w="7"/><text x="55.3837%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeTypeSpecificData::init_with (6 samples, 0.04%)</title><rect x="55.1401%" y="693" width="0.0383%" height="15" fill="rgb(212,174,12)" fg:x="8641" fg:w="6"/><text x="55.3901%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data::_{{closure}}::_{{closure}} (4 samples, 0.03%)</title><rect x="55.1528%" y="677" width="0.0255%" height="15" fill="rgb(246,67,9)" fg:x="8643" fg:w="4"/><text x="55.4028%" y="687.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="55.1592%" y="661" width="0.0191%" height="15" fill="rgb(239,35,23)" fg:x="8644" fg:w="3"/><text x="55.4092%" y="671.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::resolve_async_ops (6,650 samples, 42.44%)</title><rect x="12.7497%" y="773" width="42.4351%" height="15" fill="rgb(211,167,0)" fg:x="1998" fg:w="6650"/><text x="12.9997%" y="783.50">deno`deno_core::runtime::JsRuntime::resolve_async_ops</text></g><g><title>deno`alloc::rc::RcInnerPtr::inc_strong (5 samples, 0.03%)</title><rect x="55.2166%" y="741" width="0.0319%" height="15" fill="rgb(225,119,45)" fg:x="8653" fg:w="5"/><text x="55.4666%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="55.2358%" y="725" width="0.0128%" height="15" fill="rgb(210,162,6)" fg:x="8656" fg:w="2"/><text x="55.4858%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="55.2358%" y="709" width="0.0128%" height="15" fill="rgb(208,118,35)" fg:x="8656" fg:w="2"/><text x="55.4858%" y="719.50"></text></g><g><title>deno`&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.06%)</title><rect x="55.1975%" y="757" width="0.0574%" height="15" fill="rgb(239,4,53)" fg:x="8650" fg:w="9"/><text x="55.4475%" y="767.50"></text></g><g><title>deno`&lt;v8::isolate::BuildTypeIdHasher as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.01%)</title><rect x="55.3187%" y="661" width="0.0128%" height="15" fill="rgb(213,130,21)" fg:x="8669" fg:w="2"/><text x="55.5687%" y="671.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (2 samples, 0.01%)</title><rect x="55.3187%" y="645" width="0.0128%" height="15" fill="rgb(235,148,0)" fg:x="8669" fg:w="2"/><text x="55.5687%" y="655.50"></text></g><g><title>deno`hashbrown::map::make_hash (7 samples, 0.04%)</title><rect x="55.2996%" y="693" width="0.0447%" height="15" fill="rgb(244,224,18)" fg:x="8666" fg:w="7"/><text x="55.5496%" y="703.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="55.3060%" y="677" width="0.0383%" height="15" fill="rgb(211,214,4)" fg:x="8667" fg:w="6"/><text x="55.5560%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3 samples, 0.02%)</title><rect x="55.3570%" y="661" width="0.0191%" height="15" fill="rgb(206,119,25)" fg:x="8675" fg:w="3"/><text x="55.6070%" y="671.50"></text></g><g><title>deno`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="55.3953%" y="645" width="0.0128%" height="15" fill="rgb(243,93,47)" fg:x="8681" fg:w="2"/><text x="55.6453%" y="655.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="55.4081%" y="629" width="0.0191%" height="15" fill="rgb(224,194,6)" fg:x="8683" fg:w="3"/><text x="55.6581%" y="639.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="55.4145%" y="613" width="0.0128%" height="15" fill="rgb(243,229,6)" fg:x="8684" fg:w="2"/><text x="55.6645%" y="623.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.03%)</title><rect x="55.4081%" y="645" width="0.0319%" height="15" fill="rgb(207,23,50)" fg:x="8683" fg:w="5"/><text x="55.6581%" y="655.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.01%)</title><rect x="55.4272%" y="629" width="0.0128%" height="15" fill="rgb(253,192,32)" fg:x="8686" fg:w="2"/><text x="55.6772%" y="639.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (2 samples, 0.01%)</title><rect x="55.4527%" y="645" width="0.0128%" height="15" fill="rgb(213,21,6)" fg:x="8690" fg:w="2"/><text x="55.7027%" y="655.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (29 samples, 0.19%)</title><rect x="55.2932%" y="741" width="0.1851%" height="15" fill="rgb(243,151,13)" fg:x="8665" fg:w="29"/><text x="55.5432%" y="751.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (29 samples, 0.19%)</title><rect x="55.2932%" y="725" width="0.1851%" height="15" fill="rgb(233,165,41)" fg:x="8665" fg:w="29"/><text x="55.5432%" y="735.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 0.18%)</title><rect x="55.2996%" y="709" width="0.1787%" height="15" fill="rgb(246,176,45)" fg:x="8666" fg:w="28"/><text x="55.5496%" y="719.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get (21 samples, 0.13%)</title><rect x="55.3443%" y="693" width="0.1340%" height="15" fill="rgb(217,170,52)" fg:x="8673" fg:w="21"/><text x="55.5943%" y="703.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (21 samples, 0.13%)</title><rect x="55.3443%" y="677" width="0.1340%" height="15" fill="rgb(214,203,54)" fg:x="8673" fg:w="21"/><text x="55.5943%" y="687.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (16 samples, 0.10%)</title><rect x="55.3762%" y="661" width="0.1021%" height="15" fill="rgb(248,215,49)" fg:x="8678" fg:w="16"/><text x="55.6262%" y="671.50"></text></g><g><title>deno`hashbrown::raw::h2 (2 samples, 0.01%)</title><rect x="55.4655%" y="645" width="0.0128%" height="15" fill="rgb(208,46,10)" fg:x="8692" fg:w="2"/><text x="55.7155%" y="655.50"></text></g><g><title>deno`core::cmp::Ord::min (2 samples, 0.01%)</title><rect x="55.4655%" y="629" width="0.0128%" height="15" fill="rgb(254,5,31)" fg:x="8692" fg:w="2"/><text x="55.7155%" y="639.50"></text></g><g><title>deno`core::cmp::min_by (2 samples, 0.01%)</title><rect x="55.4655%" y="613" width="0.0128%" height="15" fill="rgb(222,104,33)" fg:x="8692" fg:w="2"/><text x="55.7155%" y="623.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (47 samples, 0.30%)</title><rect x="55.1847%" y="773" width="0.2999%" height="15" fill="rgb(248,49,16)" fg:x="8648" fg:w="47"/><text x="55.4347%" y="783.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (33 samples, 0.21%)</title><rect x="55.2741%" y="757" width="0.2106%" height="15" fill="rgb(232,198,41)" fg:x="8662" fg:w="33"/><text x="55.5241%" y="767.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::v8_isolate (4 samples, 0.03%)</title><rect x="55.4847%" y="773" width="0.0255%" height="15" fill="rgb(214,125,3)" fg:x="8695" fg:w="4"/><text x="55.7347%" y="783.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap (2 samples, 0.01%)</title><rect x="55.4974%" y="757" width="0.0128%" height="15" fill="rgb(229,220,28)" fg:x="8697" fg:w="2"/><text x="55.7474%" y="767.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (3 samples, 0.02%)</title><rect x="55.5102%" y="773" width="0.0191%" height="15" fill="rgb(222,64,37)" fg:x="8699" fg:w="3"/><text x="55.7602%" y="783.50"></text></g><g><title>deno`&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="55.5548%" y="709" width="0.0255%" height="15" fill="rgb(249,184,13)" fg:x="8706" fg:w="4"/><text x="55.8048%" y="719.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.03%)</title><rect x="55.5548%" y="693" width="0.0255%" height="15" fill="rgb(252,176,6)" fg:x="8706" fg:w="4"/><text x="55.8048%" y="703.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (11 samples, 0.07%)</title><rect x="55.5357%" y="757" width="0.0702%" height="15" fill="rgb(228,153,7)" fg:x="8703" fg:w="11"/><text x="55.7857%" y="767.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (8 samples, 0.05%)</title><rect x="55.5548%" y="741" width="0.0510%" height="15" fill="rgb(242,193,5)" fg:x="8706" fg:w="8"/><text x="55.8048%" y="751.50"></text></g><g><title>deno`tokio::util::wake::inc_ref_count (8 samples, 0.05%)</title><rect x="55.5548%" y="725" width="0.0510%" height="15" fill="rgb(232,140,9)" fg:x="8706" fg:w="8"/><text x="55.8048%" y="735.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (4 samples, 0.03%)</title><rect x="55.5804%" y="709" width="0.0255%" height="15" fill="rgb(213,222,16)" fg:x="8710" fg:w="4"/><text x="55.8304%" y="719.50"></text></g><g><title>deno`alloc::sync::data_offset (2 samples, 0.01%)</title><rect x="55.5931%" y="693" width="0.0128%" height="15" fill="rgb(222,75,50)" fg:x="8712" fg:w="2"/><text x="55.8431%" y="703.50"></text></g><g><title>deno`alloc::sync::data_offset_align (2 samples, 0.01%)</title><rect x="55.5931%" y="677" width="0.0128%" height="15" fill="rgb(205,180,2)" fg:x="8712" fg:w="2"/><text x="55.8431%" y="687.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::compare_exchange (3 samples, 0.02%)</title><rect x="55.6059%" y="757" width="0.0191%" height="15" fill="rgb(216,34,7)" fg:x="8714" fg:w="3"/><text x="55.8559%" y="767.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (3 samples, 0.02%)</title><rect x="55.6059%" y="741" width="0.0191%" height="15" fill="rgb(253,16,32)" fg:x="8714" fg:w="3"/><text x="55.8559%" y="751.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (16 samples, 0.10%)</title><rect x="55.5293%" y="773" width="0.1021%" height="15" fill="rgb(208,97,28)" fg:x="8702" fg:w="16"/><text x="55.7793%" y="783.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="55.6569%" y="709" width="0.0128%" height="15" fill="rgb(225,92,11)" fg:x="8722" fg:w="2"/><text x="55.9069%" y="719.50"></text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (3 samples, 0.02%)</title><rect x="55.6697%" y="709" width="0.0191%" height="15" fill="rgb(243,38,12)" fg:x="8724" fg:w="3"/><text x="55.9197%" y="719.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.01%)</title><rect x="55.7016%" y="629" width="0.0128%" height="15" fill="rgb(208,139,16)" fg:x="8729" fg:w="2"/><text x="55.9516%" y="639.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="55.7208%" y="613" width="0.0128%" height="15" fill="rgb(227,24,9)" fg:x="8732" fg:w="2"/><text x="55.9708%" y="623.50"></text></g><g><title>deno`mio::sys::unix::waker::kqueue::Waker::wake (3 samples, 0.02%)</title><rect x="55.7335%" y="613" width="0.0191%" height="15" fill="rgb(206,62,11)" fg:x="8734" fg:w="3"/><text x="55.9835%" y="623.50"></text></g><g><title>deno`mio::sys::unix::selector::kqueue::Selector::wake (3 samples, 0.02%)</title><rect x="55.7527%" y="597" width="0.0191%" height="15" fill="rgb(228,134,27)" fg:x="8737" fg:w="3"/><text x="56.0027%" y="607.50"></text></g><g><title>deno`core::intrinsics::write_bytes (2 samples, 0.01%)</title><rect x="55.7910%" y="565" width="0.0128%" height="15" fill="rgb(205,55,33)" fg:x="8743" fg:w="2"/><text x="56.0410%" y="575.50"></text></g><g><title>deno`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (3 samples, 0.02%)</title><rect x="55.8037%" y="565" width="0.0191%" height="15" fill="rgb(243,75,43)" fg:x="8745" fg:w="3"/><text x="56.0537%" y="575.50"></text></g><g><title>deno`mio::sys::unix::selector::kqueue::Selector::wake (11 samples, 0.07%)</title><rect x="55.7718%" y="581" width="0.0702%" height="15" fill="rgb(223,27,42)" fg:x="8740" fg:w="11"/><text x="56.0218%" y="591.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.02%)</title><rect x="55.8229%" y="565" width="0.0191%" height="15" fill="rgb(232,189,33)" fg:x="8748" fg:w="3"/><text x="56.0729%" y="575.50"></text></g><g><title>deno`mio::sys::unix::selector::kqueue::Selector::wake::_{{closure}} (2 samples, 0.01%)</title><rect x="55.8292%" y="549" width="0.0128%" height="15" fill="rgb(210,9,39)" fg:x="8749" fg:w="2"/><text x="56.0792%" y="559.50"></text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (100 samples, 0.64%)</title><rect x="55.6889%" y="693" width="0.6381%" height="15" fill="rgb(242,85,26)" fg:x="8727" fg:w="100"/><text x="55.9389%" y="703.50"></text></g><g><title>deno`&lt;tokio::time::driver::TimerUnpark&lt;P&gt; as tokio::park::Unpark&gt;::unpark (100 samples, 0.64%)</title><rect x="55.6889%" y="677" width="0.6381%" height="15" fill="rgb(248,44,4)" fg:x="8727" fg:w="100"/><text x="55.9389%" y="687.50"></text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (99 samples, 0.63%)</title><rect x="55.6952%" y="661" width="0.6317%" height="15" fill="rgb(250,96,46)" fg:x="8728" fg:w="99"/><text x="55.9452%" y="671.50"></text></g><g><title>deno`&lt;tokio::io::driver::Handle as tokio::park::Unpark&gt;::unpark (99 samples, 0.63%)</title><rect x="55.6952%" y="645" width="0.6317%" height="15" fill="rgb(229,116,26)" fg:x="8728" fg:w="99"/><text x="55.9452%" y="655.50"></text></g><g><title>deno`tokio::io::driver::Handle::wakeup (96 samples, 0.61%)</title><rect x="55.7144%" y="629" width="0.6126%" height="15" fill="rgb(246,94,34)" fg:x="8731" fg:w="96"/><text x="55.9644%" y="639.50"></text></g><g><title>deno`mio::waker::Waker::wake (90 samples, 0.57%)</title><rect x="55.7527%" y="613" width="0.5743%" height="15" fill="rgb(251,73,21)" fg:x="8737" fg:w="90"/><text x="56.0027%" y="623.50"></text></g><g><title>deno`mio::sys::unix::waker::kqueue::Waker::wake (87 samples, 0.56%)</title><rect x="55.7718%" y="597" width="0.5552%" height="15" fill="rgb(254,121,25)" fg:x="8740" fg:w="87"/><text x="56.0218%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`kevent (76 samples, 0.48%)</title><rect x="55.8420%" y="581" width="0.4850%" height="15" fill="rgb(215,161,49)" fg:x="8751" fg:w="76"/><text x="56.0920%" y="591.50"></text></g><g><title>deno`&lt;tokio::time::driver::TimerUnpark&lt;P&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.01%)</title><rect x="56.3270%" y="693" width="0.0128%" height="15" fill="rgb(221,43,13)" fg:x="8827" fg:w="2"/><text x="56.5770%" y="703.50"></text></g><g><title>deno`core::sync::atomic::AtomicBool::store (5 samples, 0.03%)</title><rect x="56.3397%" y="693" width="0.0319%" height="15" fill="rgb(249,5,37)" fg:x="8829" fg:w="5"/><text x="56.5897%" y="703.50"></text></g><g><title>deno`core::sync::atomic::atomic_store (3 samples, 0.02%)</title><rect x="56.3525%" y="677" width="0.0191%" height="15" fill="rgb(226,25,44)" fg:x="8831" fg:w="3"/><text x="56.6025%" y="687.50"></text></g><g><title>deno`&lt;tokio::runtime::basic_scheduler::Shared as tokio::util::wake::Wake&gt;::wake_by_ref (108 samples, 0.69%)</title><rect x="55.6889%" y="709" width="0.6892%" height="15" fill="rgb(238,189,16)" fg:x="8727" fg:w="108"/><text x="55.9389%" y="719.50"></text></g><g><title>deno`&lt;tokio::runtime::basic_scheduler::Shared as tokio::util::wake::Wake&gt;::wake (116 samples, 0.74%)</title><rect x="55.6569%" y="725" width="0.7402%" height="15" fill="rgb(251,186,8)" fg:x="8722" fg:w="116"/><text x="55.9069%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt; (3 samples, 0.02%)</title><rect x="56.3780%" y="709" width="0.0191%" height="15" fill="rgb(254,34,31)" fg:x="8835" fg:w="3"/><text x="56.6280%" y="719.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="56.3780%" y="693" width="0.0191%" height="15" fill="rgb(225,215,27)" fg:x="8835" fg:w="3"/><text x="56.6280%" y="703.50"></text></g><g><title>deno`core::sync::atomic::atomic_sub (2 samples, 0.01%)</title><rect x="56.3844%" y="677" width="0.0128%" height="15" fill="rgb(221,192,48)" fg:x="8836" fg:w="2"/><text x="56.6344%" y="687.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (3 samples, 0.02%)</title><rect x="56.4227%" y="677" width="0.0191%" height="15" fill="rgb(219,137,20)" fg:x="8842" fg:w="3"/><text x="56.6727%" y="687.50"></text></g><g><title>deno`alloc::sync::data_offset (7 samples, 0.04%)</title><rect x="56.4035%" y="709" width="0.0447%" height="15" fill="rgb(219,84,11)" fg:x="8839" fg:w="7"/><text x="56.6535%" y="719.50"></text></g><g><title>deno`alloc::sync::data_offset_align (6 samples, 0.04%)</title><rect x="56.4099%" y="693" width="0.0383%" height="15" fill="rgb(224,10,23)" fg:x="8840" fg:w="6"/><text x="56.6599%" y="703.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (9 samples, 0.06%)</title><rect x="56.3972%" y="725" width="0.0574%" height="15" fill="rgb(248,22,39)" fg:x="8838" fg:w="9"/><text x="56.6472%" y="735.50"></text></g><g><title>deno`core::task::wake::Waker::wake (130 samples, 0.83%)</title><rect x="55.6506%" y="757" width="0.8296%" height="15" fill="rgb(212,154,20)" fg:x="8721" fg:w="130"/><text x="55.9006%" y="767.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (130 samples, 0.83%)</title><rect x="55.6506%" y="741" width="0.8296%" height="15" fill="rgb(236,199,50)" fg:x="8721" fg:w="130"/><text x="55.9006%" y="751.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::with_metadata_of (3 samples, 0.02%)</title><rect x="56.4610%" y="725" width="0.0191%" height="15" fill="rgb(211,9,17)" fg:x="8848" fg:w="3"/><text x="56.7110%" y="735.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (5 samples, 0.03%)</title><rect x="56.4801%" y="741" width="0.0319%" height="15" fill="rgb(243,216,36)" fg:x="8851" fg:w="5"/><text x="56.7301%" y="751.50"></text></g><g><title>deno`core::ptr::read (5 samples, 0.03%)</title><rect x="56.4801%" y="725" width="0.0319%" height="15" fill="rgb(250,2,10)" fg:x="8851" fg:w="5"/><text x="56.7301%" y="735.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::take (7 samples, 0.04%)</title><rect x="56.4801%" y="757" width="0.0447%" height="15" fill="rgb(226,50,48)" fg:x="8851" fg:w="7"/><text x="56.7301%" y="767.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (142 samples, 0.91%)</title><rect x="55.6378%" y="773" width="0.9061%" height="15" fill="rgb(243,81,16)" fg:x="8719" fg:w="142"/><text x="55.8878%" y="783.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (3 samples, 0.02%)</title><rect x="56.5248%" y="757" width="0.0191%" height="15" fill="rgb(250,14,2)" fg:x="8858" fg:w="3"/><text x="56.7748%" y="767.50"></text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="56.5758%" y="725" width="0.0128%" height="15" fill="rgb(233,135,29)" fg:x="8866" fg:w="2"/><text x="56.8258%" y="735.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="56.5886%" y="725" width="0.0128%" height="15" fill="rgb(224,64,43)" fg:x="8868" fg:w="2"/><text x="56.8386%" y="735.50"></text></g><g><title>deno`&lt;futures_task::waker_ref::WakerRef as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="56.6014%" y="725" width="0.0128%" height="15" fill="rgb(238,84,13)" fg:x="8870" fg:w="2"/><text x="56.8514%" y="735.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (8 samples, 0.05%)</title><rect x="56.6652%" y="709" width="0.0510%" height="15" fill="rgb(253,48,26)" fg:x="8880" fg:w="8"/><text x="56.9152%" y="719.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow (8 samples, 0.05%)</title><rect x="56.6652%" y="693" width="0.0510%" height="15" fill="rgb(205,223,31)" fg:x="8880" fg:w="8"/><text x="56.9152%" y="703.50"></text></g><g><title>deno`core::cell::BorrowRef::new (5 samples, 0.03%)</title><rect x="56.6843%" y="677" width="0.0319%" height="15" fill="rgb(221,41,32)" fg:x="8883" fg:w="5"/><text x="56.9343%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="56.6907%" y="661" width="0.0255%" height="15" fill="rgb(213,158,31)" fg:x="8884" fg:w="4"/><text x="56.9407%" y="671.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="56.6971%" y="645" width="0.0191%" height="15" fill="rgb(245,126,43)" fg:x="8885" fg:w="3"/><text x="56.9471%" y="655.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (4 samples, 0.03%)</title><rect x="56.7290%" y="693" width="0.0255%" height="15" fill="rgb(227,7,22)" fg:x="8890" fg:w="4"/><text x="56.9790%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="56.7418%" y="677" width="0.0128%" height="15" fill="rgb(252,90,44)" fg:x="8892" fg:w="2"/><text x="56.9918%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="56.7418%" y="661" width="0.0128%" height="15" fill="rgb(253,91,0)" fg:x="8892" fg:w="2"/><text x="56.9918%" y="671.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="56.7418%" y="645" width="0.0128%" height="15" fill="rgb(252,175,49)" fg:x="8892" fg:w="2"/><text x="56.9918%" y="655.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (6 samples, 0.04%)</title><rect x="56.7226%" y="709" width="0.0383%" height="15" fill="rgb(246,150,1)" fg:x="8889" fg:w="6"/><text x="56.9726%" y="719.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (3 samples, 0.02%)</title><rect x="56.7609%" y="709" width="0.0191%" height="15" fill="rgb(241,192,25)" fg:x="8895" fg:w="3"/><text x="57.0109%" y="719.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="56.7673%" y="693" width="0.0128%" height="15" fill="rgb(239,187,11)" fg:x="8896" fg:w="2"/><text x="57.0173%" y="703.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::Ref&lt;deno_core::inspector::InspectorFlags&gt;&gt; (4 samples, 0.03%)</title><rect x="56.7800%" y="709" width="0.0255%" height="15" fill="rgb(218,202,51)" fg:x="8898" fg:w="4"/><text x="57.0300%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (4 samples, 0.03%)</title><rect x="56.7800%" y="693" width="0.0255%" height="15" fill="rgb(225,176,8)" fg:x="8898" fg:w="4"/><text x="57.0300%" y="703.50"></text></g><g><title>deno`&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="56.7800%" y="677" width="0.0255%" height="15" fill="rgb(219,122,41)" fg:x="8898" fg:w="4"/><text x="57.0300%" y="687.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="56.7928%" y="661" width="0.0128%" height="15" fill="rgb(248,140,20)" fg:x="8900" fg:w="2"/><text x="57.0428%" y="671.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="56.7928%" y="645" width="0.0128%" height="15" fill="rgb(245,41,37)" fg:x="8900" fg:w="2"/><text x="57.0428%" y="655.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;deno_core::inspector::SessionContainer&gt;&gt; (2 samples, 0.01%)</title><rect x="56.8056%" y="709" width="0.0128%" height="15" fill="rgb(235,82,39)" fg:x="8902" fg:w="2"/><text x="57.0556%" y="719.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (4 samples, 0.03%)</title><rect x="56.8439%" y="661" width="0.0255%" height="15" fill="rgb(230,108,42)" fg:x="8908" fg:w="4"/><text x="57.0939%" y="671.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange (2 samples, 0.01%)</title><rect x="56.8566%" y="645" width="0.0128%" height="15" fill="rgb(215,150,50)" fg:x="8910" fg:w="2"/><text x="57.1066%" y="655.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (2 samples, 0.01%)</title><rect x="56.8566%" y="629" width="0.0128%" height="15" fill="rgb(233,212,5)" fg:x="8910" fg:w="2"/><text x="57.1066%" y="639.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,deno_core::inspector::InspectorWakerInner&gt;&gt; (6 samples, 0.04%)</title><rect x="56.8375%" y="693" width="0.0383%" height="15" fill="rgb(245,80,22)" fg:x="8907" fg:w="6"/><text x="57.0875%" y="703.50"></text></g><g><title>deno`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="56.8375%" y="677" width="0.0383%" height="15" fill="rgb(238,129,16)" fg:x="8907" fg:w="6"/><text x="57.0875%" y="687.50"></text></g><g><title>deno`&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="56.8949%" y="629" width="0.0319%" height="15" fill="rgb(240,19,0)" fg:x="8916" fg:w="5"/><text x="57.1449%" y="639.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="56.8949%" y="613" width="0.0319%" height="15" fill="rgb(232,42,35)" fg:x="8916" fg:w="5"/><text x="57.1449%" y="623.50"></text></g><g><title>deno`core::sync::atomic::atomic_add (2 samples, 0.01%)</title><rect x="56.9140%" y="597" width="0.0128%" height="15" fill="rgb(223,130,24)" fg:x="8919" fg:w="2"/><text x="57.1640%" y="607.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (9 samples, 0.06%)</title><rect x="56.8949%" y="677" width="0.0574%" height="15" fill="rgb(237,16,22)" fg:x="8916" fg:w="9"/><text x="57.1449%" y="687.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (9 samples, 0.06%)</title><rect x="56.8949%" y="661" width="0.0574%" height="15" fill="rgb(248,192,20)" fg:x="8916" fg:w="9"/><text x="57.1449%" y="671.50"></text></g><g><title>deno`tokio::util::wake::inc_ref_count (9 samples, 0.06%)</title><rect x="56.8949%" y="645" width="0.0574%" height="15" fill="rgb(233,167,2)" fg:x="8916" fg:w="9"/><text x="57.1449%" y="655.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (4 samples, 0.03%)</title><rect x="56.9268%" y="629" width="0.0255%" height="15" fill="rgb(252,71,44)" fg:x="8921" fg:w="4"/><text x="57.1768%" y="639.50"></text></g><g><title>deno`alloc::sync::data_offset (3 samples, 0.02%)</title><rect x="56.9332%" y="613" width="0.0191%" height="15" fill="rgb(238,37,47)" fg:x="8922" fg:w="3"/><text x="57.1832%" y="623.50"></text></g><g><title>deno`alloc::sync::data_offset_align (3 samples, 0.02%)</title><rect x="56.9332%" y="597" width="0.0191%" height="15" fill="rgb(214,202,54)" fg:x="8922" fg:w="3"/><text x="57.1832%" y="607.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="56.9523%" y="677" width="0.0255%" height="15" fill="rgb(254,165,40)" fg:x="8925" fg:w="4"/><text x="57.2023%" y="687.50"></text></g><g><title>deno`core::ptr::read (4 samples, 0.03%)</title><rect x="56.9523%" y="661" width="0.0255%" height="15" fill="rgb(246,173,38)" fg:x="8925" fg:w="4"/><text x="57.2023%" y="671.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (2 samples, 0.01%)</title><rect x="56.9779%" y="677" width="0.0128%" height="15" fill="rgb(215,3,27)" fg:x="8929" fg:w="2"/><text x="57.2279%" y="687.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="56.9779%" y="661" width="0.0128%" height="15" fill="rgb(239,169,51)" fg:x="8929" fg:w="2"/><text x="57.2279%" y="671.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (3 samples, 0.02%)</title><rect x="56.9906%" y="677" width="0.0191%" height="15" fill="rgb(212,5,25)" fg:x="8931" fg:w="3"/><text x="57.2406%" y="687.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (3 samples, 0.02%)</title><rect x="56.9906%" y="661" width="0.0191%" height="15" fill="rgb(243,45,17)" fg:x="8931" fg:w="3"/><text x="57.2406%" y="671.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="56.9906%" y="645" width="0.0191%" height="15" fill="rgb(242,97,9)" fg:x="8931" fg:w="3"/><text x="57.2406%" y="655.50"></text></g><g><title>deno`tokio::util::wake::drop_arc_raw (2 samples, 0.01%)</title><rect x="56.9970%" y="629" width="0.0128%" height="15" fill="rgb(228,71,31)" fg:x="8932" fg:w="2"/><text x="57.2470%" y="639.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (2 samples, 0.01%)</title><rect x="56.9970%" y="613" width="0.0128%" height="15" fill="rgb(252,184,16)" fg:x="8932" fg:w="2"/><text x="57.2470%" y="623.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions::_{{closure}} (24 samples, 0.15%)</title><rect x="56.8758%" y="693" width="0.1531%" height="15" fill="rgb(236,169,46)" fg:x="8913" fg:w="24"/><text x="57.1258%" y="703.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="57.0098%" y="677" width="0.0191%" height="15" fill="rgb(207,17,47)" fg:x="8934" fg:w="3"/><text x="57.2598%" y="687.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (7 samples, 0.04%)</title><rect x="57.0353%" y="677" width="0.0447%" height="15" fill="rgb(206,201,28)" fg:x="8938" fg:w="7"/><text x="57.2853%" y="687.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange_weak (3 samples, 0.02%)</title><rect x="57.0608%" y="661" width="0.0191%" height="15" fill="rgb(224,184,23)" fg:x="8942" fg:w="3"/><text x="57.3108%" y="671.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.01%)</title><rect x="57.0672%" y="645" width="0.0128%" height="15" fill="rgb(208,139,48)" fg:x="8943" fg:w="2"/><text x="57.3172%" y="655.50"></text></g><g><title>deno`deno_core::inspector::InspectorWaker::update (42 samples, 0.27%)</title><rect x="56.8247%" y="709" width="0.2680%" height="15" fill="rgb(208,130,10)" fg:x="8905" fg:w="42"/><text x="57.0747%" y="719.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::lock (10 samples, 0.06%)</title><rect x="57.0289%" y="693" width="0.0638%" height="15" fill="rgb(211,213,45)" fg:x="8937" fg:w="10"/><text x="57.2789%" y="703.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.01%)</title><rect x="57.0800%" y="677" width="0.0128%" height="15" fill="rgb(235,100,30)" fg:x="8945" fg:w="2"/><text x="57.3300%" y="687.50"></text></g><g><title>deno`futures_task::waker_ref::waker_ref (4 samples, 0.03%)</title><rect x="57.0927%" y="709" width="0.0255%" height="15" fill="rgb(206,144,31)" fg:x="8947" fg:w="4"/><text x="57.3427%" y="719.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="57.1629%" y="677" width="0.0255%" height="15" fill="rgb(224,200,26)" fg:x="8958" fg:w="4"/><text x="57.4129%" y="687.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="57.2203%" y="661" width="0.0128%" height="15" fill="rgb(247,104,53)" fg:x="8967" fg:w="2"/><text x="57.4703%" y="671.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="57.2203%" y="645" width="0.0128%" height="15" fill="rgb(220,14,17)" fg:x="8967" fg:w="2"/><text x="57.4703%" y="655.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="57.2905%" y="629" width="0.0128%" height="15" fill="rgb(230,140,40)" fg:x="8978" fg:w="2"/><text x="57.5405%" y="639.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (17 samples, 0.11%)</title><rect x="57.2012%" y="677" width="0.1085%" height="15" fill="rgb(229,2,41)" fg:x="8964" fg:w="17"/><text x="57.4512%" y="687.50"></text></g><g><title>deno`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (9 samples, 0.06%)</title><rect x="57.2522%" y="661" width="0.0574%" height="15" fill="rgb(232,89,16)" fg:x="8972" fg:w="9"/><text x="57.5022%" y="671.50"></text></g><g><title>deno`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (6 samples, 0.04%)</title><rect x="57.2714%" y="645" width="0.0383%" height="15" fill="rgb(247,59,52)" fg:x="8975" fg:w="6"/><text x="57.5214%" y="655.50"></text></g><g><title>deno`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (2 samples, 0.01%)</title><rect x="57.3161%" y="677" width="0.0128%" height="15" fill="rgb(226,110,21)" fg:x="8982" fg:w="2"/><text x="57.5661%" y="687.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="57.3735%" y="581" width="0.0128%" height="15" fill="rgb(224,176,43)" fg:x="8991" fg:w="2"/><text x="57.6235%" y="591.50"></text></g><g><title>deno`&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="57.3607%" y="613" width="0.0383%" height="15" fill="rgb(221,73,6)" fg:x="8989" fg:w="6"/><text x="57.6107%" y="623.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="57.3607%" y="597" width="0.0383%" height="15" fill="rgb(232,78,19)" fg:x="8989" fg:w="6"/><text x="57.6107%" y="607.50"></text></g><g><title>deno`core::sync::atomic::atomic_add (2 samples, 0.01%)</title><rect x="57.3863%" y="581" width="0.0128%" height="15" fill="rgb(233,112,48)" fg:x="8993" fg:w="2"/><text x="57.6363%" y="591.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_ptr (3 samples, 0.02%)</title><rect x="57.4118%" y="597" width="0.0191%" height="15" fill="rgb(243,131,47)" fg:x="8997" fg:w="3"/><text x="57.6618%" y="607.50"></text></g><g><title>deno`alloc::sync::data_offset_align (6 samples, 0.04%)</title><rect x="57.4309%" y="581" width="0.0383%" height="15" fill="rgb(226,51,1)" fg:x="9000" fg:w="6"/><text x="57.6809%" y="591.50"></text></g><g><title>deno`alloc::sync::data_offset (8 samples, 0.05%)</title><rect x="57.4309%" y="597" width="0.0510%" height="15" fill="rgb(247,58,7)" fg:x="9000" fg:w="8"/><text x="57.6809%" y="607.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (2 samples, 0.01%)</title><rect x="57.4692%" y="581" width="0.0128%" height="15" fill="rgb(209,7,32)" fg:x="9006" fg:w="2"/><text x="57.7192%" y="591.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (15 samples, 0.10%)</title><rect x="57.3990%" y="613" width="0.0957%" height="15" fill="rgb(209,39,41)" fg:x="8995" fg:w="15"/><text x="57.6490%" y="623.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (25 samples, 0.16%)</title><rect x="57.3416%" y="661" width="0.1595%" height="15" fill="rgb(226,182,46)" fg:x="8986" fg:w="25"/><text x="57.5916%" y="671.50"></text></g><g><title>deno`futures_task::waker::clone_arc_raw (24 samples, 0.15%)</title><rect x="57.3480%" y="645" width="0.1531%" height="15" fill="rgb(230,219,10)" fg:x="8987" fg:w="24"/><text x="57.5980%" y="655.50"></text></g><g><title>deno`futures_task::waker::increase_refcount (22 samples, 0.14%)</title><rect x="57.3607%" y="629" width="0.1404%" height="15" fill="rgb(227,175,30)" fg:x="8989" fg:w="22"/><text x="57.6107%" y="639.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (2 samples, 0.01%)</title><rect x="57.5075%" y="597" width="0.0128%" height="15" fill="rgb(217,2,50)" fg:x="9012" fg:w="2"/><text x="57.7575%" y="607.50"></text></g><g><title>deno`alloc::sync::data_offset (2 samples, 0.01%)</title><rect x="57.5075%" y="581" width="0.0128%" height="15" fill="rgb(229,160,0)" fg:x="9012" fg:w="2"/><text x="57.7575%" y="591.50"></text></g><g><title>deno`alloc::sync::data_offset_align (2 samples, 0.01%)</title><rect x="57.5075%" y="565" width="0.0128%" height="15" fill="rgb(207,78,37)" fg:x="9012" fg:w="2"/><text x="57.7575%" y="575.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (8 samples, 0.05%)</title><rect x="57.5011%" y="661" width="0.0510%" height="15" fill="rgb(225,57,0)" fg:x="9011" fg:w="8"/><text x="57.7511%" y="671.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (8 samples, 0.05%)</title><rect x="57.5011%" y="645" width="0.0510%" height="15" fill="rgb(232,154,2)" fg:x="9011" fg:w="8"/><text x="57.7511%" y="655.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (8 samples, 0.05%)</title><rect x="57.5011%" y="629" width="0.0510%" height="15" fill="rgb(241,212,25)" fg:x="9011" fg:w="8"/><text x="57.7511%" y="639.50"></text></g><g><title>deno`futures_task::waker::drop_arc_raw (7 samples, 0.04%)</title><rect x="57.5075%" y="613" width="0.0447%" height="15" fill="rgb(226,69,20)" fg:x="9012" fg:w="7"/><text x="57.7575%" y="623.50"></text></g><g><title>deno`core::mem::drop (5 samples, 0.03%)</title><rect x="57.5203%" y="597" width="0.0319%" height="15" fill="rgb(247,184,54)" fg:x="9014" fg:w="5"/><text x="57.7703%" y="607.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;deno_core::inspector::InspectorWaker&gt;&gt; (5 samples, 0.03%)</title><rect x="57.5203%" y="581" width="0.0319%" height="15" fill="rgb(210,145,0)" fg:x="9014" fg:w="5"/><text x="57.7703%" y="591.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="57.5203%" y="565" width="0.0319%" height="15" fill="rgb(253,82,12)" fg:x="9014" fg:w="5"/><text x="57.7703%" y="575.50"></text></g><g><title>deno`&lt;futures_channel::mpsc::UnboundedReceiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (73 samples, 0.47%)</title><rect x="57.1374%" y="693" width="0.4658%" height="15" fill="rgb(245,42,11)" fg:x="8954" fg:w="73"/><text x="57.3874%" y="703.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (43 samples, 0.27%)</title><rect x="57.3288%" y="677" width="0.2744%" height="15" fill="rgb(219,147,32)" fg:x="8984" fg:w="43"/><text x="57.5788%" y="687.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::compare_exchange (8 samples, 0.05%)</title><rect x="57.5522%" y="661" width="0.0510%" height="15" fill="rgb(246,12,7)" fg:x="9019" fg:w="8"/><text x="57.8022%" y="671.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (6 samples, 0.04%)</title><rect x="57.5649%" y="645" width="0.0383%" height="15" fill="rgb(243,50,9)" fg:x="9021" fg:w="6"/><text x="57.8149%" y="655.50"></text></g><g><title>deno`&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="57.6798%" y="581" width="0.0191%" height="15" fill="rgb(219,149,6)" fg:x="9039" fg:w="3"/><text x="57.9298%" y="591.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="57.6798%" y="565" width="0.0191%" height="15" fill="rgb(241,51,42)" fg:x="9039" fg:w="3"/><text x="57.9298%" y="575.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.02%)</title><rect x="57.6798%" y="549" width="0.0191%" height="15" fill="rgb(226,128,27)" fg:x="9039" fg:w="3"/><text x="57.9298%" y="559.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (9 samples, 0.06%)</title><rect x="57.6606%" y="629" width="0.0574%" height="15" fill="rgb(244,144,4)" fg:x="9036" fg:w="9"/><text x="57.9106%" y="639.50"></text></g><g><title>deno`futures_task::waker::clone_arc_raw (8 samples, 0.05%)</title><rect x="57.6670%" y="613" width="0.0510%" height="15" fill="rgb(221,4,13)" fg:x="9037" fg:w="8"/><text x="57.9170%" y="623.50"></text></g><g><title>deno`futures_task::waker::increase_refcount (7 samples, 0.04%)</title><rect x="57.6734%" y="597" width="0.0447%" height="15" fill="rgb(208,170,28)" fg:x="9038" fg:w="7"/><text x="57.9234%" y="607.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (3 samples, 0.02%)</title><rect x="57.6989%" y="581" width="0.0191%" height="15" fill="rgb(226,131,13)" fg:x="9042" fg:w="3"/><text x="57.9489%" y="591.50"></text></g><g><title>deno`alloc::sync::data_offset (3 samples, 0.02%)</title><rect x="57.6989%" y="565" width="0.0191%" height="15" fill="rgb(215,72,41)" fg:x="9042" fg:w="3"/><text x="57.9489%" y="575.50"></text></g><g><title>deno`alloc::sync::data_offset_align (3 samples, 0.02%)</title><rect x="57.6989%" y="549" width="0.0191%" height="15" fill="rgb(243,108,20)" fg:x="9042" fg:w="3"/><text x="57.9489%" y="559.50"></text></g><g><title>deno`core::alloc::layout::Layout::padding_needed_for (2 samples, 0.01%)</title><rect x="57.7053%" y="533" width="0.0128%" height="15" fill="rgb(230,189,17)" fg:x="9043" fg:w="2"/><text x="57.9553%" y="543.50"></text></g><g><title>deno`alloc::sync::data_offset_align (3 samples, 0.02%)</title><rect x="57.7436%" y="533" width="0.0191%" height="15" fill="rgb(220,50,17)" fg:x="9049" fg:w="3"/><text x="57.9936%" y="543.50"></text></g><g><title>deno`core::alloc::layout::Layout::padding_needed_for (2 samples, 0.01%)</title><rect x="57.7500%" y="517" width="0.0128%" height="15" fill="rgb(248,152,48)" fg:x="9050" fg:w="2"/><text x="58.0000%" y="527.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (5 samples, 0.03%)</title><rect x="57.7372%" y="565" width="0.0319%" height="15" fill="rgb(244,91,11)" fg:x="9048" fg:w="5"/><text x="57.9872%" y="575.50"></text></g><g><title>deno`alloc::sync::data_offset (5 samples, 0.03%)</title><rect x="57.7372%" y="549" width="0.0319%" height="15" fill="rgb(220,157,5)" fg:x="9048" fg:w="5"/><text x="57.9872%" y="559.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (9 samples, 0.06%)</title><rect x="57.7181%" y="629" width="0.0574%" height="15" fill="rgb(253,137,8)" fg:x="9045" fg:w="9"/><text x="57.9681%" y="639.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (9 samples, 0.06%)</title><rect x="57.7181%" y="613" width="0.0574%" height="15" fill="rgb(217,137,51)" fg:x="9045" fg:w="9"/><text x="57.9681%" y="623.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (8 samples, 0.05%)</title><rect x="57.7245%" y="597" width="0.0510%" height="15" fill="rgb(218,209,53)" fg:x="9046" fg:w="8"/><text x="57.9745%" y="607.50"></text></g><g><title>deno`futures_task::waker::drop_arc_raw (7 samples, 0.04%)</title><rect x="57.7308%" y="581" width="0.0447%" height="15" fill="rgb(249,137,25)" fg:x="9047" fg:w="7"/><text x="57.9808%" y="591.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (26 samples, 0.17%)</title><rect x="57.6479%" y="645" width="0.1659%" height="15" fill="rgb(239,155,26)" fg:x="9034" fg:w="26"/><text x="57.8979%" y="655.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::compare_exchange (6 samples, 0.04%)</title><rect x="57.7755%" y="629" width="0.0383%" height="15" fill="rgb(227,85,46)" fg:x="9054" fg:w="6"/><text x="58.0255%" y="639.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (4 samples, 0.03%)</title><rect x="57.7883%" y="613" width="0.0255%" height="15" fill="rgb(251,107,43)" fg:x="9056" fg:w="4"/><text x="58.0383%" y="623.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::is_empty (2 samples, 0.01%)</title><rect x="57.8138%" y="645" width="0.0128%" height="15" fill="rgb(234,170,33)" fg:x="9060" fg:w="2"/><text x="58.0638%" y="655.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.23%)</title><rect x="57.6224%" y="661" width="0.2297%" height="15" fill="rgb(206,29,35)" fg:x="9030" fg:w="36"/><text x="57.8724%" y="671.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::ready_to_run_queue::ReadyToRunQueue&lt;Fut&gt;::dequeue (4 samples, 0.03%)</title><rect x="57.8266%" y="645" width="0.0255%" height="15" fill="rgb(227,138,25)" fg:x="9062" fg:w="4"/><text x="58.0766%" y="655.50"></text></g><g><title>deno`&lt;futures_util::stream::select_all::SelectAll&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (40 samples, 0.26%)</title><rect x="57.6032%" y="693" width="0.2552%" height="15" fill="rgb(249,131,35)" fg:x="9027" fg:w="40"/><text x="57.8532%" y="703.50"></text></g><g><title>deno`futures_util::stream::stream::StreamExt::poll_next_unpin (38 samples, 0.24%)</title><rect x="57.6160%" y="677" width="0.2425%" height="15" fill="rgb(239,6,40)" fg:x="9029" fg:w="38"/><text x="57.8660%" y="687.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (196 samples, 1.25%)</title><rect x="56.6141%" y="725" width="1.2507%" height="15" fill="rgb(246,136,47)" fg:x="8872" fg:w="196"/><text x="56.8641%" y="735.50"></text></g><g><title>deno`futures_util::stream::stream::StreamExt::poll_next_unpin (117 samples, 0.75%)</title><rect x="57.1182%" y="709" width="0.7466%" height="15" fill="rgb(253,58,26)" fg:x="8951" fg:w="117"/><text x="57.3682%" y="719.50"></text></g><g><title>deno`futures_util::future::future::FutureExt::poll_unpin (211 samples, 1.35%)</title><rect x="56.5439%" y="773" width="1.3464%" height="15" fill="rgb(237,141,10)" fg:x="8861" fg:w="211"/><text x="56.7939%" y="783.50"></text></g><g><title>deno`&lt;alloc::boxed::Box&lt;F,A&gt; as core::future::future::Future&gt;::poll (209 samples, 1.33%)</title><rect x="56.5567%" y="757" width="1.3337%" height="15" fill="rgb(234,156,12)" fg:x="8863" fg:w="209"/><text x="56.8067%" y="767.50"></text></g><g><title>deno`&lt;deno_core::inspector::JsRuntimeInspector as core::future::future::Future&gt;::poll (207 samples, 1.32%)</title><rect x="56.5695%" y="741" width="1.3209%" height="15" fill="rgb(243,224,36)" fg:x="8865" fg:w="207"/><text x="56.8195%" y="751.50"></text></g><g><title>deno`futures_util::stream::stream::StreamExt::poll_next_unpin (4 samples, 0.03%)</title><rect x="57.8648%" y="725" width="0.0255%" height="15" fill="rgb(205,229,51)" fg:x="9068" fg:w="4"/><text x="58.1148%" y="735.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::len (2 samples, 0.01%)</title><rect x="57.8904%" y="773" width="0.0128%" height="15" fill="rgb(223,189,4)" fg:x="9072" fg:w="2"/><text x="58.1404%" y="783.50"></text></g><g><title>deno`v8::handle::Global&lt;T&gt;::open (2 samples, 0.01%)</title><rect x="57.9095%" y="773" width="0.0128%" height="15" fill="rgb(249,167,54)" fg:x="9075" fg:w="2"/><text x="58.1595%" y="783.50"></text></g><g><title>deno`v8::isolate::Isolate::get_slot (2 samples, 0.01%)</title><rect x="57.9223%" y="773" width="0.0128%" height="15" fill="rgb(218,34,28)" fg:x="9077" fg:w="2"/><text x="58.1723%" y="783.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new (3 samples, 0.02%)</title><rect x="57.9414%" y="773" width="0.0191%" height="15" fill="rgb(232,109,42)" fg:x="9080" fg:w="3"/><text x="58.1914%" y="783.50"></text></g><g><title>deno`v8::platform::Platform::pump_message_loop (2 samples, 0.01%)</title><rect x="57.9606%" y="773" width="0.0128%" height="15" fill="rgb(248,214,46)" fg:x="9083" fg:w="2"/><text x="58.2106%" y="783.50"></text></g><g><title>deno`v8::scope::TryCatch&lt;P&gt;::exception (2 samples, 0.01%)</title><rect x="57.9733%" y="773" width="0.0128%" height="15" fill="rgb(244,216,40)" fg:x="9085" fg:w="2"/><text x="58.2233%" y="783.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (8,896 samples, 56.77%)</title><rect x="1.2316%" y="789" width="56.7673%" height="15" fill="rgb(231,226,31)" fg:x="193" fg:w="8896"/><text x="1.4816%" y="799.50">deno`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="57.9861%" y="773" width="0.0128%" height="15" fill="rgb(238,38,43)" fg:x="9087" fg:w="2"/><text x="58.2361%" y="783.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,949 samples, 57.11%)</title><rect x="0.9061%" y="885" width="57.1055%" height="15" fill="rgb(208,88,43)" fg:x="142" fg:w="8949"/><text x="1.1561%" y="895.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_runtime::worker::MainWorker::run_event_loop::_{{closure}} (8,942 samples, 57.06%)</title><rect x="0.9508%" y="869" width="57.0608%" height="15" fill="rgb(205,136,37)" fg:x="149" fg:w="8942"/><text x="1.2008%" y="879.50">deno`deno_runtime::worker::MainWorker::run_event_loop::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,939 samples, 57.04%)</title><rect x="0.9699%" y="853" width="57.0417%" height="15" fill="rgb(237,34,14)" fg:x="152" fg:w="8939"/><text x="1.2199%" y="863.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::run_event_loop::_{{closure}} (8,932 samples, 57.00%)</title><rect x="1.0146%" y="837" width="56.9970%" height="15" fill="rgb(236,193,44)" fg:x="159" fg:w="8932"/><text x="1.2646%" y="847.50">deno`deno_core::runtime::JsRuntime::run_event_loop::_{{closure}}</text></g><g><title>deno`&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (8,932 samples, 57.00%)</title><rect x="1.0146%" y="821" width="56.9970%" height="15" fill="rgb(231,48,10)" fg:x="159" fg:w="8932"/><text x="1.2646%" y="831.50">deno`&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::run_event_loop::_{{closure}}::_{{closure}} (8,925 samples, 56.95%)</title><rect x="1.0593%" y="805" width="56.9523%" height="15" fill="rgb(213,141,34)" fg:x="166" fg:w="8925"/><text x="1.3093%" y="815.50">deno`deno_core::runtime::JsRuntime::run_event_loop::_{{closure}}::_{{closure}}</text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.03%)</title><rect x="58.0371%" y="837" width="0.0255%" height="15" fill="rgb(249,130,34)" fg:x="9095" fg:w="4"/><text x="58.2871%" y="847.50"></text></g><g><title>deno`v8::isolate::Isolate::new (2 samples, 0.01%)</title><rect x="58.0499%" y="821" width="0.0128%" height="15" fill="rgb(219,42,41)" fg:x="9097" fg:w="2"/><text x="58.2999%" y="831.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.01%)</title><rect x="58.0499%" y="805" width="0.0128%" height="15" fill="rgb(224,100,54)" fg:x="9097" fg:w="2"/><text x="58.2999%" y="815.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.01%)</title><rect x="58.0499%" y="789" width="0.0128%" height="15" fill="rgb(229,200,27)" fg:x="9097" fg:w="2"/><text x="58.2999%" y="799.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.01%)</title><rect x="58.0499%" y="773" width="0.0128%" height="15" fill="rgb(217,118,10)" fg:x="9097" fg:w="2"/><text x="58.2999%" y="783.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.01%)</title><rect x="58.0499%" y="757" width="0.0128%" height="15" fill="rgb(206,22,3)" fg:x="9097" fg:w="2"/><text x="58.2999%" y="767.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.01%)</title><rect x="58.0499%" y="741" width="0.0128%" height="15" fill="rgb(232,163,46)" fg:x="9097" fg:w="2"/><text x="58.2999%" y="751.50"></text></g><g><title>deno`deno::create_main_worker (8 samples, 0.05%)</title><rect x="58.0244%" y="885" width="0.0510%" height="15" fill="rgb(206,95,13)" fg:x="9093" fg:w="8"/><text x="58.2744%" y="895.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (7 samples, 0.04%)</title><rect x="58.0308%" y="869" width="0.0447%" height="15" fill="rgb(253,154,18)" fg:x="9094" fg:w="7"/><text x="58.2808%" y="879.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::from_options (6 samples, 0.04%)</title><rect x="58.0371%" y="853" width="0.0383%" height="15" fill="rgb(219,32,23)" fg:x="9095" fg:w="6"/><text x="58.2871%" y="863.50"></text></g><g><title>deno`deno_runtime::js::deno_isolate_init (2 samples, 0.01%)</title><rect x="58.0627%" y="837" width="0.0128%" height="15" fill="rgb(230,191,45)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="847.50"></text></g><g><title>deno`&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="58.0627%" y="821" width="0.0128%" height="15" fill="rgb(229,64,36)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="831.50"></text></g><g><title>deno`once_cell::sync::Lazy&lt;T,F&gt;::force (2 samples, 0.01%)</title><rect x="58.0627%" y="805" width="0.0128%" height="15" fill="rgb(205,129,25)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="815.50"></text></g><g><title>deno`once_cell::sync::OnceCell&lt;T&gt;::get_or_init (2 samples, 0.01%)</title><rect x="58.0627%" y="789" width="0.0128%" height="15" fill="rgb(254,112,7)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="799.50"></text></g><g><title>deno`once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (2 samples, 0.01%)</title><rect x="58.0627%" y="773" width="0.0128%" height="15" fill="rgb(226,53,48)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="783.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (2 samples, 0.01%)</title><rect x="58.0627%" y="757" width="0.0128%" height="15" fill="rgb(214,153,38)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="767.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (2 samples, 0.01%)</title><rect x="58.0627%" y="741" width="0.0128%" height="15" fill="rgb(243,101,7)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="751.50"></text></g><g><title>deno`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.01%)</title><rect x="58.0627%" y="725" width="0.0128%" height="15" fill="rgb(240,140,22)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="735.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (2 samples, 0.01%)</title><rect x="58.0627%" y="709" width="0.0128%" height="15" fill="rgb(235,114,2)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="719.50"></text></g><g><title>deno`once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}} (2 samples, 0.01%)</title><rect x="58.0627%" y="693" width="0.0128%" height="15" fill="rgb(242,59,12)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="703.50"></text></g><g><title>deno`once_cell::sync::Lazy&lt;T,F&gt;::force::_{{closure}} (2 samples, 0.01%)</title><rect x="58.0627%" y="677" width="0.0128%" height="15" fill="rgb(252,134,9)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="687.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="58.0627%" y="661" width="0.0128%" height="15" fill="rgb(236,4,44)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="671.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="58.0627%" y="645" width="0.0128%" height="15" fill="rgb(254,172,41)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="655.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (2 samples, 0.01%)</title><rect x="58.0627%" y="629" width="0.0128%" height="15" fill="rgb(244,63,20)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="639.50"></text></g><g><title>deno`lzzzz::lz4::block::decompress (2 samples, 0.01%)</title><rect x="58.0627%" y="613" width="0.0128%" height="15" fill="rgb(250,73,31)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="623.50"></text></g><g><title>deno`lzzzz::lz4::block::api::decompress_safe (2 samples, 0.01%)</title><rect x="58.0627%" y="597" width="0.0128%" height="15" fill="rgb(241,38,36)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="607.50"></text></g><g><title>deno`LZ4_decompress_safe (2 samples, 0.01%)</title><rect x="58.0627%" y="581" width="0.0128%" height="15" fill="rgb(245,211,2)" fg:x="9099" fg:w="2"/><text x="58.3127%" y="591.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,973 samples, 57.26%)</title><rect x="0.8423%" y="917" width="57.2586%" height="15" fill="rgb(206,120,28)" fg:x="132" fg:w="8973"/><text x="1.0923%" y="927.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (8,970 samples, 57.24%)</title><rect x="0.8615%" y="901" width="57.2395%" height="15" fill="rgb(211,59,34)" fg:x="135" fg:w="8970"/><text x="1.1115%" y="911.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`deno_runtime::worker::MainWorker::run_event_loop::_{{closure}} (4 samples, 0.03%)</title><rect x="58.0754%" y="885" width="0.0255%" height="15" fill="rgb(233,168,5)" fg:x="9101" fg:w="4"/><text x="58.3254%" y="895.50"></text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,980 samples, 57.30%)</title><rect x="0.8104%" y="933" width="57.3033%" height="15" fill="rgb(234,33,13)" fg:x="127" fg:w="8980"/><text x="1.0604%" y="943.50">deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::args::flags::flags_from_vec (2 samples, 0.01%)</title><rect x="58.1137%" y="933" width="0.0128%" height="15" fill="rgb(231,150,26)" fg:x="9107" fg:w="2"/><text x="58.3637%" y="943.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,997 samples, 57.41%)</title><rect x="0.7211%" y="965" width="57.4118%" height="15" fill="rgb(217,191,4)" fg:x="113" fg:w="8997"/><text x="0.9711%" y="975.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::main::_{{closure}} (8,988 samples, 57.35%)</title><rect x="0.7785%" y="949" width="57.3543%" height="15" fill="rgb(246,198,38)" fg:x="122" fg:w="8988"/><text x="1.0285%" y="959.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::_{{closure}}::_{{closure}} (8,998 samples, 57.42%)</title><rect x="0.7211%" y="981" width="57.4182%" height="15" fill="rgb(245,64,37)" fg:x="113" fg:w="8998"/><text x="0.9711%" y="991.50">deno`&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::_{{closure}}::_{{..</text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="58.1839%" y="917" width="0.0191%" height="15" fill="rgb(250,30,36)" fg:x="9118" fg:w="3"/><text x="58.4339%" y="927.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (7 samples, 0.04%)</title><rect x="58.1648%" y="933" width="0.0447%" height="15" fill="rgb(217,86,53)" fg:x="9115" fg:w="7"/><text x="58.4148%" y="943.50"></text></g><g><title>deno`&lt;tokio::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (10 samples, 0.06%)</title><rect x="58.1520%" y="965" width="0.0638%" height="15" fill="rgb(228,157,16)" fg:x="9113" fg:w="10"/><text x="58.4020%" y="975.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (9 samples, 0.06%)</title><rect x="58.1584%" y="949" width="0.0574%" height="15" fill="rgb(217,59,31)" fg:x="9114" fg:w="9"/><text x="58.4084%" y="959.50"></text></g><g><title>deno`tokio::coop::with_budget::_{{closure}} (9,014 samples, 57.52%)</title><rect x="0.7083%" y="997" width="57.5203%" height="15" fill="rgb(237,138,41)" fg:x="111" fg:w="9014"/><text x="0.9583%" y="1007.50">deno`tokio::coop::with_budget::_{{closure}}</text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::coop::with_budget::ResetGuard&gt; (13 samples, 0.08%)</title><rect x="58.1456%" y="981" width="0.0830%" height="15" fill="rgb(227,91,49)" fg:x="9112" fg:w="13"/><text x="58.3956%" y="991.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="58.2158%" y="965" width="0.0128%" height="15" fill="rgb(247,21,44)" fg:x="9123" fg:w="2"/><text x="58.4658%" y="975.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (9,023 samples, 57.58%)</title><rect x="0.6573%" y="1029" width="57.5777%" height="15" fill="rgb(219,210,51)" fg:x="103" fg:w="9023"/><text x="0.9073%" y="1039.50">deno`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (9,020 samples, 57.56%)</title><rect x="0.6764%" y="1013" width="57.5585%" height="15" fill="rgb(209,140,6)" fg:x="106" fg:w="9020"/><text x="0.9264%" y="1023.50">deno`std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>deno`tokio::runtime::enter::ENTERED::__getit (3 samples, 0.02%)</title><rect x="58.2732%" y="981" width="0.0191%" height="15" fill="rgb(221,188,24)" fg:x="9132" fg:w="3"/><text x="58.5232%" y="991.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="58.2796%" y="965" width="0.0128%" height="15" fill="rgb(232,154,20)" fg:x="9133" fg:w="2"/><text x="58.5296%" y="975.50"></text></g><g><title>deno`std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="58.2796%" y="949" width="0.0128%" height="15" fill="rgb(244,137,50)" fg:x="9133" fg:w="2"/><text x="58.5296%" y="959.50"></text></g><g><title>deno`tokio::runtime::enter::disallow_blocking (10 samples, 0.06%)</title><rect x="58.2350%" y="1029" width="0.0638%" height="15" fill="rgb(225,185,43)" fg:x="9126" fg:w="10"/><text x="58.4850%" y="1039.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.06%)</title><rect x="58.2413%" y="1013" width="0.0574%" height="15" fill="rgb(213,205,38)" fg:x="9127" fg:w="9"/><text x="58.4913%" y="1023.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (9 samples, 0.06%)</title><rect x="58.2413%" y="997" width="0.0574%" height="15" fill="rgb(236,73,12)" fg:x="9127" fg:w="9"/><text x="58.4913%" y="1007.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::result::Result&lt;(),alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="58.3434%" y="997" width="0.0128%" height="15" fill="rgb(235,219,13)" fg:x="9143" fg:w="2"/><text x="58.5934%" y="1007.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::compare_exchange (7 samples, 0.04%)</title><rect x="58.3626%" y="997" width="0.0447%" height="15" fill="rgb(218,59,36)" fg:x="9146" fg:w="7"/><text x="58.6126%" y="1007.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (7 samples, 0.04%)</title><rect x="58.3626%" y="981" width="0.0447%" height="15" fill="rgb(205,110,39)" fg:x="9146" fg:w="7"/><text x="58.6126%" y="991.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (2 samples, 0.01%)</title><rect x="58.4072%" y="997" width="0.0128%" height="15" fill="rgb(218,206,42)" fg:x="9153" fg:w="2"/><text x="58.6572%" y="1007.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="58.4392%" y="949" width="0.0128%" height="15" fill="rgb(248,125,24)" fg:x="9158" fg:w="2"/><text x="58.6892%" y="959.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (3 samples, 0.02%)</title><rect x="58.4392%" y="965" width="0.0191%" height="15" fill="rgb(242,28,27)" fg:x="9158" fg:w="3"/><text x="58.6892%" y="975.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (6 samples, 0.04%)</title><rect x="58.4264%" y="997" width="0.0383%" height="15" fill="rgb(216,228,15)" fg:x="9156" fg:w="6"/><text x="58.6764%" y="1007.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::do_register::_{{closure}} (4 samples, 0.03%)</title><rect x="58.4392%" y="981" width="0.0255%" height="15" fill="rgb(235,116,46)" fg:x="9158" fg:w="4"/><text x="58.6892%" y="991.50"></text></g><g><title>deno`__rust_try (2 samples, 0.01%)</title><rect x="58.4711%" y="965" width="0.0128%" height="15" fill="rgb(224,18,32)" fg:x="9163" fg:w="2"/><text x="58.7211%" y="975.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="58.5540%" y="805" width="0.0128%" height="15" fill="rgb(252,5,12)" fg:x="9176" fg:w="2"/><text x="58.8040%" y="815.50"></text></g><g><title>deno`&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="58.5413%" y="821" width="0.0319%" height="15" fill="rgb(251,36,5)" fg:x="9174" fg:w="5"/><text x="58.7913%" y="831.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (12 samples, 0.08%)</title><rect x="58.5157%" y="853" width="0.0766%" height="15" fill="rgb(217,53,14)" fg:x="9170" fg:w="12"/><text x="58.7657%" y="863.50"></text></g><g><title>deno`tokio::util::wake::inc_ref_count (9 samples, 0.06%)</title><rect x="58.5349%" y="837" width="0.0574%" height="15" fill="rgb(215,86,45)" fg:x="9173" fg:w="9"/><text x="58.7849%" y="847.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (3 samples, 0.02%)</title><rect x="58.5732%" y="821" width="0.0191%" height="15" fill="rgb(242,169,11)" fg:x="9179" fg:w="3"/><text x="58.8232%" y="831.50"></text></g><g><title>deno`alloc::sync::data_offset (2 samples, 0.01%)</title><rect x="58.5795%" y="805" width="0.0128%" height="15" fill="rgb(211,213,45)" fg:x="9180" fg:w="2"/><text x="58.8295%" y="815.50"></text></g><g><title>deno`&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (16 samples, 0.10%)</title><rect x="58.5030%" y="885" width="0.1021%" height="15" fill="rgb(205,88,11)" fg:x="9168" fg:w="16"/><text x="58.7530%" y="895.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (15 samples, 0.10%)</title><rect x="58.5093%" y="869" width="0.0957%" height="15" fill="rgb(252,69,26)" fg:x="9169" fg:w="15"/><text x="58.7593%" y="879.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.01%)</title><rect x="58.6306%" y="757" width="0.0128%" height="15" fill="rgb(246,123,37)" fg:x="9188" fg:w="2"/><text x="58.8806%" y="767.50"></text></g><g><title>deno`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (24 samples, 0.15%)</title><rect x="58.4966%" y="917" width="0.1531%" height="15" fill="rgb(212,205,5)" fg:x="9167" fg:w="24"/><text x="58.7466%" y="927.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::do_register::_{{closure}} (23 samples, 0.15%)</title><rect x="58.5030%" y="901" width="0.1468%" height="15" fill="rgb(253,148,0)" fg:x="9168" fg:w="23"/><text x="58.7530%" y="911.50"></text></g><g><title>deno`core::mem::drop (6 samples, 0.04%)</title><rect x="58.6114%" y="885" width="0.0383%" height="15" fill="rgb(239,22,4)" fg:x="9185" fg:w="6"/><text x="58.8614%" y="895.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (6 samples, 0.04%)</title><rect x="58.6114%" y="869" width="0.0383%" height="15" fill="rgb(226,26,53)" fg:x="9185" fg:w="6"/><text x="58.8614%" y="879.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (6 samples, 0.04%)</title><rect x="58.6114%" y="853" width="0.0383%" height="15" fill="rgb(225,229,45)" fg:x="9185" fg:w="6"/><text x="58.8614%" y="863.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="58.6114%" y="837" width="0.0383%" height="15" fill="rgb(220,60,37)" fg:x="9185" fg:w="6"/><text x="58.8614%" y="847.50"></text></g><g><title>deno`tokio::util::wake::drop_arc_raw (5 samples, 0.03%)</title><rect x="58.6178%" y="821" width="0.0319%" height="15" fill="rgb(217,180,35)" fg:x="9186" fg:w="5"/><text x="58.8678%" y="831.50"></text></g><g><title>deno`core::mem::drop (4 samples, 0.03%)</title><rect x="58.6242%" y="805" width="0.0255%" height="15" fill="rgb(229,7,53)" fg:x="9187" fg:w="4"/><text x="58.8742%" y="815.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt; (3 samples, 0.02%)</title><rect x="58.6306%" y="789" width="0.0191%" height="15" fill="rgb(254,137,3)" fg:x="9188" fg:w="3"/><text x="58.8806%" y="799.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="58.6306%" y="773" width="0.0191%" height="15" fill="rgb(215,140,41)" fg:x="9188" fg:w="3"/><text x="58.8806%" y="783.50"></text></g><g><title>deno`__rust_try (31 samples, 0.20%)</title><rect x="58.4902%" y="949" width="0.1978%" height="15" fill="rgb(250,80,15)" fg:x="9166" fg:w="31"/><text x="58.7402%" y="959.50"></text></g><g><title>deno`std::panicking::try::do_call (31 samples, 0.20%)</title><rect x="58.4902%" y="933" width="0.1978%" height="15" fill="rgb(252,191,6)" fg:x="9166" fg:w="31"/><text x="58.7402%" y="943.50"></text></g><g><title>deno`core::ptr::read (5 samples, 0.03%)</title><rect x="58.6561%" y="917" width="0.0319%" height="15" fill="rgb(246,217,18)" fg:x="9192" fg:w="5"/><text x="58.9061%" y="927.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (64 samples, 0.41%)</title><rect x="58.2988%" y="1029" width="0.4084%" height="15" fill="rgb(223,93,7)" fg:x="9136" fg:w="64"/><text x="58.5488%" y="1039.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::do_register (62 samples, 0.40%)</title><rect x="58.3115%" y="1013" width="0.3956%" height="15" fill="rgb(225,55,52)" fg:x="9138" fg:w="62"/><text x="58.5615%" y="1023.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (38 samples, 0.24%)</title><rect x="58.4647%" y="997" width="0.2425%" height="15" fill="rgb(240,31,24)" fg:x="9162" fg:w="38"/><text x="58.7147%" y="1007.50"></text></g><g><title>deno`std::panic::catch_unwind (38 samples, 0.24%)</title><rect x="58.4647%" y="981" width="0.2425%" height="15" fill="rgb(205,56,52)" fg:x="9162" fg:w="38"/><text x="58.7147%" y="991.50"></text></g><g><title>deno`std::panicking::try (35 samples, 0.22%)</title><rect x="58.4838%" y="965" width="0.2233%" height="15" fill="rgb(246,146,12)" fg:x="9165" fg:w="35"/><text x="58.7338%" y="975.50"></text></g><g><title>deno`std::panicking::try::do_call (3 samples, 0.02%)</title><rect x="58.6880%" y="949" width="0.0191%" height="15" fill="rgb(239,84,36)" fg:x="9197" fg:w="3"/><text x="58.9380%" y="959.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.03%)</title><rect x="58.7327%" y="997" width="0.0255%" height="15" fill="rgb(207,41,40)" fg:x="9204" fg:w="4"/><text x="58.9827%" y="1007.50"></text></g><g><title>deno`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.01%)</title><rect x="58.7582%" y="997" width="0.0128%" height="15" fill="rgb(241,179,25)" fg:x="9208" fg:w="2"/><text x="59.0082%" y="1007.50"></text></g><g><title>deno`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.05%)</title><rect x="58.7327%" y="1013" width="0.0510%" height="15" fill="rgb(210,0,34)" fg:x="9204" fg:w="8"/><text x="58.9827%" y="1023.50"></text></g><g><title>deno`core::clone::impls::_&lt;impl core::clone::Clone for usize&gt;::clone (2 samples, 0.01%)</title><rect x="58.7710%" y="997" width="0.0128%" height="15" fill="rgb(225,217,29)" fg:x="9210" fg:w="2"/><text x="59.0210%" y="1007.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (5 samples, 0.03%)</title><rect x="58.8029%" y="997" width="0.0319%" height="15" fill="rgb(216,191,38)" fg:x="9215" fg:w="5"/><text x="59.0529%" y="1007.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="58.8220%" y="981" width="0.0128%" height="15" fill="rgb(232,140,52)" fg:x="9218" fg:w="2"/><text x="59.0720%" y="991.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;alloc::collections::vec_deque::VecDeque&lt;tokio::runtime::task::Notified&lt;alloc::sync::Arc&lt;tokio::task::local::Shared&gt;&gt;&gt;&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="58.8731%" y="981" width="0.0191%" height="15" fill="rgb(223,158,51)" fg:x="9226" fg:w="3"/><text x="59.1231%" y="991.50"></text></g><g><title>deno`&lt;tokio::loom::std::parking_lot::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="58.9114%" y="965" width="0.0128%" height="15" fill="rgb(235,29,51)" fg:x="9232" fg:w="2"/><text x="59.1614%" y="975.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;alloc::collections::vec_deque::VecDeque&lt;tokio::runtime::task::Notified&lt;alloc::sync::Arc&lt;tokio::task::local::Shared&gt;&gt;&gt;&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="58.9305%" y="965" width="0.0191%" height="15" fill="rgb(215,181,18)" fg:x="9235" fg:w="3"/><text x="59.1805%" y="975.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;alloc::collections::vec_deque::VecDeque&lt;tokio::runtime::task::Notified&lt;alloc::sync::Arc&lt;tokio::task::local::Shared&gt;&gt;&gt;&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="58.9305%" y="949" width="0.0191%" height="15" fill="rgb(227,125,34)" fg:x="9235" fg:w="3"/><text x="59.1805%" y="959.50"></text></g><g><title>deno`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="58.9305%" y="933" width="0.0191%" height="15" fill="rgb(230,197,49)" fg:x="9235" fg:w="3"/><text x="59.1805%" y="943.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.02%)</title><rect x="58.9305%" y="917" width="0.0191%" height="15" fill="rgb(239,141,16)" fg:x="9235" fg:w="3"/><text x="59.1805%" y="927.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange (2 samples, 0.01%)</title><rect x="58.9369%" y="901" width="0.0128%" height="15" fill="rgb(225,105,43)" fg:x="9236" fg:w="2"/><text x="59.1869%" y="911.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::is_err (2 samples, 0.01%)</title><rect x="58.9688%" y="917" width="0.0128%" height="15" fill="rgb(214,131,14)" fg:x="9241" fg:w="2"/><text x="59.2188%" y="927.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.04%)</title><rect x="58.9624%" y="933" width="0.0383%" height="15" fill="rgb(229,177,11)" fg:x="9240" fg:w="6"/><text x="59.2124%" y="943.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.01%)</title><rect x="58.9879%" y="917" width="0.0128%" height="15" fill="rgb(231,180,14)" fg:x="9244" fg:w="2"/><text x="59.2379%" y="927.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::is_err (2 samples, 0.01%)</title><rect x="59.0007%" y="933" width="0.0128%" height="15" fill="rgb(232,88,2)" fg:x="9246" fg:w="2"/><text x="59.2507%" y="943.50"></text></g><g><title>deno`tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (11 samples, 0.07%)</title><rect x="58.9497%" y="965" width="0.0702%" height="15" fill="rgb(205,220,8)" fg:x="9238" fg:w="11"/><text x="59.1997%" y="975.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::lock (10 samples, 0.06%)</title><rect x="58.9560%" y="949" width="0.0638%" height="15" fill="rgb(225,23,53)" fg:x="9239" fg:w="10"/><text x="59.2060%" y="959.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::or_else (28 samples, 0.18%)</title><rect x="58.8476%" y="997" width="0.1787%" height="15" fill="rgb(213,62,29)" fg:x="9222" fg:w="28"/><text x="59.0976%" y="1007.50"></text></g><g><title>deno`tokio::task::local::LocalSet::next_task::_{{closure}} (21 samples, 0.13%)</title><rect x="58.8922%" y="981" width="0.1340%" height="15" fill="rgb(227,75,7)" fg:x="9229" fg:w="21"/><text x="59.1422%" y="991.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="59.0326%" y="949" width="0.0128%" height="15" fill="rgb(207,105,14)" fg:x="9251" fg:w="2"/><text x="59.2826%" y="959.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (3 samples, 0.02%)</title><rect x="59.0454%" y="933" width="0.0191%" height="15" fill="rgb(245,62,29)" fg:x="9253" fg:w="3"/><text x="59.2954%" y="943.50"></text></g><g><title>deno`&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::_{{closure}} (9,162 samples, 58.46%)</title><rect x="0.6190%" y="1045" width="58.4647%" height="15" fill="rgb(236,202,4)" fg:x="97" fg:w="9162"/><text x="0.8690%" y="1055.50">deno`&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::_{{closure}}</text></g><g><title>deno`tokio::task::local::LocalSet::tick (59 samples, 0.38%)</title><rect x="58.7072%" y="1029" width="0.3765%" height="15" fill="rgb(250,67,1)" fg:x="9200" fg:w="59"/><text x="58.9572%" y="1039.50"></text></g><g><title>deno`tokio::task::local::LocalSet::next_task (45 samples, 0.29%)</title><rect x="58.7965%" y="1013" width="0.2872%" height="15" fill="rgb(253,115,44)" fg:x="9214" fg:w="45"/><text x="59.0465%" y="1023.50"></text></g><g><title>deno`tokio::util::vec_deque_cell::VecDequeCell&lt;T&gt;::pop_front (9 samples, 0.06%)</title><rect x="59.0262%" y="997" width="0.0574%" height="15" fill="rgb(251,139,18)" fg:x="9250" fg:w="9"/><text x="59.2762%" y="1007.50"></text></g><g><title>deno`tokio::util::vec_deque_cell::VecDequeCell&lt;T&gt;::with_inner (8 samples, 0.05%)</title><rect x="59.0326%" y="981" width="0.0510%" height="15" fill="rgb(218,22,32)" fg:x="9251" fg:w="8"/><text x="59.2826%" y="991.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (8 samples, 0.05%)</title><rect x="59.0326%" y="965" width="0.0510%" height="15" fill="rgb(243,53,5)" fg:x="9251" fg:w="8"/><text x="59.2826%" y="975.50"></text></g><g><title>deno`tokio::util::vec_deque_cell::VecDequeCell&lt;T&gt;::with_inner::_{{closure}} (6 samples, 0.04%)</title><rect x="59.0454%" y="949" width="0.0383%" height="15" fill="rgb(227,56,16)" fg:x="9253" fg:w="6"/><text x="59.2954%" y="959.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (3 samples, 0.02%)</title><rect x="59.0645%" y="933" width="0.0191%" height="15" fill="rgb(245,53,0)" fg:x="9256" fg:w="3"/><text x="59.3145%" y="943.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::task::poll::Poll&lt;core::result::Result&lt;i32,anyhow::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="59.0837%" y="1045" width="0.0128%" height="15" fill="rgb(216,170,35)" fg:x="9259" fg:w="2"/><text x="59.3337%" y="1055.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="59.1028%" y="997" width="0.0128%" height="15" fill="rgb(211,200,8)" fg:x="9262" fg:w="2"/><text x="59.3528%" y="1007.50"></text></g><g><title>deno`&lt;tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set::Reset as core::ops::drop::Drop&gt;::drop::_{{closure}} (2 samples, 0.01%)</title><rect x="59.1347%" y="981" width="0.0128%" height="15" fill="rgb(228,204,44)" fg:x="9267" fg:w="2"/><text x="59.3847%" y="991.50"></text></g><g><title>deno`&lt;tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set::Reset as core::ops::drop::Drop&gt;::drop (10 samples, 0.06%)</title><rect x="59.1028%" y="1029" width="0.0638%" height="15" fill="rgb(214,121,17)" fg:x="9262" fg:w="10"/><text x="59.3528%" y="1039.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.06%)</title><rect x="59.1028%" y="1013" width="0.0638%" height="15" fill="rgb(233,64,38)" fg:x="9262" fg:w="10"/><text x="59.3528%" y="1023.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.04%)</title><rect x="59.1283%" y="997" width="0.0383%" height="15" fill="rgb(253,54,19)" fg:x="9266" fg:w="6"/><text x="59.3783%" y="1007.50"></text></g><g><title>deno`tokio::task::local::CURRENT::FOO::__getit (3 samples, 0.02%)</title><rect x="59.1475%" y="981" width="0.0191%" height="15" fill="rgb(253,94,18)" fg:x="9269" fg:w="3"/><text x="59.3975%" y="991.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (3 samples, 0.02%)</title><rect x="59.1475%" y="965" width="0.0191%" height="15" fill="rgb(227,57,52)" fg:x="9269" fg:w="3"/><text x="59.3975%" y="975.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set::Reset&gt; (12 samples, 0.08%)</title><rect x="59.0964%" y="1045" width="0.0766%" height="15" fill="rgb(230,228,50)" fg:x="9261" fg:w="12"/><text x="59.3464%" y="1055.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::runtime::enter::DisallowBlockingGuard&gt; (3 samples, 0.02%)</title><rect x="59.1730%" y="1045" width="0.0191%" height="15" fill="rgb(217,205,27)" fg:x="9273" fg:w="3"/><text x="59.4230%" y="1055.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (2 samples, 0.01%)</title><rect x="59.1921%" y="1029" width="0.0128%" height="15" fill="rgb(252,71,50)" fg:x="9276" fg:w="2"/><text x="59.4421%" y="1039.50"></text></g><g><title>deno`&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll (9,195 samples, 58.68%)</title><rect x="0.5807%" y="1093" width="58.6753%" height="15" fill="rgb(209,86,4)" fg:x="91" fg:w="9195"/><text x="0.8307%" y="1103.50">deno`&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`tokio::task::local::LocalSet::with (9,195 samples, 58.68%)</title><rect x="0.5807%" y="1077" width="58.6753%" height="15" fill="rgb(229,94,0)" fg:x="91" fg:w="9195"/><text x="0.8307%" y="1087.50">deno`tokio::task::local::LocalSet::with</text></g><g><title>deno`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,194 samples, 58.67%)</title><rect x="0.5871%" y="1061" width="58.6689%" height="15" fill="rgb(252,223,21)" fg:x="92" fg:w="9194"/><text x="0.8371%" y="1071.50">deno`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.06%)</title><rect x="59.1921%" y="1045" width="0.0638%" height="15" fill="rgb(230,210,4)" fg:x="9276" fg:w="10"/><text x="59.4421%" y="1055.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.05%)</title><rect x="59.2049%" y="1029" width="0.0510%" height="15" fill="rgb(240,149,38)" fg:x="9278" fg:w="8"/><text x="59.4549%" y="1039.50"></text></g><g><title>deno`tokio::task::local::CURRENT::FOO::__getit (5 samples, 0.03%)</title><rect x="59.2240%" y="1013" width="0.0319%" height="15" fill="rgb(254,105,20)" fg:x="9281" fg:w="5"/><text x="59.4740%" y="1023.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (4 samples, 0.03%)</title><rect x="59.2304%" y="997" width="0.0255%" height="15" fill="rgb(253,87,46)" fg:x="9282" fg:w="4"/><text x="59.4804%" y="1007.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,210 samples, 58.77%)</title><rect x="0.4914%" y="1125" width="58.7710%" height="15" fill="rgb(253,116,33)" fg:x="77" fg:w="9210"/><text x="0.7414%" y="1135.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`tokio::task::local::LocalSet::run_until::_{{closure}} (9,200 samples, 58.71%)</title><rect x="0.5552%" y="1109" width="58.7072%" height="15" fill="rgb(229,198,5)" fg:x="87" fg:w="9200"/><text x="0.8052%" y="1119.50">deno`tokio::task::local::LocalSet::run_until::_{{closure}}</text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (9,224 samples, 58.86%)</title><rect x="0.4148%" y="1189" width="58.8603%" height="15" fill="rgb(242,38,37)" fg:x="65" fg:w="9224"/><text x="0.6648%" y="1199.50">deno`std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>deno`tokio::coop::with_budget::_{{closure}} (9,219 samples, 58.83%)</title><rect x="0.4467%" y="1173" width="58.8284%" height="15" fill="rgb(242,69,53)" fg:x="70" fg:w="9219"/><text x="0.6967%" y="1183.50">deno`tokio::coop::with_budget::_{{closure}}</text></g><g><title>deno`tokio::runtime::basic_scheduler::CoreGuard::block_on::_{{closure}}::_{{closure}}::_{{closure}} (9,214 samples, 58.80%)</title><rect x="0.4786%" y="1157" width="58.7965%" height="15" fill="rgb(249,80,16)" fg:x="75" fg:w="9214"/><text x="0.7286%" y="1167.50">deno`tokio::runtime::basic_scheduler::CoreGuard::block_on::_{{closure}}::_{{closure}}::_{{closure..</text></g><g><title>deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,212 samples, 58.78%)</title><rect x="0.4914%" y="1141" width="58.7837%" height="15" fill="rgb(206,128,11)" fg:x="77" fg:w="9212"/><text x="0.7414%" y="1151.50">deno`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::enter (9,249 samples, 59.02%)</title><rect x="0.2616%" y="1237" width="59.0198%" height="15" fill="rgb(212,35,20)" fg:x="41" fg:w="9249"/><text x="0.5116%" y="1247.50">deno`tokio::runtime::basic_scheduler::Context::enter</text></g><g><title>deno`tokio::runtime::basic_scheduler::CoreGuard::block_on::_{{closure}}::_{{closure}} (9,228 samples, 58.89%)</title><rect x="0.3956%" y="1221" width="58.8858%" height="15" fill="rgb(236,79,13)" fg:x="62" fg:w="9228"/><text x="0.6456%" y="1231.50">deno`tokio::runtime::basic_scheduler::CoreGuard::block_on::_{{closure}}::_{{closure}}</text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (9,227 samples, 58.88%)</title><rect x="0.4020%" y="1205" width="58.8795%" height="15" fill="rgb(233,123,3)" fg:x="63" fg:w="9227"/><text x="0.6520%" y="1215.50">deno`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="59.2879%" y="1221" width="0.0128%" height="15" fill="rgb(214,93,52)" fg:x="9291" fg:w="2"/><text x="59.5379%" y="1231.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="59.2879%" y="1205" width="0.0128%" height="15" fill="rgb(251,37,40)" fg:x="9291" fg:w="2"/><text x="59.5379%" y="1215.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="59.2879%" y="1189" width="0.0128%" height="15" fill="rgb(227,80,54)" fg:x="9291" fg:w="2"/><text x="59.5379%" y="1199.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="59.3198%" y="1205" width="0.0191%" height="15" fill="rgb(254,48,11)" fg:x="9296" fg:w="3"/><text x="59.5698%" y="1215.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="59.3261%" y="1189" width="0.0128%" height="15" fill="rgb(235,193,26)" fg:x="9297" fg:w="2"/><text x="59.5761%" y="1199.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (5 samples, 0.03%)</title><rect x="59.3198%" y="1221" width="0.0319%" height="15" fill="rgb(229,99,21)" fg:x="9296" fg:w="5"/><text x="59.5698%" y="1231.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="59.3389%" y="1205" width="0.0128%" height="15" fill="rgb(211,140,41)" fg:x="9299" fg:w="2"/><text x="59.5889%" y="1215.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (7 samples, 0.04%)</title><rect x="59.3644%" y="1205" width="0.0447%" height="15" fill="rgb(240,227,30)" fg:x="9303" fg:w="7"/><text x="59.6144%" y="1215.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::try_borrow_mut (6 samples, 0.04%)</title><rect x="59.3708%" y="1189" width="0.0383%" height="15" fill="rgb(215,224,45)" fg:x="9304" fg:w="6"/><text x="59.6208%" y="1199.50"></text></g><g><title>deno`core::cell::BorrowRefMut::new (6 samples, 0.04%)</title><rect x="59.3708%" y="1173" width="0.0383%" height="15" fill="rgb(206,123,31)" fg:x="9304" fg:w="6"/><text x="59.6208%" y="1183.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (4 samples, 0.03%)</title><rect x="59.3836%" y="1157" width="0.0255%" height="15" fill="rgb(210,138,16)" fg:x="9306" fg:w="4"/><text x="59.6336%" y="1167.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (4 samples, 0.03%)</title><rect x="59.3836%" y="1141" width="0.0255%" height="15" fill="rgb(228,57,28)" fg:x="9306" fg:w="4"/><text x="59.6336%" y="1151.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="59.3900%" y="1125" width="0.0191%" height="15" fill="rgb(242,170,10)" fg:x="9307" fg:w="3"/><text x="59.6400%" y="1135.50"></text></g><g><title>deno`core::ptr::read (4 samples, 0.03%)</title><rect x="59.4346%" y="1125" width="0.0255%" height="15" fill="rgb(228,214,39)" fg:x="9314" fg:w="4"/><text x="59.6846%" y="1135.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::RefMut&lt;core::option::Option&lt;alloc::boxed::Box&lt;tokio::runtime::basic_scheduler::Core&gt;&gt;&gt;&gt; (7 samples, 0.04%)</title><rect x="59.4219%" y="1205" width="0.0447%" height="15" fill="rgb(218,179,33)" fg:x="9312" fg:w="7"/><text x="59.6719%" y="1215.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (7 samples, 0.04%)</title><rect x="59.4219%" y="1189" width="0.0447%" height="15" fill="rgb(235,193,39)" fg:x="9312" fg:w="7"/><text x="59.6719%" y="1199.50"></text></g><g><title>deno`&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="59.4282%" y="1173" width="0.0383%" height="15" fill="rgb(219,221,36)" fg:x="9313" fg:w="6"/><text x="59.6782%" y="1183.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (6 samples, 0.04%)</title><rect x="59.4282%" y="1157" width="0.0383%" height="15" fill="rgb(248,218,19)" fg:x="9313" fg:w="6"/><text x="59.6782%" y="1167.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (6 samples, 0.04%)</title><rect x="59.4282%" y="1141" width="0.0383%" height="15" fill="rgb(205,50,9)" fg:x="9313" fg:w="6"/><text x="59.6782%" y="1151.50"></text></g><g><title>deno`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.03%)</title><rect x="59.5240%" y="1061" width="0.0255%" height="15" fill="rgb(238,81,28)" fg:x="9328" fg:w="4"/><text x="59.7740%" y="1071.50"></text></g><g><title>deno`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="59.5814%" y="1045" width="0.0191%" height="15" fill="rgb(235,110,19)" fg:x="9337" fg:w="3"/><text x="59.8314%" y="1055.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (2 samples, 0.01%)</title><rect x="59.6197%" y="1045" width="0.0128%" height="15" fill="rgb(214,7,14)" fg:x="9343" fg:w="2"/><text x="59.8697%" y="1055.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.01%)</title><rect x="59.6899%" y="1013" width="0.0128%" height="15" fill="rgb(211,77,3)" fg:x="9354" fg:w="2"/><text x="59.9399%" y="1023.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="59.7026%" y="965" width="0.0128%" height="15" fill="rgb(229,5,9)" fg:x="9356" fg:w="2"/><text x="59.9526%" y="975.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.03%)</title><rect x="59.7154%" y="965" width="0.0319%" height="15" fill="rgb(225,90,11)" fg:x="9358" fg:w="5"/><text x="59.9654%" y="975.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::clear (9 samples, 0.06%)</title><rect x="59.7026%" y="1013" width="0.0574%" height="15" fill="rgb(242,56,8)" fg:x="9356" fg:w="9"/><text x="59.9526%" y="1023.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (9 samples, 0.06%)</title><rect x="59.7026%" y="997" width="0.0574%" height="15" fill="rgb(249,212,39)" fg:x="9356" fg:w="9"/><text x="59.9526%" y="1007.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.06%)</title><rect x="59.7026%" y="981" width="0.0574%" height="15" fill="rgb(236,90,9)" fg:x="9356" fg:w="9"/><text x="59.9526%" y="991.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="59.7601%" y="1013" width="0.0128%" height="15" fill="rgb(206,88,35)" fg:x="9365" fg:w="2"/><text x="60.0101%" y="1023.50"></text></g><g><title>deno`mio::sys::unix::selector::kqueue::Selector::select (20 samples, 0.13%)</title><rect x="59.6580%" y="1029" width="0.1276%" height="15" fill="rgb(205,126,30)" fg:x="9349" fg:w="20"/><text x="59.9080%" y="1039.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::map (2 samples, 0.01%)</title><rect x="59.7728%" y="1013" width="0.0128%" height="15" fill="rgb(230,176,12)" fg:x="9367" fg:w="2"/><text x="60.0228%" y="1023.50"></text></g><g><title>deno`mio::poll::Poll::poll (61 samples, 0.39%)</title><rect x="59.6388%" y="1045" width="0.3893%" height="15" fill="rgb(243,19,9)" fg:x="9346" fg:w="61"/><text x="59.8888%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`kevent (38 samples, 0.24%)</title><rect x="59.7856%" y="1029" width="0.2425%" height="15" fill="rgb(245,171,17)" fg:x="9369" fg:w="38"/><text x="60.0356%" y="1039.50"></text></g><g><title>deno`&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (82 samples, 0.52%)</title><rect x="59.5176%" y="1077" width="0.5233%" height="15" fill="rgb(227,52,21)" fg:x="9327" fg:w="82"/><text x="59.7676%" y="1087.50"></text></g><g><title>deno`tokio::io::driver::Driver::turn (75 samples, 0.48%)</title><rect x="59.5622%" y="1061" width="0.4786%" height="15" fill="rgb(238,69,14)" fg:x="9334" fg:w="75"/><text x="59.8122%" y="1071.50"></text></g><g><title>deno`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="60.1110%" y="1029" width="0.0128%" height="15" fill="rgb(241,156,39)" fg:x="9420" fg:w="2"/><text x="60.3610%" y="1039.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (2 samples, 0.01%)</title><rect x="60.1302%" y="997" width="0.0128%" height="15" fill="rgb(212,227,28)" fg:x="9423" fg:w="2"/><text x="60.3802%" y="1007.50"></text></g><g><title>deno`tokio::coop::CURRENT::__getit (3 samples, 0.02%)</title><rect x="60.1685%" y="981" width="0.0191%" height="15" fill="rgb(209,118,27)" fg:x="9429" fg:w="3"/><text x="60.4185%" y="991.50"></text></g><g><title>deno`tokio::coop::poll_proceed (10 samples, 0.06%)</title><rect x="60.1302%" y="1029" width="0.0638%" height="15" fill="rgb(226,102,5)" fg:x="9423" fg:w="10"/><text x="60.3802%" y="1039.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.06%)</title><rect x="60.1302%" y="1013" width="0.0638%" height="15" fill="rgb(223,34,3)" fg:x="9423" fg:w="10"/><text x="60.3802%" y="1023.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.04%)</title><rect x="60.1493%" y="997" width="0.0447%" height="15" fill="rgb(221,81,38)" fg:x="9426" fg:w="7"/><text x="60.3993%" y="1007.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::io::driver::scheduled_io::Waiters&gt;&gt; (3 samples, 0.02%)</title><rect x="60.2514%" y="1013" width="0.0191%" height="15" fill="rgb(236,219,28)" fg:x="9442" fg:w="3"/><text x="60.5014%" y="1023.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::io::driver::scheduled_io::Waiters&gt;&gt; (3 samples, 0.02%)</title><rect x="60.2514%" y="997" width="0.0191%" height="15" fill="rgb(213,200,14)" fg:x="9442" fg:w="3"/><text x="60.5014%" y="1007.50"></text></g><g><title>deno`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="60.2514%" y="981" width="0.0191%" height="15" fill="rgb(240,33,19)" fg:x="9442" fg:w="3"/><text x="60.5014%" y="991.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.02%)</title><rect x="60.2514%" y="965" width="0.0191%" height="15" fill="rgb(233,113,27)" fg:x="9442" fg:w="3"/><text x="60.5014%" y="975.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange (2 samples, 0.01%)</title><rect x="60.2578%" y="949" width="0.0128%" height="15" fill="rgb(220,221,18)" fg:x="9443" fg:w="2"/><text x="60.5078%" y="959.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (2 samples, 0.01%)</title><rect x="60.2578%" y="933" width="0.0128%" height="15" fill="rgb(238,92,8)" fg:x="9443" fg:w="2"/><text x="60.5078%" y="943.50"></text></g><g><title>deno`core::task::wake::Waker::will_wake (2 samples, 0.01%)</title><rect x="60.2769%" y="1013" width="0.0128%" height="15" fill="rgb(222,164,16)" fg:x="9446" fg:w="2"/><text x="60.5269%" y="1023.50"></text></g><g><title>deno`&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="60.2769%" y="997" width="0.0128%" height="15" fill="rgb(241,119,3)" fg:x="9446" fg:w="2"/><text x="60.5269%" y="1007.50"></text></g><g><title>deno`tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (16 samples, 0.10%)</title><rect x="60.2004%" y="1029" width="0.1021%" height="15" fill="rgb(241,44,8)" fg:x="9434" fg:w="16"/><text x="60.4504%" y="1039.50"></text></g><g><title>deno`tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.01%)</title><rect x="60.2897%" y="1013" width="0.0128%" height="15" fill="rgb(230,36,40)" fg:x="9448" fg:w="2"/><text x="60.5397%" y="1023.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.01%)</title><rect x="60.2897%" y="997" width="0.0128%" height="15" fill="rgb(243,16,36)" fg:x="9448" fg:w="2"/><text x="60.5397%" y="1007.50"></text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_ready (38 samples, 0.24%)</title><rect x="60.0791%" y="1045" width="0.2425%" height="15" fill="rgb(231,4,26)" fg:x="9415" fg:w="38"/><text x="60.3291%" y="1055.50"></text></g><g><title>deno`tokio::util::bit::Pack::unpack (2 samples, 0.01%)</title><rect x="60.3089%" y="1029" width="0.0128%" height="15" fill="rgb(240,9,31)" fg:x="9451" fg:w="2"/><text x="60.5589%" y="1039.50"></text></g><g><title>deno`&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (128 samples, 0.82%)</title><rect x="59.5112%" y="1093" width="0.8168%" height="15" fill="rgb(207,173,15)" fg:x="9326" fg:w="128"/><text x="59.7612%" y="1103.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (42 samples, 0.27%)</title><rect x="60.0600%" y="1077" width="0.2680%" height="15" fill="rgb(224,192,53)" fg:x="9412" fg:w="42"/><text x="60.3100%" y="1087.50"></text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_read_ready (41 samples, 0.26%)</title><rect x="60.0664%" y="1061" width="0.2616%" height="15" fill="rgb(223,67,28)" fg:x="9413" fg:w="41"/><text x="60.3164%" y="1071.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::is_initialized (2 samples, 0.01%)</title><rect x="60.3471%" y="997" width="0.0128%" height="15" fill="rgb(211,20,47)" fg:x="9457" fg:w="2"/><text x="60.5971%" y="1007.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="60.3471%" y="981" width="0.0128%" height="15" fill="rgb(240,228,2)" fg:x="9457" fg:w="2"/><text x="60.5971%" y="991.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="60.3471%" y="965" width="0.0128%" height="15" fill="rgb(248,151,12)" fg:x="9457" fg:w="2"/><text x="60.5971%" y="975.50"></text></g><g><title>deno`once_cell::sync::Lazy&lt;T,F&gt;::force (8 samples, 0.05%)</title><rect x="60.3344%" y="1061" width="0.0510%" height="15" fill="rgb(244,8,39)" fg:x="9455" fg:w="8"/><text x="60.5844%" y="1071.50"></text></g><g><title>deno`once_cell::sync::OnceCell&lt;T&gt;::get_or_init (8 samples, 0.05%)</title><rect x="60.3344%" y="1045" width="0.0510%" height="15" fill="rgb(222,26,8)" fg:x="9455" fg:w="8"/><text x="60.5844%" y="1055.50"></text></g><g><title>deno`once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (7 samples, 0.04%)</title><rect x="60.3408%" y="1029" width="0.0447%" height="15" fill="rgb(213,106,44)" fg:x="9456" fg:w="7"/><text x="60.5908%" y="1039.50"></text></g><g><title>deno`once_cell::sync::OnceCell&lt;T&gt;::get (6 samples, 0.04%)</title><rect x="60.3471%" y="1013" width="0.0383%" height="15" fill="rgb(214,129,20)" fg:x="9457" fg:w="6"/><text x="60.5971%" y="1023.50"></text></g><g><title>deno`once_cell::sync::OnceCell&lt;T&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="60.3599%" y="997" width="0.0255%" height="15" fill="rgb(212,32,13)" fg:x="9459" fg:w="4"/><text x="60.6099%" y="1007.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="60.3663%" y="981" width="0.0191%" height="15" fill="rgb(208,168,33)" fg:x="9460" fg:w="3"/><text x="60.6163%" y="991.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::is_initialized (3 samples, 0.02%)</title><rect x="60.3663%" y="965" width="0.0191%" height="15" fill="rgb(231,207,8)" fg:x="9460" fg:w="3"/><text x="60.6163%" y="975.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="60.3727%" y="949" width="0.0128%" height="15" fill="rgb(235,219,23)" fg:x="9461" fg:w="2"/><text x="60.6227%" y="959.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="60.3727%" y="933" width="0.0128%" height="15" fill="rgb(226,216,26)" fg:x="9461" fg:w="2"/><text x="60.6227%" y="943.50"></text></g><g><title>deno`&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.06%)</title><rect x="60.3344%" y="1077" width="0.0574%" height="15" fill="rgb(239,137,16)" fg:x="9455" fg:w="9"/><text x="60.5844%" y="1087.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="60.4173%" y="1061" width="0.0191%" height="15" fill="rgb(207,12,36)" fg:x="9468" fg:w="3"/><text x="60.6673%" y="1071.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="60.4173%" y="1045" width="0.0191%" height="15" fill="rgb(210,214,24)" fg:x="9468" fg:w="3"/><text x="60.6673%" y="1055.50"></text></g><g><title>deno`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="60.4173%" y="1029" width="0.0191%" height="15" fill="rgb(206,56,30)" fg:x="9468" fg:w="3"/><text x="60.6673%" y="1039.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.02%)</title><rect x="60.4173%" y="1013" width="0.0191%" height="15" fill="rgb(228,143,26)" fg:x="9468" fg:w="3"/><text x="60.6673%" y="1023.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange (3 samples, 0.02%)</title><rect x="60.4173%" y="997" width="0.0191%" height="15" fill="rgb(216,218,46)" fg:x="9468" fg:w="3"/><text x="60.6673%" y="1007.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (3 samples, 0.02%)</title><rect x="60.4173%" y="981" width="0.0191%" height="15" fill="rgb(206,6,19)" fg:x="9468" fg:w="3"/><text x="60.6673%" y="991.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="60.4365%" y="1061" width="0.0191%" height="15" fill="rgb(239,177,51)" fg:x="9471" fg:w="3"/><text x="60.6865%" y="1071.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="60.4365%" y="1045" width="0.0191%" height="15" fill="rgb(216,55,25)" fg:x="9471" fg:w="3"/><text x="60.6865%" y="1055.50"></text></g><g><title>deno`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="60.4365%" y="1029" width="0.0191%" height="15" fill="rgb(231,163,29)" fg:x="9471" fg:w="3"/><text x="60.6865%" y="1039.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.02%)</title><rect x="60.4365%" y="1013" width="0.0191%" height="15" fill="rgb(232,149,50)" fg:x="9471" fg:w="3"/><text x="60.6865%" y="1023.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange (2 samples, 0.01%)</title><rect x="60.4429%" y="997" width="0.0128%" height="15" fill="rgb(223,142,48)" fg:x="9472" fg:w="2"/><text x="60.6929%" y="1007.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (2 samples, 0.01%)</title><rect x="60.4429%" y="981" width="0.0128%" height="15" fill="rgb(245,83,23)" fg:x="9472" fg:w="2"/><text x="60.6929%" y="991.50"></text></g><g><title>deno`tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.01%)</title><rect x="60.4556%" y="1061" width="0.0128%" height="15" fill="rgb(224,63,2)" fg:x="9474" fg:w="2"/><text x="60.7056%" y="1071.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (3 samples, 0.02%)</title><rect x="60.5067%" y="1029" width="0.0191%" height="15" fill="rgb(218,65,53)" fg:x="9482" fg:w="3"/><text x="60.7567%" y="1039.50"></text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (162 samples, 1.03%)</title><rect x="59.4984%" y="1125" width="1.0338%" height="15" fill="rgb(221,84,29)" fg:x="9324" fg:w="162"/><text x="59.7484%" y="1135.50"></text></g><g><title>deno`&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (161 samples, 1.03%)</title><rect x="59.5048%" y="1109" width="1.0274%" height="15" fill="rgb(234,0,32)" fg:x="9325" fg:w="161"/><text x="59.7548%" y="1119.50"></text></g><g><title>deno`tokio::process::imp::GlobalOrphanQueue::reap_orphans (32 samples, 0.20%)</title><rect x="60.3280%" y="1093" width="0.2042%" height="15" fill="rgb(206,20,16)" fg:x="9454" fg:w="32"/><text x="60.5780%" y="1103.50"></text></g><g><title>deno`tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (22 samples, 0.14%)</title><rect x="60.3918%" y="1077" width="0.1404%" height="15" fill="rgb(244,172,18)" fg:x="9464" fg:w="22"/><text x="60.6418%" y="1087.50"></text></g><g><title>deno`tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (10 samples, 0.06%)</title><rect x="60.4684%" y="1061" width="0.0638%" height="15" fill="rgb(254,133,1)" fg:x="9476" fg:w="10"/><text x="60.7184%" y="1071.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (7 samples, 0.04%)</title><rect x="60.4875%" y="1045" width="0.0447%" height="15" fill="rgb(222,206,41)" fg:x="9479" fg:w="7"/><text x="60.7375%" y="1055.50"></text></g><g><title>deno`tokio::time::driver::ClockTime::now (2 samples, 0.01%)</title><rect x="60.5513%" y="1125" width="0.0128%" height="15" fill="rgb(212,3,42)" fg:x="9489" fg:w="2"/><text x="60.8013%" y="1135.50"></text></g><g><title>deno`tokio::time::driver::ClockTime::instant_to_tick (2 samples, 0.01%)</title><rect x="60.5641%" y="1109" width="0.0128%" height="15" fill="rgb(241,11,4)" fg:x="9491" fg:w="2"/><text x="60.8141%" y="1119.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::unwrap_or (5 samples, 0.03%)</title><rect x="60.5769%" y="1093" width="0.0319%" height="15" fill="rgb(205,19,26)" fg:x="9493" fg:w="5"/><text x="60.8269%" y="1103.50"></text></g><g><title>deno`core::time::Duration::as_millis (2 samples, 0.01%)</title><rect x="60.6088%" y="1093" width="0.0128%" height="15" fill="rgb(210,179,32)" fg:x="9498" fg:w="2"/><text x="60.8588%" y="1103.50"></text></g><g><title>deno`DYLD-STUB$$mach_absolute_time (2 samples, 0.01%)</title><rect x="60.6279%" y="1077" width="0.0128%" height="15" fill="rgb(227,116,49)" fg:x="9501" fg:w="2"/><text x="60.8779%" y="1087.50"></text></g><g><title>deno`std::time::Instant::now (2 samples, 0.01%)</title><rect x="60.6407%" y="1077" width="0.0128%" height="15" fill="rgb(211,146,6)" fg:x="9503" fg:w="2"/><text x="60.8907%" y="1087.50"></text></g><g><title>deno`tokio::time::clock::Clock::now (10 samples, 0.06%)</title><rect x="60.6215%" y="1093" width="0.0638%" height="15" fill="rgb(219,44,39)" fg:x="9500" fg:w="10"/><text x="60.8715%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (5 samples, 0.03%)</title><rect x="60.6534%" y="1077" width="0.0319%" height="15" fill="rgb(234,128,11)" fg:x="9505" fg:w="5"/><text x="60.9034%" y="1087.50"></text></g><g><title>deno`tokio::time::driver::ClockTime::now (22 samples, 0.14%)</title><rect x="60.5769%" y="1109" width="0.1404%" height="15" fill="rgb(220,183,53)" fg:x="9493" fg:w="22"/><text x="60.8269%" y="1119.50"></text></g><g><title>deno`tokio::time::driver::ClockTime::instant_to_tick (5 samples, 0.03%)</title><rect x="60.6853%" y="1093" width="0.0319%" height="15" fill="rgb(213,219,32)" fg:x="9510" fg:w="5"/><text x="60.9353%" y="1103.50"></text></g><g><title>deno`tokio::time::instant::Instant::checked_duration_since (2 samples, 0.01%)</title><rect x="60.7045%" y="1077" width="0.0128%" height="15" fill="rgb(232,156,16)" fg:x="9513" fg:w="2"/><text x="60.9545%" y="1087.50"></text></g><g><title>deno`&lt;core::option::Option&lt;T&gt; as core::default::Default&gt;::default (8 samples, 0.05%)</title><rect x="60.7300%" y="1093" width="0.0510%" height="15" fill="rgb(246,135,34)" fg:x="9517" fg:w="8"/><text x="60.9800%" y="1103.50"></text></g><g><title>deno`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="60.7811%" y="1093" width="0.0319%" height="15" fill="rgb(241,99,0)" fg:x="9525" fg:w="5"/><text x="61.0311%" y="1103.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="60.8002%" y="1077" width="0.0128%" height="15" fill="rgb(222,103,45)" fg:x="9528" fg:w="2"/><text x="61.0502%" y="1087.50"></text></g><g><title>deno`&lt;tokio::loom::std::parking_lot::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="60.8193%" y="1093" width="0.0128%" height="15" fill="rgb(212,57,4)" fg:x="9531" fg:w="2"/><text x="61.0693%" y="1103.50"></text></g><g><title>deno`core::array::_&lt;impl core::default::Default for [T (7 samples, 0.04%)</title><rect x="60.8321%" y="1093" width="0.0447%" height="15" fill="rgb(215,68,47)" fg:x="9533" fg:w="7"/><text x="61.0821%" y="1103.50"></text></g><g><title> 32]&gt;::default (7 samples, 0.04%)</title><rect x="60.8321%" y="1077" width="0.0447%" height="15" fill="rgb(230,84,2)" fg:x="9533" fg:w="7"/><text x="61.0821%" y="1087.50"></text></g><g><title>deno`core::mem::drop (6 samples, 0.04%)</title><rect x="60.8832%" y="1093" width="0.0383%" height="15" fill="rgb(220,102,14)" fg:x="9541" fg:w="6"/><text x="61.1332%" y="1103.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::time::driver::InnerState&gt;&gt; (6 samples, 0.04%)</title><rect x="60.8832%" y="1077" width="0.0383%" height="15" fill="rgb(240,10,32)" fg:x="9541" fg:w="6"/><text x="61.1332%" y="1087.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::time::driver::InnerState&gt;&gt; (6 samples, 0.04%)</title><rect x="60.8832%" y="1061" width="0.0383%" height="15" fill="rgb(215,47,27)" fg:x="9541" fg:w="6"/><text x="61.1332%" y="1071.50"></text></g><g><title>deno`&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="60.8832%" y="1045" width="0.0383%" height="15" fill="rgb(233,188,43)" fg:x="9541" fg:w="6"/><text x="61.1332%" y="1055.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (6 samples, 0.04%)</title><rect x="60.8832%" y="1029" width="0.0383%" height="15" fill="rgb(253,190,1)" fg:x="9541" fg:w="6"/><text x="61.1332%" y="1039.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange (6 samples, 0.04%)</title><rect x="60.8832%" y="1013" width="0.0383%" height="15" fill="rgb(206,114,52)" fg:x="9541" fg:w="6"/><text x="61.1332%" y="1023.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (6 samples, 0.04%)</title><rect x="60.8832%" y="997" width="0.0383%" height="15" fill="rgb(233,120,37)" fg:x="9541" fg:w="6"/><text x="61.1332%" y="1007.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (15 samples, 0.10%)</title><rect x="60.9278%" y="1093" width="0.0957%" height="15" fill="rgb(214,52,39)" fg:x="9548" fg:w="15"/><text x="61.1778%" y="1103.50"></text></g><g><title> 32]&gt; (15 samples, 0.10%)</title><rect x="60.9278%" y="1077" width="0.0957%" height="15" fill="rgb(223,80,29)" fg:x="9548" fg:w="15"/><text x="61.1778%" y="1087.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (8 samples, 0.05%)</title><rect x="60.9725%" y="1061" width="0.0510%" height="15" fill="rgb(230,101,40)" fg:x="9555" fg:w="8"/><text x="61.2225%" y="1071.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::iter_mut (3 samples, 0.02%)</title><rect x="61.0363%" y="1093" width="0.0191%" height="15" fill="rgb(219,211,8)" fg:x="9565" fg:w="3"/><text x="61.2863%" y="1103.50"></text></g><g><title>deno`core::slice::iter::IterMut&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="61.0427%" y="1077" width="0.0128%" height="15" fill="rgb(252,126,28)" fg:x="9566" fg:w="2"/><text x="61.2927%" y="1087.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="61.0427%" y="1061" width="0.0128%" height="15" fill="rgb(215,56,38)" fg:x="9566" fg:w="2"/><text x="61.2927%" y="1071.50"></text></g><g><title>deno`tokio::time::driver::Inner::lock (3 samples, 0.02%)</title><rect x="61.0618%" y="1093" width="0.0191%" height="15" fill="rgb(249,55,44)" fg:x="9569" fg:w="3"/><text x="61.3118%" y="1103.50"></text></g><g><title>deno`tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (3 samples, 0.02%)</title><rect x="61.0618%" y="1077" width="0.0191%" height="15" fill="rgb(220,221,32)" fg:x="9569" fg:w="3"/><text x="61.3118%" y="1087.50"></text></g><g><title>deno`lock_api::mutex::Mutex&lt;R,T&gt;::lock (3 samples, 0.02%)</title><rect x="61.0618%" y="1061" width="0.0191%" height="15" fill="rgb(212,216,41)" fg:x="9569" fg:w="3"/><text x="61.3118%" y="1071.50"></text></g><g><title>deno`&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (3 samples, 0.02%)</title><rect x="61.0618%" y="1045" width="0.0191%" height="15" fill="rgb(228,213,43)" fg:x="9569" fg:w="3"/><text x="61.3118%" y="1055.50"></text></g><g><title>deno`core::sync::atomic::AtomicU8::compare_exchange_weak (3 samples, 0.02%)</title><rect x="61.0618%" y="1029" width="0.0191%" height="15" fill="rgb(211,31,26)" fg:x="9569" fg:w="3"/><text x="61.3118%" y="1039.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.02%)</title><rect x="61.0618%" y="1013" width="0.0191%" height="15" fill="rgb(229,202,19)" fg:x="9569" fg:w="3"/><text x="61.3118%" y="1023.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="61.1831%" y="1013" width="0.0128%" height="15" fill="rgb(229,105,46)" fg:x="9588" fg:w="2"/><text x="61.4331%" y="1023.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_ptr (7 samples, 0.04%)</title><rect x="61.1576%" y="1029" width="0.0447%" height="15" fill="rgb(235,108,1)" fg:x="9584" fg:w="7"/><text x="61.4076%" y="1039.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.05%)</title><rect x="61.1576%" y="1045" width="0.0510%" height="15" fill="rgb(245,111,35)" fg:x="9584" fg:w="8"/><text x="61.4076%" y="1055.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (18 samples, 0.11%)</title><rect x="61.1384%" y="1061" width="0.1149%" height="15" fill="rgb(219,185,31)" fg:x="9581" fg:w="18"/><text x="61.3884%" y="1071.50"></text></g><g><title>deno`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.04%)</title><rect x="61.2086%" y="1045" width="0.0447%" height="15" fill="rgb(214,4,43)" fg:x="9592" fg:w="7"/><text x="61.4586%" y="1055.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="61.2341%" y="1029" width="0.0191%" height="15" fill="rgb(235,227,40)" fg:x="9596" fg:w="3"/><text x="61.4841%" y="1039.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.04%)</title><rect x="61.2597%" y="1045" width="0.0447%" height="15" fill="rgb(230,88,30)" fg:x="9600" fg:w="7"/><text x="61.5097%" y="1055.50"></text></g><g><title>deno`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.06%)</title><rect x="61.2533%" y="1061" width="0.0638%" height="15" fill="rgb(216,217,1)" fg:x="9599" fg:w="10"/><text x="61.5033%" y="1071.50"></text></g><g><title>deno`tokio::time::driver::wheel::level::Level::next_expiration (2 samples, 0.01%)</title><rect x="61.3171%" y="1061" width="0.0128%" height="15" fill="rgb(248,139,50)" fg:x="9609" fg:w="2"/><text x="61.5671%" y="1071.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (36 samples, 0.23%)</title><rect x="61.1065%" y="1077" width="0.2297%" height="15" fill="rgb(233,1,21)" fg:x="9576" fg:w="36"/><text x="61.3565%" y="1087.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::poll (42 samples, 0.27%)</title><rect x="61.0810%" y="1093" width="0.2680%" height="15" fill="rgb(215,183,12)" fg:x="9572" fg:w="42"/><text x="61.3310%" y="1103.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.01%)</title><rect x="61.4000%" y="1029" width="0.0128%" height="15" fill="rgb(229,104,42)" fg:x="9622" fg:w="2"/><text x="61.6500%" y="1039.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="61.4000%" y="1045" width="0.0255%" height="15" fill="rgb(243,34,48)" fg:x="9622" fg:w="4"/><text x="61.6500%" y="1055.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (2 samples, 0.01%)</title><rect x="61.4128%" y="1029" width="0.0128%" height="15" fill="rgb(239,11,44)" fg:x="9624" fg:w="2"/><text x="61.6628%" y="1039.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (2 samples, 0.01%)</title><rect x="61.4128%" y="1013" width="0.0128%" height="15" fill="rgb(231,98,35)" fg:x="9624" fg:w="2"/><text x="61.6628%" y="1023.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.06%)</title><rect x="61.3809%" y="1061" width="0.0574%" height="15" fill="rgb(233,28,25)" fg:x="9619" fg:w="9"/><text x="61.6309%" y="1071.50"></text></g><g><title>deno`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="61.4256%" y="1045" width="0.0128%" height="15" fill="rgb(234,123,11)" fg:x="9626" fg:w="2"/><text x="61.6756%" y="1055.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="61.4256%" y="1029" width="0.0128%" height="15" fill="rgb(220,69,3)" fg:x="9626" fg:w="2"/><text x="61.6756%" y="1039.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.04%)</title><rect x="61.4447%" y="1045" width="0.0383%" height="15" fill="rgb(214,64,36)" fg:x="9629" fg:w="6"/><text x="61.6947%" y="1055.50"></text></g><g><title>deno`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.06%)</title><rect x="61.4383%" y="1061" width="0.0638%" height="15" fill="rgb(211,138,32)" fg:x="9628" fg:w="10"/><text x="61.6883%" y="1071.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (126 samples, 0.80%)</title><rect x="60.7172%" y="1109" width="0.8040%" height="15" fill="rgb(213,118,47)" fg:x="9515" fg:w="126"/><text x="60.9672%" y="1119.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::poll_at (27 samples, 0.17%)</title><rect x="61.3490%" y="1093" width="0.1723%" height="15" fill="rgb(243,124,49)" fg:x="9614" fg:w="27"/><text x="61.5990%" y="1103.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (27 samples, 0.17%)</title><rect x="61.3490%" y="1077" width="0.1723%" height="15" fill="rgb(221,30,28)" fg:x="9614" fg:w="27"/><text x="61.5990%" y="1087.50"></text></g><g><title>deno`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (2 samples, 0.01%)</title><rect x="61.5085%" y="1061" width="0.0128%" height="15" fill="rgb(246,37,13)" fg:x="9639" fg:w="2"/><text x="61.7585%" y="1071.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::is_some (2 samples, 0.01%)</title><rect x="61.5085%" y="1045" width="0.0128%" height="15" fill="rgb(249,66,14)" fg:x="9639" fg:w="2"/><text x="61.7585%" y="1055.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process (151 samples, 0.96%)</title><rect x="60.5641%" y="1125" width="0.9636%" height="15" fill="rgb(213,166,5)" fg:x="9491" fg:w="151"/><text x="60.8141%" y="1135.50"></text></g><g><title>deno`tokio::time::driver::handle::Handle::is_shutdown (6 samples, 0.04%)</title><rect x="61.5340%" y="1125" width="0.0383%" height="15" fill="rgb(221,66,24)" fg:x="9643" fg:w="6"/><text x="61.7840%" y="1135.50"></text></g><g><title>deno`tokio::time::driver::Inner::is_shutdown (3 samples, 0.02%)</title><rect x="61.5532%" y="1109" width="0.0191%" height="15" fill="rgb(210,132,17)" fg:x="9646" fg:w="3"/><text x="61.8032%" y="1119.50"></text></g><g><title>deno`core::sync::atomic::AtomicBool::load (3 samples, 0.02%)</title><rect x="61.5532%" y="1093" width="0.0191%" height="15" fill="rgb(243,202,5)" fg:x="9646" fg:w="3"/><text x="61.8032%" y="1103.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="61.6553%" y="1061" width="0.0128%" height="15" fill="rgb(233,70,48)" fg:x="9662" fg:w="2"/><text x="61.9053%" y="1071.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.03%)</title><rect x="61.6680%" y="1061" width="0.0255%" height="15" fill="rgb(238,41,26)" fg:x="9664" fg:w="4"/><text x="61.9180%" y="1071.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.09%)</title><rect x="61.6234%" y="1077" width="0.0893%" height="15" fill="rgb(241,19,31)" fg:x="9657" fg:w="14"/><text x="61.8734%" y="1087.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (3 samples, 0.02%)</title><rect x="61.6936%" y="1061" width="0.0191%" height="15" fill="rgb(214,76,10)" fg:x="9668" fg:w="3"/><text x="61.9436%" y="1071.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (3 samples, 0.02%)</title><rect x="61.6936%" y="1045" width="0.0191%" height="15" fill="rgb(254,202,22)" fg:x="9668" fg:w="3"/><text x="61.9436%" y="1055.50"></text></g><g><title>deno`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.03%)</title><rect x="61.7127%" y="1077" width="0.0319%" height="15" fill="rgb(214,72,24)" fg:x="9671" fg:w="5"/><text x="61.9627%" y="1087.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="61.7319%" y="1061" width="0.0128%" height="15" fill="rgb(221,92,46)" fg:x="9674" fg:w="2"/><text x="61.9819%" y="1071.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (23 samples, 0.15%)</title><rect x="61.6042%" y="1093" width="0.1468%" height="15" fill="rgb(246,13,50)" fg:x="9654" fg:w="23"/><text x="61.8542%" y="1103.50"></text></g><g><title>deno`core::mem::replace (2 samples, 0.01%)</title><rect x="61.8021%" y="1061" width="0.0128%" height="15" fill="rgb(240,165,38)" fg:x="9685" fg:w="2"/><text x="62.0521%" y="1071.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.08%)</title><rect x="61.7510%" y="1077" width="0.0766%" height="15" fill="rgb(241,24,51)" fg:x="9677" fg:w="12"/><text x="62.0010%" y="1087.50"></text></g><g><title>deno`core::ptr::read (2 samples, 0.01%)</title><rect x="61.8148%" y="1061" width="0.0128%" height="15" fill="rgb(227,51,44)" fg:x="9687" fg:w="2"/><text x="62.0648%" y="1071.50"></text></g><g><title>deno`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (13 samples, 0.08%)</title><rect x="61.7510%" y="1093" width="0.0830%" height="15" fill="rgb(231,121,3)" fg:x="9677" fg:w="13"/><text x="62.0010%" y="1103.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (43 samples, 0.27%)</title><rect x="61.5851%" y="1109" width="0.2744%" height="15" fill="rgb(245,3,41)" fg:x="9651" fg:w="43"/><text x="61.8351%" y="1119.50"></text></g><g><title>deno`tokio::time::driver::wheel::level::Level::next_expiration (3 samples, 0.02%)</title><rect x="61.8403%" y="1093" width="0.0191%" height="15" fill="rgb(214,13,26)" fg:x="9691" fg:w="3"/><text x="62.0903%" y="1103.50"></text></g><g><title>deno`tokio::time::driver::wheel::level::Level::next_occupied_slot (2 samples, 0.01%)</title><rect x="61.8467%" y="1077" width="0.0128%" height="15" fill="rgb(252,75,11)" fg:x="9692" fg:w="2"/><text x="62.0967%" y="1087.50"></text></g><g><title>deno`tokio::time::driver::wheel::level::Level::next_expiration (3 samples, 0.02%)</title><rect x="61.8595%" y="1109" width="0.0191%" height="15" fill="rgb(218,226,17)" fg:x="9694" fg:w="3"/><text x="62.1095%" y="1119.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (380 samples, 2.42%)</title><rect x="59.4665%" y="1141" width="2.4249%" height="15" fill="rgb(248,89,38)" fg:x="9319" fg:w="380"/><text x="59.7165%" y="1151.50">de..</text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration_time (49 samples, 0.31%)</title><rect x="61.5787%" y="1125" width="0.3127%" height="15" fill="rgb(237,73,46)" fg:x="9650" fg:w="49"/><text x="61.8287%" y="1135.50"></text></g><g><title>deno`tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::is_empty (2 samples, 0.01%)</title><rect x="61.8786%" y="1109" width="0.0128%" height="15" fill="rgb(242,78,33)" fg:x="9697" fg:w="2"/><text x="62.1286%" y="1119.50"></text></g><g><title>deno`&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (383 samples, 2.44%)</title><rect x="59.4665%" y="1157" width="2.4440%" height="15" fill="rgb(235,60,3)" fg:x="9319" fg:w="383"/><text x="59.7165%" y="1167.50">de..</text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration_time (2 samples, 0.01%)</title><rect x="61.8978%" y="1141" width="0.0128%" height="15" fill="rgb(216,172,19)" fg:x="9700" fg:w="2"/><text x="62.1478%" y="1151.50"></text></g><g><title>deno`&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (386 samples, 2.46%)</title><rect x="59.4665%" y="1189" width="2.4631%" height="15" fill="rgb(227,6,42)" fg:x="9319" fg:w="386"/><text x="59.7165%" y="1199.50">de..</text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (386 samples, 2.46%)</title><rect x="59.4665%" y="1173" width="2.4631%" height="15" fill="rgb(223,207,42)" fg:x="9319" fg:w="386"/><text x="59.7165%" y="1183.50">de..</text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (3 samples, 0.02%)</title><rect x="61.9105%" y="1157" width="0.0191%" height="15" fill="rgb(246,138,30)" fg:x="9702" fg:w="3"/><text x="62.1605%" y="1167.50"></text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::enter (404 samples, 2.58%)</title><rect x="59.3580%" y="1221" width="2.5780%" height="15" fill="rgb(251,199,47)" fg:x="9302" fg:w="404"/><text x="59.6080%" y="1231.50">de..</text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::park::_{{closure}} (387 samples, 2.47%)</title><rect x="59.4665%" y="1205" width="2.4695%" height="15" fill="rgb(228,218,44)" fg:x="9319" fg:w="387"/><text x="59.7165%" y="1215.50">de..</text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::park (417 samples, 2.66%)</title><rect x="59.2815%" y="1237" width="2.6610%" height="15" fill="rgb(220,68,6)" fg:x="9290" fg:w="417"/><text x="59.5315%" y="1247.50">de..</text></g><g><title>dyld`start (9,708 samples, 61.95%)</title><rect x="0.0000%" y="1509" width="61.9488%" height="15" fill="rgb(240,60,26)" fg:x="0" fg:w="9708"/><text x="0.2500%" y="1519.50">dyld`start</text></g><g><title>deno`main (9,708 samples, 61.95%)</title><rect x="0.0000%" y="1493" width="61.9488%" height="15" fill="rgb(211,200,19)" fg:x="0" fg:w="9708"/><text x="0.2500%" y="1503.50">deno`main</text></g><g><title>deno`std::rt::lang_start (9,708 samples, 61.95%)</title><rect x="0.0000%" y="1477" width="61.9488%" height="15" fill="rgb(242,145,30)" fg:x="0" fg:w="9708"/><text x="0.2500%" y="1487.50">deno`std::rt::lang_start</text></g><g><title>deno`std::rt::lang_start_internal (9,708 samples, 61.95%)</title><rect x="0.0000%" y="1461" width="61.9488%" height="15" fill="rgb(225,64,13)" fg:x="0" fg:w="9708"/><text x="0.2500%" y="1471.50">deno`std::rt::lang_start_internal</text></g><g><title>deno`std::rt::lang_start::_{{closure}} (9,708 samples, 61.95%)</title><rect x="0.0000%" y="1445" width="61.9488%" height="15" fill="rgb(218,103,35)" fg:x="0" fg:w="9708"/><text x="0.2500%" y="1455.50">deno`std::rt::lang_start::_{{closure}}</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (9,708 samples, 61.95%)</title><rect x="0.0000%" y="1429" width="61.9488%" height="15" fill="rgb(216,93,46)" fg:x="0" fg:w="9708"/><text x="0.2500%" y="1439.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`core::ops::function::FnOnce::call_once (9,708 samples, 61.95%)</title><rect x="0.0000%" y="1413" width="61.9488%" height="15" fill="rgb(225,159,27)" fg:x="0" fg:w="9708"/><text x="0.2500%" y="1423.50">deno`core::ops::function::FnOnce::call_once</text></g><g><title>deno`deno::main (9,708 samples, 61.95%)</title><rect x="0.0000%" y="1397" width="61.9488%" height="15" fill="rgb(225,204,11)" fg:x="0" fg:w="9708"/><text x="0.2500%" y="1407.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (9,708 samples, 61.95%)</title><rect x="0.0000%" y="1381" width="61.9488%" height="15" fill="rgb(205,56,4)" fg:x="0" fg:w="9708"/><text x="0.2500%" y="1391.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`tokio::task::local::LocalSet::block_on (9,707 samples, 61.94%)</title><rect x="0.0064%" y="1365" width="61.9424%" height="15" fill="rgb(206,6,35)" fg:x="1" fg:w="9707"/><text x="0.2564%" y="1375.50">deno`tokio::task::local::LocalSet::block_on</text></g><g><title>deno`tokio::runtime::Runtime::block_on (9,707 samples, 61.94%)</title><rect x="0.0064%" y="1349" width="61.9424%" height="15" fill="rgb(247,73,52)" fg:x="1" fg:w="9707"/><text x="0.2564%" y="1359.50">deno`tokio::runtime::Runtime::block_on</text></g><g><title>deno`tokio::runtime::basic_scheduler::BasicScheduler::block_on (9,707 samples, 61.94%)</title><rect x="0.0064%" y="1333" width="61.9424%" height="15" fill="rgb(246,97,4)" fg:x="1" fg:w="9707"/><text x="0.2564%" y="1343.50">deno`tokio::runtime::basic_scheduler::BasicScheduler::block_on</text></g><g><title>deno`tokio::runtime::basic_scheduler::CoreGuard::block_on (9,707 samples, 61.94%)</title><rect x="0.0064%" y="1317" width="61.9424%" height="15" fill="rgb(212,37,15)" fg:x="1" fg:w="9707"/><text x="0.2564%" y="1327.50">deno`tokio::runtime::basic_scheduler::CoreGuard::block_on</text></g><g><title>deno`tokio::runtime::basic_scheduler::CoreGuard::enter (9,707 samples, 61.94%)</title><rect x="0.0064%" y="1301" width="61.9424%" height="15" fill="rgb(208,130,40)" fg:x="1" fg:w="9707"/><text x="0.2564%" y="1311.50">deno`tokio::runtime::basic_scheduler::CoreGuard::enter</text></g><g><title>deno`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,707 samples, 61.94%)</title><rect x="0.0064%" y="1285" width="61.9424%" height="15" fill="rgb(236,55,29)" fg:x="1" fg:w="9707"/><text x="0.2564%" y="1295.50">deno`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>deno`tokio::runtime::basic_scheduler::CoreGuard::enter::_{{closure}} (9,707 samples, 61.94%)</title><rect x="0.0064%" y="1269" width="61.9424%" height="15" fill="rgb(209,156,45)" fg:x="1" fg:w="9707"/><text x="0.2564%" y="1279.50">deno`tokio::runtime::basic_scheduler::CoreGuard::enter::_{{closure}}</text></g><g><title>deno`tokio::runtime::basic_scheduler::CoreGuard::block_on::_{{closure}} (9,698 samples, 61.89%)</title><rect x="0.0638%" y="1253" width="61.8850%" height="15" fill="rgb(249,107,4)" fg:x="10" fg:w="9698"/><text x="0.3138%" y="1263.50">deno`tokio::runtime::basic_scheduler::CoreGuard::block_on::_{{closure}}</text></g><g><title>deno`&lt;&amp;mio::event::events::Events as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.02%)</title><rect x="61.9488%" y="1013" width="0.0191%" height="15" fill="rgb(227,7,13)" fg:x="9708" fg:w="3"/><text x="62.1988%" y="1023.50"></text></g><g><title>deno`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.01%)</title><rect x="61.9680%" y="1013" width="0.0128%" height="15" fill="rgb(250,129,14)" fg:x="9711" fg:w="2"/><text x="62.2180%" y="1023.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="61.9935%" y="1013" width="0.0128%" height="15" fill="rgb(229,92,13)" fg:x="9715" fg:w="2"/><text x="62.2435%" y="1023.50"></text></g><g><title>deno`core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T (4 samples, 0.03%)</title><rect x="62.0063%" y="1013" width="0.0255%" height="15" fill="rgb(245,98,39)" fg:x="9717" fg:w="4"/><text x="62.2563%" y="1023.50"></text></g><g><title> N]&gt;::index (4 samples, 0.03%)</title><rect x="62.0063%" y="997" width="0.0255%" height="15" fill="rgb(234,135,48)" fg:x="9717" fg:w="4"/><text x="62.2563%" y="1007.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap (5 samples, 0.03%)</title><rect x="62.0318%" y="1013" width="0.0319%" height="15" fill="rgb(230,98,28)" fg:x="9721" fg:w="5"/><text x="62.2818%" y="1023.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::unwrap (6 samples, 0.04%)</title><rect x="62.0637%" y="1013" width="0.0383%" height="15" fill="rgb(223,121,0)" fg:x="9726" fg:w="6"/><text x="62.3137%" y="1023.50"></text></g><g><title>deno`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 0.03%)</title><rect x="62.5104%" y="997" width="0.0255%" height="15" fill="rgb(234,173,33)" fg:x="9796" fg:w="4"/><text x="62.7604%" y="1007.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.03%)</title><rect x="62.5614%" y="965" width="0.0255%" height="15" fill="rgb(245,47,8)" fg:x="9804" fg:w="4"/><text x="62.8114%" y="975.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ptr (4 samples, 0.03%)</title><rect x="62.5614%" y="949" width="0.0255%" height="15" fill="rgb(205,17,20)" fg:x="9804" fg:w="4"/><text x="62.8114%" y="959.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (9 samples, 0.06%)</title><rect x="62.5487%" y="981" width="0.0574%" height="15" fill="rgb(232,151,16)" fg:x="9802" fg:w="9"/><text x="62.7987%" y="991.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="62.5933%" y="965" width="0.0128%" height="15" fill="rgb(208,30,32)" fg:x="9809" fg:w="2"/><text x="62.8433%" y="975.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts_mut (6 samples, 0.04%)</title><rect x="62.6380%" y="965" width="0.0383%" height="15" fill="rgb(254,26,3)" fg:x="9816" fg:w="6"/><text x="62.8880%" y="975.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (23 samples, 0.15%)</title><rect x="62.5359%" y="997" width="0.1468%" height="15" fill="rgb(240,177,30)" fg:x="9800" fg:w="23"/><text x="62.7859%" y="1007.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts_mut (11 samples, 0.07%)</title><rect x="62.6125%" y="981" width="0.0702%" height="15" fill="rgb(248,76,44)" fg:x="9812" fg:w="11"/><text x="62.8625%" y="991.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.05%)</title><rect x="62.6827%" y="997" width="0.0510%" height="15" fill="rgb(241,186,54)" fg:x="9823" fg:w="8"/><text x="62.9327%" y="1007.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (4 samples, 0.03%)</title><rect x="62.8613%" y="981" width="0.0255%" height="15" fill="rgb(249,171,29)" fg:x="9851" fg:w="4"/><text x="63.1113%" y="991.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (4 samples, 0.03%)</title><rect x="62.8869%" y="981" width="0.0255%" height="15" fill="rgb(237,151,44)" fg:x="9855" fg:w="4"/><text x="63.1369%" y="991.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.20%)</title><rect x="62.7337%" y="997" width="0.2042%" height="15" fill="rgb(228,174,30)" fg:x="9831" fg:w="32"/><text x="62.9837%" y="1007.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="62.9188%" y="981" width="0.0191%" height="15" fill="rgb(252,14,37)" fg:x="9860" fg:w="3"/><text x="63.1688%" y="991.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="63.0209%" y="933" width="0.0128%" height="15" fill="rgb(207,111,40)" fg:x="9876" fg:w="2"/><text x="63.2709%" y="943.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (2 samples, 0.01%)</title><rect x="63.0528%" y="917" width="0.0128%" height="15" fill="rgb(248,171,54)" fg:x="9881" fg:w="2"/><text x="63.3028%" y="927.50"></text></g><g><title>libsystem_c.dylib`recv (3 samples, 0.02%)</title><rect x="63.0655%" y="917" width="0.0191%" height="15" fill="rgb(211,127,2)" fg:x="9883" fg:w="3"/><text x="63.3155%" y="927.50"></text></g><g><title>deno`&lt;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1,476 samples, 9.42%)</title><rect x="62.9443%" y="981" width="9.4187%" height="15" fill="rgb(236,87,47)" fg:x="9864" fg:w="1476"/><text x="63.1943%" y="991.50">deno`&lt;mio::ne..</text></g><g><title>deno`mio::io_source::IoSource&lt;T&gt;::do_io (1,469 samples, 9.37%)</title><rect x="62.9890%" y="965" width="9.3740%" height="15" fill="rgb(223,190,45)" fg:x="9871" fg:w="1469"/><text x="63.2390%" y="975.50">deno`mio::io_..</text></g><g><title>deno`mio::sys::unix::IoSourceState::do_io (1,467 samples, 9.36%)</title><rect x="63.0017%" y="949" width="9.3612%" height="15" fill="rgb(215,5,16)" fg:x="9873" fg:w="1467"/><text x="63.2517%" y="959.50">deno`mio::sys..</text></g><g><title>deno`&lt;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (1,462 samples, 9.33%)</title><rect x="63.0336%" y="933" width="9.3293%" height="15" fill="rgb(252,82,33)" fg:x="9878" fg:w="1462"/><text x="63.2836%" y="943.50">deno`&lt;mio::ne..</text></g><g><title>libsystem_kernel.dylib`__recvfrom (1,454 samples, 9.28%)</title><rect x="63.0847%" y="917" width="9.2783%" height="15" fill="rgb(247,213,44)" fg:x="9886" fg:w="1454"/><text x="63.3347%" y="927.50">libsystem_ker..</text></g><g><title>deno`&lt;deno_flash::Stream as std::io::Read&gt;::read (1,478 samples, 9.43%)</title><rect x="62.9379%" y="997" width="9.4314%" height="15" fill="rgb(205,196,44)" fg:x="9863" fg:w="1478"/><text x="63.1879%" y="1007.50">deno`&lt;deno_fl..</text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.06%)</title><rect x="72.5225%" y="949" width="0.0638%" height="15" fill="rgb(237,96,54)" fg:x="11365" fg:w="10"/><text x="72.7725%" y="959.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ptr (5 samples, 0.03%)</title><rect x="72.5544%" y="933" width="0.0319%" height="15" fill="rgb(230,113,34)" fg:x="11370" fg:w="5"/><text x="72.8044%" y="943.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (4 samples, 0.03%)</title><rect x="72.5863%" y="949" width="0.0255%" height="15" fill="rgb(221,224,12)" fg:x="11375" fg:w="4"/><text x="72.8363%" y="959.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="72.6118%" y="949" width="0.0191%" height="15" fill="rgb(219,112,44)" fg:x="11379" fg:w="3"/><text x="72.8618%" y="959.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_ptr (25 samples, 0.16%)</title><rect x="72.4842%" y="965" width="0.1595%" height="15" fill="rgb(210,31,13)" fg:x="11359" fg:w="25"/><text x="72.7342%" y="975.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="72.6310%" y="949" width="0.0128%" height="15" fill="rgb(230,25,16)" fg:x="11382" fg:w="2"/><text x="72.8810%" y="959.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.26%)</title><rect x="72.4523%" y="981" width="0.2552%" height="15" fill="rgb(246,108,53)" fg:x="11354" fg:w="40"/><text x="72.7023%" y="991.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (9 samples, 0.06%)</title><rect x="72.6501%" y="965" width="0.0574%" height="15" fill="rgb(241,172,50)" fg:x="11385" fg:w="9"/><text x="72.9001%" y="975.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (2 samples, 0.01%)</title><rect x="72.6948%" y="949" width="0.0128%" height="15" fill="rgb(235,141,10)" fg:x="11392" fg:w="2"/><text x="72.9448%" y="959.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (5 samples, 0.03%)</title><rect x="72.7139%" y="981" width="0.0319%" height="15" fill="rgb(220,174,43)" fg:x="11395" fg:w="5"/><text x="72.9639%" y="991.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get (11 samples, 0.07%)</title><rect x="72.7458%" y="981" width="0.0702%" height="15" fill="rgb(215,181,40)" fg:x="11400" fg:w="11"/><text x="72.9958%" y="991.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (9 samples, 0.06%)</title><rect x="72.7586%" y="965" width="0.0574%" height="15" fill="rgb(230,97,2)" fg:x="11402" fg:w="9"/><text x="73.0086%" y="975.50"></text></g><g><title>deno`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.45%)</title><rect x="72.3757%" y="997" width="0.4467%" height="15" fill="rgb(211,25,27)" fg:x="11342" fg:w="70"/><text x="72.6257%" y="1007.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="72.8288%" y="997" width="0.0128%" height="15" fill="rgb(230,87,26)" fg:x="11413" fg:w="2"/><text x="73.0788%" y="1007.50"></text></g><g><title>deno`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.01%)</title><rect x="72.8735%" y="965" width="0.0128%" height="15" fill="rgb(227,160,17)" fg:x="11420" fg:w="2"/><text x="73.1235%" y="975.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.03%)</title><rect x="72.8862%" y="965" width="0.0319%" height="15" fill="rgb(244,85,34)" fg:x="11422" fg:w="5"/><text x="73.1362%" y="975.50"></text></g><g><title>deno`&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (27 samples, 0.17%)</title><rect x="73.9327%" y="949" width="0.1723%" height="15" fill="rgb(207,70,0)" fg:x="11586" fg:w="27"/><text x="74.1827%" y="959.50"></text></g><g><title>deno`&lt;httparse::Header as core::clone::Clone&gt;::clone (32 samples, 0.20%)</title><rect x="74.1050%" y="949" width="0.2042%" height="15" fill="rgb(223,129,7)" fg:x="11613" fg:w="32"/><text x="74.3550%" y="959.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="74.3348%" y="917" width="0.0128%" height="15" fill="rgb(246,105,7)" fg:x="11649" fg:w="2"/><text x="74.5848%" y="927.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.04%)</title><rect x="74.3220%" y="933" width="0.0383%" height="15" fill="rgb(215,154,42)" fg:x="11647" fg:w="6"/><text x="74.5720%" y="943.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="74.3475%" y="917" width="0.0128%" height="15" fill="rgb(220,215,30)" fg:x="11651" fg:w="2"/><text x="74.5975%" y="927.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (9 samples, 0.06%)</title><rect x="74.3092%" y="949" width="0.0574%" height="15" fill="rgb(228,81,51)" fg:x="11645" fg:w="9"/><text x="74.5592%" y="959.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::reserve (12 samples, 0.08%)</title><rect x="74.3667%" y="949" width="0.0766%" height="15" fill="rgb(247,71,54)" fg:x="11654" fg:w="12"/><text x="74.6167%" y="959.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (10 samples, 0.06%)</title><rect x="74.3794%" y="933" width="0.0638%" height="15" fill="rgb(234,176,34)" fg:x="11656" fg:w="10"/><text x="74.6294%" y="943.50"></text></g><g><title>deno`core::mem::replace (76 samples, 0.48%)</title><rect x="75.5600%" y="917" width="0.4850%" height="15" fill="rgb(241,103,54)" fg:x="11841" fg:w="76"/><text x="75.8100%" y="927.50"></text></g><g><title>deno`core::ptr::read (47 samples, 0.30%)</title><rect x="76.0449%" y="917" width="0.2999%" height="15" fill="rgb(228,22,34)" fg:x="11917" fg:w="47"/><text x="76.2949%" y="927.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (276 samples, 1.76%)</title><rect x="74.6730%" y="933" width="1.7612%" height="15" fill="rgb(241,179,48)" fg:x="11702" fg:w="276"/><text x="74.9230%" y="943.50"></text></g><g><title>deno`core::ptr::write (14 samples, 0.09%)</title><rect x="76.3448%" y="917" width="0.0893%" height="15" fill="rgb(235,167,37)" fg:x="11964" fg:w="14"/><text x="76.5948%" y="927.50"></text></g><g><title>deno`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (22 samples, 0.14%)</title><rect x="76.4342%" y="933" width="0.1404%" height="15" fill="rgb(213,109,30)" fg:x="11978" fg:w="22"/><text x="76.6842%" y="943.50"></text></g><g><title>deno`core::clone::impls::_&lt;impl core::clone::Clone for usize&gt;::clone (9 samples, 0.06%)</title><rect x="76.5746%" y="933" width="0.0574%" height="15" fill="rgb(222,172,16)" fg:x="12000" fg:w="9"/><text x="76.8246%" y="943.50"></text></g><g><title>deno`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (380 samples, 2.42%)</title><rect x="74.4432%" y="949" width="2.4249%" height="15" fill="rgb(233,192,5)" fg:x="11666" fg:w="380"/><text x="74.6932%" y="959.50">de..</text></g><g><title>deno`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::lt (37 samples, 0.24%)</title><rect x="76.6320%" y="933" width="0.2361%" height="15" fill="rgb(247,189,41)" fg:x="12009" fg:w="37"/><text x="76.8820%" y="943.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (6 samples, 0.04%)</title><rect x="76.8681%" y="949" width="0.0383%" height="15" fill="rgb(218,134,47)" fg:x="12046" fg:w="6"/><text x="77.1181%" y="959.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::extend_with (631 samples, 4.03%)</title><rect x="72.9181%" y="965" width="4.0265%" height="15" fill="rgb(216,29,3)" fg:x="11427" fg:w="631"/><text x="73.1681%" y="975.50">deno..</text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (6 samples, 0.04%)</title><rect x="76.9064%" y="949" width="0.0383%" height="15" fill="rgb(246,140,12)" fg:x="12052" fg:w="6"/><text x="77.1564%" y="959.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.05%)</title><rect x="76.9638%" y="949" width="0.0510%" height="15" fill="rgb(230,136,11)" fg:x="12061" fg:w="8"/><text x="77.2138%" y="959.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="77.0595%" y="933" width="0.0128%" height="15" fill="rgb(247,22,47)" fg:x="12076" fg:w="2"/><text x="77.3095%" y="943.50"></text></g><g><title>deno`__rdl_alloc (3 samples, 0.02%)</title><rect x="77.2254%" y="885" width="0.0191%" height="15" fill="rgb(218,84,22)" fg:x="12102" fg:w="3"/><text x="77.4754%" y="895.50"></text></g><g><title>deno`__rust_alloc (11 samples, 0.07%)</title><rect x="77.2446%" y="885" width="0.0702%" height="15" fill="rgb(216,87,39)" fg:x="12105" fg:w="11"/><text x="77.4946%" y="895.50"></text></g><g><title>deno`core::alloc::layout::Layout::align (10 samples, 0.06%)</title><rect x="77.3595%" y="869" width="0.0638%" height="15" fill="rgb(221,178,8)" fg:x="12123" fg:w="10"/><text x="77.6095%" y="879.50"></text></g><g><title>deno`core::mem::valid_align::ValidAlign::as_nonzero (2 samples, 0.01%)</title><rect x="77.4105%" y="853" width="0.0128%" height="15" fill="rgb(230,42,11)" fg:x="12131" fg:w="2"/><text x="77.6605%" y="863.50"></text></g><g><title>deno`core::num::nonzero::NonZeroUsize::get (3 samples, 0.02%)</title><rect x="77.4296%" y="869" width="0.0191%" height="15" fill="rgb(237,229,4)" fg:x="12134" fg:w="3"/><text x="77.6796%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="77.4871%" y="853" width="0.0255%" height="15" fill="rgb(222,31,33)" fg:x="12143" fg:w="4"/><text x="77.7371%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.02%)</title><rect x="77.5126%" y="853" width="0.0191%" height="15" fill="rgb(210,17,39)" fg:x="12147" fg:w="3"/><text x="77.7626%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.01%)</title><rect x="77.5573%" y="837" width="0.0128%" height="15" fill="rgb(244,93,20)" fg:x="12154" fg:w="2"/><text x="77.8073%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (5 samples, 0.03%)</title><rect x="77.7040%" y="821" width="0.0319%" height="15" fill="rgb(210,40,47)" fg:x="12177" fg:w="5"/><text x="77.9540%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="77.7359%" y="821" width="0.0191%" height="15" fill="rgb(239,211,47)" fg:x="12182" fg:w="3"/><text x="77.9859%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="77.8572%" y="805" width="0.0128%" height="15" fill="rgb(251,223,49)" fg:x="12201" fg:w="2"/><text x="78.1072%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (4 samples, 0.03%)</title><rect x="77.8700%" y="805" width="0.0255%" height="15" fill="rgb(221,149,5)" fg:x="12203" fg:w="4"/><text x="78.1200%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (60 samples, 0.38%)</title><rect x="77.5700%" y="837" width="0.3829%" height="15" fill="rgb(219,224,51)" fg:x="12156" fg:w="60"/><text x="77.8200%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (31 samples, 0.20%)</title><rect x="77.7551%" y="821" width="0.1978%" height="15" fill="rgb(223,7,8)" fg:x="12185" fg:w="31"/><text x="78.0051%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.06%)</title><rect x="77.8955%" y="805" width="0.0574%" height="15" fill="rgb(241,217,22)" fg:x="12207" fg:w="9"/><text x="78.1455%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (80 samples, 0.51%)</title><rect x="77.4488%" y="869" width="0.5105%" height="15" fill="rgb(248,209,0)" fg:x="12137" fg:w="80"/><text x="77.6988%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (67 samples, 0.43%)</title><rect x="77.5317%" y="853" width="0.4275%" height="15" fill="rgb(217,205,4)" fg:x="12150" fg:w="67"/><text x="77.7817%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (2 samples, 0.01%)</title><rect x="77.9657%" y="869" width="0.0128%" height="15" fill="rgb(228,124,39)" fg:x="12218" fg:w="2"/><text x="78.2157%" y="879.50"></text></g><g><title>deno`alloc::alloc::alloc (106 samples, 0.68%)</title><rect x="77.3148%" y="885" width="0.6764%" height="15" fill="rgb(250,116,42)" fg:x="12116" fg:w="106"/><text x="77.5648%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="77.9784%" y="869" width="0.0128%" height="15" fill="rgb(223,202,9)" fg:x="12220" fg:w="2"/><text x="78.2284%" y="879.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="77.9912%" y="885" width="0.0128%" height="15" fill="rgb(242,222,40)" fg:x="12222" fg:w="2"/><text x="78.2412%" y="895.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (3 samples, 0.02%)</title><rect x="78.0422%" y="869" width="0.0191%" height="15" fill="rgb(229,99,46)" fg:x="12230" fg:w="3"/><text x="78.2922%" y="879.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (9 samples, 0.06%)</title><rect x="78.0103%" y="885" width="0.0574%" height="15" fill="rgb(225,56,46)" fg:x="12225" fg:w="9"/><text x="78.2603%" y="895.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (5 samples, 0.03%)</title><rect x="78.0741%" y="885" width="0.0319%" height="15" fill="rgb(227,94,5)" fg:x="12235" fg:w="5"/><text x="78.3241%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="78.1061%" y="885" width="0.0383%" height="15" fill="rgb(205,112,38)" fg:x="12240" fg:w="6"/><text x="78.3561%" y="895.50"></text></g><g><title>deno`alloc::alloc::Global::alloc_impl (151 samples, 0.96%)</title><rect x="77.1935%" y="901" width="0.9636%" height="15" fill="rgb(231,133,46)" fg:x="12097" fg:w="151"/><text x="77.4435%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="78.1443%" y="885" width="0.0128%" height="15" fill="rgb(217,16,9)" fg:x="12246" fg:w="2"/><text x="78.3943%" y="895.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (7 samples, 0.04%)</title><rect x="78.1635%" y="901" width="0.0447%" height="15" fill="rgb(249,173,9)" fg:x="12249" fg:w="7"/><text x="78.4135%" y="911.50"></text></g><g><title>deno`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (166 samples, 1.06%)</title><rect x="77.1680%" y="917" width="1.0593%" height="15" fill="rgb(205,163,53)" fg:x="12093" fg:w="166"/><text x="77.4180%" y="927.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="78.2082%" y="901" width="0.0191%" height="15" fill="rgb(217,54,41)" fg:x="12256" fg:w="3"/><text x="78.4582%" y="911.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.04%)</title><rect x="78.2273%" y="917" width="0.0447%" height="15" fill="rgb(228,216,12)" fg:x="12259" fg:w="7"/><text x="78.4773%" y="927.50"></text></g><g><title>deno`core::alloc::layout::Layout::array (7 samples, 0.04%)</title><rect x="78.2783%" y="917" width="0.0447%" height="15" fill="rgb(244,228,15)" fg:x="12267" fg:w="7"/><text x="78.5283%" y="927.50"></text></g><g><title>deno`core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.01%)</title><rect x="78.3103%" y="901" width="0.0128%" height="15" fill="rgb(221,176,53)" fg:x="12272" fg:w="2"/><text x="78.5603%" y="911.50"></text></g><g><title>deno`core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.01%)</title><rect x="78.3230%" y="917" width="0.0128%" height="15" fill="rgb(205,94,34)" fg:x="12274" fg:w="2"/><text x="78.5730%" y="927.50"></text></g><g><title>deno`core::num::_&lt;impl usize&gt;::checked_mul (5 samples, 0.03%)</title><rect x="78.3358%" y="917" width="0.0319%" height="15" fill="rgb(213,110,48)" fg:x="12276" fg:w="5"/><text x="78.5858%" y="927.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (5 samples, 0.03%)</title><rect x="78.3677%" y="917" width="0.0319%" height="15" fill="rgb(236,142,28)" fg:x="12281" fg:w="5"/><text x="78.6177%" y="927.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (5 samples, 0.03%)</title><rect x="78.3996%" y="917" width="0.0319%" height="15" fill="rgb(225,135,29)" fg:x="12286" fg:w="5"/><text x="78.6496%" y="927.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (216 samples, 1.38%)</title><rect x="77.0723%" y="933" width="1.3783%" height="15" fill="rgb(252,45,31)" fg:x="12078" fg:w="216"/><text x="77.3223%" y="943.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::new_unchecked (2 samples, 0.01%)</title><rect x="78.4379%" y="917" width="0.0128%" height="15" fill="rgb(211,187,50)" fg:x="12292" fg:w="2"/><text x="78.6879%" y="927.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (240 samples, 1.53%)</title><rect x="76.9511%" y="965" width="1.5315%" height="15" fill="rgb(229,109,7)" fg:x="12059" fg:w="240"/><text x="77.2011%" y="975.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (230 samples, 1.47%)</title><rect x="77.0149%" y="949" width="1.4677%" height="15" fill="rgb(251,131,51)" fg:x="12069" fg:w="230"/><text x="77.2649%" y="959.50"></text></g><g><title>deno`core::ptr::unique::Unique&lt;T&gt;::new_unchecked (2 samples, 0.01%)</title><rect x="78.4698%" y="933" width="0.0128%" height="15" fill="rgb(251,180,35)" fg:x="12297" fg:w="2"/><text x="78.7198%" y="943.50"></text></g><g><title>deno`alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (23 samples, 0.15%)</title><rect x="78.4825%" y="965" width="0.1468%" height="15" fill="rgb(211,46,32)" fg:x="12299" fg:w="23"/><text x="78.7325%" y="975.50"></text></g><g><title>deno`alloc::vec::set_len_on_drop::SetLenOnDrop::new (5 samples, 0.03%)</title><rect x="78.6293%" y="965" width="0.0319%" height="15" fill="rgb(248,123,17)" fg:x="12322" fg:w="5"/><text x="78.8793%" y="975.50"></text></g><g><title>deno`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.03%)</title><rect x="78.6612%" y="965" width="0.0255%" height="15" fill="rgb(227,141,18)" fg:x="12327" fg:w="4"/><text x="78.9112%" y="975.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (2 samples, 0.01%)</title><rect x="78.6867%" y="965" width="0.0128%" height="15" fill="rgb(216,102,9)" fg:x="12331" fg:w="2"/><text x="78.9367%" y="975.50"></text></g><g><title>deno`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (943 samples, 6.02%)</title><rect x="72.8479%" y="981" width="6.0175%" height="15" fill="rgb(253,47,13)" fg:x="11416" fg:w="943"/><text x="73.0979%" y="991.50">deno`&lt;T ..</text></g><g><title>deno`core::ptr::write (26 samples, 0.17%)</title><rect x="78.6995%" y="965" width="0.1659%" height="15" fill="rgb(226,93,23)" fg:x="12333" fg:w="26"/><text x="78.9495%" y="975.50"></text></g><g><title>deno`alloc::vec::from_elem (945 samples, 6.03%)</title><rect x="72.8416%" y="997" width="6.0302%" height="15" fill="rgb(247,104,17)" fg:x="11415" fg:w="945"/><text x="73.0916%" y="1007.50">deno`all..</text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.01%)</title><rect x="78.9292%" y="949" width="0.0128%" height="15" fill="rgb(233,203,26)" fg:x="12369" fg:w="2"/><text x="79.1792%" y="959.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8 samples, 0.05%)</title><rect x="78.9675%" y="933" width="0.0510%" height="15" fill="rgb(244,98,49)" fg:x="12375" fg:w="8"/><text x="79.2175%" y="943.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (4 samples, 0.03%)</title><rect x="78.9930%" y="917" width="0.0255%" height="15" fill="rgb(235,134,22)" fg:x="12379" fg:w="4"/><text x="79.2430%" y="927.50"></text></g><g><title>deno`core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T (26 samples, 0.17%)</title><rect x="78.8718%" y="997" width="0.1659%" height="15" fill="rgb(221,70,32)" fg:x="12360" fg:w="26"/><text x="79.1218%" y="1007.50"></text></g><g><title> N]&gt;::index (26 samples, 0.17%)</title><rect x="78.8718%" y="981" width="0.1659%" height="15" fill="rgb(238,15,50)" fg:x="12360" fg:w="26"/><text x="79.1218%" y="991.50"></text></g><g><title>deno`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (24 samples, 0.15%)</title><rect x="78.8846%" y="965" width="0.1531%" height="15" fill="rgb(215,221,48)" fg:x="12362" fg:w="24"/><text x="79.1346%" y="975.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.10%)</title><rect x="78.9420%" y="949" width="0.0957%" height="15" fill="rgb(236,73,3)" fg:x="12371" fg:w="15"/><text x="79.1920%" y="959.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const [T]&gt;::as_ptr (3 samples, 0.02%)</title><rect x="79.0186%" y="933" width="0.0191%" height="15" fill="rgb(250,107,11)" fg:x="12383" fg:w="3"/><text x="79.2686%" y="943.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap (6 samples, 0.04%)</title><rect x="79.0377%" y="997" width="0.0383%" height="15" fill="rgb(242,39,14)" fg:x="12386" fg:w="6"/><text x="79.2877%" y="1007.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;http::header::name::HeaderName&gt; (7 samples, 0.04%)</title><rect x="79.1079%" y="981" width="0.0447%" height="15" fill="rgb(248,164,37)" fg:x="12397" fg:w="7"/><text x="79.3579%" y="991.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;http::header::name::Repr&lt;http::header::name::Custom&gt;&gt; (2 samples, 0.01%)</title><rect x="79.1398%" y="965" width="0.0128%" height="15" fill="rgb(217,60,12)" fg:x="12402" fg:w="2"/><text x="79.3898%" y="975.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::result::Result&lt;http::header::name::HeaderName,http::header::name::InvalidHeaderName&gt;&gt; (12 samples, 0.08%)</title><rect x="79.0824%" y="997" width="0.0766%" height="15" fill="rgb(240,125,29)" fg:x="12393" fg:w="12"/><text x="79.3324%" y="1007.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::iter (11 samples, 0.07%)</title><rect x="79.1781%" y="997" width="0.0702%" height="15" fill="rgb(208,207,28)" fg:x="12408" fg:w="11"/><text x="79.4281%" y="1007.50"></text></g><g><title>deno`core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.03%)</title><rect x="79.2164%" y="981" width="0.0319%" height="15" fill="rgb(209,159,27)" fg:x="12414" fg:w="5"/><text x="79.4664%" y="991.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (2 samples, 0.01%)</title><rect x="79.2355%" y="965" width="0.0128%" height="15" fill="rgb(251,176,53)" fg:x="12417" fg:w="2"/><text x="79.4855%" y="975.50"></text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6 samples, 0.04%)</title><rect x="79.2547%" y="997" width="0.0383%" height="15" fill="rgb(211,85,7)" fg:x="12420" fg:w="6"/><text x="79.5047%" y="1007.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (10 samples, 0.06%)</title><rect x="79.3440%" y="981" width="0.0638%" height="15" fill="rgb(216,64,54)" fg:x="12434" fg:w="10"/><text x="79.5940%" y="991.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="79.3823%" y="965" width="0.0255%" height="15" fill="rgb(217,54,24)" fg:x="12440" fg:w="4"/><text x="79.6323%" y="975.50"></text></g><g><title>deno`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.02%)</title><rect x="79.7779%" y="965" width="0.0191%" height="15" fill="rgb(208,206,53)" fg:x="12502" fg:w="3"/><text x="80.0279%" y="975.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (80 samples, 0.51%)</title><rect x="79.2930%" y="997" width="0.5105%" height="15" fill="rgb(251,74,39)" fg:x="12426" fg:w="80"/><text x="79.5430%" y="1007.50"></text></g><g><title>deno`http::header::name::parse_hdr (61 samples, 0.39%)</title><rect x="79.4142%" y="981" width="0.3893%" height="15" fill="rgb(226,47,5)" fg:x="12445" fg:w="61"/><text x="79.6642%" y="991.50"></text></g><g><title>deno`http::header::name::parse_hdr (3 samples, 0.02%)</title><rect x="79.8035%" y="997" width="0.0191%" height="15" fill="rgb(234,111,33)" fg:x="12506" fg:w="3"/><text x="80.0535%" y="1007.50"></text></g><g><title>deno`&lt;httparse::ParserConfig as core::default::Default&gt;::default (2 samples, 0.01%)</title><rect x="79.8290%" y="981" width="0.0128%" height="15" fill="rgb(251,14,10)" fg:x="12510" fg:w="2"/><text x="80.0790%" y="991.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.05%)</title><rect x="79.8737%" y="965" width="0.0510%" height="15" fill="rgb(232,43,0)" fg:x="12517" fg:w="8"/><text x="80.1237%" y="975.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="79.9247%" y="965" width="0.0191%" height="15" fill="rgb(222,68,43)" fg:x="12525" fg:w="3"/><text x="80.1747%" y="975.50"></text></g><g><title>deno`core::ptr::read (24 samples, 0.15%)</title><rect x="79.9438%" y="965" width="0.1531%" height="15" fill="rgb(217,24,23)" fg:x="12528" fg:w="24"/><text x="80.1938%" y="975.50"></text></g><g><title>deno`core::ptr::write (4 samples, 0.03%)</title><rect x="80.0970%" y="965" width="0.0255%" height="15" fill="rgb(229,209,14)" fg:x="12552" fg:w="4"/><text x="80.3470%" y="975.50"></text></g><g><title>deno`&lt;httparse::ParserConfig as core::default::Default&gt;::default (2 samples, 0.01%)</title><rect x="80.3841%" y="949" width="0.0128%" height="15" fill="rgb(250,149,48)" fg:x="12597" fg:w="2"/><text x="80.6341%" y="959.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (7 samples, 0.04%)</title><rect x="80.5437%" y="917" width="0.0447%" height="15" fill="rgb(210,120,37)" fg:x="12622" fg:w="7"/><text x="80.7937%" y="927.50"></text></g><g><title>deno`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.22%)</title><rect x="80.3969%" y="949" width="0.2170%" height="15" fill="rgb(210,21,8)" fg:x="12599" fg:w="34"/><text x="80.6469%" y="959.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (16 samples, 0.10%)</title><rect x="80.5118%" y="933" width="0.1021%" height="15" fill="rgb(243,145,7)" fg:x="12617" fg:w="16"/><text x="80.7618%" y="943.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const [T]&gt;::as_ptr (4 samples, 0.03%)</title><rect x="80.5883%" y="917" width="0.0255%" height="15" fill="rgb(238,178,32)" fg:x="12629" fg:w="4"/><text x="80.8383%" y="927.50"></text></g><g><title>deno`core::str::converts::from_utf8_unchecked (3 samples, 0.02%)</title><rect x="80.6203%" y="949" width="0.0191%" height="15" fill="rgb(222,4,10)" fg:x="12634" fg:w="3"/><text x="80.8703%" y="959.50"></text></g><g><title>deno`httparse::is_token (5 samples, 0.03%)</title><rect x="80.6458%" y="949" width="0.0319%" height="15" fill="rgb(239,7,37)" fg:x="12638" fg:w="5"/><text x="80.8958%" y="959.50"></text></g><g><title>deno`httparse::iter::Bytes::pos (3 samples, 0.02%)</title><rect x="80.6841%" y="949" width="0.0191%" height="15" fill="rgb(215,31,37)" fg:x="12644" fg:w="3"/><text x="80.9341%" y="959.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (3 samples, 0.02%)</title><rect x="80.7479%" y="901" width="0.0191%" height="15" fill="rgb(224,83,33)" fg:x="12654" fg:w="3"/><text x="80.9979%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes::slice (16 samples, 0.10%)</title><rect x="80.7032%" y="949" width="0.1021%" height="15" fill="rgb(239,55,3)" fg:x="12647" fg:w="16"/><text x="80.9532%" y="959.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (16 samples, 0.10%)</title><rect x="80.7032%" y="933" width="0.1021%" height="15" fill="rgb(247,92,11)" fg:x="12647" fg:w="16"/><text x="80.9532%" y="943.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (11 samples, 0.07%)</title><rect x="80.7351%" y="917" width="0.0702%" height="15" fill="rgb(239,200,7)" fg:x="12652" fg:w="11"/><text x="80.9851%" y="927.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (6 samples, 0.04%)</title><rect x="80.7670%" y="901" width="0.0383%" height="15" fill="rgb(227,115,8)" fg:x="12657" fg:w="6"/><text x="81.0170%" y="911.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (2 samples, 0.01%)</title><rect x="81.7816%" y="901" width="0.0128%" height="15" fill="rgb(215,189,27)" fg:x="12816" fg:w="2"/><text x="82.0316%" y="911.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (15 samples, 0.10%)</title><rect x="81.7242%" y="917" width="0.0957%" height="15" fill="rgb(251,216,39)" fg:x="12807" fg:w="15"/><text x="81.9742%" y="927.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="81.8008%" y="901" width="0.0191%" height="15" fill="rgb(207,29,47)" fg:x="12819" fg:w="3"/><text x="82.0508%" y="911.50"></text></g><g><title>deno`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (34 samples, 0.22%)</title><rect x="81.6157%" y="933" width="0.2170%" height="15" fill="rgb(210,71,34)" fg:x="12790" fg:w="34"/><text x="81.8657%" y="943.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="81.8199%" y="917" width="0.0128%" height="15" fill="rgb(253,217,51)" fg:x="12822" fg:w="2"/><text x="82.0699%" y="927.50"></text></g><g><title>deno`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.08%)</title><rect x="81.8327%" y="933" width="0.0830%" height="15" fill="rgb(222,117,46)" fg:x="12824" fg:w="13"/><text x="82.0827%" y="943.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.02%)</title><rect x="81.8965%" y="917" width="0.0191%" height="15" fill="rgb(226,132,6)" fg:x="12834" fg:w="3"/><text x="82.1465%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (19 samples, 0.12%)</title><rect x="82.2858%" y="901" width="0.1212%" height="15" fill="rgb(254,145,51)" fg:x="12895" fg:w="19"/><text x="82.5358%" y="911.50"></text></g><g><title>deno`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.50%)</title><rect x="81.9156%" y="933" width="0.4977%" height="15" fill="rgb(231,199,27)" fg:x="12837" fg:w="78"/><text x="82.1656%" y="943.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (33 samples, 0.21%)</title><rect x="82.2028%" y="917" width="0.2106%" height="15" fill="rgb(245,158,14)" fg:x="12882" fg:w="33"/><text x="82.4528%" y="927.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="82.4261%" y="901" width="0.0191%" height="15" fill="rgb(240,113,14)" fg:x="12917" fg:w="3"/><text x="82.6761%" y="911.50"></text></g><g><title>deno`core::ptr::read (24 samples, 0.15%)</title><rect x="82.4453%" y="901" width="0.1531%" height="15" fill="rgb(210,20,13)" fg:x="12920" fg:w="24"/><text x="82.6953%" y="911.50"></text></g><g><title>deno`core::ptr::write (2 samples, 0.01%)</title><rect x="82.5984%" y="901" width="0.0128%" height="15" fill="rgb(241,144,13)" fg:x="12944" fg:w="2"/><text x="82.8484%" y="911.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts_mut (3 samples, 0.02%)</title><rect x="82.7643%" y="853" width="0.0191%" height="15" fill="rgb(235,43,34)" fg:x="12970" fg:w="3"/><text x="83.0143%" y="863.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;httparse::parse_headers_iter_uninit::ShrinkOnDrop&gt; (59 samples, 0.38%)</title><rect x="82.4134%" y="933" width="0.3765%" height="15" fill="rgb(208,36,20)" fg:x="12915" fg:w="59"/><text x="82.6634%" y="943.50"></text></g><g><title>deno`&lt;httparse::parse_headers_iter_uninit::ShrinkOnDrop as core::ops::drop::Drop&gt;::drop (58 samples, 0.37%)</title><rect x="82.4198%" y="917" width="0.3701%" height="15" fill="rgb(239,204,10)" fg:x="12916" fg:w="58"/><text x="82.6698%" y="927.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked_mut (28 samples, 0.18%)</title><rect x="82.6112%" y="901" width="0.1787%" height="15" fill="rgb(217,84,43)" fg:x="12946" fg:w="28"/><text x="82.8612%" y="911.50"></text></g><g><title>deno`&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (25 samples, 0.16%)</title><rect x="82.6303%" y="885" width="0.1595%" height="15" fill="rgb(241,170,50)" fg:x="12949" fg:w="25"/><text x="82.8803%" y="895.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (21 samples, 0.13%)</title><rect x="82.6559%" y="869" width="0.1340%" height="15" fill="rgb(226,205,29)" fg:x="12953" fg:w="21"/><text x="82.9059%" y="879.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4 samples, 0.03%)</title><rect x="82.7962%" y="933" width="0.0255%" height="15" fill="rgb(233,113,1)" fg:x="12975" fg:w="4"/><text x="83.0462%" y="943.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (4 samples, 0.03%)</title><rect x="82.8792%" y="901" width="0.0255%" height="15" fill="rgb(253,98,13)" fg:x="12988" fg:w="4"/><text x="83.1292%" y="911.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::iter (14 samples, 0.09%)</title><rect x="82.8218%" y="933" width="0.0893%" height="15" fill="rgb(211,115,12)" fg:x="12979" fg:w="14"/><text x="83.0718%" y="943.50"></text></g><g><title>deno`core::slice::iter::Iter&lt;T&gt;::new (12 samples, 0.08%)</title><rect x="82.8345%" y="917" width="0.0766%" height="15" fill="rgb(208,12,16)" fg:x="12981" fg:w="12"/><text x="83.0845%" y="927.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::iter_mut (14 samples, 0.09%)</title><rect x="82.9111%" y="933" width="0.0893%" height="15" fill="rgb(237,193,54)" fg:x="12993" fg:w="14"/><text x="83.1611%" y="943.50"></text></g><g><title>deno`core::slice::iter::IterMut&lt;T&gt;::new (10 samples, 0.06%)</title><rect x="82.9366%" y="917" width="0.0638%" height="15" fill="rgb(243,22,42)" fg:x="12997" fg:w="10"/><text x="83.1866%" y="927.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (4 samples, 0.03%)</title><rect x="82.9749%" y="901" width="0.0255%" height="15" fill="rgb(233,151,36)" fg:x="13003" fg:w="4"/><text x="83.2249%" y="911.50"></text></g><g><title>deno`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12 samples, 0.08%)</title><rect x="83.0004%" y="933" width="0.0766%" height="15" fill="rgb(237,57,45)" fg:x="13007" fg:w="12"/><text x="83.2504%" y="943.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.08%)</title><rect x="83.0004%" y="917" width="0.0766%" height="15" fill="rgb(221,88,17)" fg:x="13007" fg:w="12"/><text x="83.2504%" y="927.50"></text></g><g><title>deno`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9 samples, 0.06%)</title><rect x="83.0196%" y="901" width="0.0574%" height="15" fill="rgb(230,79,15)" fg:x="13010" fg:w="9"/><text x="83.2696%" y="911.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (3 samples, 0.02%)</title><rect x="83.0579%" y="885" width="0.0191%" height="15" fill="rgb(213,57,13)" fg:x="13016" fg:w="3"/><text x="83.3079%" y="895.50"></text></g><g><title>deno`httparse::is_header_name_token (4 samples, 0.03%)</title><rect x="83.0770%" y="933" width="0.0255%" height="15" fill="rgb(222,116,39)" fg:x="13019" fg:w="4"/><text x="83.3270%" y="943.50"></text></g><g><title>deno`httparse::is_header_value_token (21 samples, 0.13%)</title><rect x="83.1025%" y="933" width="0.1340%" height="15" fill="rgb(245,107,2)" fg:x="13023" fg:w="21"/><text x="83.3525%" y="943.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (7 samples, 0.04%)</title><rect x="83.3067%" y="901" width="0.0447%" height="15" fill="rgb(238,1,10)" fg:x="13055" fg:w="7"/><text x="83.5567%" y="911.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (14 samples, 0.09%)</title><rect x="83.2812%" y="917" width="0.0893%" height="15" fill="rgb(249,4,48)" fg:x="13051" fg:w="14"/><text x="83.5312%" y="927.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const [T]&gt;::as_ptr (3 samples, 0.02%)</title><rect x="83.3514%" y="901" width="0.0191%" height="15" fill="rgb(223,151,18)" fg:x="13062" fg:w="3"/><text x="83.6014%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes8::_0 (28 samples, 0.18%)</title><rect x="83.2366%" y="933" width="0.1787%" height="15" fill="rgb(227,65,43)" fg:x="13044" fg:w="28"/><text x="83.4866%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::assert_pos (7 samples, 0.04%)</title><rect x="83.3706%" y="917" width="0.0447%" height="15" fill="rgb(218,40,45)" fg:x="13065" fg:w="7"/><text x="83.6206%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.03%)</title><rect x="83.4854%" y="901" width="0.0319%" height="15" fill="rgb(252,121,31)" fg:x="13083" fg:w="5"/><text x="83.7354%" y="911.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (6 samples, 0.04%)</title><rect x="83.4854%" y="917" width="0.0383%" height="15" fill="rgb(219,158,43)" fg:x="13083" fg:w="6"/><text x="83.7354%" y="927.50"></text></g><g><title>deno`httparse::iter::Bytes8::_1 (28 samples, 0.18%)</title><rect x="83.4152%" y="933" width="0.1787%" height="15" fill="rgb(231,162,42)" fg:x="13072" fg:w="28"/><text x="83.6652%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::assert_pos (11 samples, 0.07%)</title><rect x="83.5237%" y="917" width="0.0702%" height="15" fill="rgb(217,179,25)" fg:x="13089" fg:w="11"/><text x="83.7737%" y="927.50"></text></g><g><title>deno`httparse::iter::Bytes8::_2 (20 samples, 0.13%)</title><rect x="83.5939%" y="933" width="0.1276%" height="15" fill="rgb(206,212,31)" fg:x="13100" fg:w="20"/><text x="83.8439%" y="943.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (7 samples, 0.04%)</title><rect x="83.6769%" y="917" width="0.0447%" height="15" fill="rgb(235,144,12)" fg:x="13113" fg:w="7"/><text x="83.9269%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (7 samples, 0.04%)</title><rect x="83.8109%" y="901" width="0.0447%" height="15" fill="rgb(213,51,10)" fg:x="13134" fg:w="7"/><text x="84.0609%" y="911.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (10 samples, 0.06%)</title><rect x="83.7981%" y="917" width="0.0638%" height="15" fill="rgb(231,145,14)" fg:x="13132" fg:w="10"/><text x="84.0481%" y="927.50"></text></g><g><title>deno`httparse::iter::Bytes8::_3 (25 samples, 0.16%)</title><rect x="83.7215%" y="933" width="0.1595%" height="15" fill="rgb(235,15,28)" fg:x="13120" fg:w="25"/><text x="83.9715%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::assert_pos (3 samples, 0.02%)</title><rect x="83.8619%" y="917" width="0.0191%" height="15" fill="rgb(237,206,10)" fg:x="13142" fg:w="3"/><text x="84.1119%" y="927.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="83.9193%" y="917" width="0.0255%" height="15" fill="rgb(236,227,27)" fg:x="13151" fg:w="4"/><text x="84.1693%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="83.9257%" y="901" width="0.0191%" height="15" fill="rgb(246,83,35)" fg:x="13152" fg:w="3"/><text x="84.1757%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes8::_4 (12 samples, 0.08%)</title><rect x="83.8811%" y="933" width="0.0766%" height="15" fill="rgb(220,136,24)" fg:x="13145" fg:w="12"/><text x="84.1311%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::assert_pos (2 samples, 0.01%)</title><rect x="83.9449%" y="917" width="0.0128%" height="15" fill="rgb(217,3,25)" fg:x="13155" fg:w="2"/><text x="84.1949%" y="927.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (4 samples, 0.03%)</title><rect x="84.0278%" y="917" width="0.0255%" height="15" fill="rgb(239,24,14)" fg:x="13168" fg:w="4"/><text x="84.2778%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="84.0342%" y="901" width="0.0191%" height="15" fill="rgb(244,16,53)" fg:x="13169" fg:w="3"/><text x="84.2842%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes8::_5 (17 samples, 0.11%)</title><rect x="83.9576%" y="933" width="0.1085%" height="15" fill="rgb(208,175,44)" fg:x="13157" fg:w="17"/><text x="84.2076%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::assert_pos (2 samples, 0.01%)</title><rect x="84.0533%" y="917" width="0.0128%" height="15" fill="rgb(252,18,48)" fg:x="13172" fg:w="2"/><text x="84.3033%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.01%)</title><rect x="84.1044%" y="901" width="0.0128%" height="15" fill="rgb(234,199,32)" fg:x="13180" fg:w="2"/><text x="84.3544%" y="911.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (5 samples, 0.03%)</title><rect x="84.0980%" y="917" width="0.0319%" height="15" fill="rgb(225,77,54)" fg:x="13179" fg:w="5"/><text x="84.3480%" y="927.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const [T]&gt;::as_ptr (2 samples, 0.01%)</title><rect x="84.1172%" y="901" width="0.0128%" height="15" fill="rgb(225,42,25)" fg:x="13182" fg:w="2"/><text x="84.3672%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes8::_6 (11 samples, 0.07%)</title><rect x="84.0661%" y="933" width="0.0702%" height="15" fill="rgb(242,227,46)" fg:x="13174" fg:w="11"/><text x="84.3161%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::_7 (8 samples, 0.05%)</title><rect x="84.1363%" y="933" width="0.0510%" height="15" fill="rgb(246,197,35)" fg:x="13185" fg:w="8"/><text x="84.3863%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::assert_pos (2 samples, 0.01%)</title><rect x="84.1746%" y="917" width="0.0128%" height="15" fill="rgb(215,159,26)" fg:x="13191" fg:w="2"/><text x="84.4246%" y="927.50"></text></g><g><title>deno`httparse::iter::Bytes8::new (2 samples, 0.01%)</title><rect x="84.1937%" y="933" width="0.0128%" height="15" fill="rgb(212,194,50)" fg:x="13194" fg:w="2"/><text x="84.4437%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes::next_8 (4 samples, 0.03%)</title><rect x="84.2065%" y="933" width="0.0255%" height="15" fill="rgb(246,132,1)" fg:x="13196" fg:w="4"/><text x="84.4565%" y="943.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::cast (2 samples, 0.01%)</title><rect x="84.2958%" y="885" width="0.0128%" height="15" fill="rgb(217,71,7)" fg:x="13210" fg:w="2"/><text x="84.5458%" y="895.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (2 samples, 0.01%)</title><rect x="84.3086%" y="885" width="0.0128%" height="15" fill="rgb(252,59,32)" fg:x="13212" fg:w="2"/><text x="84.5586%" y="895.50"></text></g><g><title>deno`httparse::iter::Bytes::slice (18 samples, 0.11%)</title><rect x="84.2320%" y="933" width="0.1149%" height="15" fill="rgb(253,204,25)" fg:x="13200" fg:w="18"/><text x="84.4820%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (17 samples, 0.11%)</title><rect x="84.2384%" y="917" width="0.1085%" height="15" fill="rgb(232,21,16)" fg:x="13201" fg:w="17"/><text x="84.4884%" y="927.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (10 samples, 0.06%)</title><rect x="84.2831%" y="901" width="0.0638%" height="15" fill="rgb(248,90,29)" fg:x="13208" fg:w="10"/><text x="84.5331%" y="911.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (4 samples, 0.03%)</title><rect x="84.3214%" y="885" width="0.0255%" height="15" fill="rgb(249,223,7)" fg:x="13214" fg:w="4"/><text x="84.5714%" y="895.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (11 samples, 0.07%)</title><rect x="84.4681%" y="901" width="0.0702%" height="15" fill="rgb(231,119,42)" fg:x="13237" fg:w="11"/><text x="84.7181%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (40 samples, 0.26%)</title><rect x="84.3469%" y="933" width="0.2552%" height="15" fill="rgb(215,41,35)" fg:x="13218" fg:w="40"/><text x="84.5969%" y="943.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (27 samples, 0.17%)</title><rect x="84.4298%" y="917" width="0.1723%" height="15" fill="rgb(220,44,45)" fg:x="13231" fg:w="27"/><text x="84.6798%" y="927.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (10 samples, 0.06%)</title><rect x="84.5383%" y="901" width="0.0638%" height="15" fill="rgb(253,197,36)" fg:x="13248" fg:w="10"/><text x="84.7883%" y="911.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (598 samples, 3.82%)</title><rect x="80.8053%" y="949" width="3.8160%" height="15" fill="rgb(245,225,54)" fg:x="12663" fg:w="598"/><text x="81.0553%" y="959.50">deno..</text></g><g><title>deno`httparse::parse_headers_iter_uninit::_{{closure}} (3 samples, 0.02%)</title><rect x="84.6021%" y="933" width="0.0191%" height="15" fill="rgb(239,94,37)" fg:x="13258" fg:w="3"/><text x="84.8521%" y="943.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (10 samples, 0.06%)</title><rect x="84.9148%" y="901" width="0.0638%" height="15" fill="rgb(242,217,10)" fg:x="13307" fg:w="10"/><text x="85.1648%" y="911.50"></text></g><g><title>deno`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.27%)</title><rect x="84.7170%" y="933" width="0.2680%" height="15" fill="rgb(250,193,7)" fg:x="13276" fg:w="42"/><text x="84.9670%" y="943.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (22 samples, 0.14%)</title><rect x="84.8446%" y="917" width="0.1404%" height="15" fill="rgb(230,104,19)" fg:x="13296" fg:w="22"/><text x="85.0946%" y="927.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const T&gt;::cast (2 samples, 0.01%)</title><rect x="85.0169%" y="901" width="0.0128%" height="15" fill="rgb(230,181,4)" fg:x="13323" fg:w="2"/><text x="85.2669%" y="911.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (5 samples, 0.03%)</title><rect x="85.0297%" y="901" width="0.0319%" height="15" fill="rgb(216,219,49)" fg:x="13325" fg:w="5"/><text x="85.2797%" y="911.50"></text></g><g><title>deno`httparse::parse_token (79 samples, 0.50%)</title><rect x="84.6213%" y="949" width="0.5041%" height="15" fill="rgb(254,144,0)" fg:x="13261" fg:w="79"/><text x="84.8713%" y="959.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (22 samples, 0.14%)</title><rect x="84.9850%" y="933" width="0.1404%" height="15" fill="rgb(205,209,38)" fg:x="13318" fg:w="22"/><text x="85.2350%" y="943.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (19 samples, 0.12%)</title><rect x="85.0041%" y="917" width="0.1212%" height="15" fill="rgb(240,21,42)" fg:x="13321" fg:w="19"/><text x="85.2541%" y="927.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (10 samples, 0.06%)</title><rect x="85.0616%" y="901" width="0.0638%" height="15" fill="rgb(241,132,3)" fg:x="13330" fg:w="10"/><text x="85.3116%" y="911.50"></text></g><g><title>deno`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.06%)</title><rect x="85.1828%" y="933" width="0.0574%" height="15" fill="rgb(225,14,2)" fg:x="13349" fg:w="9"/><text x="85.4328%" y="943.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (5 samples, 0.03%)</title><rect x="85.2083%" y="917" width="0.0319%" height="15" fill="rgb(210,141,35)" fg:x="13353" fg:w="5"/><text x="85.4583%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="85.2211%" y="901" width="0.0191%" height="15" fill="rgb(251,14,44)" fg:x="13355" fg:w="3"/><text x="85.4711%" y="911.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (10 samples, 0.06%)</title><rect x="85.2849%" y="901" width="0.0638%" height="15" fill="rgb(247,48,18)" fg:x="13365" fg:w="10"/><text x="85.5349%" y="911.50"></text></g><g><title>deno`httparse::parse_uri (41 samples, 0.26%)</title><rect x="85.1254%" y="949" width="0.2616%" height="15" fill="rgb(225,0,40)" fg:x="13340" fg:w="41"/><text x="85.3754%" y="959.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (21 samples, 0.13%)</title><rect x="85.2530%" y="933" width="0.1340%" height="15" fill="rgb(221,31,33)" fg:x="13360" fg:w="21"/><text x="85.5030%" y="943.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (19 samples, 0.12%)</title><rect x="85.2658%" y="917" width="0.1212%" height="15" fill="rgb(237,42,40)" fg:x="13362" fg:w="19"/><text x="85.5158%" y="927.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (6 samples, 0.04%)</title><rect x="85.3487%" y="901" width="0.0383%" height="15" fill="rgb(233,51,29)" fg:x="13375" fg:w="6"/><text x="85.5987%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes8::_0 (5 samples, 0.03%)</title><rect x="85.4508%" y="933" width="0.0319%" height="15" fill="rgb(226,58,20)" fg:x="13391" fg:w="5"/><text x="85.7008%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::assert_pos (2 samples, 0.01%)</title><rect x="85.4700%" y="917" width="0.0128%" height="15" fill="rgb(208,98,7)" fg:x="13394" fg:w="2"/><text x="85.7200%" y="927.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="85.5146%" y="917" width="0.0191%" height="15" fill="rgb(228,143,44)" fg:x="13401" fg:w="3"/><text x="85.7646%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.01%)</title><rect x="85.5210%" y="901" width="0.0128%" height="15" fill="rgb(246,55,38)" fg:x="13402" fg:w="2"/><text x="85.7710%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes8::_1 (10 samples, 0.06%)</title><rect x="85.4827%" y="933" width="0.0638%" height="15" fill="rgb(247,87,16)" fg:x="13396" fg:w="10"/><text x="85.7327%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::assert_pos (2 samples, 0.01%)</title><rect x="85.5338%" y="917" width="0.0128%" height="15" fill="rgb(234,129,42)" fg:x="13404" fg:w="2"/><text x="85.7838%" y="927.50"></text></g><g><title>deno`httparse::iter::Bytes8::_2 (7 samples, 0.04%)</title><rect x="85.5466%" y="933" width="0.0447%" height="15" fill="rgb(220,82,16)" fg:x="13406" fg:w="7"/><text x="85.7966%" y="943.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="85.5721%" y="917" width="0.0191%" height="15" fill="rgb(211,88,4)" fg:x="13410" fg:w="3"/><text x="85.8221%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.01%)</title><rect x="85.5785%" y="901" width="0.0128%" height="15" fill="rgb(248,151,21)" fg:x="13411" fg:w="2"/><text x="85.8285%" y="911.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.01%)</title><rect x="85.6423%" y="901" width="0.0128%" height="15" fill="rgb(238,163,6)" fg:x="13421" fg:w="2"/><text x="85.8923%" y="911.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (5 samples, 0.03%)</title><rect x="85.6295%" y="917" width="0.0319%" height="15" fill="rgb(209,183,11)" fg:x="13419" fg:w="5"/><text x="85.8795%" y="927.50"></text></g><g><title>deno`httparse::iter::Bytes8::_3 (12 samples, 0.08%)</title><rect x="85.5912%" y="933" width="0.0766%" height="15" fill="rgb(219,37,20)" fg:x="13413" fg:w="12"/><text x="85.8412%" y="943.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="85.6997%" y="917" width="0.0191%" height="15" fill="rgb(210,158,4)" fg:x="13430" fg:w="3"/><text x="85.9497%" y="927.50"></text></g><g><title>deno`httparse::iter::Bytes8::_4 (9 samples, 0.06%)</title><rect x="85.6678%" y="933" width="0.0574%" height="15" fill="rgb(221,167,53)" fg:x="13425" fg:w="9"/><text x="85.9178%" y="943.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.01%)</title><rect x="85.7699%" y="901" width="0.0128%" height="15" fill="rgb(237,151,45)" fg:x="13441" fg:w="2"/><text x="86.0199%" y="911.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (6 samples, 0.04%)</title><rect x="85.7571%" y="917" width="0.0383%" height="15" fill="rgb(231,39,3)" fg:x="13439" fg:w="6"/><text x="86.0071%" y="927.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const [T]&gt;::as_ptr (2 samples, 0.01%)</title><rect x="85.7827%" y="901" width="0.0128%" height="15" fill="rgb(212,167,28)" fg:x="13443" fg:w="2"/><text x="86.0327%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes8::_5 (12 samples, 0.08%)</title><rect x="85.7252%" y="933" width="0.0766%" height="15" fill="rgb(232,178,8)" fg:x="13434" fg:w="12"/><text x="85.9752%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes8::_6 (9 samples, 0.06%)</title><rect x="85.8018%" y="933" width="0.0574%" height="15" fill="rgb(225,151,20)" fg:x="13446" fg:w="9"/><text x="86.0518%" y="943.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (7 samples, 0.04%)</title><rect x="85.8146%" y="917" width="0.0447%" height="15" fill="rgb(238,3,37)" fg:x="13448" fg:w="7"/><text x="86.0646%" y="927.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="85.8401%" y="901" width="0.0191%" height="15" fill="rgb(251,147,42)" fg:x="13452" fg:w="3"/><text x="86.0901%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes8::_7 (5 samples, 0.03%)</title><rect x="85.8592%" y="933" width="0.0319%" height="15" fill="rgb(208,173,10)" fg:x="13455" fg:w="5"/><text x="86.1092%" y="943.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get_unchecked (5 samples, 0.03%)</title><rect x="85.8592%" y="917" width="0.0319%" height="15" fill="rgb(246,225,4)" fg:x="13455" fg:w="5"/><text x="86.1092%" y="927.50"></text></g><g><title>deno`core::ptr::const_ptr::_&lt;impl *const [T]&gt;::as_ptr (3 samples, 0.02%)</title><rect x="85.8720%" y="901" width="0.0191%" height="15" fill="rgb(248,102,6)" fg:x="13457" fg:w="3"/><text x="86.1220%" y="911.50"></text></g><g><title>deno`httparse::iter::Bytes8::new (2 samples, 0.01%)</title><rect x="85.8911%" y="933" width="0.0128%" height="15" fill="rgb(232,6,21)" fg:x="13460" fg:w="2"/><text x="86.1411%" y="943.50"></text></g><g><title>deno`httparse::parse_version (84 samples, 0.54%)</title><rect x="85.3870%" y="949" width="0.5360%" height="15" fill="rgb(221,179,22)" fg:x="13381" fg:w="84"/><text x="85.6370%" y="959.50"></text></g><g><title>deno`httparse::iter::Bytes::next_8 (3 samples, 0.02%)</title><rect x="85.9039%" y="933" width="0.0191%" height="15" fill="rgb(252,50,20)" fg:x="13462" fg:w="3"/><text x="86.1539%" y="943.50"></text></g><g><title>deno`core::option::Option&lt;&amp;T&gt;::cloned (9 samples, 0.06%)</title><rect x="86.0507%" y="917" width="0.0574%" height="15" fill="rgb(222,56,38)" fg:x="13485" fg:w="9"/><text x="86.3007%" y="927.50"></text></g><g><title>deno`httparse::iter::Bytes::peek (20 samples, 0.13%)</title><rect x="86.0060%" y="933" width="0.1276%" height="15" fill="rgb(206,193,29)" fg:x="13478" fg:w="20"/><text x="86.2560%" y="943.50"></text></g><g><title>deno`core::slice::_&lt;impl [T]&gt;::get (4 samples, 0.03%)</title><rect x="86.1081%" y="917" width="0.0255%" height="15" fill="rgb(239,192,45)" fg:x="13494" fg:w="4"/><text x="86.3581%" y="927.50"></text></g><g><title>deno`core::ptr::metadata::from_raw_parts (3 samples, 0.02%)</title><rect x="86.1847%" y="885" width="0.0191%" height="15" fill="rgb(254,18,36)" fg:x="13506" fg:w="3"/><text x="86.4347%" y="895.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (958 samples, 6.11%)</title><rect x="80.1225%" y="965" width="6.1132%" height="15" fill="rgb(221,127,11)" fg:x="12556" fg:w="958"/><text x="80.3725%" y="975.50">deno`htt..</text></g><g><title>deno`httparse::skip_empty_lines (49 samples, 0.31%)</title><rect x="85.9230%" y="949" width="0.3127%" height="15" fill="rgb(234,146,35)" fg:x="13465" fg:w="49"/><text x="86.1730%" y="959.50"></text></g><g><title>deno`httparse::iter::Bytes::slice (16 samples, 0.10%)</title><rect x="86.1336%" y="933" width="0.1021%" height="15" fill="rgb(254,201,37)" fg:x="13498" fg:w="16"/><text x="86.3836%" y="943.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (16 samples, 0.10%)</title><rect x="86.1336%" y="917" width="0.1021%" height="15" fill="rgb(211,202,23)" fg:x="13498" fg:w="16"/><text x="86.3836%" y="927.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts (12 samples, 0.08%)</title><rect x="86.1591%" y="901" width="0.0766%" height="15" fill="rgb(237,91,2)" fg:x="13502" fg:w="12"/><text x="86.4091%" y="911.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts (5 samples, 0.03%)</title><rect x="86.2038%" y="885" width="0.0319%" height="15" fill="rgb(226,228,36)" fg:x="13509" fg:w="5"/><text x="86.4538%" y="895.50"></text></g><g><title>deno`httparse::iter::Bytes::new (2 samples, 0.01%)</title><rect x="86.2357%" y="965" width="0.0128%" height="15" fill="rgb(213,63,50)" fg:x="13514" fg:w="2"/><text x="86.4857%" y="975.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (2 samples, 0.01%)</title><rect x="86.2485%" y="965" width="0.0128%" height="15" fill="rgb(235,194,19)" fg:x="13516" fg:w="2"/><text x="86.4985%" y="975.50"></text></g><g><title>deno`httparse::Request::parse_with_config (1,007 samples, 6.43%)</title><rect x="79.8417%" y="981" width="6.4259%" height="15" fill="rgb(207,204,18)" fg:x="12512" fg:w="1007"/><text x="80.0917%" y="991.50">deno`htt..</text></g><g><title>deno`httparse::Request::parse (1,011 samples, 6.45%)</title><rect x="79.8226%" y="997" width="6.4514%" height="15" fill="rgb(248,8,7)" fg:x="12509" fg:w="1011"/><text x="80.0726%" y="1007.50">deno`htt..</text></g><g><title>deno`mio::event::event::Event::is_readable (4 samples, 0.03%)</title><rect x="86.2740%" y="997" width="0.0255%" height="15" fill="rgb(223,145,47)" fg:x="13520" fg:w="4"/><text x="86.5240%" y="1007.50"></text></g><g><title>deno`mio::event::event::Event::token (3 samples, 0.02%)</title><rect x="86.2995%" y="997" width="0.0191%" height="15" fill="rgb(228,84,11)" fg:x="13524" fg:w="3"/><text x="86.5495%" y="1007.50"></text></g><g><title>deno`&lt;mio::sys::unix::selector::kqueue::Events as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="86.3825%" y="981" width="0.0128%" height="15" fill="rgb(218,76,45)" fg:x="13537" fg:w="2"/><text x="86.6325%" y="991.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="86.4080%" y="981" width="0.0128%" height="15" fill="rgb(223,80,15)" fg:x="13541" fg:w="2"/><text x="86.6580%" y="991.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::unwrap_or (4 samples, 0.03%)</title><rect x="86.4208%" y="981" width="0.0255%" height="15" fill="rgb(219,218,33)" fg:x="13543" fg:w="4"/><text x="86.6708%" y="991.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.01%)</title><rect x="86.5037%" y="901" width="0.0128%" height="15" fill="rgb(208,51,11)" fg:x="13556" fg:w="2"/><text x="86.7537%" y="911.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.03%)</title><rect x="86.4974%" y="917" width="0.0255%" height="15" fill="rgb(229,165,39)" fg:x="13555" fg:w="4"/><text x="86.7474%" y="927.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::clear (10 samples, 0.06%)</title><rect x="86.4846%" y="965" width="0.0638%" height="15" fill="rgb(241,100,24)" fg:x="13553" fg:w="10"/><text x="86.7346%" y="975.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (9 samples, 0.06%)</title><rect x="86.4910%" y="949" width="0.0574%" height="15" fill="rgb(228,14,23)" fg:x="13554" fg:w="9"/><text x="86.7410%" y="959.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.06%)</title><rect x="86.4910%" y="933" width="0.0574%" height="15" fill="rgb(247,116,52)" fg:x="13554" fg:w="9"/><text x="86.7410%" y="943.50"></text></g><g><title>deno`core::slice::raw::from_raw_parts_mut (4 samples, 0.03%)</title><rect x="86.5229%" y="917" width="0.0255%" height="15" fill="rgb(216,149,33)" fg:x="13559" fg:w="4"/><text x="86.7729%" y="927.50"></text></g><g><title>deno`core::ptr::slice_from_raw_parts_mut (2 samples, 0.01%)</title><rect x="86.5356%" y="901" width="0.0128%" height="15" fill="rgb(238,142,29)" fg:x="13561" fg:w="2"/><text x="86.7856%" y="911.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="86.5484%" y="965" width="0.0128%" height="15" fill="rgb(224,83,40)" fg:x="13563" fg:w="2"/><text x="86.7984%" y="975.50"></text></g><g><title>deno`&lt;mio::sys::unix::selector::kqueue::Events as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.03%)</title><rect x="86.5803%" y="949" width="0.0255%" height="15" fill="rgb(234,165,11)" fg:x="13568" fg:w="4"/><text x="86.8303%" y="959.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::set_len (5 samples, 0.03%)</title><rect x="86.6058%" y="949" width="0.0319%" height="15" fill="rgb(215,96,23)" fg:x="13572" fg:w="5"/><text x="86.8558%" y="959.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::map (13 samples, 0.08%)</title><rect x="86.5612%" y="965" width="0.0830%" height="15" fill="rgb(233,179,26)" fg:x="13565" fg:w="13"/><text x="86.8112%" y="975.50"></text></g><g><title>deno`mio::sys::unix::selector::kqueue::Selector::select (31 samples, 0.20%)</title><rect x="86.4527%" y="981" width="0.1978%" height="15" fill="rgb(225,129,33)" fg:x="13548" fg:w="31"/><text x="86.7027%" y="991.50"></text></g><g><title>deno`mio::poll::Poll::poll (506 samples, 3.23%)</title><rect x="86.3251%" y="997" width="3.2289%" height="15" fill="rgb(237,49,13)" fg:x="13528" fg:w="506"/><text x="86.5751%" y="1007.50">den..</text></g><g><title>libsystem_kernel.dylib`kevent (455 samples, 2.90%)</title><rect x="86.6505%" y="981" width="2.9035%" height="15" fill="rgb(211,3,31)" fg:x="13579" fg:w="455"/><text x="86.9005%" y="991.50">li..</text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.03%)</title><rect x="89.6943%" y="885" width="0.0255%" height="15" fill="rgb(216,152,19)" fg:x="14056" fg:w="4"/><text x="89.9443%" y="895.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21 samples, 0.13%)</title><rect x="89.7199%" y="885" width="0.1340%" height="15" fill="rgb(251,121,35)" fg:x="14060" fg:w="21"/><text x="89.9699%" y="895.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (94 samples, 0.60%)</title><rect x="89.6752%" y="917" width="0.5998%" height="15" fill="rgb(210,217,47)" fg:x="14053" fg:w="94"/><text x="89.9252%" y="927.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (91 samples, 0.58%)</title><rect x="89.6943%" y="901" width="0.5807%" height="15" fill="rgb(244,116,22)" fg:x="14056" fg:w="91"/><text x="89.9443%" y="911.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (66 samples, 0.42%)</title><rect x="89.8539%" y="885" width="0.4212%" height="15" fill="rgb(228,17,21)" fg:x="14081" fg:w="66"/><text x="90.1039%" y="895.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="90.2814%" y="901" width="0.0191%" height="15" fill="rgb(240,149,34)" fg:x="14148" fg:w="3"/><text x="90.5314%" y="911.50"></text></g><g><title>deno`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.03%)</title><rect x="90.3006%" y="901" width="0.0255%" height="15" fill="rgb(208,125,47)" fg:x="14151" fg:w="4"/><text x="90.5506%" y="911.50"></text></g><g><title>deno`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.01%)</title><rect x="90.3261%" y="885" width="0.0128%" height="15" fill="rgb(249,186,39)" fg:x="14155" fg:w="2"/><text x="90.5761%" y="895.50"></text></g><g><title>deno`core::hash::sip::SipHasher13::new_with_keys (10 samples, 0.06%)</title><rect x="90.3261%" y="901" width="0.0638%" height="15" fill="rgb(240,220,33)" fg:x="14155" fg:w="10"/><text x="90.5761%" y="911.50"></text></g><g><title>deno`core::hash::sip::Hasher&lt;S&gt;::reset (8 samples, 0.05%)</title><rect x="90.3388%" y="885" width="0.0510%" height="15" fill="rgb(243,110,23)" fg:x="14157" fg:w="8"/><text x="90.5888%" y="895.50"></text></g><g><title>deno`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (25 samples, 0.16%)</title><rect x="90.2750%" y="917" width="0.1595%" height="15" fill="rgb(219,163,46)" fg:x="14147" fg:w="25"/><text x="90.5250%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.04%)</title><rect x="90.3899%" y="901" width="0.0447%" height="15" fill="rgb(216,126,30)" fg:x="14165" fg:w="7"/><text x="90.6399%" y="911.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="90.4984%" y="869" width="0.0128%" height="15" fill="rgb(208,139,11)" fg:x="14182" fg:w="2"/><text x="90.7484%" y="879.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.04%)</title><rect x="90.5303%" y="853" width="0.0447%" height="15" fill="rgb(213,118,36)" fg:x="14187" fg:w="7"/><text x="90.7803%" y="863.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="90.5877%" y="837" width="0.0255%" height="15" fill="rgb(226,43,17)" fg:x="14196" fg:w="4"/><text x="90.8377%" y="847.50"></text></g><g><title>deno`core::hash::sip::u8to64_le (3 samples, 0.02%)</title><rect x="90.7153%" y="805" width="0.0191%" height="15" fill="rgb(254,217,4)" fg:x="14216" fg:w="3"/><text x="90.9653%" y="815.50"></text></g><g><title>deno`core::intrinsics::copy_nonoverlapping (7 samples, 0.04%)</title><rect x="90.7345%" y="805" width="0.0447%" height="15" fill="rgb(210,134,47)" fg:x="14219" fg:w="7"/><text x="90.9845%" y="815.50"></text></g><g><title>deno`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.15%)</title><rect x="90.6388%" y="821" width="0.1531%" height="15" fill="rgb(237,24,49)" fg:x="14204" fg:w="24"/><text x="90.8888%" y="831.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="90.7791%" y="805" width="0.0128%" height="15" fill="rgb(251,39,46)" fg:x="14226" fg:w="2"/><text x="91.0291%" y="815.50"></text></g><g><title>deno`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (22 samples, 0.14%)</title><rect x="90.7919%" y="821" width="0.1404%" height="15" fill="rgb(251,220,3)" fg:x="14228" fg:w="22"/><text x="91.0419%" y="831.50"></text></g><g><title>deno`core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="90.9387%" y="821" width="0.0255%" height="15" fill="rgb(228,105,12)" fg:x="14251" fg:w="4"/><text x="91.1887%" y="831.50"></text></g><g><title>deno`core::hash::Hasher::write_usize (72 samples, 0.46%)</title><rect x="90.5111%" y="869" width="0.4594%" height="15" fill="rgb(215,196,1)" fg:x="14184" fg:w="72"/><text x="90.7611%" y="879.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (62 samples, 0.40%)</title><rect x="90.5749%" y="853" width="0.3956%" height="15" fill="rgb(214,33,39)" fg:x="14194" fg:w="62"/><text x="90.8249%" y="863.50"></text></g><g><title>deno`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (56 samples, 0.36%)</title><rect x="90.6132%" y="837" width="0.3573%" height="15" fill="rgb(220,19,52)" fg:x="14200" fg:w="56"/><text x="90.8632%" y="847.50"></text></g><g><title>deno`&lt;mio::token::Token as core::hash::Hash&gt;::hash (80 samples, 0.51%)</title><rect x="90.4665%" y="901" width="0.5105%" height="15" fill="rgb(221,78,38)" fg:x="14177" fg:w="80"/><text x="90.7165%" y="911.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (77 samples, 0.49%)</title><rect x="90.4856%" y="885" width="0.4914%" height="15" fill="rgb(253,30,16)" fg:x="14180" fg:w="77"/><text x="90.7356%" y="895.50"></text></g><g><title>deno`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (86 samples, 0.55%)</title><rect x="90.4346%" y="917" width="0.5488%" height="15" fill="rgb(242,65,0)" fg:x="14172" fg:w="86"/><text x="90.6846%" y="927.50"></text></g><g><title>deno`hashbrown::map::make_hash (213 samples, 1.36%)</title><rect x="89.6369%" y="949" width="1.3592%" height="15" fill="rgb(235,201,12)" fg:x="14047" fg:w="213"/><text x="89.8869%" y="959.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (211 samples, 1.35%)</title><rect x="89.6497%" y="933" width="1.3464%" height="15" fill="rgb(233,161,9)" fg:x="14049" fg:w="211"/><text x="89.8997%" y="943.50"></text></g><g><title>deno`core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.01%)</title><rect x="90.9833%" y="917" width="0.0128%" height="15" fill="rgb(241,207,41)" fg:x="14258" fg:w="2"/><text x="91.2333%" y="927.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (7 samples, 0.04%)</title><rect x="91.0153%" y="917" width="0.0447%" height="15" fill="rgb(212,69,46)" fg:x="14263" fg:w="7"/><text x="91.2653%" y="927.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_mut (10 samples, 0.06%)</title><rect x="91.0089%" y="933" width="0.0638%" height="15" fill="rgb(239,69,45)" fg:x="14262" fg:w="10"/><text x="91.2589%" y="943.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="91.0599%" y="917" width="0.0128%" height="15" fill="rgb(242,117,48)" fg:x="14270" fg:w="2"/><text x="91.3099%" y="927.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="91.1110%" y="901" width="0.0128%" height="15" fill="rgb(228,41,36)" fg:x="14278" fg:w="2"/><text x="91.3610%" y="911.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.01%)</title><rect x="91.1301%" y="901" width="0.0128%" height="15" fill="rgb(212,3,32)" fg:x="14281" fg:w="2"/><text x="91.3801%" y="911.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.01%)</title><rect x="91.1429%" y="901" width="0.0128%" height="15" fill="rgb(233,41,49)" fg:x="14283" fg:w="2"/><text x="91.3929%" y="911.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (12 samples, 0.08%)</title><rect x="91.1046%" y="917" width="0.0766%" height="15" fill="rgb(252,170,49)" fg:x="14277" fg:w="12"/><text x="91.3546%" y="927.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::data_end (4 samples, 0.03%)</title><rect x="91.1556%" y="901" width="0.0255%" height="15" fill="rgb(229,53,26)" fg:x="14285" fg:w="4"/><text x="91.4056%" y="911.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.01%)</title><rect x="91.1812%" y="917" width="0.0128%" height="15" fill="rgb(217,157,12)" fg:x="14289" fg:w="2"/><text x="91.4312%" y="927.50"></text></g><g><title>deno`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.06%)</title><rect x="91.2960%" y="901" width="0.0574%" height="15" fill="rgb(227,17,9)" fg:x="14307" fg:w="9"/><text x="91.5460%" y="911.50"></text></g><g><title>deno`hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.01%)</title><rect x="91.3407%" y="885" width="0.0128%" height="15" fill="rgb(218,84,12)" fg:x="14314" fg:w="2"/><text x="91.5907%" y="895.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="91.4173%" y="885" width="0.0128%" height="15" fill="rgb(212,79,24)" fg:x="14326" fg:w="2"/><text x="91.6673%" y="895.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (3 samples, 0.02%)</title><rect x="91.4428%" y="869" width="0.0191%" height="15" fill="rgb(217,222,37)" fg:x="14330" fg:w="3"/><text x="91.6928%" y="879.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ref (8 samples, 0.05%)</title><rect x="91.4300%" y="885" width="0.0510%" height="15" fill="rgb(246,208,8)" fg:x="14328" fg:w="8"/><text x="91.6800%" y="895.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.02%)</title><rect x="91.4619%" y="869" width="0.0191%" height="15" fill="rgb(244,133,10)" fg:x="14333" fg:w="3"/><text x="91.7119%" y="879.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="91.5130%" y="869" width="0.0128%" height="15" fill="rgb(209,219,41)" fg:x="14341" fg:w="2"/><text x="91.7630%" y="879.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (6 samples, 0.04%)</title><rect x="91.5257%" y="869" width="0.0383%" height="15" fill="rgb(253,175,45)" fg:x="14343" fg:w="6"/><text x="91.7757%" y="879.50"></text></g><g><title>deno`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4 samples, 0.03%)</title><rect x="91.5640%" y="869" width="0.0255%" height="15" fill="rgb(235,100,37)" fg:x="14349" fg:w="4"/><text x="91.8140%" y="879.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (38 samples, 0.24%)</title><rect x="91.3662%" y="901" width="0.2425%" height="15" fill="rgb(225,87,19)" fg:x="14318" fg:w="38"/><text x="91.6162%" y="911.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (20 samples, 0.13%)</title><rect x="91.4811%" y="885" width="0.1276%" height="15" fill="rgb(217,152,17)" fg:x="14336" fg:w="20"/><text x="91.7311%" y="895.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::data_end (3 samples, 0.02%)</title><rect x="91.5896%" y="869" width="0.0191%" height="15" fill="rgb(235,72,13)" fg:x="14353" fg:w="3"/><text x="91.8396%" y="879.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.01%)</title><rect x="91.6151%" y="901" width="0.0128%" height="15" fill="rgb(233,140,18)" fg:x="14357" fg:w="2"/><text x="91.8651%" y="911.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (16 samples, 0.10%)</title><rect x="91.6278%" y="901" width="0.1021%" height="15" fill="rgb(207,212,28)" fg:x="14359" fg:w="16"/><text x="91.8778%" y="911.50"></text></g><g><title>deno`core::ptr::read_unaligned (8 samples, 0.05%)</title><rect x="91.6789%" y="885" width="0.0510%" height="15" fill="rgb(220,130,25)" fg:x="14367" fg:w="8"/><text x="91.9289%" y="895.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="91.7044%" y="869" width="0.0255%" height="15" fill="rgb(205,55,34)" fg:x="14371" fg:w="4"/><text x="91.9544%" y="879.50"></text></g><g><title>deno`core::num::_&lt;impl u64&gt;::from_ne_bytes (16 samples, 0.10%)</title><rect x="91.7746%" y="885" width="0.1021%" height="15" fill="rgb(237,54,35)" fg:x="14382" fg:w="16"/><text x="92.0246%" y="895.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::match_byte (27 samples, 0.17%)</title><rect x="91.7299%" y="901" width="0.1723%" height="15" fill="rgb(208,67,23)" fg:x="14375" fg:w="27"/><text x="91.9799%" y="911.50"></text></g><g><title>deno`hashbrown::raw::generic::repeat (4 samples, 0.03%)</title><rect x="91.8767%" y="885" width="0.0255%" height="15" fill="rgb(206,207,50)" fg:x="14398" fg:w="4"/><text x="92.1267%" y="895.50"></text></g><g><title>deno`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="91.9852%" y="853" width="0.0128%" height="15" fill="rgb(213,211,42)" fg:x="14415" fg:w="2"/><text x="92.2352%" y="863.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (127 samples, 0.81%)</title><rect x="91.2003%" y="917" width="0.8104%" height="15" fill="rgb(252,197,50)" fg:x="14292" fg:w="127"/><text x="91.4503%" y="927.50"></text></g><g><title>deno`hashbrown::raw::h2 (17 samples, 0.11%)</title><rect x="91.9022%" y="901" width="0.1085%" height="15" fill="rgb(251,211,41)" fg:x="14402" fg:w="17"/><text x="92.1522%" y="911.50"></text></g><g><title>deno`core::cmp::Ord::min (17 samples, 0.11%)</title><rect x="91.9022%" y="885" width="0.1085%" height="15" fill="rgb(229,211,5)" fg:x="14402" fg:w="17"/><text x="92.1522%" y="895.50"></text></g><g><title>deno`core::cmp::min_by (15 samples, 0.10%)</title><rect x="91.9150%" y="869" width="0.0957%" height="15" fill="rgb(239,36,31)" fg:x="14404" fg:w="15"/><text x="92.1650%" y="879.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="91.9980%" y="853" width="0.0128%" height="15" fill="rgb(248,67,31)" fg:x="14417" fg:w="2"/><text x="92.2480%" y="863.50"></text></g><g><title>deno`hashbrown::raw::generic::Group::load (3 samples, 0.02%)</title><rect x="92.0107%" y="917" width="0.0191%" height="15" fill="rgb(249,55,44)" fg:x="14419" fg:w="3"/><text x="92.2607%" y="927.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::find (151 samples, 0.96%)</title><rect x="91.0727%" y="933" width="0.9636%" height="15" fill="rgb(216,82,12)" fg:x="14272" fg:w="151"/><text x="91.3227%" y="943.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (168 samples, 1.07%)</title><rect x="90.9961%" y="949" width="1.0720%" height="15" fill="rgb(242,174,1)" fg:x="14260" fg:w="168"/><text x="91.2461%" y="959.50"></text></g><g><title>deno`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.03%)</title><rect x="92.0362%" y="933" width="0.0319%" height="15" fill="rgb(208,120,29)" fg:x="14423" fg:w="5"/><text x="92.2862%" y="943.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::is_empty (3 samples, 0.02%)</title><rect x="92.0682%" y="949" width="0.0191%" height="15" fill="rgb(221,105,43)" fg:x="14428" fg:w="3"/><text x="92.3182%" y="959.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (397 samples, 2.53%)</title><rect x="89.5667%" y="997" width="2.5333%" height="15" fill="rgb(234,124,22)" fg:x="14036" fg:w="397"/><text x="89.8167%" y="1007.50">de..</text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (395 samples, 2.52%)</title><rect x="89.5795%" y="981" width="2.5206%" height="15" fill="rgb(212,23,30)" fg:x="14038" fg:w="395"/><text x="89.8295%" y="991.50">de..</text></g><g><title>deno`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (391 samples, 2.50%)</title><rect x="89.6050%" y="965" width="2.4951%" height="15" fill="rgb(219,122,53)" fg:x="14042" fg:w="391"/><text x="89.8550%" y="975.50">de..</text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.01%)</title><rect x="92.0873%" y="949" width="0.0128%" height="15" fill="rgb(248,84,24)" fg:x="14431" fg:w="2"/><text x="92.3373%" y="959.50"></text></g><g><title>deno`tokio::future::block_on::block_on (2 samples, 0.01%)</title><rect x="92.1001%" y="997" width="0.0128%" height="15" fill="rgb(245,115,18)" fg:x="14433" fg:w="2"/><text x="92.3501%" y="1007.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (4 samples, 0.03%)</title><rect x="92.1511%" y="981" width="0.0255%" height="15" fill="rgb(227,176,51)" fg:x="14441" fg:w="4"/><text x="92.4011%" y="991.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.04%)</title><rect x="92.2596%" y="917" width="0.0447%" height="15" fill="rgb(229,63,42)" fg:x="14458" fg:w="7"/><text x="92.5096%" y="927.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (7 samples, 0.04%)</title><rect x="92.3106%" y="917" width="0.0447%" height="15" fill="rgb(247,202,24)" fg:x="14466" fg:w="7"/><text x="92.5606%" y="927.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="92.5085%" y="853" width="0.0191%" height="15" fill="rgb(244,173,20)" fg:x="14497" fg:w="3"/><text x="92.7585%" y="863.50"></text></g><g><title>deno`&lt;tokio::runtime::enter::Enter as core::ops::drop::Drop&gt;::drop::_{{closure}} (21 samples, 0.13%)</title><rect x="92.4191%" y="901" width="0.1340%" height="15" fill="rgb(242,81,47)" fg:x="14483" fg:w="21"/><text x="92.6691%" y="911.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (14 samples, 0.09%)</title><rect x="92.4638%" y="885" width="0.0893%" height="15" fill="rgb(231,185,54)" fg:x="14490" fg:w="14"/><text x="92.7138%" y="895.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (12 samples, 0.08%)</title><rect x="92.4765%" y="869" width="0.0766%" height="15" fill="rgb(243,55,32)" fg:x="14492" fg:w="12"/><text x="92.7265%" y="879.50"></text></g><g><title>deno`core::ptr::read (4 samples, 0.03%)</title><rect x="92.5276%" y="853" width="0.0255%" height="15" fill="rgb(208,167,19)" fg:x="14500" fg:w="4"/><text x="92.7776%" y="863.50"></text></g><g><title>deno`tokio::runtime::enter::ENTERED::__getit (7 samples, 0.04%)</title><rect x="92.5595%" y="901" width="0.0447%" height="15" fill="rgb(231,72,35)" fg:x="14505" fg:w="7"/><text x="92.8095%" y="911.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (4 samples, 0.03%)</title><rect x="92.5786%" y="885" width="0.0255%" height="15" fill="rgb(250,173,51)" fg:x="14508" fg:w="4"/><text x="92.8286%" y="895.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::runtime::enter::Enter&gt; (64 samples, 0.41%)</title><rect x="92.2213%" y="965" width="0.4084%" height="15" fill="rgb(209,5,22)" fg:x="14452" fg:w="64"/><text x="92.4713%" y="975.50"></text></g><g><title>deno`&lt;tokio::runtime::enter::Enter as core::ops::drop::Drop&gt;::drop (63 samples, 0.40%)</title><rect x="92.2277%" y="949" width="0.4020%" height="15" fill="rgb(250,174,19)" fg:x="14453" fg:w="63"/><text x="92.4777%" y="959.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (59 samples, 0.38%)</title><rect x="92.2532%" y="933" width="0.3765%" height="15" fill="rgb(217,3,49)" fg:x="14457" fg:w="59"/><text x="92.5032%" y="943.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (43 samples, 0.27%)</title><rect x="92.3553%" y="917" width="0.2744%" height="15" fill="rgb(218,225,5)" fg:x="14473" fg:w="43"/><text x="92.6053%" y="927.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.03%)</title><rect x="92.6042%" y="901" width="0.0255%" height="15" fill="rgb(236,89,11)" fg:x="14512" fg:w="4"/><text x="92.8542%" y="911.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::unwrap (3 samples, 0.02%)</title><rect x="92.6297%" y="965" width="0.0191%" height="15" fill="rgb(206,33,28)" fg:x="14516" fg:w="3"/><text x="92.8797%" y="975.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="92.6744%" y="949" width="0.0128%" height="15" fill="rgb(241,56,42)" fg:x="14523" fg:w="2"/><text x="92.9244%" y="959.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="92.6871%" y="949" width="0.0191%" height="15" fill="rgb(222,44,11)" fg:x="14525" fg:w="3"/><text x="92.9371%" y="959.50"></text></g><g><title>deno`tokio::coop::Budget::initial (2 samples, 0.01%)</title><rect x="92.7127%" y="949" width="0.0128%" height="15" fill="rgb(234,111,20)" fg:x="14529" fg:w="2"/><text x="92.9627%" y="959.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::NextRequest&gt;::send::{{closure}}&gt;&gt; (3 samples, 0.02%)</title><rect x="92.8084%" y="933" width="0.0191%" height="15" fill="rgb(237,77,6)" fg:x="14544" fg:w="3"/><text x="93.0584%" y="943.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::NextRequest&gt;::send::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="92.8148%" y="917" width="0.0128%" height="15" fill="rgb(235,111,23)" fg:x="14545" fg:w="2"/><text x="93.0648%" y="927.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.01%)</title><rect x="92.9488%" y="853" width="0.0128%" height="15" fill="rgb(251,135,29)" fg:x="14566" fg:w="2"/><text x="93.1988%" y="863.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.06%)</title><rect x="92.9232%" y="869" width="0.0638%" height="15" fill="rgb(217,57,1)" fg:x="14562" fg:w="10"/><text x="93.1732%" y="879.50"></text></g><g><title>deno`core::sync::atomic::atomic_sub (4 samples, 0.03%)</title><rect x="92.9615%" y="853" width="0.0255%" height="15" fill="rgb(249,119,31)" fg:x="14568" fg:w="4"/><text x="93.2115%" y="863.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::park::thread::Inner&gt;&gt; (13 samples, 0.08%)</title><rect x="92.9105%" y="885" width="0.0830%" height="15" fill="rgb(233,164,33)" fg:x="14560" fg:w="13"/><text x="93.1605%" y="895.50"></text></g><g><title>deno`core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.01%)</title><rect x="93.0955%" y="805" width="0.0128%" height="15" fill="rgb(250,217,43)" fg:x="14589" fg:w="2"/><text x="93.3455%" y="815.50"></text></g><g><title>deno`core::alloc::layout::Layout::new (6 samples, 0.04%)</title><rect x="93.0764%" y="821" width="0.0383%" height="15" fill="rgb(232,154,50)" fg:x="14586" fg:w="6"/><text x="93.3264%" y="831.50"></text></g><g><title>deno`alloc::sync::data_offset_align (13 samples, 0.08%)</title><rect x="93.0445%" y="837" width="0.0830%" height="15" fill="rgb(227,190,8)" fg:x="14581" fg:w="13"/><text x="93.2945%" y="847.50"></text></g><g><title>deno`core::alloc::layout::Layout::padding_needed_for (2 samples, 0.01%)</title><rect x="93.1147%" y="821" width="0.0128%" height="15" fill="rgb(209,217,32)" fg:x="14592" fg:w="2"/><text x="93.3647%" y="831.50"></text></g><g><title>deno`alloc::sync::data_offset (16 samples, 0.10%)</title><rect x="93.0317%" y="853" width="0.1021%" height="15" fill="rgb(243,203,50)" fg:x="14579" fg:w="16"/><text x="93.2817%" y="863.50"></text></g><g><title>deno`alloc::sync::data_offset_align (2 samples, 0.01%)</title><rect x="93.1338%" y="853" width="0.0128%" height="15" fill="rgb(232,152,27)" fg:x="14595" fg:w="2"/><text x="93.3838%" y="863.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_raw (24 samples, 0.15%)</title><rect x="93.0062%" y="869" width="0.1531%" height="15" fill="rgb(240,34,29)" fg:x="14575" fg:w="24"/><text x="93.2562%" y="879.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (54 samples, 0.34%)</title><rect x="92.8275%" y="933" width="0.3446%" height="15" fill="rgb(215,185,52)" fg:x="14547" fg:w="54"/><text x="93.0775%" y="943.50"></text></g><g><title>deno`&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (50 samples, 0.32%)</title><rect x="92.8530%" y="917" width="0.3191%" height="15" fill="rgb(240,89,49)" fg:x="14551" fg:w="50"/><text x="93.1030%" y="927.50"></text></g><g><title>deno`tokio::park::thread::drop_waker (46 samples, 0.29%)</title><rect x="92.8786%" y="901" width="0.2935%" height="15" fill="rgb(225,12,52)" fg:x="14555" fg:w="46"/><text x="93.1286%" y="911.50"></text></g><g><title>deno`tokio::park::thread::Inner::from_raw (28 samples, 0.18%)</title><rect x="92.9934%" y="885" width="0.1787%" height="15" fill="rgb(239,128,45)" fg:x="14573" fg:w="28"/><text x="93.2434%" y="895.50"></text></g><g><title>deno`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::with_metadata_of (2 samples, 0.01%)</title><rect x="93.1593%" y="869" width="0.0128%" height="15" fill="rgb(211,78,47)" fg:x="14599" fg:w="2"/><text x="93.4093%" y="879.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::NextRequest&gt;::send::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="93.1721%" y="933" width="0.0128%" height="15" fill="rgb(232,31,21)" fg:x="14601" fg:w="2"/><text x="93.4221%" y="943.50"></text></g><g><title>deno`core::task::wake::Waker::from_raw (2 samples, 0.01%)</title><rect x="93.1849%" y="933" width="0.0128%" height="15" fill="rgb(222,168,14)" fg:x="14603" fg:w="2"/><text x="93.4349%" y="943.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.03%)</title><rect x="93.1976%" y="917" width="0.0255%" height="15" fill="rgb(209,128,24)" fg:x="14605" fg:w="4"/><text x="93.4476%" y="927.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (4 samples, 0.03%)</title><rect x="93.2232%" y="917" width="0.0255%" height="15" fill="rgb(249,35,13)" fg:x="14609" fg:w="4"/><text x="93.4732%" y="927.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (4 samples, 0.03%)</title><rect x="93.2487%" y="917" width="0.0255%" height="15" fill="rgb(218,7,2)" fg:x="14613" fg:w="4"/><text x="93.4987%" y="927.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="93.3572%" y="869" width="0.0128%" height="15" fill="rgb(238,107,27)" fg:x="14630" fg:w="2"/><text x="93.6072%" y="879.50"></text></g><g><title>deno`tokio::coop::CURRENT::__getit (11 samples, 0.07%)</title><rect x="93.3189%" y="901" width="0.0702%" height="15" fill="rgb(217,88,38)" fg:x="14624" fg:w="11"/><text x="93.5689%" y="911.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (11 samples, 0.07%)</title><rect x="93.3189%" y="885" width="0.0702%" height="15" fill="rgb(230,207,0)" fg:x="14624" fg:w="11"/><text x="93.5689%" y="895.50"></text></g><g><title>deno`std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (3 samples, 0.02%)</title><rect x="93.3699%" y="869" width="0.0191%" height="15" fill="rgb(249,64,54)" fg:x="14632" fg:w="3"/><text x="93.6199%" y="879.50"></text></g><g><title>deno`core::mem::replace (5 samples, 0.03%)</title><rect x="93.4848%" y="853" width="0.0319%" height="15" fill="rgb(231,7,11)" fg:x="14650" fg:w="5"/><text x="93.7348%" y="863.50"></text></g><g><title>deno`core::ptr::read (4 samples, 0.03%)</title><rect x="93.5167%" y="853" width="0.0255%" height="15" fill="rgb(205,149,21)" fg:x="14655" fg:w="4"/><text x="93.7667%" y="863.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (16 samples, 0.10%)</title><rect x="93.4465%" y="885" width="0.1021%" height="15" fill="rgb(215,126,34)" fg:x="14644" fg:w="16"/><text x="93.6965%" y="895.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (13 samples, 0.08%)</title><rect x="93.4656%" y="869" width="0.0830%" height="15" fill="rgb(241,132,45)" fg:x="14647" fg:w="13"/><text x="93.7156%" y="879.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::coop::with_budget::ResetGuard&gt; (16 samples, 0.10%)</title><rect x="93.5550%" y="885" width="0.1021%" height="15" fill="rgb(252,69,32)" fg:x="14661" fg:w="16"/><text x="93.8050%" y="895.50"></text></g><g><title>deno`&lt;tokio::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (16 samples, 0.10%)</title><rect x="93.5550%" y="869" width="0.1021%" height="15" fill="rgb(232,204,19)" fg:x="14661" fg:w="16"/><text x="93.8050%" y="879.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (13 samples, 0.08%)</title><rect x="93.5741%" y="853" width="0.0830%" height="15" fill="rgb(249,15,47)" fg:x="14664" fg:w="13"/><text x="93.8241%" y="863.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (8 samples, 0.05%)</title><rect x="93.6060%" y="837" width="0.0510%" height="15" fill="rgb(209,227,23)" fg:x="14669" fg:w="8"/><text x="93.8560%" y="847.50"></text></g><g><title>deno`core::ptr::read (6 samples, 0.04%)</title><rect x="93.6188%" y="821" width="0.0383%" height="15" fill="rgb(248,92,24)" fg:x="14671" fg:w="6"/><text x="93.8688%" y="831.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll::_{{closure}} (2 samples, 0.01%)</title><rect x="93.7592%" y="853" width="0.0128%" height="15" fill="rgb(247,59,2)" fg:x="14693" fg:w="2"/><text x="94.0092%" y="863.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="93.7719%" y="853" width="0.0191%" height="15" fill="rgb(221,30,5)" fg:x="14695" fg:w="3"/><text x="94.0219%" y="863.50"></text></g><g><title>deno`core::pin::Pin&lt;&amp;mut T&gt;::map_unchecked_mut (5 samples, 0.03%)</title><rect x="93.7975%" y="853" width="0.0319%" height="15" fill="rgb(208,108,53)" fg:x="14699" fg:w="5"/><text x="94.0475%" y="863.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (4 samples, 0.03%)</title><rect x="93.8294%" y="853" width="0.0255%" height="15" fill="rgb(211,183,26)" fg:x="14704" fg:w="4"/><text x="94.0794%" y="863.50"></text></g><g><title>deno`core::pin::Pin&lt;&amp;mut T&gt;::map_unchecked_mut (5 samples, 0.03%)</title><rect x="94.0272%" y="821" width="0.0319%" height="15" fill="rgb(232,132,4)" fg:x="14735" fg:w="5"/><text x="94.2772%" y="831.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::cast (3 samples, 0.02%)</title><rect x="94.0719%" y="821" width="0.0191%" height="15" fill="rgb(253,128,37)" fg:x="14742" fg:w="3"/><text x="94.3219%" y="831.50"></text></g><g><title>deno`&lt;F as core::future::into_future::IntoFuture&gt;::into_future (3 samples, 0.02%)</title><rect x="94.1676%" y="789" width="0.0191%" height="15" fill="rgb(221,58,24)" fg:x="14757" fg:w="3"/><text x="94.4176%" y="799.50"></text></g><g><title>deno`core::pin::Pin&lt;&amp;mut T&gt;::map_unchecked_mut (6 samples, 0.04%)</title><rect x="94.2059%" y="789" width="0.0383%" height="15" fill="rgb(230,54,45)" fg:x="14763" fg:w="6"/><text x="94.4559%" y="799.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::acquire (2 samples, 0.01%)</title><rect x="94.2569%" y="789" width="0.0128%" height="15" fill="rgb(254,21,18)" fg:x="14771" fg:w="2"/><text x="94.5069%" y="799.50"></text></g><g><title>deno`&lt;F as core::future::into_future::IntoFuture&gt;::into_future (2 samples, 0.01%)</title><rect x="94.3335%" y="773" width="0.0128%" height="15" fill="rgb(221,108,0)" fg:x="14783" fg:w="2"/><text x="94.5835%" y="783.50"></text></g><g><title>deno`&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="94.4420%" y="757" width="0.0255%" height="15" fill="rgb(206,95,1)" fg:x="14800" fg:w="4"/><text x="94.6920%" y="767.50"></text></g><g><title>deno`core::num::_&lt;impl usize&gt;::checked_add (5 samples, 0.03%)</title><rect x="94.4739%" y="757" width="0.0319%" height="15" fill="rgb(237,52,5)" fg:x="14805" fg:w="5"/><text x="94.7239%" y="767.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::expect (3 samples, 0.02%)</title><rect x="94.5058%" y="757" width="0.0191%" height="15" fill="rgb(218,150,34)" fg:x="14810" fg:w="3"/><text x="94.7558%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="94.5249%" y="757" width="0.0255%" height="15" fill="rgb(235,194,28)" fg:x="14813" fg:w="4"/><text x="94.7749%" y="767.50"></text></g><g><title>deno`&lt;tokio::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (12 samples, 0.08%)</title><rect x="94.5760%" y="741" width="0.0766%" height="15" fill="rgb(245,92,18)" fg:x="14821" fg:w="12"/><text x="94.8260%" y="751.50"></text></g><g><title>deno`tokio::coop::Budget::is_unconstrained (5 samples, 0.03%)</title><rect x="94.6206%" y="725" width="0.0319%" height="15" fill="rgb(253,203,53)" fg:x="14828" fg:w="5"/><text x="94.8706%" y="735.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::is_none (2 samples, 0.01%)</title><rect x="94.6398%" y="709" width="0.0128%" height="15" fill="rgb(249,185,47)" fg:x="14831" fg:w="2"/><text x="94.8898%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::coop::RestoreOnPending&gt; (17 samples, 0.11%)</title><rect x="94.5504%" y="757" width="0.1085%" height="15" fill="rgb(252,194,52)" fg:x="14817" fg:w="17"/><text x="94.8004%" y="767.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.01%)</title><rect x="94.6589%" y="757" width="0.0128%" height="15" fill="rgb(210,53,36)" fg:x="14834" fg:w="2"/><text x="94.9089%" y="767.50"></text></g><g><title>deno`tokio::coop::RestoreOnPending::made_progress (21 samples, 0.13%)</title><rect x="94.6781%" y="757" width="0.1340%" height="15" fill="rgb(237,37,25)" fg:x="14837" fg:w="21"/><text x="94.9281%" y="767.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (21 samples, 0.13%)</title><rect x="94.6781%" y="741" width="0.1340%" height="15" fill="rgb(242,116,27)" fg:x="14837" fg:w="21"/><text x="94.9281%" y="751.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (18 samples, 0.11%)</title><rect x="94.6972%" y="725" width="0.1149%" height="15" fill="rgb(213,185,26)" fg:x="14840" fg:w="18"/><text x="94.9472%" y="735.50"></text></g><g><title>deno`core::ptr::read (17 samples, 0.11%)</title><rect x="94.7036%" y="709" width="0.1085%" height="15" fill="rgb(225,204,8)" fg:x="14841" fg:w="17"/><text x="94.9536%" y="719.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (4 samples, 0.03%)</title><rect x="94.8248%" y="741" width="0.0255%" height="15" fill="rgb(254,111,37)" fg:x="14860" fg:w="4"/><text x="95.0748%" y="751.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (2 samples, 0.01%)</title><rect x="94.8695%" y="725" width="0.0128%" height="15" fill="rgb(242,35,9)" fg:x="14867" fg:w="2"/><text x="95.1195%" y="735.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (2 samples, 0.01%)</title><rect x="94.8823%" y="725" width="0.0128%" height="15" fill="rgb(232,138,49)" fg:x="14869" fg:w="2"/><text x="95.1323%" y="735.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::new (6 samples, 0.04%)</title><rect x="95.0035%" y="709" width="0.0383%" height="15" fill="rgb(247,56,4)" fg:x="14888" fg:w="6"/><text x="95.2535%" y="719.50"></text></g><g><title>deno`tokio::coop::CURRENT::__getit (3 samples, 0.02%)</title><rect x="95.0418%" y="709" width="0.0191%" height="15" fill="rgb(226,179,17)" fg:x="14894" fg:w="3"/><text x="95.2918%" y="719.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (3 samples, 0.02%)</title><rect x="95.0418%" y="693" width="0.0191%" height="15" fill="rgb(216,163,45)" fg:x="14894" fg:w="3"/><text x="95.2918%" y="703.50"></text></g><g><title>deno`std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="95.0482%" y="677" width="0.0128%" height="15" fill="rgb(211,157,3)" fg:x="14895" fg:w="2"/><text x="95.2982%" y="687.50"></text></g><g><title>deno`core::mem::replace (5 samples, 0.03%)</title><rect x="95.1567%" y="661" width="0.0319%" height="15" fill="rgb(234,44,20)" fg:x="14912" fg:w="5"/><text x="95.4067%" y="671.50"></text></g><g><title>deno`core::ptr::read (8 samples, 0.05%)</title><rect x="95.1886%" y="661" width="0.0510%" height="15" fill="rgb(254,138,23)" fg:x="14917" fg:w="8"/><text x="95.4386%" y="671.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (22 samples, 0.14%)</title><rect x="95.1184%" y="693" width="0.1404%" height="15" fill="rgb(206,119,39)" fg:x="14906" fg:w="22"/><text x="95.3684%" y="703.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (22 samples, 0.14%)</title><rect x="95.1184%" y="677" width="0.1404%" height="15" fill="rgb(231,105,52)" fg:x="14906" fg:w="22"/><text x="95.3684%" y="687.50"></text></g><g><title>deno`core::ptr::write (3 samples, 0.02%)</title><rect x="95.2396%" y="661" width="0.0191%" height="15" fill="rgb(250,20,5)" fg:x="14925" fg:w="3"/><text x="95.4896%" y="671.50"></text></g><g><title>deno`tokio::coop::poll_proceed::_{{closure}} (35 samples, 0.22%)</title><rect x="95.0609%" y="709" width="0.2233%" height="15" fill="rgb(215,198,30)" fg:x="14897" fg:w="35"/><text x="95.3109%" y="719.50"></text></g><g><title>deno`tokio::coop::Budget::decrement (3 samples, 0.02%)</title><rect x="95.2651%" y="693" width="0.0191%" height="15" fill="rgb(246,142,8)" fg:x="14929" fg:w="3"/><text x="95.5151%" y="703.50"></text></g><g><title>deno`tokio::coop::poll_proceed (75 samples, 0.48%)</title><rect x="94.8121%" y="757" width="0.4786%" height="15" fill="rgb(243,26,38)" fg:x="14858" fg:w="75"/><text x="95.0621%" y="767.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (69 samples, 0.44%)</title><rect x="94.8504%" y="741" width="0.4403%" height="15" fill="rgb(205,133,28)" fg:x="14864" fg:w="69"/><text x="95.1004%" y="751.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (62 samples, 0.40%)</title><rect x="94.8950%" y="725" width="0.3956%" height="15" fill="rgb(212,34,0)" fg:x="14871" fg:w="62"/><text x="95.1450%" y="735.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Acquire::project (4 samples, 0.03%)</title><rect x="95.2907%" y="757" width="0.0255%" height="15" fill="rgb(251,226,22)" fg:x="14933" fg:w="4"/><text x="95.5407%" y="767.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Acquire::project::is_unpin (2 samples, 0.01%)</title><rect x="95.3162%" y="757" width="0.0128%" height="15" fill="rgb(252,119,9)" fg:x="14937" fg:w="2"/><text x="95.5662%" y="767.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::expect (4 samples, 0.03%)</title><rect x="95.4566%" y="741" width="0.0255%" height="15" fill="rgb(213,150,50)" fg:x="14959" fg:w="4"/><text x="95.7066%" y="751.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::compare_exchange (22 samples, 0.14%)</title><rect x="95.4885%" y="741" width="0.1404%" height="15" fill="rgb(212,24,39)" fg:x="14964" fg:w="22"/><text x="95.7385%" y="751.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (20 samples, 0.13%)</title><rect x="95.5012%" y="725" width="0.1276%" height="15" fill="rgb(213,46,39)" fg:x="14966" fg:w="20"/><text x="95.7512%" y="735.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::load (11 samples, 0.07%)</title><rect x="95.6289%" y="741" width="0.0702%" height="15" fill="rgb(239,106,12)" fg:x="14986" fg:w="11"/><text x="95.8789%" y="751.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (7 samples, 0.04%)</title><rect x="95.6544%" y="725" width="0.0447%" height="15" fill="rgb(249,229,21)" fg:x="14990" fg:w="7"/><text x="95.9044%" y="735.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (215 samples, 1.37%)</title><rect x="94.3462%" y="773" width="1.3720%" height="15" fill="rgb(212,158,3)" fg:x="14785" fg:w="215"/><text x="94.5962%" y="783.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::poll_acquire (61 samples, 0.39%)</title><rect x="95.3290%" y="757" width="0.3893%" height="15" fill="rgb(253,26,48)" fg:x="14939" fg:w="61"/><text x="95.5790%" y="767.50"></text></g><g><title>deno`core::sync::atomic::atomic_compare_exchange (3 samples, 0.02%)</title><rect x="95.6991%" y="741" width="0.0191%" height="15" fill="rgb(238,178,20)" fg:x="14997" fg:w="3"/><text x="95.9491%" y="751.50"></text></g><g><title>deno`core::future::get_context (2 samples, 0.01%)</title><rect x="95.7246%" y="773" width="0.0128%" height="15" fill="rgb(208,86,15)" fg:x="15001" fg:w="2"/><text x="95.9746%" y="783.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::coop::RestoreOnPending&gt; (3 samples, 0.02%)</title><rect x="95.7373%" y="773" width="0.0191%" height="15" fill="rgb(239,42,53)" fg:x="15003" fg:w="3"/><text x="95.9873%" y="783.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="95.7756%" y="757" width="0.0128%" height="15" fill="rgb(245,226,8)" fg:x="15009" fg:w="2"/><text x="96.0256%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (4 samples, 0.03%)</title><rect x="95.8012%" y="725" width="0.0255%" height="15" fill="rgb(216,176,32)" fg:x="15013" fg:w="4"/><text x="96.0512%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::sync::batch_semaphore::Acquire&gt; (12 samples, 0.08%)</title><rect x="95.7565%" y="773" width="0.0766%" height="15" fill="rgb(231,186,21)" fg:x="15006" fg:w="12"/><text x="96.0065%" y="783.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::sync::batch_semaphore::Waiter&gt; (6 samples, 0.04%)</title><rect x="95.7948%" y="757" width="0.0383%" height="15" fill="rgb(205,95,49)" fg:x="15012" fg:w="6"/><text x="96.0448%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="95.8012%" y="741" width="0.0319%" height="15" fill="rgb(217,145,8)" fg:x="15013" fg:w="5"/><text x="96.0512%" y="751.50"></text></g><g><title>deno`tokio::loom::std::atomic_usize::AtomicUsize::new (3 samples, 0.02%)</title><rect x="95.8650%" y="741" width="0.0191%" height="15" fill="rgb(239,144,48)" fg:x="15023" fg:w="3"/><text x="96.1150%" y="751.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::new (12 samples, 0.08%)</title><rect x="95.8841%" y="741" width="0.0766%" height="15" fill="rgb(214,189,23)" fg:x="15026" fg:w="12"/><text x="96.1341%" y="751.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Waiter::new (12 samples, 0.08%)</title><rect x="95.9607%" y="741" width="0.0766%" height="15" fill="rgb(229,157,17)" fg:x="15038" fg:w="12"/><text x="96.2107%" y="751.50"></text></g><g><title>deno`tokio::loom::std::atomic_usize::AtomicUsize::new (3 samples, 0.02%)</title><rect x="96.0181%" y="725" width="0.0191%" height="15" fill="rgb(230,5,48)" fg:x="15047" fg:w="3"/><text x="96.2681%" y="735.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Acquire::new (35 samples, 0.22%)</title><rect x="95.8522%" y="757" width="0.2233%" height="15" fill="rgb(224,156,48)" fg:x="15021" fg:w="35"/><text x="96.1022%" y="767.50"></text></g><g><title>deno`tokio::util::linked_list::Pointers&lt;T&gt;::new (6 samples, 0.04%)</title><rect x="96.0373%" y="741" width="0.0383%" height="15" fill="rgb(223,14,29)" fg:x="15050" fg:w="6"/><text x="96.2873%" y="751.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::acquire (42 samples, 0.27%)</title><rect x="95.8394%" y="773" width="0.2680%" height="15" fill="rgb(229,96,36)" fg:x="15019" fg:w="42"/><text x="96.0894%" y="783.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="96.0819%" y="757" width="0.0255%" height="15" fill="rgb(231,102,53)" fg:x="15057" fg:w="4"/><text x="96.3319%" y="767.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::semaphore (6 samples, 0.04%)</title><rect x="96.1138%" y="773" width="0.0383%" height="15" fill="rgb(210,77,38)" fg:x="15062" fg:w="6"/><text x="96.3638%" y="783.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="96.1330%" y="757" width="0.0191%" height="15" fill="rgb(235,131,6)" fg:x="15065" fg:w="3"/><text x="96.3830%" y="767.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="96.1394%" y="741" width="0.0128%" height="15" fill="rgb(252,55,38)" fg:x="15066" fg:w="2"/><text x="96.3894%" y="751.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="96.1394%" y="725" width="0.0128%" height="15" fill="rgb(246,38,14)" fg:x="15066" fg:w="2"/><text x="96.3894%" y="735.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::_{{closure}} (298 samples, 1.90%)</title><rect x="94.2697%" y="789" width="1.9016%" height="15" fill="rgb(242,27,5)" fg:x="14773" fg:w="298"/><text x="94.5197%" y="799.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="96.1521%" y="773" width="0.0191%" height="15" fill="rgb(228,65,35)" fg:x="15068" fg:w="3"/><text x="96.4021%" y="783.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (322 samples, 2.05%)</title><rect x="94.1357%" y="805" width="2.0548%" height="15" fill="rgb(245,93,11)" fg:x="14752" fg:w="322"/><text x="94.3857%" y="815.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="96.1713%" y="789" width="0.0191%" height="15" fill="rgb(213,1,31)" fg:x="15071" fg:w="3"/><text x="96.4213%" y="799.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="96.1904%" y="805" width="0.0191%" height="15" fill="rgb(237,205,14)" fg:x="15074" fg:w="3"/><text x="96.4404%" y="815.50"></text></g><g><title>deno`core::future::get_context (2 samples, 0.01%)</title><rect x="96.2096%" y="805" width="0.0128%" height="15" fill="rgb(232,118,45)" fg:x="15077" fg:w="2"/><text x="96.4596%" y="815.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::NextRequest&gt;::reserve_inner::{{closure}}&gt;&gt; (8 samples, 0.05%)</title><rect x="96.2223%" y="805" width="0.0510%" height="15" fill="rgb(218,5,6)" fg:x="15079" fg:w="8"/><text x="96.4723%" y="815.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::NextRequest&gt;::reserve_inner::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="96.2606%" y="789" width="0.0128%" height="15" fill="rgb(251,87,51)" fg:x="15085" fg:w="2"/><text x="96.5106%" y="799.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::NextRequest&gt;::reserve_inner::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="96.2734%" y="805" width="0.0128%" height="15" fill="rgb(207,225,20)" fg:x="15087" fg:w="2"/><text x="96.5234%" y="815.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="96.2989%" y="789" width="0.0128%" height="15" fill="rgb(222,78,54)" fg:x="15091" fg:w="2"/><text x="96.5489%" y="799.50"></text></g><g><title>deno`core::future::from_generator (2 samples, 0.01%)</title><rect x="96.3117%" y="789" width="0.0128%" height="15" fill="rgb(232,85,16)" fg:x="15093" fg:w="2"/><text x="96.5617%" y="799.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner (7 samples, 0.04%)</title><rect x="96.2861%" y="805" width="0.0447%" height="15" fill="rgb(244,25,33)" fg:x="15089" fg:w="7"/><text x="96.5361%" y="815.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::_{{closure}} (351 samples, 2.24%)</title><rect x="94.0974%" y="821" width="2.2398%" height="15" fill="rgb(233,24,36)" fg:x="14746" fg:w="351"/><text x="94.3474%" y="831.50">d..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (370 samples, 2.36%)</title><rect x="93.9889%" y="837" width="2.3610%" height="15" fill="rgb(253,49,54)" fg:x="14729" fg:w="370"/><text x="94.2389%" y="847.50">de..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="96.3372%" y="821" width="0.0128%" height="15" fill="rgb(245,12,22)" fg:x="15097" fg:w="2"/><text x="96.5872%" y="831.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="96.3563%" y="837" width="0.0128%" height="15" fill="rgb(253,141,28)" fg:x="15100" fg:w="2"/><text x="96.6063%" y="847.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::NextRequest&gt;::reserve::{{closure}}&gt;&gt; (5 samples, 0.03%)</title><rect x="96.3882%" y="837" width="0.0319%" height="15" fill="rgb(225,207,27)" fg:x="15105" fg:w="5"/><text x="96.6382%" y="847.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="96.4520%" y="805" width="0.0319%" height="15" fill="rgb(220,84,2)" fg:x="15115" fg:w="5"/><text x="96.7020%" y="815.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (5 samples, 0.03%)</title><rect x="96.4520%" y="789" width="0.0319%" height="15" fill="rgb(224,37,37)" fg:x="15115" fg:w="5"/><text x="96.7020%" y="799.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4 samples, 0.03%)</title><rect x="96.4584%" y="773" width="0.0255%" height="15" fill="rgb(220,143,18)" fg:x="15116" fg:w="4"/><text x="96.7084%" y="783.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (2 samples, 0.01%)</title><rect x="96.5350%" y="789" width="0.0128%" height="15" fill="rgb(210,88,33)" fg:x="15128" fg:w="2"/><text x="96.7850%" y="799.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="96.5924%" y="773" width="0.0128%" height="15" fill="rgb(219,87,51)" fg:x="15137" fg:w="2"/><text x="96.8424%" y="783.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::load (3 samples, 0.02%)</title><rect x="96.6052%" y="773" width="0.0191%" height="15" fill="rgb(211,7,35)" fg:x="15139" fg:w="3"/><text x="96.8552%" y="783.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.02%)</title><rect x="96.6243%" y="773" width="0.0191%" height="15" fill="rgb(232,77,2)" fg:x="15142" fg:w="3"/><text x="96.8743%" y="783.50"></text></g><g><title>deno`core::sync::atomic::atomic_add (10 samples, 0.06%)</title><rect x="96.6435%" y="773" width="0.0638%" height="15" fill="rgb(249,94,25)" fg:x="15145" fg:w="10"/><text x="96.8935%" y="783.50"></text></g><g><title>deno`core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T (14 samples, 0.09%)</title><rect x="96.7902%" y="741" width="0.0893%" height="15" fill="rgb(215,112,2)" fg:x="15168" fg:w="14"/><text x="97.0402%" y="751.50"></text></g><g><title> N]&gt;::index (14 samples, 0.09%)</title><rect x="96.7902%" y="725" width="0.0893%" height="15" fill="rgb(226,115,48)" fg:x="15168" fg:w="14"/><text x="97.0402%" y="735.50"></text></g><g><title>deno`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.06%)</title><rect x="96.8222%" y="709" width="0.0574%" height="15" fill="rgb(249,196,10)" fg:x="15173" fg:w="9"/><text x="97.0722%" y="719.50"></text></g><g><title>deno`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.03%)</title><rect x="96.8541%" y="693" width="0.0255%" height="15" fill="rgb(237,109,14)" fg:x="15178" fg:w="4"/><text x="97.1041%" y="703.50"></text></g><g><title>deno`&lt;tokio::sync::mpsc::block::Values&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (19 samples, 0.12%)</title><rect x="96.7647%" y="757" width="0.1212%" height="15" fill="rgb(217,103,53)" fg:x="15164" fg:w="19"/><text x="97.0147%" y="767.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="96.8923%" y="741" width="0.0128%" height="15" fill="rgb(244,137,9)" fg:x="15184" fg:w="2"/><text x="97.1423%" y="751.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="96.9179%" y="725" width="0.0128%" height="15" fill="rgb(227,201,3)" fg:x="15188" fg:w="2"/><text x="97.1679%" y="735.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::write::_{{closure}} (8 samples, 0.05%)</title><rect x="96.9051%" y="741" width="0.0510%" height="15" fill="rgb(243,94,6)" fg:x="15186" fg:w="8"/><text x="97.1551%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="96.9370%" y="725" width="0.0191%" height="15" fill="rgb(235,118,5)" fg:x="15191" fg:w="3"/><text x="97.1870%" y="735.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (17 samples, 0.11%)</title><rect x="96.8860%" y="757" width="0.1085%" height="15" fill="rgb(247,10,30)" fg:x="15183" fg:w="17"/><text x="97.1360%" y="767.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.04%)</title><rect x="96.9562%" y="741" width="0.0383%" height="15" fill="rgb(205,26,28)" fg:x="15194" fg:w="6"/><text x="97.2062%" y="751.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::set_ready (10 samples, 0.06%)</title><rect x="96.9944%" y="757" width="0.0638%" height="15" fill="rgb(206,99,35)" fg:x="15200" fg:w="10"/><text x="97.2444%" y="767.50"></text></g><g><title>deno`core::sync::atomic::atomic_or (5 samples, 0.03%)</title><rect x="97.0264%" y="741" width="0.0319%" height="15" fill="rgb(238,130,40)" fg:x="15205" fg:w="5"/><text x="97.2764%" y="751.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::write (56 samples, 0.36%)</title><rect x="96.7137%" y="773" width="0.3573%" height="15" fill="rgb(224,126,31)" fg:x="15156" fg:w="56"/><text x="96.9637%" y="783.50"></text></g><g><title>deno`core::sync::atomic::AtomicPtr&lt;T&gt;::load (8 samples, 0.05%)</title><rect x="97.1731%" y="757" width="0.0510%" height="15" fill="rgb(254,105,17)" fg:x="15228" fg:w="8"/><text x="97.4231%" y="767.50"></text></g><g><title>deno`core::sync::atomic::atomic_load (6 samples, 0.04%)</title><rect x="97.1859%" y="741" width="0.0383%" height="15" fill="rgb(216,87,36)" fg:x="15230" fg:w="6"/><text x="97.4359%" y="751.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::distance (8 samples, 0.05%)</title><rect x="97.2369%" y="757" width="0.0510%" height="15" fill="rgb(240,21,12)" fg:x="15238" fg:w="8"/><text x="97.4869%" y="767.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (3 samples, 0.02%)</title><rect x="97.2880%" y="757" width="0.0191%" height="15" fill="rgb(245,192,34)" fg:x="15246" fg:w="3"/><text x="97.5380%" y="767.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="97.3199%" y="741" width="0.0128%" height="15" fill="rgb(226,100,49)" fg:x="15251" fg:w="2"/><text x="97.5699%" y="751.50"></text></g><g><title>deno`tokio::sync::mpsc::block::Block&lt;T&gt;::load_next (5 samples, 0.03%)</title><rect x="97.3071%" y="757" width="0.0319%" height="15" fill="rgb(245,188,27)" fg:x="15249" fg:w="5"/><text x="97.5571%" y="767.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (43 samples, 0.27%)</title><rect x="97.0710%" y="773" width="0.2744%" height="15" fill="rgb(212,170,8)" fg:x="15212" fg:w="43"/><text x="97.3210%" y="783.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (130 samples, 0.83%)</title><rect x="96.5478%" y="789" width="0.8296%" height="15" fill="rgb(217,113,29)" fg:x="15130" fg:w="130"/><text x="96.7978%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.03%)</title><rect x="97.3454%" y="773" width="0.0319%" height="15" fill="rgb(237,30,3)" fg:x="15255" fg:w="5"/><text x="97.5954%" y="783.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::fetch_or (2 samples, 0.01%)</title><rect x="97.4028%" y="773" width="0.0128%" height="15" fill="rgb(227,19,28)" fg:x="15264" fg:w="2"/><text x="97.6528%" y="783.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::fetch_or (6 samples, 0.04%)</title><rect x="97.4539%" y="757" width="0.0383%" height="15" fill="rgb(239,172,45)" fg:x="15272" fg:w="6"/><text x="97.7039%" y="767.50"></text></g><g><title>deno`core::sync::atomic::atomic_and (6 samples, 0.04%)</title><rect x="97.4922%" y="757" width="0.0383%" height="15" fill="rgb(254,55,39)" fg:x="15278" fg:w="6"/><text x="97.7422%" y="767.50"></text></g><g><title>deno`core::sync::atomic::atomic_or (4 samples, 0.03%)</title><rect x="97.5305%" y="757" width="0.0255%" height="15" fill="rgb(249,208,12)" fg:x="15284" fg:w="4"/><text x="97.7805%" y="767.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (198 samples, 1.26%)</title><rect x="96.4903%" y="805" width="1.2635%" height="15" fill="rgb(240,52,13)" fg:x="15121" fg:w="198"/><text x="96.7403%" y="815.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::wake (59 samples, 0.38%)</title><rect x="97.3773%" y="789" width="0.3765%" height="15" fill="rgb(252,149,13)" fg:x="15260" fg:w="59"/><text x="97.6273%" y="799.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::take_waker (53 samples, 0.34%)</title><rect x="97.4156%" y="773" width="0.3382%" height="15" fill="rgb(232,81,48)" fg:x="15266" fg:w="53"/><text x="97.6656%" y="783.50"></text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (31 samples, 0.20%)</title><rect x="97.5560%" y="757" width="0.1978%" height="15" fill="rgb(222,144,2)" fg:x="15288" fg:w="31"/><text x="97.8060%" y="767.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::take_waker::_{{closure}} (28 samples, 0.18%)</title><rect x="97.5751%" y="741" width="0.1787%" height="15" fill="rgb(216,81,32)" fg:x="15291" fg:w="28"/><text x="97.8251%" y="751.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::take (28 samples, 0.18%)</title><rect x="97.5751%" y="725" width="0.1787%" height="15" fill="rgb(244,78,51)" fg:x="15291" fg:w="28"/><text x="97.8251%" y="735.50"></text></g><g><title>deno`core::ptr::read (24 samples, 0.15%)</title><rect x="97.6007%" y="709" width="0.1531%" height="15" fill="rgb(217,66,21)" fg:x="15295" fg:w="24"/><text x="97.8507%" y="719.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (210 samples, 1.34%)</title><rect x="96.4265%" y="837" width="1.3401%" height="15" fill="rgb(247,101,42)" fg:x="15111" fg:w="210"/><text x="96.6765%" y="847.50"></text></g><g><title>deno`tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (209 samples, 1.33%)</title><rect x="96.4329%" y="821" width="1.3337%" height="15" fill="rgb(227,81,39)" fg:x="15112" fg:w="209"/><text x="96.6829%" y="831.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve (2 samples, 0.01%)</title><rect x="97.7666%" y="837" width="0.0128%" height="15" fill="rgb(220,223,44)" fg:x="15321" fg:w="2"/><text x="98.0166%" y="847.50"></text></g><g><title>deno`core::future::from_generator (5 samples, 0.03%)</title><rect x="97.7921%" y="821" width="0.0319%" height="15" fill="rgb(205,218,2)" fg:x="15325" fg:w="5"/><text x="98.0421%" y="831.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve (8 samples, 0.05%)</title><rect x="97.7857%" y="837" width="0.0510%" height="15" fill="rgb(212,207,28)" fg:x="15324" fg:w="8"/><text x="98.0357%" y="847.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="97.8240%" y="821" width="0.0128%" height="15" fill="rgb(224,12,41)" fg:x="15330" fg:w="2"/><text x="98.0740%" y="831.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (625 samples, 3.99%)</title><rect x="93.8613%" y="853" width="3.9883%" height="15" fill="rgb(216,118,12)" fg:x="14709" fg:w="625"/><text x="94.1113%" y="863.50">deno..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="97.8368%" y="837" width="0.0128%" height="15" fill="rgb(252,97,46)" fg:x="15332" fg:w="2"/><text x="98.0868%" y="847.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.06%)</title><rect x="97.8495%" y="853" width="0.0638%" height="15" fill="rgb(244,206,19)" fg:x="15334" fg:w="10"/><text x="98.0995%" y="863.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (669 samples, 4.27%)</title><rect x="93.6635%" y="869" width="4.2690%" height="15" fill="rgb(231,84,31)" fg:x="14678" fg:w="669"/><text x="93.9135%" y="879.50">deno`..</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.02%)</title><rect x="97.9133%" y="853" width="0.0191%" height="15" fill="rgb(244,133,0)" fg:x="15344" fg:w="3"/><text x="98.1633%" y="863.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (4 samples, 0.03%)</title><rect x="97.9516%" y="869" width="0.0255%" height="15" fill="rgb(223,15,50)" fg:x="15350" fg:w="4"/><text x="98.2016%" y="879.50"></text></g><g><title>deno`tokio::coop::with_budget::_{{closure}} (720 samples, 4.59%)</title><rect x="93.3891%" y="901" width="4.5945%" height="15" fill="rgb(250,118,49)" fg:x="14635" fg:w="720"/><text x="93.6391%" y="911.50">deno`..</text></g><g><title>deno`tokio::park::thread::CachedParkThread::block_on::_{{closure}} (678 samples, 4.33%)</title><rect x="93.6571%" y="885" width="4.3265%" height="15" fill="rgb(248,25,38)" fg:x="14677" fg:w="678"/><text x="93.9071%" y="895.50">deno`..</text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (741 samples, 4.73%)</title><rect x="93.2806%" y="917" width="4.7285%" height="15" fill="rgb(215,70,14)" fg:x="14618" fg:w="741"/><text x="93.5306%" y="927.50">deno`s..</text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.03%)</title><rect x="97.9835%" y="901" width="0.0255%" height="15" fill="rgb(215,28,15)" fg:x="15355" fg:w="4"/><text x="98.2335%" y="911.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (759 samples, 4.84%)</title><rect x="93.1976%" y="933" width="4.8433%" height="15" fill="rgb(243,6,28)" fg:x="14605" fg:w="759"/><text x="93.4476%" y="943.50">deno`s..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="98.0154%" y="917" width="0.0255%" height="15" fill="rgb(222,130,1)" fg:x="15360" fg:w="4"/><text x="98.2654%" y="927.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="98.0793%" y="901" width="0.0128%" height="15" fill="rgb(236,166,44)" fg:x="15370" fg:w="2"/><text x="98.3293%" y="911.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="98.0984%" y="901" width="0.0128%" height="15" fill="rgb(221,108,14)" fg:x="15373" fg:w="2"/><text x="98.3484%" y="911.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_ref (4 samples, 0.03%)</title><rect x="98.2069%" y="853" width="0.0255%" height="15" fill="rgb(252,3,45)" fg:x="15390" fg:w="4"/><text x="98.4569%" y="863.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (11 samples, 0.07%)</title><rect x="98.1814%" y="869" width="0.0702%" height="15" fill="rgb(237,68,30)" fg:x="15386" fg:w="11"/><text x="98.4314%" y="879.50"></text></g><g><title>deno`std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (3 samples, 0.02%)</title><rect x="98.2324%" y="853" width="0.0191%" height="15" fill="rgb(211,79,22)" fg:x="15394" fg:w="3"/><text x="98.4824%" y="863.50"></text></g><g><title>deno`tokio::park::thread::CURRENT_PARKER::__getit (13 samples, 0.08%)</title><rect x="98.1750%" y="885" width="0.0830%" height="15" fill="rgb(252,185,21)" fg:x="15385" fg:w="13"/><text x="98.4250%" y="895.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="98.2707%" y="853" width="0.0383%" height="15" fill="rgb(225,189,26)" fg:x="15400" fg:w="6"/><text x="98.5207%" y="863.50"></text></g><g><title>deno`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4 samples, 0.03%)</title><rect x="98.4111%" y="805" width="0.0255%" height="15" fill="rgb(241,30,40)" fg:x="15422" fg:w="4"/><text x="98.6611%" y="815.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (9 samples, 0.06%)</title><rect x="98.3856%" y="821" width="0.0574%" height="15" fill="rgb(235,215,44)" fg:x="15418" fg:w="9"/><text x="98.6356%" y="831.50"></text></g><g><title>deno`&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (23 samples, 0.15%)</title><rect x="98.3217%" y="837" width="0.1468%" height="15" fill="rgb(205,8,29)" fg:x="15408" fg:w="23"/><text x="98.5717%" y="847.50"></text></g><g><title>deno`core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.02%)</title><rect x="98.4494%" y="821" width="0.0191%" height="15" fill="rgb(241,137,42)" fg:x="15428" fg:w="3"/><text x="98.6994%" y="831.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::from_inner (2 samples, 0.01%)</title><rect x="98.4685%" y="837" width="0.0128%" height="15" fill="rgb(237,155,2)" fg:x="15431" fg:w="2"/><text x="98.7185%" y="847.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::with_current::_{{closure}} (37 samples, 0.24%)</title><rect x="98.2579%" y="885" width="0.2361%" height="15" fill="rgb(245,29,42)" fg:x="15398" fg:w="37"/><text x="98.5079%" y="895.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark::_{{closure}} (36 samples, 0.23%)</title><rect x="98.2643%" y="869" width="0.2297%" height="15" fill="rgb(234,101,35)" fg:x="15399" fg:w="36"/><text x="98.5143%" y="879.50"></text></g><g><title>deno`&lt;tokio::park::thread::ParkThread as tokio::park::Park&gt;::unpark (29 samples, 0.19%)</title><rect x="98.3090%" y="853" width="0.1851%" height="15" fill="rgb(228,64,37)" fg:x="15406" fg:w="29"/><text x="98.5590%" y="863.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="98.4813%" y="837" width="0.0128%" height="15" fill="rgb(217,214,36)" fg:x="15433" fg:w="2"/><text x="98.7313%" y="847.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (64 samples, 0.41%)</title><rect x="98.1112%" y="901" width="0.4084%" height="15" fill="rgb(243,70,3)" fg:x="15375" fg:w="64"/><text x="98.3612%" y="911.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.03%)</title><rect x="98.4940%" y="885" width="0.0255%" height="15" fill="rgb(253,158,52)" fg:x="15435" fg:w="4"/><text x="98.7440%" y="895.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (77 samples, 0.49%)</title><rect x="98.0410%" y="933" width="0.4914%" height="15" fill="rgb(234,111,54)" fg:x="15364" fg:w="77"/><text x="98.2910%" y="943.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::with_current (76 samples, 0.48%)</title><rect x="98.0473%" y="917" width="0.4850%" height="15" fill="rgb(217,70,32)" fg:x="15365" fg:w="76"/><text x="98.2973%" y="927.50"></text></g><g><title>deno`tokio::park::thread::CURRENT_PARKER::__getit (2 samples, 0.01%)</title><rect x="98.5196%" y="901" width="0.0128%" height="15" fill="rgb(234,18,33)" fg:x="15439" fg:w="2"/><text x="98.7696%" y="911.50"></text></g><g><title>deno`core::task::wake::RawWaker::new (2 samples, 0.01%)</title><rect x="98.5578%" y="917" width="0.0128%" height="15" fill="rgb(234,12,49)" fg:x="15445" fg:w="2"/><text x="98.8078%" y="927.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::into_raw (4 samples, 0.03%)</title><rect x="98.5834%" y="885" width="0.0255%" height="15" fill="rgb(236,10,21)" fg:x="15449" fg:w="4"/><text x="98.8334%" y="895.50"></text></g><g><title>deno`alloc::sync::Arc&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="98.5961%" y="869" width="0.0128%" height="15" fill="rgb(248,182,45)" fg:x="15451" fg:w="2"/><text x="98.8461%" y="879.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::block_on (923 samples, 5.89%)</title><rect x="92.7254%" y="949" width="5.8899%" height="15" fill="rgb(217,95,36)" fg:x="14531" fg:w="923"/><text x="92.9754%" y="959.50">deno`to..</text></g><g><title>deno`tokio::park::thread::UnparkThread::into_waker (13 samples, 0.08%)</title><rect x="98.5323%" y="933" width="0.0830%" height="15" fill="rgb(212,110,31)" fg:x="15441" fg:w="13"/><text x="98.7823%" y="943.50"></text></g><g><title>deno`tokio::park::thread::unparker_to_raw_waker (7 samples, 0.04%)</title><rect x="98.5706%" y="917" width="0.0447%" height="15" fill="rgb(206,32,53)" fg:x="15447" fg:w="7"/><text x="98.8206%" y="927.50"></text></g><g><title>deno`tokio::park::thread::Inner::into_raw (6 samples, 0.04%)</title><rect x="98.5770%" y="901" width="0.0383%" height="15" fill="rgb(246,141,37)" fg:x="15448" fg:w="6"/><text x="98.8270%" y="911.50"></text></g><g><title>deno`tokio::runtime::enter::Enter::block_on (946 samples, 6.04%)</title><rect x="92.6488%" y="965" width="6.0366%" height="15" fill="rgb(219,16,7)" fg:x="14519" fg:w="946"/><text x="92.8988%" y="975.50">deno`tok..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.06%)</title><rect x="98.6217%" y="949" width="0.0638%" height="15" fill="rgb(230,205,45)" fg:x="15455" fg:w="10"/><text x="98.8717%" y="959.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.03%)</title><rect x="98.7174%" y="949" width="0.0255%" height="15" fill="rgb(231,43,49)" fg:x="15470" fg:w="4"/><text x="98.9674%" y="959.50"></text></g><g><title>deno`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.04%)</title><rect x="98.7812%" y="917" width="0.0447%" height="15" fill="rgb(212,106,34)" fg:x="15480" fg:w="7"/><text x="99.0312%" y="927.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::ok_or (7 samples, 0.04%)</title><rect x="98.8259%" y="917" width="0.0447%" height="15" fill="rgb(206,83,17)" fg:x="15487" fg:w="7"/><text x="99.0759%" y="927.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (3 samples, 0.02%)</title><rect x="98.8705%" y="917" width="0.0191%" height="15" fill="rgb(244,154,49)" fg:x="15494" fg:w="3"/><text x="99.1205%" y="927.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::get (7 samples, 0.04%)</title><rect x="98.9343%" y="901" width="0.0447%" height="15" fill="rgb(244,149,49)" fg:x="15504" fg:w="7"/><text x="99.1843%" y="911.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (4 samples, 0.03%)</title><rect x="98.9854%" y="901" width="0.0255%" height="15" fill="rgb(227,134,18)" fg:x="15512" fg:w="4"/><text x="99.2354%" y="911.50"></text></g><g><title>deno`core::option::Option&lt;T&gt;::as_ref (8 samples, 0.05%)</title><rect x="99.0492%" y="869" width="0.0510%" height="15" fill="rgb(237,116,36)" fg:x="15522" fg:w="8"/><text x="99.2992%" y="879.50"></text></g><g><title>deno`tokio::runtime::enter::ENTERED::__getit (15 samples, 0.10%)</title><rect x="99.0109%" y="901" width="0.0957%" height="15" fill="rgb(205,129,40)" fg:x="15516" fg:w="15"/><text x="99.2609%" y="911.50"></text></g><g><title>deno`std::thread::local::fast::Key&lt;T&gt;::get (14 samples, 0.09%)</title><rect x="99.0173%" y="885" width="0.0893%" height="15" fill="rgb(236,178,4)" fg:x="15517" fg:w="14"/><text x="99.2673%" y="895.50"></text></g><g><title>deno`tokio::runtime::enter::EnterContext::is_entered (2 samples, 0.01%)</title><rect x="99.1066%" y="901" width="0.0128%" height="15" fill="rgb(251,76,53)" fg:x="15531" fg:w="2"/><text x="99.3566%" y="911.50"></text></g><g><title>deno`core::mem::replace (8 samples, 0.05%)</title><rect x="99.2151%" y="853" width="0.0510%" height="15" fill="rgb(242,92,40)" fg:x="15548" fg:w="8"/><text x="99.4651%" y="863.50"></text></g><g><title>deno`core::ptr::read (3 samples, 0.02%)</title><rect x="99.2662%" y="853" width="0.0191%" height="15" fill="rgb(209,45,30)" fg:x="15556" fg:w="3"/><text x="99.5162%" y="863.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::replace (21 samples, 0.13%)</title><rect x="99.1768%" y="869" width="0.1340%" height="15" fill="rgb(218,157,36)" fg:x="15542" fg:w="21"/><text x="99.4268%" y="879.50"></text></g><g><title>deno`core::ptr::write (4 samples, 0.03%)</title><rect x="99.2853%" y="853" width="0.0255%" height="15" fill="rgb(222,186,16)" fg:x="15559" fg:w="4"/><text x="99.5353%" y="863.50"></text></g><g><title>deno`core::cell::Cell&lt;T&gt;::set (26 samples, 0.17%)</title><rect x="99.1641%" y="885" width="0.1659%" height="15" fill="rgb(254,72,35)" fg:x="15540" fg:w="26"/><text x="99.4141%" y="895.50"></text></g><g><title>deno`core::mem::replace (3 samples, 0.02%)</title><rect x="99.3108%" y="869" width="0.0191%" height="15" fill="rgb(224,25,35)" fg:x="15563" fg:w="3"/><text x="99.5608%" y="879.50"></text></g><g><title>deno`tokio::runtime::enter::try_enter::_{{closure}} (41 samples, 0.26%)</title><rect x="99.1194%" y="901" width="0.2616%" height="15" fill="rgb(206,135,52)" fg:x="15533" fg:w="41"/><text x="99.3694%" y="911.50"></text></g><g><title>deno`core::mem::drop (8 samples, 0.05%)</title><rect x="99.3300%" y="885" width="0.0510%" height="15" fill="rgb(229,174,47)" fg:x="15566" fg:w="8"/><text x="99.5800%" y="895.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::try_with (84 samples, 0.54%)</title><rect x="98.8897%" y="917" width="0.5360%" height="15" fill="rgb(242,184,21)" fg:x="15497" fg:w="84"/><text x="99.1397%" y="927.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.04%)</title><rect x="99.3810%" y="901" width="0.0447%" height="15" fill="rgb(213,22,45)" fg:x="15574" fg:w="7"/><text x="99.6310%" y="911.50"></text></g><g><title>deno`tokio::runtime::enter::enter (120 samples, 0.77%)</title><rect x="98.6855%" y="965" width="0.7657%" height="15" fill="rgb(237,81,54)" fg:x="15465" fg:w="120"/><text x="98.9355%" y="975.50"></text></g><g><title>deno`tokio::runtime::enter::try_enter (111 samples, 0.71%)</title><rect x="98.7429%" y="949" width="0.7083%" height="15" fill="rgb(248,177,18)" fg:x="15474" fg:w="111"/><text x="98.9929%" y="959.50"></text></g><g><title>deno`std::thread::local::LocalKey&lt;T&gt;::with (108 samples, 0.69%)</title><rect x="98.7620%" y="933" width="0.6892%" height="15" fill="rgb(254,31,16)" fg:x="15477" fg:w="108"/><text x="99.0120%" y="943.50"></text></g><g><title>deno`tokio::runtime::enter::ENTERED::__getit (4 samples, 0.03%)</title><rect x="99.4257%" y="917" width="0.0255%" height="15" fill="rgb(235,20,31)" fg:x="15581" fg:w="4"/><text x="99.6757%" y="927.50"></text></g><g><title>deno`tokio::future::block_on::block_on (1,142 samples, 7.29%)</title><rect x="92.1894%" y="981" width="7.2873%" height="15" fill="rgb(240,56,43)" fg:x="14447" fg:w="1142"/><text x="92.4394%" y="991.50">deno`tokio..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="99.4512%" y="965" width="0.0255%" height="15" fill="rgb(237,197,51)" fg:x="15585" fg:w="4"/><text x="99.7012%" y="975.50"></text></g><g><title>deno`tokio::runtime::enter::enter (4 samples, 0.03%)</title><rect x="99.4831%" y="981" width="0.0255%" height="15" fill="rgb(241,162,44)" fg:x="15590" fg:w="4"/><text x="99.7331%" y="991.50"></text></g><g><title>deno`core::future::from_generator (3 samples, 0.02%)</title><rect x="99.5533%" y="965" width="0.0191%" height="15" fill="rgb(224,23,20)" fg:x="15601" fg:w="3"/><text x="99.8033%" y="975.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send (18 samples, 0.11%)</title><rect x="99.5086%" y="981" width="0.1149%" height="15" fill="rgb(250,109,34)" fg:x="15594" fg:w="18"/><text x="99.7586%" y="991.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.05%)</title><rect x="99.5725%" y="965" width="0.0510%" height="15" fill="rgb(214,175,50)" fg:x="15604" fg:w="8"/><text x="99.8225%" y="975.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::blocking_send (1,186 samples, 7.57%)</title><rect x="92.1128%" y="997" width="7.5681%" height="15" fill="rgb(213,182,5)" fg:x="14435" fg:w="1186"/><text x="92.3628%" y="1007.50">deno`tokio..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.06%)</title><rect x="99.6235%" y="981" width="0.0574%" height="15" fill="rgb(209,199,19)" fg:x="15612" fg:w="9"/><text x="99.8735%" y="991.50"></text></g><g><title>deno`deno_flash::op_listen::call::_{{closure}}::_{{closure}} (5,894 samples, 37.61%)</title><rect x="62.1020%" y="1013" width="37.6109%" height="15" fill="rgb(236,224,42)" fg:x="9732" fg:w="5894"/><text x="62.3520%" y="1023.50">deno`deno_flash::op_listen::call::_{{closure}}::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.03%)</title><rect x="99.6809%" y="997" width="0.0319%" height="15" fill="rgb(246,226,29)" fg:x="15621" fg:w="5"/><text x="99.9309%" y="1007.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (7 samples, 0.04%)</title><rect x="99.7128%" y="1013" width="0.0447%" height="15" fill="rgb(227,223,11)" fg:x="15626" fg:w="7"/><text x="99.9628%" y="1023.50"></text></g><g><title>deno`httparse::Request::new (2 samples, 0.01%)</title><rect x="99.7575%" y="1013" width="0.0128%" height="15" fill="rgb(219,7,51)" fg:x="15633" fg:w="2"/><text x="100.0075%" y="1023.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1477" width="37.9044%" height="15" fill="rgb(245,167,10)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1487.50">deno`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1461" width="37.9044%" height="15" fill="rgb(237,224,16)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1471.50">deno`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>deno`std::thread::Builder::spawn_unchecked_::_{{closure}} (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1445" width="37.9044%" height="15" fill="rgb(226,132,13)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1455.50">deno`std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>deno`std::panic::catch_unwind (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1429" width="37.9044%" height="15" fill="rgb(214,140,3)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1439.50">deno`std::panic::catch_unwind</text></g><g><title>deno`std::panicking::try (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1413" width="37.9044%" height="15" fill="rgb(221,177,4)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1423.50">deno`std::panicking::try</text></g><g><title>deno`__rust_try (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1397" width="37.9044%" height="15" fill="rgb(238,139,3)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1407.50">deno`__rust_try</text></g><g><title>deno`std::panicking::try::do_call (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1381" width="37.9044%" height="15" fill="rgb(216,17,39)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1391.50">deno`std::panicking::try::do_call</text></g><g><title>deno`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1365" width="37.9044%" height="15" fill="rgb(238,120,9)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1375.50">deno`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::o..</text></g><g><title>deno`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1349" width="37.9044%" height="15" fill="rgb(244,92,53)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1359.50">deno`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{..</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1333" width="37.9044%" height="15" fill="rgb(224,148,33)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1343.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1317" width="37.9044%" height="15" fill="rgb(243,6,36)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1327.50">deno`tokio::runtime::blocking::pool::Spawner::spawn_thread::_{..</text></g><g><title>deno`tokio::runtime::blocking::pool::Inner::run (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1301" width="37.9044%" height="15" fill="rgb(230,102,11)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1311.50">deno`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>deno`tokio::runtime::blocking::pool::Task::run (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1285" width="37.9044%" height="15" fill="rgb(234,148,36)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1295.50">deno`tokio::runtime::blocking::pool::Task::run</text></g><g><title>deno`tokio::runtime::task::UnownedTask&lt;S&gt;::run (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1269" width="37.9044%" height="15" fill="rgb(251,153,25)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1279.50">deno`tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>deno`tokio::runtime::task::raw::RawTask::poll (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1253" width="37.9044%" height="15" fill="rgb(215,129,8)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1263.50">deno`tokio::runtime::task::raw::RawTask::poll</text></g><g><title>deno`tokio::runtime::task::raw::poll (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1237" width="37.9044%" height="15" fill="rgb(224,128,35)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1247.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>deno`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1221" width="37.9044%" height="15" fill="rgb(237,56,52)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1231.50">deno`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>deno`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1205" width="37.9044%" height="15" fill="rgb(234,213,19)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1215.50">deno`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>deno`tokio::runtime::task::harness::poll_future (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1189" width="37.9044%" height="15" fill="rgb(252,82,23)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1199.50">deno`tokio::runtime::task::harness::poll_future</text></g><g><title>deno`std::panic::catch_unwind (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1173" width="37.9044%" height="15" fill="rgb(254,201,21)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1183.50">deno`std::panic::catch_unwind</text></g><g><title>deno`std::panicking::try (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1157" width="37.9044%" height="15" fill="rgb(250,186,11)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1167.50">deno`std::panicking::try</text></g><g><title>deno`__rust_try (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1141" width="37.9044%" height="15" fill="rgb(211,174,5)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1151.50">deno`__rust_try</text></g><g><title>deno`std::panicking::try::do_call (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1125" width="37.9044%" height="15" fill="rgb(214,121,10)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1135.50">deno`std::panicking::try::do_call</text></g><g><title>deno`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1109" width="37.9044%" height="15" fill="rgb(241,66,2)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1119.50">deno`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::o..</text></g><g><title>deno`tokio::runtime::task::harness::poll_future::_{{closure}} (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1093" width="37.9044%" height="15" fill="rgb(220,167,19)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1103.50">deno`tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1077" width="37.9044%" height="15" fill="rgb(231,54,50)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1087.50">deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll</text></g><g><title>deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1061" width="37.9044%" height="15" fill="rgb(239,217,53)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1071.50">deno`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::_{{closure}} (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1045" width="37.9044%" height="15" fill="rgb(248,8,0)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1055.50">deno`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::_{{closur..</text></g><g><title>deno`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (5,940 samples, 37.90%)</title><rect x="61.9488%" y="1029" width="37.9044%" height="15" fill="rgb(229,118,37)" fg:x="9708" fg:w="5940"/><text x="62.1988%" y="1039.50">deno`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.08%)</title><rect x="99.7703%" y="1013" width="0.0830%" height="15" fill="rgb(253,223,43)" fg:x="15635" fg:w="13"/><text x="100.0203%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (2 samples, 0.01%)</title><rect x="99.8596%" y="1381" width="0.0128%" height="15" fill="rgb(211,77,36)" fg:x="15649" fg:w="2"/><text x="100.1096%" y="1391.50"></text></g><g><title>deno`void v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (2 samples, 0.01%)</title><rect x="99.8724%" y="1333" width="0.0128%" height="15" fill="rgb(219,3,53)" fg:x="15651" fg:w="2"/><text x="100.1224%" y="1343.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (2 samples, 0.01%)</title><rect x="99.8724%" y="1317" width="0.0128%" height="15" fill="rgb(244,45,42)" fg:x="15651" fg:w="2"/><text x="100.1224%" y="1327.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (4 samples, 0.03%)</title><rect x="99.8724%" y="1349" width="0.0255%" height="15" fill="rgb(225,95,27)" fg:x="15651" fg:w="4"/><text x="100.1224%" y="1359.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (6 samples, 0.04%)</title><rect x="99.8724%" y="1365" width="0.0383%" height="15" fill="rgb(207,74,8)" fg:x="15651" fg:w="6"/><text x="100.1224%" y="1375.50"></text></g><g><title>deno`void v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InstructionSelectionPhase, v8::internal::compiler::Linkage*&amp;&gt; (2 samples, 0.01%)</title><rect x="99.8979%" y="1349" width="0.0128%" height="15" fill="rgb(243,63,36)" fg:x="15655" fg:w="2"/><text x="100.1479%" y="1359.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelectionPhase::Run (2 samples, 0.01%)</title><rect x="99.8979%" y="1333" width="0.0128%" height="15" fill="rgb(211,180,12)" fg:x="15655" fg:w="2"/><text x="100.1479%" y="1343.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::SelectInstructions (2 samples, 0.01%)</title><rect x="99.8979%" y="1317" width="0.0128%" height="15" fill="rgb(254,166,49)" fg:x="15655" fg:w="2"/><text x="100.1479%" y="1327.50"></text></g><g><title>deno`void v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (3 samples, 0.02%)</title><rect x="99.9234%" y="1365" width="0.0191%" height="15" fill="rgb(205,19,0)" fg:x="15659" fg:w="3"/><text x="100.1734%" y="1375.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (3 samples, 0.02%)</title><rect x="99.9234%" y="1349" width="0.0191%" height="15" fill="rgb(224,172,32)" fg:x="15659" fg:w="3"/><text x="100.1734%" y="1359.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="99.9234%" y="1333" width="0.0191%" height="15" fill="rgb(254,136,30)" fg:x="15659" fg:w="3"/><text x="100.1734%" y="1343.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="99.9234%" y="1317" width="0.0191%" height="15" fill="rgb(246,19,35)" fg:x="15659" fg:w="3"/><text x="100.1734%" y="1327.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="99.9298%" y="1301" width="0.0128%" height="15" fill="rgb(219,24,36)" fg:x="15660" fg:w="2"/><text x="100.1798%" y="1311.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (19 samples, 0.12%)</title><rect x="99.8532%" y="1445" width="0.1212%" height="15" fill="rgb(251,55,1)" fg:x="15648" fg:w="19"/><text x="100.1032%" y="1455.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (19 samples, 0.12%)</title><rect x="99.8532%" y="1429" width="0.1212%" height="15" fill="rgb(218,117,39)" fg:x="15648" fg:w="19"/><text x="100.1032%" y="1439.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (19 samples, 0.12%)</title><rect x="99.8532%" y="1413" width="0.1212%" height="15" fill="rgb(248,169,11)" fg:x="15648" fg:w="19"/><text x="100.1032%" y="1423.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (19 samples, 0.12%)</title><rect x="99.8532%" y="1397" width="0.1212%" height="15" fill="rgb(244,40,44)" fg:x="15648" fg:w="19"/><text x="100.1032%" y="1407.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (16 samples, 0.10%)</title><rect x="99.8724%" y="1381" width="0.1021%" height="15" fill="rgb(234,62,37)" fg:x="15651" fg:w="16"/><text x="100.1224%" y="1391.50"></text></g><g><title>all (15,671 samples, 100%)</title><rect x="0.0000%" y="1525" width="100.0000%" height="15" fill="rgb(207,117,42)" fg:x="0" fg:w="15671"/><text x="0.2500%" y="1535.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5,963 samples, 38.05%)</title><rect x="61.9488%" y="1509" width="38.0512%" height="15" fill="rgb(213,43,2)" fg:x="9708" fg:w="5963"/><text x="62.1988%" y="1519.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (5,963 samples, 38.05%)</title><rect x="61.9488%" y="1493" width="38.0512%" height="15" fill="rgb(244,202,51)" fg:x="9708" fg:w="5963"/><text x="62.1988%" y="1503.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>deno`v8::base::ThreadEntry (23 samples, 0.15%)</title><rect x="99.8532%" y="1477" width="0.1468%" height="15" fill="rgb(253,174,46)" fg:x="15648" fg:w="23"/><text x="100.1032%" y="1487.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (23 samples, 0.15%)</title><rect x="99.8532%" y="1461" width="0.1468%" height="15" fill="rgb(251,23,1)" fg:x="15648" fg:w="23"/><text x="100.1032%" y="1471.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (4 samples, 0.03%)</title><rect x="99.9745%" y="1445" width="0.0255%" height="15" fill="rgb(253,26,1)" fg:x="15667" fg:w="4"/><text x="100.2245%" y="1455.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.02%)</title><rect x="99.9809%" y="1429" width="0.0191%" height="15" fill="rgb(216,89,31)" fg:x="15668" fg:w="3"/><text x="100.2309%" y="1439.50"></text></g></svg></svg>