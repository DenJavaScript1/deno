# Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.

[package]
name = "deno_runtime"
version = "0.116.0"
authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
description = "Provides the deno runtime library"

[features]
# "fake" feature that allows to generate docs on docs.rs
docsrs = []
# A feature that disables creation of startup snapshot during in the build script.
dont_create_runtime_snapshot = []
# Enable to exclude `js/99_main.js` from the generated snapshot.
exclude_js_main_from_snapshot = []
# A feature that disables embedding of the JavaScript source files in the binary.
# With this feature enabled, the sources must be consumed during build time,
# by creating a startup snapshot.
# Enable to exclude JS sources from the binary (e.g. if they are already snapshotted).
exclude_js_sources = [
  "deno_broadcast_channel/exclude_js_sources",
  "deno_cache/exclude_js_sources",
  "deno_console/exclude_js_sources",
  "deno_core/exclude_js_sources",
  "deno_crypto/exclude_js_sources",
  "deno_fetch/exclude_js_sources",
  "deno_ffi/exclude_js_sources",
  "deno_fs/exclude_js_sources",
  "deno_http/exclude_js_sources",
  "deno_io/exclude_js_sources",
  "deno_net/exclude_js_sources",
  "deno_node/exclude_js_sources",
  "deno_kv/exclude_js_sources",
  "deno_url/exclude_js_sources",
  "deno_web/exclude_js_sources",
  "deno_webidl/exclude_js_sources",
  "deno_websocket/exclude_js_sources",
  "deno_webstorage/exclude_js_sources",
]

[lib]
name = "deno_runtime"
path = "lib.rs"

[[example]]
name = "extension_with_esm"
path = "examples/extension_with_esm/main.rs"

[[example]]
name = "extension_with_ops"
path = "examples/extension_with_ops/main.rs"

[build-dependencies]
deno_ast.workspace = true
deno_broadcast_channel = { workspace = true, features = ["force_include_js_sources"] }
deno_cache = { workspace = true, features = ["force_include_js_sources"] }
deno_console = { workspace = true, features = ["force_include_js_sources"] }
deno_core = { workspace = true, features = ["force_include_js_sources"] }
deno_crypto = { workspace = true, features = ["force_include_js_sources"] }
deno_fetch = { workspace = true, features = ["force_include_js_sources"] }
deno_ffi = { workspace = true, features = ["force_include_js_sources"] }
deno_fs = { workspace = true, features = ["force_include_js_sources", "sync_fs"] }
deno_http = { workspace = true, features = ["force_include_js_sources"] }
deno_io = { workspace = true, features = ["force_include_js_sources"] }
deno_net = { workspace = true, features = ["force_include_js_sources"] }
deno_node = { workspace = true, features = ["force_include_js_sources"] }
deno_kv = { workspace = true, features = ["force_include_js_sources"] }
deno_tls.workspace = true
deno_url = { workspace = true, features = ["force_include_js_sources"] }
deno_web = { workspace = true, features = ["force_include_js_sources"] }
deno_webidl = { workspace = true, features = ["force_include_js_sources"] }
deno_websocket = { workspace = true, features = ["force_include_js_sources"] }
deno_webstorage = { workspace = true, features = ["force_include_js_sources"] }
deno_napi.workspace = true

[target.'cfg(windows)'.build-dependencies]
winres.workspace = true
winapi.workspace = true

[dependencies]
deno_broadcast_channel.workspace = true
deno_cache.workspace = true
deno_console.workspace = true
deno_core.workspace = true
deno_crypto.workspace = true
deno_fetch.workspace = true
deno_ffi.workspace = true
deno_fs = { workspace = true, features = ["sync_fs"] }
deno_http.workspace = true
deno_io.workspace = true
deno_kv.workspace = true
deno_napi.workspace = true
deno_net.workspace = true
deno_node.workspace = true
deno_tls.workspace = true
deno_url.workspace = true
deno_web.workspace = true
deno_webidl.workspace = true
deno_websocket.workspace = true
deno_webstorage.workspace = true
fastwebsockets.workspace = true

atty.workspace = true
console_static_text.workspace = true
dlopen.workspace = true
encoding_rs.workspace = true
filetime = "0.2.16"
fs3.workspace = true
http.workspace = true
hyper = { workspace = true, features = ["server", "stream", "http1", "http2", "runtime"] }
libc.workspace = true
log.workspace = true
netif = "0.1.6"
notify.workspace = true
once_cell.workspace = true
regex.workspace = true
ring.workspace = true
serde.workspace = true
signal-hook-registry = "1.4.0"
termcolor = "1.1.3"
tokio.workspace = true
tokio-metrics.workspace = true
uuid.workspace = true

[target.'cfg(windows)'.dependencies]
fwdansi.workspace = true
winapi = { workspace = true, features = ["commapi", "knownfolders", "mswsock", "objbase", "psapi", "shlobj", "tlhelp32", "winbase", "winerror", "winuser", "winsock2"] }
ntapi = "0.4.0"

[target.'cfg(unix)'.dependencies]
nix.workspace = true

[dev-dependencies]
# Used in benchmark
test_util.workspace = true

[package.metadata.docs.rs]
features = ["docsrs"]
