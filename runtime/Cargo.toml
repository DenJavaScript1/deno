# Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.

[package]
name = "deno_runtime"
version = "0.97.0"
authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
description = "Provides the deno runtime library"

[features]
# default = []
# "fake" feature that allows to generate docs on docs.rs
docsrs = []
# feature that modifies the snapshot to allow extending it
snapshot_from_snapshot = []
will_take_snapshot = []
will_load_snapshot = []

[lib]
name = "deno_runtime"
path = "lib.rs"

[[example]]
name = "hello_runtime"
path = "examples/hello_runtime.rs"

[build-dependencies]
deno_ast.workspace = true
deno_broadcast_channel = { workspace = true, features = ["will_take_snapshot"] }
deno_cache = { workspace = true, features = ["will_take_snapshot"] }
deno_console = { workspace = true, features = ["will_take_snapshot"] }
deno_core = { workspace = true, features = ["will_take_snapshot"] }
deno_crypto = { workspace = true, features = ["will_take_snapshot"] }
deno_fetch = { workspace = true, features = ["will_take_snapshot"] }
deno_ffi = { workspace = true, features = ["will_take_snapshot"] }
deno_flash = { workspace = true, features = ["will_take_snapshot"] }
deno_http = { workspace = true, features = ["will_take_snapshot"] }
deno_net = { workspace = true, features = ["will_take_snapshot"] }
deno_node = { workspace = true, features = ["will_take_snapshot"] }
deno_tls = { workspace = true, features = ["will_take_snapshot"] }
deno_url = { workspace = true, features = ["will_take_snapshot"] }
deno_web = { workspace = true, features = ["will_take_snapshot"] }
deno_webgpu = { workspace = true, features = ["will_take_snapshot"] }
deno_webidl = { workspace = true, features = ["will_take_snapshot"] }
deno_websocket = { workspace = true, features = ["will_take_snapshot"] }
deno_webstorage = { workspace = true, features = ["will_take_snapshot"] }
deno_napi = { workspace = true, features = ["will_take_snapshot"] }

lzzzz.workspace = true

[target.'cfg(windows)'.build-dependencies]
winres.workspace = true
winapi.workspace = true

[dependencies]
deno_broadcast_channel = { workspace = true, features = ["will_load_snapshot"] }
deno_cache = { workspace = true, features = ["will_load_snapshot"] }
deno_console = { workspace = true, features = ["will_load_snapshot"] }
deno_core = { workspace = true, features = ["will_load_snapshot"] }
deno_crypto = { workspace = true, features = ["will_load_snapshot"] }
deno_fetch = { workspace = true, features = ["will_load_snapshot"] }
deno_ffi = { workspace = true, features = ["will_load_snapshot"] }
deno_flash = { workspace = true, features = ["will_load_snapshot"] }
deno_http = { workspace = true, features = ["will_load_snapshot"] }
deno_napi = { workspace = true, features = ["will_load_snapshot"] }
deno_net = { workspace = true, features = ["will_load_snapshot"] }
deno_node = { workspace = true, features = ["will_load_snapshot"] }
deno_tls = { workspace = true, features = ["will_load_snapshot"] }
deno_url = { workspace = true, features = ["will_load_snapshot"] }
deno_web = { workspace = true, features = ["will_load_snapshot"] }
deno_webgpu = { workspace = true, features = ["will_load_snapshot"] }
deno_webidl = { workspace = true, features = ["will_load_snapshot"] }
deno_websocket = { workspace = true, features = ["will_load_snapshot"] }
deno_webstorage = { workspace = true, features = ["will_load_snapshot"] }

atty.workspace = true
dlopen.workspace = true
encoding_rs.workspace = true
filetime = "0.2.16"
fs3 = "0.5.0"
http.workspace = true
hyper = { workspace = true, features = ["server", "stream", "http1", "http2", "runtime"] }
libc.workspace = true
log.workspace = true
lzzzz.workspace = true
netif = "0.1.6"
notify.workspace = true
once_cell.workspace = true
regex.workspace = true
ring.workspace = true
serde.workspace = true
signal-hook-registry = "1.4.0"
termcolor = "1.1.3"
tokio.workspace = true
uuid.workspace = true

[target.'cfg(windows)'.dependencies]
fwdansi.workspace = true
winapi = { workspace = true, features = ["commapi", "knownfolders", "mswsock", "objbase", "psapi", "shlobj", "tlhelp32", "winbase", "winerror", "winsock2"] }
ntapi = "0.4.0"

[target.'cfg(unix)'.dependencies]
nix.workspace = true

[dev-dependencies]
# Used in benchmark
test_util.workspace = true

[package.metadata.docs.rs]
features = ["docsrs"]
