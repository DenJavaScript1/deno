<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="11094"><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.03%)</title><rect x="0.1352%" y="357" width="0.0270%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="3"/><text x="0.3852%" y="367.50"></text></g><g><title>http_bench_json_ops`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="0.1713%" y="357" width="0.0180%" height="15" fill="rgb(217,0,24)" fg:x="19" fg:w="2"/><text x="0.4213%" y="367.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="0.2073%" y="357" width="0.0180%" height="15" fill="rgb(221,193,54)" fg:x="23" fg:w="2"/><text x="0.4573%" y="367.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (3 samples, 0.03%)</title><rect x="0.2344%" y="357" width="0.0270%" height="15" fill="rgb(248,212,6)" fg:x="26" fg:w="3"/><text x="0.4844%" y="367.50"></text></g><g><title>http_bench_json_ops`deno_core::ops::OpResult::to_v8 (7 samples, 0.06%)</title><rect x="0.2614%" y="357" width="0.0631%" height="15" fill="rgb(208,68,35)" fg:x="29" fg:w="7"/><text x="0.5114%" y="367.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::check_promise_exceptions (2 samples, 0.02%)</title><rect x="0.3335%" y="357" width="0.0180%" height="15" fill="rgb(232,128,0)" fg:x="37" fg:w="2"/><text x="0.5835%" y="367.50"></text></g><g><title>http_bench_json_ops`futures_task::waker::clone_arc_raw (4 samples, 0.04%)</title><rect x="2.2354%" y="293" width="0.0361%" height="15" fill="rgb(207,160,47)" fg:x="248" fg:w="4"/><text x="2.4854%" y="303.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::registration::Registration::poll_ready (34 samples, 0.31%)</title><rect x="2.2715%" y="293" width="0.3065%" height="15" fill="rgb(228,23,34)" fg:x="252" fg:w="34"/><text x="2.5215%" y="303.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (82 samples, 0.74%)</title><rect x="2.0912%" y="309" width="0.7391%" height="15" fill="rgb(218,30,26)" fg:x="232" fg:w="82"/><text x="2.3412%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (28 samples, 0.25%)</title><rect x="2.5780%" y="293" width="0.2524%" height="15" fill="rgb(220,122,19)" fg:x="286" fg:w="28"/><text x="2.8280%" y="303.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$recv (5 samples, 0.05%)</title><rect x="2.8304%" y="309" width="0.0451%" height="15" fill="rgb(250,228,42)" fg:x="314" fg:w="5"/><text x="3.0804%" y="319.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.03%)</title><rect x="2.8754%" y="309" width="0.0270%" height="15" fill="rgb(240,193,28)" fg:x="319" fg:w="3"/><text x="3.1254%" y="319.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (6 samples, 0.05%)</title><rect x="2.9025%" y="309" width="0.0541%" height="15" fill="rgb(216,20,37)" fg:x="322" fg:w="6"/><text x="3.1525%" y="319.50"></text></g><g><title>libsystem_c.dylib`recv (3 samples, 0.03%)</title><rect x="2.9566%" y="309" width="0.0270%" height="15" fill="rgb(206,188,39)" fg:x="328" fg:w="3"/><text x="3.2066%" y="319.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,991 samples, 35.97%)</title><rect x="1.9470%" y="325" width="35.9744%" height="15" fill="rgb(217,207,13)" fg:x="216" fg:w="3991"/><text x="2.1970%" y="335.50">http_bench_json_ops`&lt;core::future::from_generator::GenFutu..</text></g><g><title>libsystem_kernel.dylib`__recvfrom (3,876 samples, 34.94%)</title><rect x="2.9836%" y="309" width="34.9378%" height="15" fill="rgb(231,73,38)" fg:x="331" fg:w="3876"/><text x="3.2336%" y="319.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_read::call::{{closure}}&gt;&gt; (2 samples, 0.02%)</title><rect x="37.9214%" y="325" width="0.0180%" height="15" fill="rgb(225,20,46)" fg:x="4207" fg:w="2"/><text x="38.1714%" y="335.50"></text></g><g><title>http_bench_json_ops`std__shared_ptr__v8__BackingStore__reset (3 samples, 0.03%)</title><rect x="37.9394%" y="325" width="0.0270%" height="15" fill="rgb(210,31,41)" fg:x="4209" fg:w="3"/><text x="38.1894%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.08%)</title><rect x="38.0746%" y="309" width="0.0811%" height="15" fill="rgb(221,200,47)" fg:x="4224" fg:w="9"/><text x="38.3246%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.20%)</title><rect x="37.9665%" y="325" width="0.1983%" height="15" fill="rgb(226,26,5)" fg:x="4212" fg:w="22"/><text x="38.2165%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.09%)</title><rect x="38.1648%" y="325" width="0.0901%" height="15" fill="rgb(249,33,26)" fg:x="4234" fg:w="10"/><text x="38.4148%" y="335.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,064 samples, 36.63%)</title><rect x="1.6315%" y="341" width="36.6324%" height="15" fill="rgb(235,183,28)" fg:x="181" fg:w="4064"/><text x="1.8815%" y="351.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture..</text></g><g><title>http_bench_json_ops`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.09%)</title><rect x="38.2639%" y="341" width="0.0901%" height="15" fill="rgb(221,5,38)" fg:x="4245" fg:w="10"/><text x="38.5139%" y="351.50"></text></g><g><title>http_bench_json_ops`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.02%)</title><rect x="38.3541%" y="341" width="0.0180%" height="15" fill="rgb(247,18,42)" fg:x="4255" fg:w="2"/><text x="38.6041%" y="351.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$free (3 samples, 0.03%)</title><rect x="38.3721%" y="341" width="0.0270%" height="15" fill="rgb(241,131,45)" fg:x="4257" fg:w="3"/><text x="38.6221%" y="351.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$pthread_mutex_lock (3 samples, 0.03%)</title><rect x="38.3991%" y="341" width="0.0270%" height="15" fill="rgb(249,31,29)" fg:x="4260" fg:w="3"/><text x="38.6491%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="38.5163%" y="293" width="0.0180%" height="15" fill="rgb(225,111,53)" fg:x="4273" fg:w="2"/><text x="38.7663%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.07%)</title><rect x="38.5073%" y="309" width="0.0721%" height="15" fill="rgb(238,160,17)" fg:x="4272" fg:w="8"/><text x="38.7573%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.05%)</title><rect x="38.5343%" y="293" width="0.0451%" height="15" fill="rgb(214,148,48)" fg:x="4275" fg:w="5"/><text x="38.7843%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="38.5434%" y="277" width="0.0361%" height="15" fill="rgb(232,36,49)" fg:x="4276" fg:w="4"/><text x="38.7934%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="38.5614%" y="261" width="0.0180%" height="15" fill="rgb(209,103,24)" fg:x="4278" fg:w="2"/><text x="38.8114%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="38.5884%" y="309" width="0.0180%" height="15" fill="rgb(229,88,8)" fg:x="4281" fg:w="2"/><text x="38.8384%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.05%)</title><rect x="38.6696%" y="277" width="0.0451%" height="15" fill="rgb(213,181,19)" fg:x="4290" fg:w="5"/><text x="38.9196%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="38.7236%" y="261" width="0.0180%" height="15" fill="rgb(254,191,54)" fg:x="4296" fg:w="2"/><text x="38.9736%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="38.7417%" y="261" width="0.0180%" height="15" fill="rgb(241,83,37)" fg:x="4298" fg:w="2"/><text x="38.9917%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="38.7597%" y="245" width="0.0361%" height="15" fill="rgb(233,36,39)" fg:x="4300" fg:w="4"/><text x="39.0097%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="38.7777%" y="229" width="0.0180%" height="15" fill="rgb(226,3,54)" fg:x="4302" fg:w="2"/><text x="39.0277%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.05%)</title><rect x="38.7597%" y="261" width="0.0451%" height="15" fill="rgb(245,192,40)" fg:x="4300" fg:w="5"/><text x="39.0097%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.12%)</title><rect x="38.7146%" y="277" width="0.1172%" height="15" fill="rgb(238,167,29)" fg:x="4295" fg:w="13"/><text x="38.9646%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.03%)</title><rect x="38.8048%" y="261" width="0.0270%" height="15" fill="rgb(232,182,51)" fg:x="4305" fg:w="3"/><text x="39.0548%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.22%)</title><rect x="38.6515%" y="293" width="0.2163%" height="15" fill="rgb(231,60,39)" fg:x="4288" fg:w="24"/><text x="38.9015%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.04%)</title><rect x="38.8318%" y="277" width="0.0361%" height="15" fill="rgb(208,69,12)" fg:x="4308" fg:w="4"/><text x="39.0818%" y="287.50"></text></g><g><title>http_bench_json_ops`alloc::raw_vec::finish_grow (49 samples, 0.44%)</title><rect x="38.4803%" y="325" width="0.4417%" height="15" fill="rgb(235,93,37)" fg:x="4269" fg:w="49"/><text x="38.7303%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`realloc (35 samples, 0.32%)</title><rect x="38.6065%" y="309" width="0.3155%" height="15" fill="rgb(213,116,39)" fg:x="4283" fg:w="35"/><text x="38.8565%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.05%)</title><rect x="38.8679%" y="293" width="0.0541%" height="15" fill="rgb(222,207,29)" fg:x="4312" fg:w="6"/><text x="39.1179%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="38.9219%" y="325" width="0.0180%" height="15" fill="rgb(206,96,30)" fg:x="4318" fg:w="2"/><text x="39.1719%" y="335.50"></text></g><g><title>http_bench_json_ops`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (61 samples, 0.55%)</title><rect x="38.4262%" y="341" width="0.5498%" height="15" fill="rgb(218,138,4)" fg:x="4263" fg:w="61"/><text x="38.6762%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.04%)</title><rect x="38.9400%" y="325" width="0.0361%" height="15" fill="rgb(250,191,14)" fg:x="4320" fg:w="4"/><text x="39.1900%" y="335.50"></text></g><g><title>http_bench_json_ops`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="38.9760%" y="341" width="0.0270%" height="15" fill="rgb(239,60,40)" fg:x="4324" fg:w="3"/><text x="39.2260%" y="351.50"></text></g><g><title>http_bench_json_ops`core::hash::BuildHasher::hash_one (18 samples, 0.16%)</title><rect x="39.0211%" y="341" width="0.1622%" height="15" fill="rgb(206,27,48)" fg:x="4329" fg:w="18"/><text x="39.2711%" y="351.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_read::call::{{closure}}&gt;&gt; (2 samples, 0.02%)</title><rect x="39.2014%" y="341" width="0.0180%" height="15" fill="rgb(225,35,8)" fg:x="4349" fg:w="2"/><text x="39.4514%" y="351.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (4 samples, 0.04%)</title><rect x="39.2284%" y="341" width="0.0361%" height="15" fill="rgb(250,213,24)" fg:x="4352" fg:w="4"/><text x="39.4784%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (3 samples, 0.03%)</title><rect x="39.3005%" y="325" width="0.0270%" height="15" fill="rgb(247,123,22)" fg:x="4360" fg:w="3"/><text x="39.5505%" y="335.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (8 samples, 0.07%)</title><rect x="39.2645%" y="341" width="0.0721%" height="15" fill="rgb(231,138,38)" fg:x="4356" fg:w="8"/><text x="39.5145%" y="351.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.02%)</title><rect x="39.3366%" y="341" width="0.0180%" height="15" fill="rgb(231,145,46)" fg:x="4364" fg:w="2"/><text x="39.5866%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (3 samples, 0.03%)</title><rect x="39.4718%" y="309" width="0.0270%" height="15" fill="rgb(251,118,11)" fg:x="4379" fg:w="3"/><text x="39.7218%" y="319.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (14 samples, 0.13%)</title><rect x="39.4267%" y="325" width="0.1262%" height="15" fill="rgb(217,147,25)" fg:x="4374" fg:w="14"/><text x="39.6767%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::Integer::NewFromUnsigned (6 samples, 0.05%)</title><rect x="39.4988%" y="309" width="0.0541%" height="15" fill="rgb(247,81,37)" fg:x="4382" fg:w="6"/><text x="39.7488%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (2 samples, 0.02%)</title><rect x="39.5349%" y="293" width="0.0180%" height="15" fill="rgb(209,12,38)" fg:x="4386" fg:w="2"/><text x="39.7849%" y="303.50"></text></g><g><title>http_bench_json_ops`deno_core::ops::OpResult::to_v8 (25 samples, 0.23%)</title><rect x="39.3546%" y="341" width="0.2253%" height="15" fill="rgb(227,1,9)" fg:x="4366" fg:w="25"/><text x="39.6046%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::Integer::NewFromUnsigned (3 samples, 0.03%)</title><rect x="39.5529%" y="325" width="0.0270%" height="15" fill="rgb(248,47,43)" fg:x="4388" fg:w="3"/><text x="39.8029%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::HandleScope (2 samples, 0.02%)</title><rect x="39.6250%" y="325" width="0.0180%" height="15" fill="rgb(221,10,30)" fg:x="4396" fg:w="2"/><text x="39.8750%" y="335.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.02%)</title><rect x="39.6521%" y="309" width="0.0180%" height="15" fill="rgb(210,229,1)" fg:x="4399" fg:w="2"/><text x="39.9021%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::Context::Exit (2 samples, 0.02%)</title><rect x="39.6701%" y="309" width="0.0180%" height="15" fill="rgb(222,148,37)" fg:x="4401" fg:w="2"/><text x="39.9201%" y="319.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRealm::handle_scope (13 samples, 0.12%)</title><rect x="39.5800%" y="341" width="0.1172%" height="15" fill="rgb(234,67,33)" fg:x="4391" fg:w="13"/><text x="39.8300%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::scope::data::ScopeData::try_exit_scope (6 samples, 0.05%)</title><rect x="39.6431%" y="325" width="0.0541%" height="15" fill="rgb(247,98,35)" fg:x="4398" fg:w="6"/><text x="39.8931%" y="335.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::check_promise_exceptions (4 samples, 0.04%)</title><rect x="39.6971%" y="341" width="0.0361%" height="15" fill="rgb(247,138,52)" fg:x="4404" fg:w="4"/><text x="39.9471%" y="351.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::evaluate_pending_module (9 samples, 0.08%)</title><rect x="39.7332%" y="341" width="0.0811%" height="15" fill="rgb(213,79,30)" fg:x="4408" fg:w="9"/><text x="39.9832%" y="351.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_core::runtime::ModEvaluate&gt;&gt; (7 samples, 0.06%)</title><rect x="39.7512%" y="325" width="0.0631%" height="15" fill="rgb(246,177,23)" fg:x="4410" fg:w="7"/><text x="40.0012%" y="335.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$pthread_mutex_lock (2 samples, 0.02%)</title><rect x="39.8233%" y="325" width="0.0180%" height="15" fill="rgb(230,62,27)" fg:x="4418" fg:w="2"/><text x="40.0733%" y="335.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::event_loop_pending_state (7 samples, 0.06%)</title><rect x="39.8143%" y="341" width="0.0631%" height="15" fill="rgb(216,154,8)" fg:x="4417" fg:w="7"/><text x="40.0643%" y="351.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.02%)</title><rect x="39.9405%" y="309" width="0.0180%" height="15" fill="rgb(244,35,45)" fg:x="4431" fg:w="2"/><text x="40.1905%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::Context::Enter (7 samples, 0.06%)</title><rect x="39.9585%" y="309" width="0.0631%" height="15" fill="rgb(251,115,12)" fg:x="4433" fg:w="7"/><text x="40.2085%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScopeImplementer::EnterContext (3 samples, 0.03%)</title><rect x="39.9946%" y="293" width="0.0270%" height="15" fill="rgb(240,54,50)" fg:x="4437" fg:w="3"/><text x="40.2446%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::Context::Exit (2 samples, 0.02%)</title><rect x="40.0937%" y="277" width="0.0180%" height="15" fill="rgb(233,84,52)" fg:x="4448" fg:w="2"/><text x="40.3437%" y="287.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (7 samples, 0.06%)</title><rect x="40.0667%" y="293" width="0.0631%" height="15" fill="rgb(207,117,47)" fg:x="4445" fg:w="7"/><text x="40.3167%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::~HandleScope (2 samples, 0.02%)</title><rect x="40.1118%" y="277" width="0.0180%" height="15" fill="rgb(249,43,39)" fg:x="4450" fg:w="2"/><text x="40.3618%" y="287.50"></text></g><g><title>http_bench_json_ops`v8::Context::Exit (4 samples, 0.04%)</title><rect x="40.1298%" y="293" width="0.0361%" height="15" fill="rgb(209,38,44)" fg:x="4452" fg:w="4"/><text x="40.3798%" y="303.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRealm::handle_scope (32 samples, 0.29%)</title><rect x="39.8864%" y="325" width="0.2884%" height="15" fill="rgb(236,212,23)" fg:x="4425" fg:w="32"/><text x="40.1364%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::scope::data::ScopeData::try_exit_scope (15 samples, 0.14%)</title><rect x="40.0397%" y="309" width="0.1352%" height="15" fill="rgb(242,79,21)" fg:x="4442" fg:w="15"/><text x="40.2897%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (6 samples, 0.05%)</title><rect x="40.2019%" y="309" width="0.0541%" height="15" fill="rgb(211,96,35)" fg:x="4460" fg:w="6"/><text x="40.4519%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::MoveGlobal (2 samples, 0.02%)</title><rect x="40.2560%" y="309" width="0.0180%" height="15" fill="rgb(253,215,40)" fg:x="4466" fg:w="2"/><text x="40.5060%" y="319.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::global_realm (15 samples, 0.14%)</title><rect x="40.1749%" y="325" width="0.1352%" height="15" fill="rgb(211,81,21)" fg:x="4457" fg:w="15"/><text x="40.4249%" y="335.50"></text></g><g><title>http_bench_json_ops`v8__Global__New (4 samples, 0.04%)</title><rect x="40.2740%" y="309" width="0.0361%" height="15" fill="rgb(208,190,38)" fg:x="4468" fg:w="4"/><text x="40.5240%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (3 samples, 0.03%)</title><rect x="40.2830%" y="293" width="0.0270%" height="15" fill="rgb(235,213,38)" fg:x="4469" fg:w="3"/><text x="40.5330%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (2 samples, 0.02%)</title><rect x="40.3101%" y="325" width="0.0180%" height="15" fill="rgb(237,122,38)" fg:x="4472" fg:w="2"/><text x="40.5601%" y="335.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::handle_scope (51 samples, 0.46%)</title><rect x="39.8864%" y="341" width="0.4597%" height="15" fill="rgb(244,218,35)" fg:x="4425" fg:w="51"/><text x="40.1364%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::scope::data::ScopeData::try_exit_scope (2 samples, 0.02%)</title><rect x="40.3281%" y="325" width="0.0180%" height="15" fill="rgb(240,68,47)" fg:x="4474" fg:w="2"/><text x="40.5781%" y="335.50"></text></g><g><title>http_bench_json_ops`alloc::sync::Arc&lt;T&gt;::drop_slow (12 samples, 0.11%)</title><rect x="40.4182%" y="325" width="0.1082%" height="15" fill="rgb(210,16,53)" fg:x="4484" fg:w="12"/><text x="40.6682%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.20%)</title><rect x="40.5264%" y="325" width="0.1983%" height="15" fill="rgb(235,124,12)" fg:x="4496" fg:w="22"/><text x="40.7764%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.11%)</title><rect x="40.6165%" y="309" width="0.1082%" height="15" fill="rgb(224,169,11)" fg:x="4506" fg:w="12"/><text x="40.8665%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.05%)</title><rect x="40.7247%" y="325" width="0.0541%" height="15" fill="rgb(250,166,2)" fg:x="4518" fg:w="6"/><text x="40.9747%" y="335.50"></text></g><g><title>http_bench_json_ops`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (51 samples, 0.46%)</title><rect x="40.3461%" y="341" width="0.4597%" height="15" fill="rgb(242,216,29)" fg:x="4476" fg:w="51"/><text x="40.5961%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="40.7788%" y="325" width="0.0270%" height="15" fill="rgb(230,116,27)" fg:x="4524" fg:w="3"/><text x="41.0288%" y="335.50"></text></g><g><title>http_bench_json_ops`tokio::util::wake::wake_arc_raw (192 samples, 1.73%)</title><rect x="40.8239%" y="341" width="1.7307%" height="15" fill="rgb(228,99,48)" fg:x="4529" fg:w="192"/><text x="41.0739%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`kevent (192 samples, 1.73%)</title><rect x="40.8239%" y="325" width="1.7307%" height="15" fill="rgb(253,11,6)" fg:x="4529" fg:w="192"/><text x="41.0739%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::Context::Enter (2 samples, 0.02%)</title><rect x="42.5635%" y="341" width="0.0180%" height="15" fill="rgb(247,143,39)" fg:x="4722" fg:w="2"/><text x="42.8135%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (6 samples, 0.05%)</title><rect x="42.6807%" y="325" width="0.0541%" height="15" fill="rgb(236,97,10)" fg:x="4735" fg:w="6"/><text x="42.9307%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::EscapableHandleScope::EscapableHandleScope (3 samples, 0.03%)</title><rect x="42.7348%" y="325" width="0.0270%" height="15" fill="rgb(233,208,19)" fg:x="4741" fg:w="3"/><text x="42.9848%" y="335.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntry (6 samples, 0.05%)</title><rect x="42.7979%" y="309" width="0.0541%" height="15" fill="rgb(216,164,2)" fg:x="4748" fg:w="6"/><text x="43.0479%" y="319.50"></text></g><g><title>http_bench_json_ops`Builtins_Call_ReceiverIsAny (4 samples, 0.04%)</title><rect x="42.9602%" y="277" width="0.0361%" height="15" fill="rgb(220,129,5)" fg:x="4766" fg:w="4"/><text x="43.2102%" y="287.50"></text></g><g><title>0x11000d090 (6 samples, 0.05%)</title><rect x="43.0503%" y="261" width="0.0541%" height="15" fill="rgb(242,17,10)" fg:x="4776" fg:w="6"/><text x="43.3003%" y="271.50"></text></g><g><title>0x11000d0a8 (2 samples, 0.02%)</title><rect x="43.1224%" y="261" width="0.0180%" height="15" fill="rgb(242,107,0)" fg:x="4784" fg:w="2"/><text x="43.3724%" y="271.50"></text></g><g><title>0x11000d0d4 (3 samples, 0.03%)</title><rect x="43.1404%" y="261" width="0.0270%" height="15" fill="rgb(251,28,31)" fg:x="4786" fg:w="3"/><text x="43.3904%" y="271.50"></text></g><g><title>0x11000d100 (2 samples, 0.02%)</title><rect x="43.1855%" y="261" width="0.0180%" height="15" fill="rgb(233,223,10)" fg:x="4791" fg:w="2"/><text x="43.4355%" y="271.50"></text></g><g><title>0x11000d120 (2 samples, 0.02%)</title><rect x="43.2216%" y="261" width="0.0180%" height="15" fill="rgb(215,21,27)" fg:x="4795" fg:w="2"/><text x="43.4716%" y="271.50"></text></g><g><title>0x11000d148 (2 samples, 0.02%)</title><rect x="43.2396%" y="261" width="0.0180%" height="15" fill="rgb(232,23,21)" fg:x="4797" fg:w="2"/><text x="43.4896%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_EnqueueMicrotask (13 samples, 0.12%)</title><rect x="43.4379%" y="213" width="0.1172%" height="15" fill="rgb(244,5,23)" fg:x="4819" fg:w="13"/><text x="43.6879%" y="223.50"></text></g><g><title>http_bench_json_ops`Builtins_PromiseCapabilityDefaultResolve (59 samples, 0.53%)</title><rect x="43.3117%" y="245" width="0.5318%" height="15" fill="rgb(226,81,46)" fg:x="4805" fg:w="59"/><text x="43.5617%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (53 samples, 0.48%)</title><rect x="43.3658%" y="229" width="0.4777%" height="15" fill="rgb(247,70,30)" fg:x="4811" fg:w="53"/><text x="43.6158%" y="239.50"></text></g><g><title>http_bench_json_ops`Builtins_FulfillPromise (32 samples, 0.29%)</title><rect x="43.5551%" y="213" width="0.2884%" height="15" fill="rgb(212,68,19)" fg:x="4832" fg:w="32"/><text x="43.8051%" y="223.50"></text></g><g><title>0x11000d1a0 (65 samples, 0.59%)</title><rect x="43.2756%" y="261" width="0.5859%" height="15" fill="rgb(240,187,13)" fg:x="4801" fg:w="65"/><text x="43.5256%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (2 samples, 0.02%)</title><rect x="43.8435%" y="245" width="0.0180%" height="15" fill="rgb(223,113,26)" fg:x="4864" fg:w="2"/><text x="44.0935%" y="255.50"></text></g><g><title>0x11000d1b0 (5 samples, 0.05%)</title><rect x="43.8615%" y="261" width="0.0451%" height="15" fill="rgb(206,192,2)" fg:x="4866" fg:w="5"/><text x="44.1115%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (2 samples, 0.02%)</title><rect x="43.9156%" y="261" width="0.0180%" height="15" fill="rgb(241,108,4)" fg:x="4872" fg:w="2"/><text x="44.1656%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntry (119 samples, 1.07%)</title><rect x="42.9421%" y="293" width="1.0727%" height="15" fill="rgb(247,173,49)" fg:x="4764" fg:w="119"/><text x="43.1921%" y="303.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntryTrampoline (113 samples, 1.02%)</title><rect x="42.9962%" y="277" width="1.0186%" height="15" fill="rgb(224,114,35)" fg:x="4770" fg:w="113"/><text x="43.2462%" y="287.50"></text></g><g><title>http_bench_json_ops`Builtins_PromiseCapabilityDefaultResolve (9 samples, 0.08%)</title><rect x="43.9337%" y="261" width="0.0811%" height="15" fill="rgb(245,159,27)" fg:x="4874" fg:w="9"/><text x="44.1837%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (131 samples, 1.18%)</title><rect x="42.8520%" y="309" width="1.1808%" height="15" fill="rgb(245,172,44)" fg:x="4754" fg:w="131"/><text x="43.1020%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::SaveContext::SaveContext (2 samples, 0.02%)</title><rect x="44.0148%" y="293" width="0.0180%" height="15" fill="rgb(236,23,11)" fg:x="4883" fg:w="2"/><text x="44.2648%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::internal::AllowJavascriptExecution::IsAllowed (5 samples, 0.05%)</title><rect x="44.0328%" y="309" width="0.0451%" height="15" fill="rgb(205,117,38)" fg:x="4885" fg:w="5"/><text x="44.2828%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtins::code_handle (2 samples, 0.02%)</title><rect x="44.0779%" y="309" width="0.0180%" height="15" fill="rgb(237,72,25)" fg:x="4890" fg:w="2"/><text x="44.3279%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::SaveContext::SaveContext (3 samples, 0.03%)</title><rect x="44.0959%" y="309" width="0.0270%" height="15" fill="rgb(244,70,9)" fg:x="4892" fg:w="3"/><text x="44.3459%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScopeInfo::is_script_scope (4 samples, 0.04%)</title><rect x="44.1229%" y="309" width="0.0361%" height="15" fill="rgb(217,125,39)" fg:x="4895" fg:w="4"/><text x="44.3729%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (155 samples, 1.40%)</title><rect x="42.7709%" y="325" width="1.3972%" height="15" fill="rgb(235,36,10)" fg:x="4745" fg:w="155"/><text x="43.0209%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.02%)</title><rect x="44.1680%" y="325" width="0.0180%" height="15" fill="rgb(251,123,47)" fg:x="4900" fg:w="2"/><text x="44.4180%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::ClearKeptObjects (3 samples, 0.03%)</title><rect x="44.1951%" y="309" width="0.0270%" height="15" fill="rgb(221,13,13)" fg:x="4903" fg:w="3"/><text x="44.4451%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::Execution::TryRunMicrotasks (2 samples, 0.02%)</title><rect x="44.2582%" y="293" width="0.0180%" height="15" fill="rgb(238,131,9)" fg:x="4910" fg:w="2"/><text x="44.5082%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (7 samples, 0.06%)</title><rect x="44.3844%" y="261" width="0.0631%" height="15" fill="rgb(211,50,8)" fg:x="4924" fg:w="7"/><text x="44.6344%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.02%)</title><rect x="44.4474%" y="261" width="0.0180%" height="15" fill="rgb(245,182,24)" fg:x="4931" fg:w="2"/><text x="44.6974%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (2 samples, 0.02%)</title><rect x="44.5196%" y="245" width="0.0180%" height="15" fill="rgb(242,14,37)" fg:x="4939" fg:w="2"/><text x="44.7696%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure (2 samples, 0.02%)</title><rect x="45.1145%" y="197" width="0.0180%" height="15" fill="rgb(246,228,12)" fg:x="5005" fg:w="2"/><text x="45.3645%" y="207.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsNullOrUndefined (21 samples, 0.19%)</title><rect x="45.1325%" y="197" width="0.1893%" height="15" fill="rgb(213,55,15)" fg:x="5007" fg:w="21"/><text x="45.3825%" y="207.50"></text></g><g><title>http_bench_json_ops`Builtins_Call_ReceiverIsNullOrUndefined (3 samples, 0.03%)</title><rect x="45.3218%" y="197" width="0.0270%" height="15" fill="rgb(209,9,3)" fg:x="5028" fg:w="3"/><text x="45.5718%" y="207.50"></text></g><g><title>0x110011d48 (2 samples, 0.02%)</title><rect x="45.4390%" y="181" width="0.0180%" height="15" fill="rgb(230,59,30)" fg:x="5041" fg:w="2"/><text x="45.6890%" y="191.50"></text></g><g><title>0x11000c84c (2 samples, 0.02%)</title><rect x="45.5562%" y="133" width="0.0180%" height="15" fill="rgb(209,121,21)" fg:x="5054" fg:w="2"/><text x="45.8062%" y="143.50"></text></g><g><title>0x11000c38c (2 samples, 0.02%)</title><rect x="45.5562%" y="117" width="0.0180%" height="15" fill="rgb(220,109,13)" fg:x="5054" fg:w="2"/><text x="45.8062%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtin_HandleApiCall (3 samples, 0.03%)</title><rect x="45.5742%" y="101" width="0.0270%" height="15" fill="rgb(232,18,1)" fg:x="5056" fg:w="3"/><text x="45.8242%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (3 samples, 0.03%)</title><rect x="45.5742%" y="85" width="0.0270%" height="15" fill="rgb(215,41,42)" fg:x="5056" fg:w="3"/><text x="45.8242%" y="95.50"></text></g><g><title>0x11000b0d8 (6 samples, 0.05%)</title><rect x="45.5562%" y="165" width="0.0541%" height="15" fill="rgb(224,123,36)" fg:x="5054" fg:w="6"/><text x="45.8062%" y="175.50"></text></g><g><title>0x11000c73c (6 samples, 0.05%)</title><rect x="45.5562%" y="149" width="0.0541%" height="15" fill="rgb(240,125,3)" fg:x="5054" fg:w="6"/><text x="45.8062%" y="159.50"></text></g><g><title>0x11000c8e0 (4 samples, 0.04%)</title><rect x="45.5742%" y="133" width="0.0361%" height="15" fill="rgb(205,98,50)" fg:x="5056" fg:w="4"/><text x="45.8242%" y="143.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (4 samples, 0.04%)</title><rect x="45.5742%" y="117" width="0.0361%" height="15" fill="rgb(205,185,37)" fg:x="5056" fg:w="4"/><text x="45.8242%" y="127.50"></text></g><g><title>0x11000b284 (12 samples, 0.11%)</title><rect x="45.6102%" y="165" width="0.1082%" height="15" fill="rgb(238,207,15)" fg:x="5060" fg:w="12"/><text x="45.8602%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (12 samples, 0.11%)</title><rect x="45.6102%" y="149" width="0.1082%" height="15" fill="rgb(213,199,42)" fg:x="5060" fg:w="12"/><text x="45.8602%" y="159.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtin_HandleApiCall (12 samples, 0.11%)</title><rect x="45.6102%" y="133" width="0.1082%" height="15" fill="rgb(235,201,11)" fg:x="5060" fg:w="12"/><text x="45.8602%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (12 samples, 0.11%)</title><rect x="45.6102%" y="117" width="0.1082%" height="15" fill="rgb(207,46,11)" fg:x="5060" fg:w="12"/><text x="45.8602%" y="127.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (12 samples, 0.11%)</title><rect x="45.6102%" y="101" width="0.1082%" height="15" fill="rgb(241,35,35)" fg:x="5060" fg:w="12"/><text x="45.8602%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (12 samples, 0.11%)</title><rect x="45.6102%" y="85" width="0.1082%" height="15" fill="rgb(243,32,47)" fg:x="5060" fg:w="12"/><text x="45.8602%" y="95.50"></text></g><g><title>0x11000dd14 (2 samples, 0.02%)</title><rect x="45.7184%" y="165" width="0.0180%" height="15" fill="rgb(247,202,23)" fg:x="5072" fg:w="2"/><text x="45.9684%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_CallApiCallback (2 samples, 0.02%)</title><rect x="45.7184%" y="149" width="0.0180%" height="15" fill="rgb(219,102,11)" fg:x="5072" fg:w="2"/><text x="45.9684%" y="159.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.02%)</title><rect x="45.7184%" y="133" width="0.0180%" height="15" fill="rgb(243,110,44)" fg:x="5072" fg:w="2"/><text x="45.9684%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (2 samples, 0.02%)</title><rect x="45.7184%" y="117" width="0.0180%" height="15" fill="rgb(222,74,54)" fg:x="5072" fg:w="2"/><text x="45.9684%" y="127.50"></text></g><g><title>0x11000fecc (7 samples, 0.06%)</title><rect x="45.7454%" y="165" width="0.0631%" height="15" fill="rgb(216,99,12)" fg:x="5075" fg:w="7"/><text x="45.9954%" y="175.50"></text></g><g><title>0x11000fef8 (2 samples, 0.02%)</title><rect x="45.8085%" y="165" width="0.0180%" height="15" fill="rgb(226,22,26)" fg:x="5082" fg:w="2"/><text x="46.0585%" y="175.50"></text></g><g><title>0x110010078 (7 samples, 0.06%)</title><rect x="45.8536%" y="165" width="0.0631%" height="15" fill="rgb(217,163,10)" fg:x="5087" fg:w="7"/><text x="46.1036%" y="175.50"></text></g><g><title>0x1100100e8 (2 samples, 0.02%)</title><rect x="45.9257%" y="165" width="0.0180%" height="15" fill="rgb(213,25,53)" fg:x="5095" fg:w="2"/><text x="46.1757%" y="175.50"></text></g><g><title>0x110010124 (2 samples, 0.02%)</title><rect x="45.9528%" y="165" width="0.0180%" height="15" fill="rgb(252,105,26)" fg:x="5098" fg:w="2"/><text x="46.2028%" y="175.50"></text></g><g><title>0x110010150 (2 samples, 0.02%)</title><rect x="45.9798%" y="165" width="0.0180%" height="15" fill="rgb(220,39,43)" fg:x="5101" fg:w="2"/><text x="46.2298%" y="175.50"></text></g><g><title>0x110010158 (12 samples, 0.11%)</title><rect x="45.9978%" y="165" width="0.1082%" height="15" fill="rgb(229,68,48)" fg:x="5103" fg:w="12"/><text x="46.2478%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (12 samples, 0.11%)</title><rect x="45.9978%" y="149" width="0.1082%" height="15" fill="rgb(252,8,32)" fg:x="5103" fg:w="12"/><text x="46.2478%" y="159.50"></text></g><g><title>0x1100101cc (3 samples, 0.03%)</title><rect x="46.1421%" y="165" width="0.0270%" height="15" fill="rgb(223,20,43)" fg:x="5119" fg:w="3"/><text x="46.3921%" y="175.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (4 samples, 0.04%)</title><rect x="46.1871%" y="149" width="0.0361%" height="15" fill="rgb(229,81,49)" fg:x="5124" fg:w="4"/><text x="46.4371%" y="159.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (4 samples, 0.04%)</title><rect x="46.7099%" y="117" width="0.0361%" height="15" fill="rgb(236,28,36)" fg:x="5182" fg:w="4"/><text x="46.9599%" y="127.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write::call (60 samples, 0.54%)</title><rect x="46.7460%" y="117" width="0.5408%" height="15" fill="rgb(249,185,26)" fg:x="5186" fg:w="60"/><text x="46.9960%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::ArrayBufferView::Buffer (15 samples, 0.14%)</title><rect x="47.2868%" y="117" width="0.1352%" height="15" fill="rgb(249,174,33)" fg:x="5246" fg:w="15"/><text x="47.5368%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::internal::JSTypedArray::GetBuffer (11 samples, 0.10%)</title><rect x="47.3229%" y="101" width="0.0992%" height="15" fill="rgb(233,201,37)" fg:x="5250" fg:w="11"/><text x="47.5729%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::JSTypedArray::GetBuffer (5 samples, 0.05%)</title><rect x="47.4401%" y="117" width="0.0451%" height="15" fill="rgb(221,78,26)" fg:x="5263" fg:w="5"/><text x="47.6901%" y="127.50"></text></g><g><title>http_bench_json_ops`v8__Boolean__New (4 samples, 0.04%)</title><rect x="47.4851%" y="117" width="0.0361%" height="15" fill="rgb(250,127,30)" fg:x="5268" fg:w="4"/><text x="47.7351%" y="127.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3,783 samples, 34.10%)</title><rect x="46.3674%" y="133" width="34.0995%" height="15" fill="rgb(230,49,44)" fg:x="5144" fg:w="3783"/><text x="46.6174%" y="143.50">http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::supp..</text></g><g><title>libsystem_kernel.dylib`__sendto (3,655 samples, 32.95%)</title><rect x="47.5212%" y="117" width="32.9457%" height="15" fill="rgb(229,67,23)" fg:x="5272" fg:w="3655"/><text x="47.7712%" y="127.50">libsystem_kernel.dylib`__sendto</text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (3 samples, 0.03%)</title><rect x="80.4669%" y="133" width="0.0270%" height="15" fill="rgb(249,83,47)" fg:x="8927" fg:w="3"/><text x="80.7169%" y="143.50"></text></g><g><title>http_bench_json_ops`serde_v8::de::from_v8 (5 samples, 0.05%)</title><rect x="80.5030%" y="133" width="0.0451%" height="15" fill="rgb(215,43,3)" fg:x="8931" fg:w="5"/><text x="80.7530%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::ArrayBufferView::Buffer (3 samples, 0.03%)</title><rect x="80.5480%" y="133" width="0.0270%" height="15" fill="rgb(238,154,13)" fg:x="8936" fg:w="3"/><text x="80.7980%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::ArrayBufferView::ByteLength (2 samples, 0.02%)</title><rect x="80.5751%" y="133" width="0.0180%" height="15" fill="rgb(219,56,2)" fg:x="8939" fg:w="2"/><text x="80.8251%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::ArrayBufferView::ByteOffset (6 samples, 0.05%)</title><rect x="80.5931%" y="133" width="0.0541%" height="15" fill="rgb(233,0,4)" fg:x="8941" fg:w="6"/><text x="80.8431%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::External::Value (6 samples, 0.05%)</title><rect x="80.6472%" y="133" width="0.0541%" height="15" fill="rgb(235,30,7)" fg:x="8947" fg:w="6"/><text x="80.8972%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::Value::IsArrayBuffer (8 samples, 0.07%)</title><rect x="80.7013%" y="133" width="0.0721%" height="15" fill="rgb(250,79,13)" fg:x="8953" fg:w="8"/><text x="80.9513%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::Value::IsArrayBufferView (6 samples, 0.05%)</title><rect x="80.7734%" y="133" width="0.0541%" height="15" fill="rgb(211,146,34)" fg:x="8961" fg:w="6"/><text x="81.0234%" y="143.50"></text></g><g><title>0x1100101d4 (3,847 samples, 34.68%)</title><rect x="46.1691%" y="165" width="34.6764%" height="15" fill="rgb(228,22,38)" fg:x="5122" fg:w="3847"/><text x="46.4191%" y="175.50">0x1100101d4</text></g><g><title>http_bench_json_ops`Builtins_CallApiCallback (3,841 samples, 34.62%)</title><rect x="46.2232%" y="149" width="34.6223%" height="15" fill="rgb(235,168,5)" fg:x="5128" fg:w="3841"/><text x="46.4732%" y="159.50">http_bench_json_ops`Builtins_CallApiCallback</text></g><g><title>http_bench_json_ops`v8__ReturnValue__Set (2 samples, 0.02%)</title><rect x="80.8275%" y="133" width="0.0180%" height="15" fill="rgb(221,155,16)" fg:x="8967" fg:w="2"/><text x="81.0775%" y="143.50"></text></g><g><title>0x110010244 (3 samples, 0.03%)</title><rect x="80.8455%" y="165" width="0.0270%" height="15" fill="rgb(215,215,53)" fg:x="8969" fg:w="3"/><text x="81.0955%" y="175.50"></text></g><g><title>0x1100102f4 (17 samples, 0.15%)</title><rect x="80.8816%" y="165" width="0.1532%" height="15" fill="rgb(223,4,10)" fg:x="8973" fg:w="17"/><text x="81.1316%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (17 samples, 0.15%)</title><rect x="80.8816%" y="149" width="0.1532%" height="15" fill="rgb(234,103,6)" fg:x="8973" fg:w="17"/><text x="81.1316%" y="159.50"></text></g><g><title>0x110010338 (4 samples, 0.04%)</title><rect x="81.0348%" y="165" width="0.0361%" height="15" fill="rgb(227,97,0)" fg:x="8990" fg:w="4"/><text x="81.2848%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (4 samples, 0.04%)</title><rect x="81.0348%" y="149" width="0.0361%" height="15" fill="rgb(234,150,53)" fg:x="8990" fg:w="4"/><text x="81.2848%" y="159.50"></text></g><g><title>0x11001038c (3 samples, 0.03%)</title><rect x="81.0799%" y="165" width="0.0270%" height="15" fill="rgb(228,201,54)" fg:x="8995" fg:w="3"/><text x="81.3299%" y="175.50"></text></g><g><title>0x1100104c0 (3 samples, 0.03%)</title><rect x="81.1430%" y="165" width="0.0270%" height="15" fill="rgb(222,22,37)" fg:x="9002" fg:w="3"/><text x="81.3930%" y="175.50"></text></g><g><title>0x110010560 (3 samples, 0.03%)</title><rect x="81.1880%" y="165" width="0.0270%" height="15" fill="rgb(237,53,32)" fg:x="9007" fg:w="3"/><text x="81.4380%" y="175.50"></text></g><g><title>0x110010580 (4 samples, 0.04%)</title><rect x="81.2421%" y="165" width="0.0361%" height="15" fill="rgb(233,25,53)" fg:x="9013" fg:w="4"/><text x="81.4921%" y="175.50"></text></g><g><title>0x1100105ec (9 samples, 0.08%)</title><rect x="81.2962%" y="165" width="0.0811%" height="15" fill="rgb(210,40,34)" fg:x="9019" fg:w="9"/><text x="81.5462%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_PerformPromiseThen (9 samples, 0.08%)</title><rect x="81.2962%" y="149" width="0.0811%" height="15" fill="rgb(241,220,44)" fg:x="9019" fg:w="9"/><text x="81.5462%" y="159.50"></text></g><g><title>0x1100105f0 (2 samples, 0.02%)</title><rect x="81.3773%" y="165" width="0.0180%" height="15" fill="rgb(235,28,35)" fg:x="9028" fg:w="2"/><text x="81.6273%" y="175.50"></text></g><g><title>0x11001062c (2 samples, 0.02%)</title><rect x="81.3953%" y="165" width="0.0180%" height="15" fill="rgb(210,56,17)" fg:x="9030" fg:w="2"/><text x="81.6453%" y="175.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.02%)</title><rect x="81.4134%" y="149" width="0.0180%" height="15" fill="rgb(224,130,29)" fg:x="9032" fg:w="2"/><text x="81.6634%" y="159.50"></text></g><g><title>http_bench_json_ops`futures_task::noop_waker::noop_clone (2 samples, 0.02%)</title><rect x="83.2702%" y="69" width="0.0180%" height="15" fill="rgb(235,212,8)" fg:x="9238" fg:w="2"/><text x="83.5202%" y="79.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::registration::Registration::poll_ready (14 samples, 0.13%)</title><rect x="83.2883%" y="69" width="0.1262%" height="15" fill="rgb(223,33,50)" fg:x="9240" fg:w="14"/><text x="83.5383%" y="79.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 0.39%)</title><rect x="83.1801%" y="85" width="0.3876%" height="15" fill="rgb(219,149,13)" fg:x="9228" fg:w="43"/><text x="83.4301%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.15%)</title><rect x="83.4145%" y="69" width="0.1532%" height="15" fill="rgb(250,156,29)" fg:x="9254" fg:w="17"/><text x="83.6645%" y="79.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::magic::buffer::ZeroCopyBuf as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.08%)</title><rect x="83.5677%" y="85" width="0.0811%" height="15" fill="rgb(216,193,19)" fg:x="9271" fg:w="9"/><text x="83.8177%" y="95.50"></text></g><g><title>http_bench_json_ops`std__shared_ptr__v8__BackingStore__get (4 samples, 0.04%)</title><rect x="83.6488%" y="85" width="0.0361%" height="15" fill="rgb(216,135,14)" fg:x="9280" fg:w="4"/><text x="83.8988%" y="95.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.02%)</title><rect x="83.6849%" y="85" width="0.0180%" height="15" fill="rgb(241,47,5)" fg:x="9284" fg:w="2"/><text x="83.9349%" y="95.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (70 samples, 0.63%)</title><rect x="83.0809%" y="101" width="0.6310%" height="15" fill="rgb(233,42,35)" fg:x="9217" fg:w="70"/><text x="83.3309%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.11%)</title><rect x="83.8111%" y="53" width="0.1082%" height="15" fill="rgb(231,13,6)" fg:x="9298" fg:w="12"/><text x="84.0611%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.04%)</title><rect x="83.8832%" y="37" width="0.0361%" height="15" fill="rgb(207,181,40)" fg:x="9306" fg:w="4"/><text x="84.1332%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.20%)</title><rect x="83.7390%" y="85" width="0.1983%" height="15" fill="rgb(254,173,49)" fg:x="9290" fg:w="22"/><text x="83.9890%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.15%)</title><rect x="83.7840%" y="69" width="0.1532%" height="15" fill="rgb(221,1,38)" fg:x="9295" fg:w="17"/><text x="84.0340%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="83.9192%" y="53" width="0.0180%" height="15" fill="rgb(206,124,46)" fg:x="9310" fg:w="2"/><text x="84.1692%" y="63.50"></text></g><g><title>http_bench_json_ops`&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob (26 samples, 0.23%)</title><rect x="83.7119%" y="101" width="0.2344%" height="15" fill="rgb(249,21,11)" fg:x="9287" fg:w="26"/><text x="83.9619%" y="111.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::magic::buffer::ZeroCopyBuf as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.03%)</title><rect x="83.9463%" y="101" width="0.0270%" height="15" fill="rgb(222,201,40)" fg:x="9313" fg:w="3"/><text x="84.1963%" y="111.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$malloc (5 samples, 0.05%)</title><rect x="83.9733%" y="101" width="0.0451%" height="15" fill="rgb(235,61,29)" fg:x="9316" fg:w="5"/><text x="84.2233%" y="111.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (225 samples, 2.03%)</title><rect x="81.9993%" y="117" width="2.0281%" height="15" fill="rgb(219,207,3)" fg:x="9097" fg:w="225"/><text x="82.2493%" y="127.50">h..</text></g><g><title>http_bench_json_ops`v8::ArrayBuffer::GetBackingStore (8 samples, 0.07%)</title><rect x="84.0725%" y="101" width="0.0721%" height="15" fill="rgb(222,56,46)" fg:x="9327" fg:w="8"/><text x="84.3225%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::ArrayBufferView::Buffer (9 samples, 0.08%)</title><rect x="84.1446%" y="101" width="0.0811%" height="15" fill="rgb(239,76,54)" fg:x="9335" fg:w="9"/><text x="84.3946%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::JSTypedArray::GetBuffer (7 samples, 0.06%)</title><rect x="84.1626%" y="85" width="0.0631%" height="15" fill="rgb(231,124,27)" fg:x="9337" fg:w="7"/><text x="84.4126%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::CreateHandle (17 samples, 0.15%)</title><rect x="84.2257%" y="101" width="0.1532%" height="15" fill="rgb(249,195,6)" fg:x="9344" fg:w="17"/><text x="84.4757%" y="111.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::magic::buffer::ZeroCopyBuf as serde_v8::magic::transl8::FromV8&gt;::from_v8 (39 samples, 0.35%)</title><rect x="84.0364%" y="117" width="0.3515%" height="15" fill="rgb(237,174,47)" fg:x="9323" fg:w="39"/><text x="84.2864%" y="127.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="84.3880%" y="117" width="0.0180%" height="15" fill="rgb(206,201,31)" fg:x="9362" fg:w="2"/><text x="84.6380%" y="127.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (3 samples, 0.03%)</title><rect x="84.4060%" y="117" width="0.0270%" height="15" fill="rgb(231,57,52)" fg:x="9364" fg:w="3"/><text x="84.6560%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (28 samples, 0.25%)</title><rect x="84.7034%" y="69" width="0.2524%" height="15" fill="rgb(248,177,22)" fg:x="9397" fg:w="28"/><text x="84.9534%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.08%)</title><rect x="84.8747%" y="53" width="0.0811%" height="15" fill="rgb(215,211,37)" fg:x="9416" fg:w="9"/><text x="85.1247%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (42 samples, 0.38%)</title><rect x="84.5863%" y="101" width="0.3786%" height="15" fill="rgb(241,128,51)" fg:x="9384" fg:w="42"/><text x="84.8363%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 0.32%)</title><rect x="84.6403%" y="85" width="0.3245%" height="15" fill="rgb(227,165,31)" fg:x="9390" fg:w="36"/><text x="84.8903%" y="95.50"></text></g><g><title>http_bench_json_ops`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (60 samples, 0.54%)</title><rect x="84.4330%" y="117" width="0.5408%" height="15" fill="rgb(228,167,24)" fg:x="9367" fg:w="60"/><text x="84.6830%" y="127.50"></text></g><g><title>http_bench_json_ops`serde::de::impls::_&lt;impl serde::de::Deserialize for u32&gt;::deserialize (5 samples, 0.05%)</title><rect x="84.9739%" y="117" width="0.0451%" height="15" fill="rgb(228,143,12)" fg:x="9427" fg:w="5"/><text x="85.2239%" y="127.50"></text></g><g><title>http_bench_json_ops`std__shared_ptr__v8__BackingStore__get (5 samples, 0.05%)</title><rect x="85.0189%" y="117" width="0.0451%" height="15" fill="rgb(249,149,8)" fg:x="9432" fg:w="5"/><text x="85.2689%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::ArrayBuffer::GetBackingStore (19 samples, 0.17%)</title><rect x="85.0640%" y="117" width="0.1713%" height="15" fill="rgb(243,35,44)" fg:x="9437" fg:w="19"/><text x="85.3140%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::ArrayBufferView::Buffer (4 samples, 0.04%)</title><rect x="85.2353%" y="117" width="0.0361%" height="15" fill="rgb(246,89,9)" fg:x="9456" fg:w="4"/><text x="85.4853%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::ArrayBufferView::ByteLength (3 samples, 0.03%)</title><rect x="85.2713%" y="117" width="0.0270%" height="15" fill="rgb(233,213,13)" fg:x="9460" fg:w="3"/><text x="85.5213%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::Number::Value (3 samples, 0.03%)</title><rect x="85.3074%" y="117" width="0.0270%" height="15" fill="rgb(233,141,41)" fg:x="9464" fg:w="3"/><text x="85.5574%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::Value::IsArrayBufferView (4 samples, 0.04%)</title><rect x="85.3344%" y="117" width="0.0361%" height="15" fill="rgb(239,167,4)" fg:x="9467" fg:w="4"/><text x="85.5844%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::Value::IsNumber (3 samples, 0.03%)</title><rect x="85.3705%" y="117" width="0.0270%" height="15" fill="rgb(209,217,16)" fg:x="9471" fg:w="3"/><text x="85.6205%" y="127.50"></text></g><g><title>http_bench_json_ops`v8__Local__New (2 samples, 0.02%)</title><rect x="85.3975%" y="117" width="0.0180%" height="15" fill="rgb(219,88,35)" fg:x="9474" fg:w="2"/><text x="85.6475%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.03%)</title><rect x="85.5327%" y="101" width="0.0270%" height="15" fill="rgb(220,193,23)" fg:x="9489" fg:w="3"/><text x="85.7827%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (25 samples, 0.23%)</title><rect x="85.5958%" y="85" width="0.2253%" height="15" fill="rgb(230,90,52)" fg:x="9496" fg:w="25"/><text x="85.8458%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.13%)</title><rect x="85.6950%" y="69" width="0.1262%" height="15" fill="rgb(252,106,19)" fg:x="9507" fg:w="14"/><text x="85.9450%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47 samples, 0.42%)</title><rect x="85.4155%" y="117" width="0.4237%" height="15" fill="rgb(206,74,20)" fg:x="9476" fg:w="47"/><text x="85.6655%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (31 samples, 0.28%)</title><rect x="85.5598%" y="101" width="0.2794%" height="15" fill="rgb(230,138,44)" fg:x="9492" fg:w="31"/><text x="85.8098%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="85.8212%" y="85" width="0.0180%" height="15" fill="rgb(235,182,43)" fg:x="9521" fg:w="2"/><text x="86.0712%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.05%)</title><rect x="85.8392%" y="117" width="0.0541%" height="15" fill="rgb(242,16,51)" fg:x="9523" fg:w="6"/><text x="86.0892%" y="127.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (486 samples, 4.38%)</title><rect x="81.5215%" y="133" width="4.3807%" height="15" fill="rgb(248,9,4)" fg:x="9044" fg:w="486"/><text x="81.7715%" y="143.50">http_..</text></g><g><title>http_bench_json_ops`&lt;serde_v8::magic::buffer::ZeroCopyBuf as serde_v8::magic::transl8::FromV8&gt;::from_v8 (3 samples, 0.03%)</title><rect x="85.9023%" y="133" width="0.0270%" height="15" fill="rgb(210,31,22)" fg:x="9530" fg:w="3"/><text x="86.1523%" y="143.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$malloc (5 samples, 0.05%)</title><rect x="85.9293%" y="133" width="0.0451%" height="15" fill="rgb(239,54,39)" fg:x="9533" fg:w="5"/><text x="86.1793%" y="143.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (2 samples, 0.02%)</title><rect x="85.9744%" y="133" width="0.0180%" height="15" fill="rgb(230,99,41)" fg:x="9538" fg:w="2"/><text x="86.2244%" y="143.50"></text></g><g><title>http_bench_json_ops`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (2 samples, 0.02%)</title><rect x="85.9924%" y="133" width="0.0180%" height="15" fill="rgb(253,106,12)" fg:x="9540" fg:w="2"/><text x="86.2424%" y="143.50"></text></g><g><title>http_bench_json_ops`serde::de::impls::_&lt;impl serde::de::Deserialize for u32&gt;::deserialize (8 samples, 0.07%)</title><rect x="86.0105%" y="133" width="0.0721%" height="15" fill="rgb(213,46,41)" fg:x="9542" fg:w="8"/><text x="86.2605%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::External::Value (2 samples, 0.02%)</title><rect x="86.0826%" y="133" width="0.0180%" height="15" fill="rgb(215,133,35)" fg:x="9550" fg:w="2"/><text x="86.3326%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::Integer::Value (3 samples, 0.03%)</title><rect x="86.1006%" y="133" width="0.0270%" height="15" fill="rgb(213,28,5)" fg:x="9552" fg:w="3"/><text x="86.3506%" y="143.50"></text></g><g><title>0x110010634 (527 samples, 4.75%)</title><rect x="81.4134%" y="165" width="4.7503%" height="15" fill="rgb(215,77,49)" fg:x="9032" fg:w="527"/><text x="81.6634%" y="175.50">0x1100..</text></g><g><title>http_bench_json_ops`Builtins_CallApiCallback (525 samples, 4.73%)</title><rect x="81.4314%" y="149" width="4.7323%" height="15" fill="rgb(248,100,22)" fg:x="9034" fg:w="525"/><text x="81.6814%" y="159.50">http_b..</text></g><g><title>http_bench_json_ops`v8::Value::IsInt32 (4 samples, 0.04%)</title><rect x="86.1276%" y="133" width="0.0361%" height="15" fill="rgb(208,67,9)" fg:x="9555" fg:w="4"/><text x="86.3776%" y="143.50"></text></g><g><title>0x110010650 (4 samples, 0.04%)</title><rect x="86.1637%" y="165" width="0.0361%" height="15" fill="rgb(219,133,21)" fg:x="9559" fg:w="4"/><text x="86.4137%" y="175.50"></text></g><g><title>0x110010754 (45 samples, 0.41%)</title><rect x="86.2448%" y="165" width="0.4056%" height="15" fill="rgb(246,46,29)" fg:x="9568" fg:w="45"/><text x="86.4948%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitCaught (45 samples, 0.41%)</title><rect x="86.2448%" y="149" width="0.4056%" height="15" fill="rgb(246,185,52)" fg:x="9568" fg:w="45"/><text x="86.4948%" y="159.50"></text></g><g><title>http_bench_json_ops`Builtins_PerformPromiseThen (20 samples, 0.18%)</title><rect x="86.4702%" y="133" width="0.1803%" height="15" fill="rgb(252,136,11)" fg:x="9593" fg:w="20"/><text x="86.7202%" y="143.50"></text></g><g><title>0x110010784 (2 samples, 0.02%)</title><rect x="86.6595%" y="165" width="0.0180%" height="15" fill="rgb(219,138,53)" fg:x="9614" fg:w="2"/><text x="86.9095%" y="175.50"></text></g><g><title>0x1100107a8 (2 samples, 0.02%)</title><rect x="86.6865%" y="165" width="0.0180%" height="15" fill="rgb(211,51,23)" fg:x="9617" fg:w="2"/><text x="86.9365%" y="175.50"></text></g><g><title>0x110010adc (6 samples, 0.05%)</title><rect x="86.7226%" y="165" width="0.0541%" height="15" fill="rgb(247,221,28)" fg:x="9621" fg:w="6"/><text x="86.9726%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (6 samples, 0.05%)</title><rect x="86.7226%" y="149" width="0.0541%" height="15" fill="rgb(251,222,45)" fg:x="9621" fg:w="6"/><text x="86.9726%" y="159.50"></text></g><g><title>http_bench_json_ops`v8::internal::Runtime_AllocateInYoungGeneration (6 samples, 0.05%)</title><rect x="86.7226%" y="133" width="0.0541%" height="15" fill="rgb(217,162,53)" fg:x="9621" fg:w="6"/><text x="86.9726%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::internal::Factory::NewFillerObject (6 samples, 0.05%)</title><rect x="86.7226%" y="117" width="0.0541%" height="15" fill="rgb(229,93,14)" fg:x="9621" fg:w="6"/><text x="86.9726%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::internal::SemiSpaceNewSpace::EnsureAllocation (2 samples, 0.02%)</title><rect x="86.7586%" y="101" width="0.0180%" height="15" fill="rgb(209,67,49)" fg:x="9625" fg:w="2"/><text x="87.0086%" y="111.50"></text></g><g><title>0x110010dd8 (2 samples, 0.02%)</title><rect x="86.7947%" y="165" width="0.0180%" height="15" fill="rgb(213,87,29)" fg:x="9629" fg:w="2"/><text x="87.0447%" y="175.50"></text></g><g><title>0x110010de0 (34 samples, 0.31%)</title><rect x="86.8127%" y="165" width="0.3065%" height="15" fill="rgb(205,151,52)" fg:x="9631" fg:w="34"/><text x="87.0627%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_RecordWriteSaveFP (34 samples, 0.31%)</title><rect x="86.8127%" y="149" width="0.3065%" height="15" fill="rgb(253,215,39)" fg:x="9631" fg:w="34"/><text x="87.0627%" y="159.50"></text></g><g><title>http_bench_json_ops`Builtins_CallApiCallback (11 samples, 0.10%)</title><rect x="87.1192%" y="165" width="0.0992%" height="15" fill="rgb(221,220,41)" fg:x="9665" fg:w="11"/><text x="87.3692%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="87.2183%" y="165" width="0.0180%" height="15" fill="rgb(218,133,21)" fg:x="9676" fg:w="2"/><text x="87.4683%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (14 samples, 0.13%)</title><rect x="87.2363%" y="165" width="0.1262%" height="15" fill="rgb(221,193,43)" fg:x="9678" fg:w="14"/><text x="87.4863%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure (4,651 samples, 41.92%)</title><rect x="45.4750%" y="181" width="41.9236%" height="15" fill="rgb(240,128,52)" fg:x="5045" fg:w="4651"/><text x="45.7250%" y="191.50">http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>http_bench_json_ops`Builtins_LoadICTrampoline (4 samples, 0.04%)</title><rect x="87.3625%" y="165" width="0.0361%" height="15" fill="rgb(253,114,12)" fg:x="9692" fg:w="4"/><text x="87.6125%" y="175.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (26 samples, 0.23%)</title><rect x="87.3986%" y="181" width="0.2344%" height="15" fill="rgb(215,223,47)" fg:x="9696" fg:w="26"/><text x="87.6486%" y="191.50"></text></g><g><title>http_bench_json_ops`Builtins_FulfillPromise (16 samples, 0.14%)</title><rect x="87.4887%" y="165" width="0.1442%" height="15" fill="rgb(248,225,23)" fg:x="9706" fg:w="16"/><text x="87.7387%" y="175.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (4,802 samples, 43.28%)</title><rect x="44.5376%" y="245" width="43.2847%" height="15" fill="rgb(250,108,0)" fg:x="4941" fg:w="4802"/><text x="44.7876%" y="255.50">http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::int..</text></g><g><title>http_bench_json_ops`Builtins_JSRunMicrotasksEntry (4,793 samples, 43.20%)</title><rect x="44.6187%" y="229" width="43.2035%" height="15" fill="rgb(228,208,7)" fg:x="4950" fg:w="4793"/><text x="44.8687%" y="239.50">http_bench_json_ops`Builtins_JSRunMicrotasksEntry</text></g><g><title>http_bench_json_ops`Builtins_RunMicrotasks (4,790 samples, 43.18%)</title><rect x="44.6458%" y="213" width="43.1765%" height="15" fill="rgb(244,45,10)" fg:x="4953" fg:w="4790"/><text x="44.8958%" y="223.50">http_bench_json_ops`Builtins_RunMicrotasks</text></g><g><title>http_bench_json_ops`Builtins_PromiseFulfillReactionJob (4,712 samples, 42.47%)</title><rect x="45.3488%" y="197" width="42.4734%" height="15" fill="rgb(207,125,25)" fg:x="5031" fg:w="4712"/><text x="45.5988%" y="207.50">http_bench_json_ops`Builtins_PromiseFulfillReactionJob</text></g><g><title>http_bench_json_ops`Builtins_ResumeGeneratorTrampoline (21 samples, 0.19%)</title><rect x="87.6330%" y="181" width="0.1893%" height="15" fill="rgb(210,195,18)" fg:x="9722" fg:w="21"/><text x="87.8830%" y="191.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtins::code_handle (2 samples, 0.02%)</title><rect x="87.8222%" y="245" width="0.0180%" height="15" fill="rgb(249,80,12)" fg:x="9743" fg:w="2"/><text x="88.0722%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::Isolate::FireCallCompletedCallbackInternal (4,845 samples, 43.67%)</title><rect x="44.1860%" y="325" width="43.6723%" height="15" fill="rgb(221,65,9)" fg:x="4902" fg:w="4845"/><text x="44.4360%" y="335.50">http_bench_json_ops`v8::internal::Isolate::FireCallCompletedCallbackInte..</text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal (4,841 samples, 43.64%)</title><rect x="44.2221%" y="309" width="43.6362%" height="15" fill="rgb(235,49,36)" fg:x="4906" fg:w="4841"/><text x="44.4721%" y="319.50">http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInte..</text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (4,835 samples, 43.58%)</title><rect x="44.2762%" y="293" width="43.5821%" height="15" fill="rgb(225,32,20)" fg:x="4912" fg:w="4835"/><text x="44.5262%" y="303.50">http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>http_bench_json_ops`v8::internal::Execution::TryRunMicrotasks (4,825 samples, 43.49%)</title><rect x="44.3663%" y="277" width="43.4920%" height="15" fill="rgb(215,141,46)" fg:x="4922" fg:w="4825"/><text x="44.6163%" y="287.50">http_bench_json_ops`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (4,814 samples, 43.39%)</title><rect x="44.4655%" y="261" width="43.3928%" height="15" fill="rgb(250,160,47)" fg:x="4933" fg:w="4814"/><text x="44.7155%" y="271.50">http_bench_json_ops`v8::internal::(anonymous namespace)::InvokeWithTryC..</text></g><g><title>http_bench_json_ops`v8::internal::SaveContext::~SaveContext (2 samples, 0.02%)</title><rect x="87.8403%" y="245" width="0.0180%" height="15" fill="rgb(216,222,40)" fg:x="9745" fg:w="2"/><text x="88.0903%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (5,023 samples, 45.28%)</title><rect x="42.5906%" y="341" width="45.2767%" height="15" fill="rgb(234,217,39)" fg:x="4725" fg:w="5023"/><text x="42.8406%" y="351.50">http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v..</text></g><g><title>http_bench_json_ops`v8::Integer::New (6 samples, 0.05%)</title><rect x="87.8673%" y="341" width="0.0541%" height="15" fill="rgb(207,178,40)" fg:x="9748" fg:w="6"/><text x="88.1173%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (8 samples, 0.07%)</title><rect x="87.9304%" y="341" width="0.0721%" height="15" fill="rgb(221,136,13)" fg:x="9755" fg:w="8"/><text x="88.1804%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::MoveGlobal (2 samples, 0.02%)</title><rect x="88.0206%" y="341" width="0.0180%" height="15" fill="rgb(249,199,10)" fg:x="9765" fg:w="2"/><text x="88.2706%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (3 samples, 0.03%)</title><rect x="88.0386%" y="341" width="0.0270%" height="15" fill="rgb(249,222,13)" fg:x="9767" fg:w="3"/><text x="88.2886%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::ClearKeptObjects (2 samples, 0.02%)</title><rect x="88.0656%" y="341" width="0.0180%" height="15" fill="rgb(244,185,38)" fg:x="9770" fg:w="2"/><text x="88.3156%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal (3 samples, 0.03%)</title><rect x="88.0927%" y="341" width="0.0270%" height="15" fill="rgb(236,202,9)" fg:x="9773" fg:w="3"/><text x="88.3427%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (3 samples, 0.03%)</title><rect x="88.0927%" y="325" width="0.0270%" height="15" fill="rgb(250,229,37)" fg:x="9773" fg:w="3"/><text x="88.3427%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.02%)</title><rect x="88.1197%" y="341" width="0.0180%" height="15" fill="rgb(206,174,23)" fg:x="9776" fg:w="2"/><text x="88.3697%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (5 samples, 0.05%)</title><rect x="88.1377%" y="341" width="0.0451%" height="15" fill="rgb(211,33,43)" fg:x="9778" fg:w="5"/><text x="88.3877%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (2 samples, 0.02%)</title><rect x="88.1828%" y="341" width="0.0180%" height="15" fill="rgb(245,58,50)" fg:x="9783" fg:w="2"/><text x="88.4328%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::GCTracer::UpdateStatistics (2 samples, 0.02%)</title><rect x="88.2098%" y="293" width="0.0180%" height="15" fill="rgb(244,68,36)" fg:x="9786" fg:w="2"/><text x="88.4598%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::internal::GCTracer::Print (2 samples, 0.02%)</title><rect x="88.2098%" y="277" width="0.0180%" height="15" fill="rgb(232,229,15)" fg:x="9786" fg:w="2"/><text x="88.4598%" y="287.50"></text></g><g><title>http_bench_json_ops`v8::internal::GCTracer::Output (2 samples, 0.02%)</title><rect x="88.2098%" y="261" width="0.0180%" height="15" fill="rgb(254,30,23)" fg:x="9786" fg:w="2"/><text x="88.4598%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::base::OS::VSNPrintF (2 samples, 0.02%)</title><rect x="88.2098%" y="245" width="0.0180%" height="15" fill="rgb(235,160,14)" fg:x="9786" fg:w="2"/><text x="88.4598%" y="255.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (2 samples, 0.02%)</title><rect x="88.2098%" y="229" width="0.0180%" height="15" fill="rgb(212,155,44)" fg:x="9786" fg:w="2"/><text x="88.4598%" y="239.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (2 samples, 0.02%)</title><rect x="88.2098%" y="213" width="0.0180%" height="15" fill="rgb(226,2,50)" fg:x="9786" fg:w="2"/><text x="88.4598%" y="223.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::Process (3 samples, 0.03%)</title><rect x="88.2639%" y="197" width="0.0270%" height="15" fill="rgb(234,177,6)" fg:x="9792" fg:w="3"/><text x="88.5139%" y="207.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobHandle::Join (10 samples, 0.09%)</title><rect x="88.2639%" y="245" width="0.0901%" height="15" fill="rgb(217,24,9)" fg:x="9792" fg:w="10"/><text x="88.5139%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobState::Join (10 samples, 0.09%)</title><rect x="88.2639%" y="229" width="0.0901%" height="15" fill="rgb(220,13,46)" fg:x="9792" fg:w="10"/><text x="88.5139%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::JobTask::ProcessItems (10 samples, 0.09%)</title><rect x="88.2639%" y="213" width="0.0901%" height="15" fill="rgb(239,221,27)" fg:x="9792" fg:w="10"/><text x="88.5139%" y="223.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::ScavengePage (7 samples, 0.06%)</title><rect x="88.2910%" y="197" width="0.0631%" height="15" fill="rgb(222,198,25)" fg:x="9795" fg:w="7"/><text x="88.5410%" y="207.50"></text></g><g><title>http_bench_json_ops`v8::internal::InvalidatedSlotsFilter::IsValid (3 samples, 0.03%)</title><rect x="88.3270%" y="181" width="0.0270%" height="15" fill="rgb(211,99,13)" fg:x="9799" fg:w="3"/><text x="88.5770%" y="191.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengeJob::Task::RunInternal (17 samples, 0.15%)</title><rect x="88.2098%" y="325" width="0.1532%" height="15" fill="rgb(232,111,31)" fg:x="9786" fg:w="17"/><text x="88.4598%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::CollectGarbage (17 samples, 0.15%)</title><rect x="88.2098%" y="309" width="0.1532%" height="15" fill="rgb(245,82,37)" fg:x="9786" fg:w="17"/><text x="88.4598%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::PerformGarbageCollection (14 samples, 0.13%)</title><rect x="88.2369%" y="293" width="0.1262%" height="15" fill="rgb(227,149,46)" fg:x="9789" fg:w="14"/><text x="88.4869%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::Scavenge (14 samples, 0.13%)</title><rect x="88.2369%" y="277" width="0.1262%" height="15" fill="rgb(218,36,50)" fg:x="9789" fg:w="14"/><text x="88.4869%" y="287.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::CollectGarbage (14 samples, 0.13%)</title><rect x="88.2369%" y="261" width="0.1262%" height="15" fill="rgb(226,80,48)" fg:x="9789" fg:w="14"/><text x="88.4869%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (4 samples, 0.04%)</title><rect x="88.3721%" y="325" width="0.0361%" height="15" fill="rgb(238,224,15)" fg:x="9804" fg:w="4"/><text x="88.6221%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.02%)</title><rect x="88.3901%" y="309" width="0.0180%" height="15" fill="rgb(241,136,10)" fg:x="9806" fg:w="2"/><text x="88.6401%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultPlatform::PumpMessageLoop (24 samples, 0.22%)</title><rect x="88.2008%" y="341" width="0.2163%" height="15" fill="rgb(208,32,45)" fg:x="9785" fg:w="24"/><text x="88.4508%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::scope::TryCatch&lt;P&gt;::exception (2 samples, 0.02%)</title><rect x="88.4172%" y="341" width="0.0180%" height="15" fill="rgb(207,135,9)" fg:x="9809" fg:w="2"/><text x="88.6672%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::TryCatch (5 samples, 0.05%)</title><rect x="88.4622%" y="325" width="0.0451%" height="15" fill="rgb(206,86,44)" fg:x="9814" fg:w="5"/><text x="88.7122%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::GetCurrentStackPosition (3 samples, 0.03%)</title><rect x="88.4803%" y="309" width="0.0270%" height="15" fill="rgb(245,177,15)" fg:x="9816" fg:w="3"/><text x="88.7303%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::scope::TryCatch&lt;P&gt;::new (14 samples, 0.13%)</title><rect x="88.4352%" y="341" width="0.1262%" height="15" fill="rgb(206,64,50)" fg:x="9811" fg:w="14"/><text x="88.6852%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::Isolate::RegisterTryCatchHandler (5 samples, 0.05%)</title><rect x="88.5163%" y="325" width="0.0451%" height="15" fill="rgb(234,36,40)" fg:x="9820" fg:w="5"/><text x="88.7663%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.07%)</title><rect x="88.5794%" y="341" width="0.0721%" height="15" fill="rgb(213,64,8)" fg:x="9827" fg:w="8"/><text x="88.8294%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.10%)</title><rect x="88.8679%" y="325" width="0.0992%" height="15" fill="rgb(210,75,36)" fg:x="9859" fg:w="11"/><text x="89.1179%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.32%)</title><rect x="88.6515%" y="341" width="0.3245%" height="15" fill="rgb(229,88,21)" fg:x="9835" fg:w="36"/><text x="88.9015%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.06%)</title><rect x="88.9760%" y="341" width="0.0631%" height="15" fill="rgb(252,204,47)" fg:x="9871" fg:w="7"/><text x="89.2260%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.18%)</title><rect x="89.0391%" y="341" width="0.1803%" height="15" fill="rgb(208,77,27)" fg:x="9878" fg:w="20"/><text x="89.2891%" y="351.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::poll_event_loop (9,863 samples, 88.90%)</title><rect x="0.3696%" y="357" width="88.9039%" height="15" fill="rgb(221,76,26)" fg:x="41" fg:w="9863"/><text x="0.6196%" y="367.50">http_bench_json_ops`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.04%)</title><rect x="89.2374%" y="341" width="0.0361%" height="15" fill="rgb(225,139,18)" fg:x="9900" fg:w="4"/><text x="89.4874%" y="351.50"></text></g><g><title>http_bench_json_ops`tokio::util::wake::clone_arc_raw (3 samples, 0.03%)</title><rect x="89.2915%" y="357" width="0.0270%" height="15" fill="rgb(230,137,11)" fg:x="9906" fg:w="3"/><text x="89.5415%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (3 samples, 0.03%)</title><rect x="89.3276%" y="357" width="0.0270%" height="15" fill="rgb(212,28,1)" fg:x="9910" fg:w="3"/><text x="89.5776%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::Integer::New (2 samples, 0.02%)</title><rect x="89.3546%" y="357" width="0.0180%" height="15" fill="rgb(248,164,17)" fg:x="9913" fg:w="2"/><text x="89.6046%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::Isolate::PerformMicrotaskCheckpoint (2 samples, 0.02%)</title><rect x="89.3726%" y="357" width="0.0180%" height="15" fill="rgb(222,171,42)" fg:x="9915" fg:w="2"/><text x="89.6226%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (2 samples, 0.02%)</title><rect x="89.3997%" y="357" width="0.0180%" height="15" fill="rgb(243,84,45)" fg:x="9918" fg:w="2"/><text x="89.6497%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::platform::PumpMessageLoop (2 samples, 0.02%)</title><rect x="89.4267%" y="357" width="0.0180%" height="15" fill="rgb(252,49,23)" fg:x="9921" fg:w="2"/><text x="89.6767%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::scope::TryCatch&lt;P&gt;::exception (2 samples, 0.02%)</title><rect x="89.4447%" y="357" width="0.0180%" height="15" fill="rgb(215,19,7)" fg:x="9923" fg:w="2"/><text x="89.6947%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::scope::TryCatch&lt;P&gt;::new (2 samples, 0.02%)</title><rect x="89.4628%" y="357" width="0.0180%" height="15" fill="rgb(238,81,41)" fg:x="9925" fg:w="2"/><text x="89.7128%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.05%)</title><rect x="89.4898%" y="357" width="0.0451%" height="15" fill="rgb(210,199,37)" fg:x="9928" fg:w="5"/><text x="89.7398%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="89.5349%" y="357" width="0.0270%" height="15" fill="rgb(244,192,49)" fg:x="9933" fg:w="3"/><text x="89.7849%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="89.5619%" y="357" width="0.0180%" height="15" fill="rgb(226,211,11)" fg:x="9936" fg:w="2"/><text x="89.8119%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.05%)</title><rect x="89.5800%" y="357" width="0.0451%" height="15" fill="rgb(236,162,54)" fg:x="9938" fg:w="5"/><text x="89.8300%" y="367.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,933 samples, 89.53%)</title><rect x="0.1172%" y="373" width="89.5349%" height="15" fill="rgb(220,229,9)" fg:x="13" fg:w="9933"/><text x="0.3672%" y="383.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.03%)</title><rect x="89.6250%" y="357" width="0.0270%" height="15" fill="rgb(250,87,22)" fg:x="9943" fg:w="3"/><text x="89.8750%" y="367.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::new (3 samples, 0.03%)</title><rect x="89.6521%" y="373" width="0.0270%" height="15" fill="rgb(239,43,17)" fg:x="9946" fg:w="3"/><text x="89.9021%" y="383.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::poll_event_loop (3 samples, 0.03%)</title><rect x="89.6791%" y="373" width="0.0270%" height="15" fill="rgb(231,177,25)" fg:x="9949" fg:w="3"/><text x="89.9291%" y="383.50"></text></g><g><title>http_bench_json_ops`tokio::process::imp::GlobalOrphanQueue::reap_orphans (4 samples, 0.04%)</title><rect x="89.7061%" y="373" width="0.0361%" height="15" fill="rgb(219,179,1)" fg:x="9952" fg:w="4"/><text x="89.9561%" y="383.50"></text></g><g><title>http_bench_json_ops`futures_task::noop_waker::noop (2 samples, 0.02%)</title><rect x="90.0667%" y="357" width="0.0180%" height="15" fill="rgb(238,219,53)" fg:x="9992" fg:w="2"/><text x="90.3167%" y="367.50"></text></g><g><title>http_bench_json_ops`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.02%)</title><rect x="90.7968%" y="293" width="0.0180%" height="15" fill="rgb(232,167,36)" fg:x="10073" fg:w="2"/><text x="91.0468%" y="303.50"></text></g><g><title>http_bench_json_ops`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (182 samples, 1.64%)</title><rect x="90.6887%" y="325" width="1.6405%" height="15" fill="rgb(244,19,51)" fg:x="10061" fg:w="182"/><text x="90.9387%" y="335.50"></text></g><g><title>http_bench_json_ops`tokio::util::wake::wake_arc_raw (172 samples, 1.55%)</title><rect x="90.7788%" y="309" width="1.5504%" height="15" fill="rgb(224,6,22)" fg:x="10071" fg:w="172"/><text x="91.0288%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`kevent (167 samples, 1.51%)</title><rect x="90.8239%" y="293" width="1.5053%" height="15" fill="rgb(224,145,5)" fg:x="10076" fg:w="167"/><text x="91.0739%" y="303.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::Driver::turn (289 samples, 2.61%)</title><rect x="89.7422%" y="373" width="2.6050%" height="15" fill="rgb(234,130,49)" fg:x="9956" fg:w="289"/><text x="89.9922%" y="383.50">ht..</text></g><g><title>http_bench_json_ops`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (250 samples, 2.25%)</title><rect x="90.0937%" y="357" width="2.2535%" height="15" fill="rgb(254,6,2)" fg:x="9995" fg:w="250"/><text x="90.3437%" y="367.50">h..</text></g><g><title>http_bench_json_ops`futures_task::waker::wake_arc_raw (186 samples, 1.68%)</title><rect x="90.6706%" y="341" width="1.6766%" height="15" fill="rgb(208,96,46)" fg:x="10059" fg:w="186"/><text x="90.9206%" y="351.50"></text></g><g><title>http_bench_json_ops`tokio::util::wake::wake_arc_raw (2 samples, 0.02%)</title><rect x="92.3292%" y="325" width="0.0180%" height="15" fill="rgb(239,3,39)" fg:x="10243" fg:w="2"/><text x="92.5792%" y="335.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (4 samples, 0.04%)</title><rect x="92.3562%" y="373" width="0.0361%" height="15" fill="rgb(233,210,1)" fg:x="10246" fg:w="4"/><text x="92.6062%" y="383.50"></text></g><g><title>http_bench_json_ops`tokio::runtime::io::registration::Registration::poll_ready (4 samples, 0.04%)</title><rect x="92.4193%" y="357" width="0.0361%" height="15" fill="rgb(244,137,37)" fg:x="10253" fg:w="4"/><text x="92.6693%" y="367.50"></text></g><g><title>http_bench_json_ops`tokio::signal::unix::driver::Driver::process (11 samples, 0.10%)</title><rect x="92.3923%" y="373" width="0.0992%" height="15" fill="rgb(240,136,2)" fg:x="10250" fg:w="11"/><text x="92.6423%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.04%)</title><rect x="92.4554%" y="357" width="0.0361%" height="15" fill="rgb(239,18,37)" fg:x="10257" fg:w="4"/><text x="92.7054%" y="367.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::main (11,025 samples, 99.38%)</title><rect x="0.0090%" y="389" width="99.3780%" height="15" fill="rgb(218,185,22)" fg:x="1" fg:w="11025"/><text x="0.2590%" y="399.50">http_bench_json_ops`http_bench_json_ops::main</text></g><g><title>libsystem_kernel.dylib`kevent (764 samples, 6.89%)</title><rect x="92.5005%" y="373" width="6.8866%" height="15" fill="rgb(225,218,4)" fg:x="10262" fg:w="764"/><text x="92.7505%" y="383.50">libsystem..</text></g><g><title>http_bench_json_ops`tokio::signal::unix::driver::Driver::process (4 samples, 0.04%)</title><rect x="99.3871%" y="389" width="0.0361%" height="15" fill="rgb(230,182,32)" fg:x="11026" fg:w="4"/><text x="99.6371%" y="399.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.03%)</title><rect x="99.4231%" y="389" width="0.0270%" height="15" fill="rgb(242,56,43)" fg:x="11030" fg:w="3"/><text x="99.6731%" y="399.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="99.4502%" y="389" width="0.0180%" height="15" fill="rgb(233,99,24)" fg:x="11033" fg:w="2"/><text x="99.7002%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (34 samples, 0.31%)</title><rect x="99.4682%" y="389" width="0.3065%" height="15" fill="rgb(234,209,42)" fg:x="11035" fg:w="34"/><text x="99.7182%" y="399.50"></text></g><g><title>dyld`start (11,073 samples, 99.81%)</title><rect x="0.0000%" y="437" width="99.8107%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="11073"/><text x="0.2500%" y="447.50">dyld`start</text></g><g><title>http_bench_json_ops`main (11,073 samples, 99.81%)</title><rect x="0.0000%" y="421" width="99.8107%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="11073"/><text x="0.2500%" y="431.50">http_bench_json_ops`main</text></g><g><title>http_bench_json_ops`std::sys_common::backtrace::__rust_begin_short_backtrace (11,073 samples, 99.81%)</title><rect x="0.0000%" y="405" width="99.8107%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="11073"/><text x="0.2500%" y="415.50">http_bench_json_ops`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.04%)</title><rect x="99.7747%" y="389" width="0.0361%" height="15" fill="rgb(231,56,7)" fg:x="11069" fg:w="4"/><text x="100.0247%" y="399.50"></text></g><g><title>dyld`dyld4::APIs::dlsym (2 samples, 0.02%)</title><rect x="99.8197%" y="389" width="0.0180%" height="15" fill="rgb(244,186,29)" fg:x="11074" fg:w="2"/><text x="100.0697%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::CreateGraph (2 samples, 0.02%)</title><rect x="99.8468%" y="309" width="0.0180%" height="15" fill="rgb(234,111,31)" fg:x="11077" fg:w="2"/><text x="100.0968%" y="319.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (2 samples, 0.02%)</title><rect x="99.8468%" y="293" width="0.0180%" height="15" fill="rgb(241,149,10)" fg:x="11077" fg:w="2"/><text x="100.0968%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::InliningPhase::Run (2 samples, 0.02%)</title><rect x="99.8468%" y="277" width="0.0180%" height="15" fill="rgb(249,206,44)" fg:x="11077" fg:w="2"/><text x="100.0968%" y="287.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="99.8468%" y="261" width="0.0180%" height="15" fill="rgb(251,153,30)" fg:x="11077" fg:w="2"/><text x="100.0968%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="99.8468%" y="245" width="0.0180%" height="15" fill="rgb(239,152,38)" fg:x="11077" fg:w="2"/><text x="100.0968%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::Scheduler::PrepareUses (2 samples, 0.02%)</title><rect x="99.8648%" y="261" width="0.0180%" height="15" fill="rgb(249,139,47)" fg:x="11079" fg:w="2"/><text x="100.1148%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PrepareUsesVisitor::Run (2 samples, 0.02%)</title><rect x="99.8648%" y="245" width="0.0180%" height="15" fill="rgb(244,64,35)" fg:x="11079" fg:w="2"/><text x="100.1148%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PrepareUsesVisitor::VisitInputs (2 samples, 0.02%)</title><rect x="99.8648%" y="229" width="0.0180%" height="15" fill="rgb(216,46,15)" fg:x="11079" fg:w="2"/><text x="100.1148%" y="239.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (3 samples, 0.03%)</title><rect x="99.8648%" y="293" width="0.0270%" height="15" fill="rgb(250,74,19)" fg:x="11079" fg:w="3"/><text x="100.1148%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (3 samples, 0.03%)</title><rect x="99.8648%" y="277" width="0.0270%" height="15" fill="rgb(249,42,33)" fg:x="11079" fg:w="3"/><text x="100.1148%" y="287.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (2 samples, 0.02%)</title><rect x="99.8918%" y="293" width="0.0180%" height="15" fill="rgb(242,149,17)" fg:x="11082" fg:w="2"/><text x="100.1418%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::EffectControlLinearizationPhase::Run (2 samples, 0.02%)</title><rect x="99.8918%" y="277" width="0.0180%" height="15" fill="rgb(244,29,21)" fg:x="11082" fg:w="2"/><text x="100.1418%" y="287.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (2 samples, 0.02%)</title><rect x="99.8918%" y="261" width="0.0180%" height="15" fill="rgb(220,130,37)" fg:x="11082" fg:w="2"/><text x="100.1418%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.02%)</title><rect x="99.9189%" y="229" width="0.0180%" height="15" fill="rgb(211,67,2)" fg:x="11085" fg:w="2"/><text x="100.1689%" y="239.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (3 samples, 0.03%)</title><rect x="99.9189%" y="293" width="0.0270%" height="15" fill="rgb(235,68,52)" fg:x="11085" fg:w="3"/><text x="100.1689%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::LoadEliminationPhase::Run (3 samples, 0.03%)</title><rect x="99.9189%" y="277" width="0.0270%" height="15" fill="rgb(246,142,3)" fg:x="11085" fg:w="3"/><text x="100.1689%" y="287.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.03%)</title><rect x="99.9189%" y="261" width="0.0270%" height="15" fill="rgb(241,25,7)" fg:x="11085" fg:w="3"/><text x="100.1689%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.03%)</title><rect x="99.9189%" y="245" width="0.0270%" height="15" fill="rgb(242,119,39)" fg:x="11085" fg:w="3"/><text x="100.1689%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::LinearScanAllocator::FindFreeRegistersForRange(v8::internal::compiler::LiveRange*, v8::base::Vector (2 samples, 0.02%)</title><rect x="99.9639%" y="229" width="0.0180%" height="15" fill="rgb(241,98,45)" fg:x="11090" fg:w="2"/><text x="100.2139%" y="239.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (4 samples, 0.04%)</title><rect x="99.9549%" y="261" width="0.0361%" height="15" fill="rgb(254,28,30)" fg:x="11089" fg:w="4"/><text x="100.2049%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (4 samples, 0.04%)</title><rect x="99.9549%" y="245" width="0.0361%" height="15" fill="rgb(241,142,54)" fg:x="11089" fg:w="4"/><text x="100.2049%" y="255.50"></text></g><g><title>all (11,094 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="11094"/><text x="0.2500%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (21 samples, 0.19%)</title><rect x="99.8107%" y="437" width="0.1893%" height="15" fill="rgb(210,85,47)" fg:x="11073" fg:w="21"/><text x="100.0607%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (20 samples, 0.18%)</title><rect x="99.8197%" y="421" width="0.1803%" height="15" fill="rgb(224,206,25)" fg:x="11074" fg:w="20"/><text x="100.0697%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::base::ThreadEntry (20 samples, 0.18%)</title><rect x="99.8197%" y="405" width="0.1803%" height="15" fill="rgb(243,201,19)" fg:x="11074" fg:w="20"/><text x="100.0697%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (18 samples, 0.16%)</title><rect x="99.8378%" y="389" width="0.1622%" height="15" fill="rgb(236,59,4)" fg:x="11076" fg:w="18"/><text x="100.0878%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (18 samples, 0.16%)</title><rect x="99.8378%" y="373" width="0.1622%" height="15" fill="rgb(254,179,45)" fg:x="11076" fg:w="18"/><text x="100.0878%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizingCompileDispatcher::CompileNext (18 samples, 0.16%)</title><rect x="99.8378%" y="357" width="0.1622%" height="15" fill="rgb(226,14,10)" fg:x="11076" fg:w="18"/><text x="100.0878%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizedCompilationJob::ExecuteJob (18 samples, 0.16%)</title><rect x="99.8378%" y="341" width="0.1622%" height="15" fill="rgb(244,27,41)" fg:x="11076" fg:w="18"/><text x="100.0878%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (18 samples, 0.16%)</title><rect x="99.8378%" y="325" width="0.1622%" height="15" fill="rgb(235,35,32)" fg:x="11076" fg:w="18"/><text x="100.0878%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::OptimizeGraph (15 samples, 0.14%)</title><rect x="99.8648%" y="309" width="0.1352%" height="15" fill="rgb(218,68,31)" fg:x="11079" fg:w="15"/><text x="100.1148%" y="319.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::SelectInstructions (5 samples, 0.05%)</title><rect x="99.9549%" y="293" width="0.0451%" height="15" fill="rgb(207,120,37)" fg:x="11089" fg:w="5"/><text x="100.2049%" y="303.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (5 samples, 0.05%)</title><rect x="99.9549%" y="277" width="0.0451%" height="15" fill="rgb(227,98,0)" fg:x="11089" fg:w="5"/><text x="100.2049%" y="287.50"></text></g></svg></svg>