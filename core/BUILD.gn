import("//build_extra/rust/rust.gni")

group("default") {
  testonly = true
  deps = [
    ":deno",
    ":deno_core_http_bench",
    ":deno_core_http_bench_test",
    ":deno_core_test",
  ]
}

group("deno_core_deps") {
  deps = [
    "libdeno:libdeno_static_lib",
    "libdeno:v8",
  ]
}

# deno does not depend on flatbuffers nor tokio.
main_extern = [
  "$rust_build:futures",
  "$rust_build:libc",
  "$rust_build:serde_json",
  "$rust_build:log",
]

rust_crate("deno") {
  source_root = "lib.rs"
  deps = [
    ":deno_core_deps",
  ]
  extern = main_extern
}

rust_test("deno_core_test") {
  source_root = "lib.rs"
  deps = [
    ":deno_core_deps",
  ]
  extern = main_extern
}

http_bench_extern = [
  "$rust_build:futures",
  "$rust_build:lazy_static",
  "$rust_build:libc",
  "$rust_build:log",
  "$rust_build:tokio",
  ":deno",
]
if (is_win) {
  http_bench_extern += [ "$rust_build:winapi" ]
}

rust_executable("deno_core_http_bench") {
  source_root = "http_bench.rs"
  deps = [
    ":deno_core_deps",
  ]
  extern = http_bench_extern
}

rust_test("deno_core_http_bench_test") {
  source_root = "http_bench.rs"
  deps = [
    ":deno_core_deps",
  ]
  extern = http_bench_extern
}

if (is_win) {
  static_lib_suffix = ".lib"
  llvm_target = "x86_64-pc-windows-msvc"
} else {
  static_lib_suffix = ".a"
}

deno_core_target_dir = "$root_out_dir/cargo_pkg/deno_core_target"

copy("deno_core_target_static_lib") {
  lib_name = "libdeno$static_lib_suffix"
  sources = [
    "$root_out_dir/obj/libdeno/$lib_name",
  ]
  outputs = [
    "$deno_core_target_dir/lib/$lib_name",
  ]
  deps = [
    "../libdeno:libdeno_static_lib",
  ]
}

action("deno_core_target") {
  script = "//tools/cargo_pkg_target.py"
  args = [
    "--root",
    rebase_path("//", root_build_dir),
    "--out",
    rebase_path(deno_core_target_dir, root_build_dir),
    "--target",
    llvm_target,
  ]
  deps = [
    ":deno_core_target_static_lib",
  ]
  outputs = [
    "$deno_core_target_dir/Cargo.toml",
  ]
}
