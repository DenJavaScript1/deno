<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="16675"><g><title>http_bench_json_ops`futures_task::noop_waker::noop (5 samples, 0.03%)</title><rect x="0.0120%" y="469" width="0.0300%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="5"/><text x="0.2620%" y="479.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.16%)</title><rect x="0.2879%" y="453" width="0.1619%" height="15" fill="rgb(217,0,24)" fg:x="48" fg:w="27"/><text x="0.5379%" y="463.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::option::Option&lt;deno_core::runtime::ModEvaluate&gt;&gt; (5 samples, 0.03%)</title><rect x="0.4558%" y="453" width="0.0300%" height="15" fill="rgb(221,193,54)" fg:x="76" fg:w="5"/><text x="0.7058%" y="463.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (3 samples, 0.02%)</title><rect x="0.4858%" y="453" width="0.0180%" height="15" fill="rgb(248,212,6)" fg:x="81" fg:w="3"/><text x="0.7358%" y="463.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::HandleScope&gt; (2 samples, 0.01%)</title><rect x="0.5037%" y="453" width="0.0120%" height="15" fill="rgb(208,68,35)" fg:x="84" fg:w="2"/><text x="0.7537%" y="463.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRealm::execute_script (2 samples, 0.01%)</title><rect x="0.5157%" y="437" width="0.0120%" height="15" fill="rgb(232,128,0)" fg:x="86" fg:w="2"/><text x="0.7657%" y="447.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::new (3 samples, 0.02%)</title><rect x="0.5157%" y="453" width="0.0180%" height="15" fill="rgb(207,160,47)" fg:x="86" fg:w="3"/><text x="0.7657%" y="463.50"></text></g><g><title>http_bench_json_ops`futures_task::noop_waker::noop (11 samples, 0.07%)</title><rect x="4.5037%" y="373" width="0.0660%" height="15" fill="rgb(228,23,34)" fg:x="751" fg:w="11"/><text x="4.7537%" y="383.50"></text></g><g><title>http_bench_json_ops`polloi::Runtime::can (114 samples, 0.68%)</title><rect x="4.5697%" y="373" width="0.6837%" height="15" fill="rgb(218,30,26)" fg:x="762" fg:w="114"/><text x="4.8197%" y="383.50"></text></g><g><title>http_bench_json_ops`polloi::Runtime::partial (12 samples, 0.07%)</title><rect x="5.2534%" y="373" width="0.0720%" height="15" fill="rgb(220,122,19)" fg:x="876" fg:w="12"/><text x="5.5034%" y="383.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (234 samples, 1.40%)</title><rect x="3.9700%" y="389" width="1.4033%" height="15" fill="rgb(250,228,42)" fg:x="662" fg:w="234"/><text x="4.2200%" y="399.50"></text></g><g><title>http_bench_json_ops`polloi::dummy_waker::clone_waker (8 samples, 0.05%)</title><rect x="5.3253%" y="373" width="0.0480%" height="15" fill="rgb(240,193,28)" fg:x="888" fg:w="8"/><text x="5.5753%" y="383.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::magic::buffer::ZeroCopyBuf as core::ops::deref::DerefMut&gt;::deref_mut (23 samples, 0.14%)</title><rect x="5.3733%" y="389" width="0.1379%" height="15" fill="rgb(216,20,37)" fg:x="896" fg:w="23"/><text x="5.6233%" y="399.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$recv (2 samples, 0.01%)</title><rect x="5.5112%" y="389" width="0.0120%" height="15" fill="rgb(206,188,39)" fg:x="919" fg:w="2"/><text x="5.7612%" y="399.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;http_bench_json_ops::TcpStream&gt;&gt; (3 samples, 0.02%)</title><rect x="5.5232%" y="389" width="0.0180%" height="15" fill="rgb(217,207,13)" fg:x="921" fg:w="3"/><text x="5.7732%" y="399.50"></text></g><g><title>http_bench_json_ops`polloi::Runtime::can (57 samples, 0.34%)</title><rect x="5.5412%" y="389" width="0.3418%" height="15" fill="rgb(231,73,38)" fg:x="924" fg:w="57"/><text x="5.7912%" y="399.50"></text></g><g><title>http_bench_json_ops`polloi::Runtime::partial (6 samples, 0.04%)</title><rect x="5.8831%" y="389" width="0.0360%" height="15" fill="rgb(225,20,46)" fg:x="981" fg:w="6"/><text x="6.1331%" y="399.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (8 samples, 0.05%)</title><rect x="5.9190%" y="389" width="0.0480%" height="15" fill="rgb(210,31,41)" fg:x="987" fg:w="8"/><text x="6.1690%" y="399.50"></text></g><g><title>libsystem_c.dylib`recv (2 samples, 0.01%)</title><rect x="5.9670%" y="389" width="0.0120%" height="15" fill="rgb(221,200,47)" fg:x="995" fg:w="2"/><text x="6.2170%" y="399.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,902 samples, 41.39%)</title><rect x="3.4063%" y="405" width="41.3913%" height="15" fill="rgb(226,26,5)" fg:x="568" fg:w="6902"/><text x="3.6563%" y="415.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as c..</text></g><g><title>libsystem_kernel.dylib`__recvfrom (6,473 samples, 38.82%)</title><rect x="5.9790%" y="389" width="38.8186%" height="15" fill="rgb(249,33,26)" fg:x="997" fg:w="6473"/><text x="6.2290%" y="399.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.02%)</title><rect x="44.9175%" y="373" width="0.0240%" height="15" fill="rgb(235,183,28)" fg:x="7490" fg:w="4"/><text x="45.1675%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (31 samples, 0.19%)</title><rect x="44.9835%" y="357" width="0.1859%" height="15" fill="rgb(221,5,38)" fg:x="7501" fg:w="31"/><text x="45.2335%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.06%)</title><rect x="45.1094%" y="341" width="0.0600%" height="15" fill="rgb(247,18,42)" fg:x="7522" fg:w="10"/><text x="45.3594%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (55 samples, 0.33%)</title><rect x="44.8456%" y="389" width="0.3298%" height="15" fill="rgb(241,131,45)" fg:x="7478" fg:w="55"/><text x="45.0956%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (39 samples, 0.23%)</title><rect x="44.9415%" y="373" width="0.2339%" height="15" fill="rgb(249,31,29)" fg:x="7494" fg:w="39"/><text x="45.1915%" y="383.50"></text></g><g><title>http_bench_json_ops`&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob (67 samples, 0.40%)</title><rect x="44.7976%" y="405" width="0.4018%" height="15" fill="rgb(225,111,53)" fg:x="7470" fg:w="67"/><text x="45.0476%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.02%)</title><rect x="45.1754%" y="389" width="0.0240%" height="15" fill="rgb(238,160,17)" fg:x="7533" fg:w="4"/><text x="45.4254%" y="399.50"></text></g><g><title>http_bench_json_ops`&lt;serde_v8::magic::buffer::ZeroCopyBuf as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="45.1994%" y="405" width="0.0120%" height="15" fill="rgb(214,148,48)" fg:x="7537" fg:w="2"/><text x="45.4494%" y="415.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob::{{closure}}&gt;&gt; (3 samples, 0.02%)</title><rect x="45.2174%" y="405" width="0.0180%" height="15" fill="rgb(232,36,49)" fg:x="7540" fg:w="3"/><text x="45.4674%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.08%)</title><rect x="45.4213%" y="389" width="0.0780%" height="15" fill="rgb(209,103,24)" fg:x="7574" fg:w="13"/><text x="45.6713%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.28%)</title><rect x="45.2414%" y="405" width="0.2759%" height="15" fill="rgb(229,88,8)" fg:x="7544" fg:w="46"/><text x="45.4914%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="45.4993%" y="389" width="0.0180%" height="15" fill="rgb(213,181,19)" fg:x="7587" fg:w="3"/><text x="45.7493%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="45.5172%" y="405" width="0.0180%" height="15" fill="rgb(254,191,54)" fg:x="7590" fg:w="3"/><text x="45.7672%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.11%)</title><rect x="45.5352%" y="405" width="0.1079%" height="15" fill="rgb(241,83,37)" fg:x="7593" fg:w="18"/><text x="45.7852%" y="415.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,218 samples, 43.29%)</title><rect x="2.3928%" y="421" width="43.2864%" height="15" fill="rgb(233,36,39)" fg:x="399" fg:w="7218"/><text x="2.6428%" y="431.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.04%)</title><rect x="45.6432%" y="405" width="0.0360%" height="15" fill="rgb(226,3,54)" fg:x="7611" fg:w="6"/><text x="45.8932%" y="415.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;http_bench_json_ops::TcpStream as deno_core::resources::Resource&gt;::read_byob::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="45.6912%" y="421" width="0.0120%" height="15" fill="rgb(245,192,40)" fg:x="7619" fg:w="2"/><text x="45.9412%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="45.7091%" y="421" width="0.0240%" height="15" fill="rgb(238,167,29)" fg:x="7622" fg:w="4"/><text x="45.9591%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.05%)</title><rect x="45.7331%" y="421" width="0.0540%" height="15" fill="rgb(232,182,51)" fg:x="7626" fg:w="9"/><text x="45.9831%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="45.7871%" y="421" width="0.0180%" height="15" fill="rgb(231,60,39)" fg:x="7635" fg:w="3"/><text x="46.0371%" y="431.50"></text></g><g><title>http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,376 samples, 44.23%)</title><rect x="1.6132%" y="437" width="44.2339%" height="15" fill="rgb(208,69,12)" fg:x="269" fg:w="7376"/><text x="1.8632%" y="447.50">http_bench_json_ops`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core:..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.04%)</title><rect x="45.8051%" y="421" width="0.0420%" height="15" fill="rgb(235,93,37)" fg:x="7638" fg:w="7"/><text x="46.0551%" y="431.50"></text></g><g><title>http_bench_json_ops`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.13%)</title><rect x="45.8471%" y="437" width="0.1259%" height="15" fill="rgb(213,116,39)" fg:x="7645" fg:w="21"/><text x="46.0971%" y="447.50"></text></g><g><title>http_bench_json_ops`core::hash::BuildHasher::hash_one (22 samples, 0.13%)</title><rect x="45.9850%" y="437" width="0.1319%" height="15" fill="rgb(222,207,29)" fg:x="7668" fg:w="22"/><text x="46.2350%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::func_op_read::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="46.1169%" y="437" width="0.0120%" height="15" fill="rgb(206,96,30)" fg:x="7690" fg:w="2"/><text x="46.3669%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (6 samples, 0.04%)</title><rect x="46.1349%" y="437" width="0.0360%" height="15" fill="rgb(218,138,4)" fg:x="7693" fg:w="6"/><text x="46.3849%" y="447.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (5 samples, 0.03%)</title><rect x="46.1709%" y="437" width="0.0300%" height="15" fill="rgb(250,191,14)" fg:x="7699" fg:w="5"/><text x="46.4209%" y="447.50"></text></g><g><title>http_bench_json_ops`deno_core::ops::OpResult::to_v8 (9 samples, 0.05%)</title><rect x="46.2009%" y="437" width="0.0540%" height="15" fill="rgb(239,60,40)" fg:x="7704" fg:w="9"/><text x="46.4509%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (8 samples, 0.05%)</title><rect x="46.2549%" y="437" width="0.0480%" height="15" fill="rgb(206,27,48)" fg:x="7713" fg:w="8"/><text x="46.5049%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::Context::Enter (2 samples, 0.01%)</title><rect x="46.3028%" y="437" width="0.0120%" height="15" fill="rgb(225,35,8)" fg:x="7721" fg:w="2"/><text x="46.5528%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (13 samples, 0.08%)</title><rect x="46.6807%" y="421" width="0.0780%" height="15" fill="rgb(250,213,24)" fg:x="7784" fg:w="13"/><text x="46.9307%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.01%)</title><rect x="46.7466%" y="405" width="0.0120%" height="15" fill="rgb(247,123,22)" fg:x="7795" fg:w="2"/><text x="46.9966%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::EscapableHandleScope::EscapableHandleScope (8 samples, 0.05%)</title><rect x="46.7586%" y="421" width="0.0480%" height="15" fill="rgb(231,138,38)" fg:x="7797" fg:w="8"/><text x="47.0086%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (7 samples, 0.04%)</title><rect x="46.8066%" y="421" width="0.0420%" height="15" fill="rgb(231,145,46)" fg:x="7805" fg:w="7"/><text x="47.0566%" y="431.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntry (12 samples, 0.07%)</title><rect x="47.0165%" y="405" width="0.0720%" height="15" fill="rgb(251,118,11)" fg:x="7840" fg:w="12"/><text x="47.2665%" y="415.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsAny (9 samples, 0.05%)</title><rect x="47.4363%" y="373" width="0.0540%" height="15" fill="rgb(217,147,25)" fg:x="7910" fg:w="9"/><text x="47.6863%" y="383.50"></text></g><g><title>http_bench_json_ops`Builtins_Call_ReceiverIsAny (2 samples, 0.01%)</title><rect x="47.4903%" y="373" width="0.0120%" height="15" fill="rgb(247,81,37)" fg:x="7919" fg:w="2"/><text x="47.7403%" y="383.50"></text></g><g><title>http_bench_json_ops`Builtins_EnqueueMicrotask (22 samples, 0.13%)</title><rect x="47.6882%" y="325" width="0.1319%" height="15" fill="rgb(209,12,38)" fg:x="7952" fg:w="22"/><text x="47.9382%" y="335.50"></text></g><g><title>http_bench_json_ops`Builtins_PromiseCapabilityDefaultResolve (102 samples, 0.61%)</title><rect x="47.5622%" y="357" width="0.6117%" height="15" fill="rgb(227,1,9)" fg:x="7931" fg:w="102"/><text x="47.8122%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_ResolvePromise (87 samples, 0.52%)</title><rect x="47.6522%" y="341" width="0.5217%" height="15" fill="rgb(248,47,43)" fg:x="7946" fg:w="87"/><text x="47.9022%" y="351.50"></text></g><g><title>http_bench_json_ops`Builtins_FulfillPromise (59 samples, 0.35%)</title><rect x="47.8201%" y="325" width="0.3538%" height="15" fill="rgb(221,10,30)" fg:x="7974" fg:w="59"/><text x="48.0701%" y="335.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntryTrampoline (113 samples, 0.68%)</title><rect x="47.5022%" y="373" width="0.6777%" height="15" fill="rgb(210,229,1)" fg:x="7921" fg:w="113"/><text x="47.7522%" y="383.50"></text></g><g><title>http_bench_json_ops`Builtins_JSEntry (138 samples, 0.83%)</title><rect x="47.3703%" y="389" width="0.8276%" height="15" fill="rgb(222,148,37)" fg:x="7899" fg:w="138"/><text x="47.6203%" y="399.50"></text></g><g><title>http_bench_json_ops`Builtins_PromiseCapabilityDefaultResolve (3 samples, 0.02%)</title><rect x="48.1799%" y="373" width="0.0180%" height="15" fill="rgb(234,67,33)" fg:x="8034" fg:w="3"/><text x="48.4299%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (190 samples, 1.14%)</title><rect x="47.0885%" y="405" width="1.1394%" height="15" fill="rgb(247,98,35)" fg:x="7852" fg:w="190"/><text x="47.3385%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::SaveContext::SaveContext (5 samples, 0.03%)</title><rect x="48.1979%" y="389" width="0.0300%" height="15" fill="rgb(247,138,52)" fg:x="8037" fg:w="5"/><text x="48.4479%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::AllowJavascriptExecution::IsAllowed (3 samples, 0.02%)</title><rect x="48.2279%" y="405" width="0.0180%" height="15" fill="rgb(213,79,30)" fg:x="8042" fg:w="3"/><text x="48.4779%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtins::code_handle (4 samples, 0.02%)</title><rect x="48.2459%" y="405" width="0.0240%" height="15" fill="rgb(246,177,23)" fg:x="8045" fg:w="4"/><text x="48.4959%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::SaveContext::~SaveContext (4 samples, 0.02%)</title><rect x="48.2759%" y="405" width="0.0240%" height="15" fill="rgb(230,62,27)" fg:x="8050" fg:w="4"/><text x="48.5259%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScopeInfo::is_script_scope (8 samples, 0.05%)</title><rect x="48.2999%" y="405" width="0.0480%" height="15" fill="rgb(216,154,8)" fg:x="8054" fg:w="8"/><text x="48.5499%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (251 samples, 1.51%)</title><rect x="46.8486%" y="421" width="1.5052%" height="15" fill="rgb(244,35,45)" fg:x="7812" fg:w="251"/><text x="47.0986%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::InterruptsScope::InterruptsScope (5 samples, 0.03%)</title><rect x="48.3538%" y="421" width="0.0300%" height="15" fill="rgb(251,115,12)" fg:x="8063" fg:w="5"/><text x="48.6038%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::Isolate::SuppressMicrotaskExecutionScope::SuppressMicrotaskExecutionScope (5 samples, 0.03%)</title><rect x="48.4918%" y="389" width="0.0300%" height="15" fill="rgb(240,54,50)" fg:x="8086" fg:w="5"/><text x="48.7418%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::Isolate::SuppressMicrotaskExecutionScope::~SuppressMicrotaskExecutionScope (3 samples, 0.02%)</title><rect x="48.5217%" y="389" width="0.0180%" height="15" fill="rgb(233,84,52)" fg:x="8091" fg:w="3"/><text x="48.7717%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (12 samples, 0.07%)</title><rect x="48.7736%" y="357" width="0.0720%" height="15" fill="rgb(207,117,47)" fg:x="8133" fg:w="12"/><text x="49.0236%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (11 samples, 0.07%)</title><rect x="48.8456%" y="357" width="0.0660%" height="15" fill="rgb(249,43,39)" fg:x="8145" fg:w="11"/><text x="49.0956%" y="367.50"></text></g><g><title>http_bench_json_ops`Builtins_JSRunMicrotasksEntry (9 samples, 0.05%)</title><rect x="48.9595%" y="341" width="0.0540%" height="15" fill="rgb(209,38,44)" fg:x="8164" fg:w="9"/><text x="49.2095%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::TryCatch (7 samples, 0.04%)</title><rect x="49.0135%" y="341" width="0.0420%" height="15" fill="rgb(236,212,23)" fg:x="8173" fg:w="7"/><text x="49.2635%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::GetCurrentStackPosition (2 samples, 0.01%)</title><rect x="49.0435%" y="325" width="0.0120%" height="15" fill="rgb(242,79,21)" fg:x="8178" fg:w="2"/><text x="49.2935%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::TryCatch::~TryCatch (3 samples, 0.02%)</title><rect x="49.0555%" y="341" width="0.0180%" height="15" fill="rgb(211,96,35)" fg:x="8180" fg:w="3"/><text x="49.3055%" y="351.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure (4 samples, 0.02%)</title><rect x="49.6552%" y="293" width="0.0240%" height="15" fill="rgb(253,215,40)" fg:x="8280" fg:w="4"/><text x="49.9052%" y="303.50"></text></g><g><title>http_bench_json_ops`Builtins_CallFunction_ReceiverIsNullOrUndefined (5 samples, 0.03%)</title><rect x="49.6792%" y="293" width="0.0300%" height="15" fill="rgb(211,81,21)" fg:x="8284" fg:w="5"/><text x="49.9292%" y="303.50"></text></g><g><title>http_bench_json_ops`Builtins_Call_ReceiverIsNullOrUndefined (4 samples, 0.02%)</title><rect x="49.7091%" y="293" width="0.0240%" height="15" fill="rgb(208,190,38)" fg:x="8289" fg:w="4"/><text x="49.9591%" y="303.50"></text></g><g><title>0x11000b0d0 (2 samples, 0.01%)</title><rect x="49.8891%" y="261" width="0.0120%" height="15" fill="rgb(235,213,38)" fg:x="8319" fg:w="2"/><text x="50.1391%" y="271.50"></text></g><g><title>0x11000b27c (9 samples, 0.05%)</title><rect x="49.9010%" y="261" width="0.0540%" height="15" fill="rgb(237,122,38)" fg:x="8321" fg:w="9"/><text x="50.1510%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (9 samples, 0.05%)</title><rect x="49.9010%" y="245" width="0.0540%" height="15" fill="rgb(244,218,35)" fg:x="8321" fg:w="9"/><text x="50.1510%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtin_HandleApiCall (9 samples, 0.05%)</title><rect x="49.9010%" y="229" width="0.0540%" height="15" fill="rgb(240,68,47)" fg:x="8321" fg:w="9"/><text x="50.1510%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (9 samples, 0.05%)</title><rect x="49.9010%" y="213" width="0.0540%" height="15" fill="rgb(210,16,53)" fg:x="8321" fg:w="9"/><text x="50.1510%" y="223.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (9 samples, 0.05%)</title><rect x="49.9010%" y="197" width="0.0540%" height="15" fill="rgb(235,124,12)" fg:x="8321" fg:w="9"/><text x="50.1510%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (9 samples, 0.05%)</title><rect x="49.9010%" y="181" width="0.0540%" height="15" fill="rgb(224,169,11)" fg:x="8321" fg:w="9"/><text x="50.1510%" y="191.50"></text></g><g><title>0x11000cd98 (3 samples, 0.02%)</title><rect x="49.9670%" y="261" width="0.0180%" height="15" fill="rgb(250,166,2)" fg:x="8332" fg:w="3"/><text x="50.2170%" y="271.50"></text></g><g><title>0x11000cddc (4 samples, 0.02%)</title><rect x="49.9850%" y="261" width="0.0240%" height="15" fill="rgb(242,216,29)" fg:x="8335" fg:w="4"/><text x="50.2350%" y="271.50"></text></g><g><title>0x11000ced4 (2 samples, 0.01%)</title><rect x="50.0090%" y="261" width="0.0120%" height="15" fill="rgb(230,116,27)" fg:x="8339" fg:w="2"/><text x="50.2590%" y="271.50"></text></g><g><title>0x11000cf20 (2 samples, 0.01%)</title><rect x="50.0330%" y="261" width="0.0120%" height="15" fill="rgb(228,99,48)" fg:x="8343" fg:w="2"/><text x="50.2830%" y="271.50"></text></g><g><title>0x11000cfc4 (2 samples, 0.01%)</title><rect x="50.0510%" y="261" width="0.0120%" height="15" fill="rgb(253,11,6)" fg:x="8346" fg:w="2"/><text x="50.3010%" y="271.50"></text></g><g><title>0x11000cfe8 (13 samples, 0.08%)</title><rect x="50.0630%" y="261" width="0.0780%" height="15" fill="rgb(247,143,39)" fg:x="8348" fg:w="13"/><text x="50.3130%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (13 samples, 0.08%)</title><rect x="50.0630%" y="245" width="0.0780%" height="15" fill="rgb(236,97,10)" fg:x="8348" fg:w="13"/><text x="50.3130%" y="255.50"></text></g><g><title>0x11000cff8 (4 samples, 0.02%)</title><rect x="50.1409%" y="261" width="0.0240%" height="15" fill="rgb(233,208,19)" fg:x="8361" fg:w="4"/><text x="50.3909%" y="271.50"></text></g><g><title>0x11000d034 (3 samples, 0.02%)</title><rect x="50.1889%" y="261" width="0.0180%" height="15" fill="rgb(216,164,2)" fg:x="8369" fg:w="3"/><text x="50.4389%" y="271.50"></text></g><g><title>0x11000d068 (5 samples, 0.03%)</title><rect x="50.2129%" y="261" width="0.0300%" height="15" fill="rgb(220,129,5)" fg:x="8373" fg:w="5"/><text x="50.4629%" y="271.50"></text></g><g><title>0x11000d084 (3 samples, 0.02%)</title><rect x="50.2489%" y="261" width="0.0180%" height="15" fill="rgb(242,17,10)" fg:x="8379" fg:w="3"/><text x="50.4989%" y="271.50"></text></g><g><title>0x11000d0bc (2 samples, 0.01%)</title><rect x="50.2669%" y="261" width="0.0120%" height="15" fill="rgb(242,107,0)" fg:x="8382" fg:w="2"/><text x="50.5169%" y="271.50"></text></g><g><title>0x11000d0f0 (3 samples, 0.02%)</title><rect x="50.2909%" y="261" width="0.0180%" height="15" fill="rgb(251,28,31)" fg:x="8386" fg:w="3"/><text x="50.5409%" y="271.50"></text></g><g><title>0x11000d130 (8 samples, 0.05%)</title><rect x="50.3208%" y="261" width="0.0480%" height="15" fill="rgb(233,223,10)" fg:x="8391" fg:w="8"/><text x="50.5708%" y="271.50"></text></g><g><title>http_bench_json_ops`&lt;T as core::any::Any&gt;::type_id (4 samples, 0.02%)</title><rect x="50.4288%" y="229" width="0.0240%" height="15" fill="rgb(215,21,27)" fg:x="8409" fg:w="4"/><text x="50.6788%" y="239.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;http_bench_json_ops::TcpStream&gt;&gt; (2 samples, 0.01%)</title><rect x="50.4528%" y="229" width="0.0120%" height="15" fill="rgb(232,23,21)" fg:x="8413" fg:w="2"/><text x="50.7028%" y="239.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write::call (112 samples, 0.67%)</title><rect x="50.4648%" y="229" width="0.6717%" height="15" fill="rgb(244,5,23)" fg:x="8415" fg:w="112"/><text x="50.7148%" y="239.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;http_bench_json_ops::TcpStream&gt;&gt; (3 samples, 0.02%)</title><rect x="51.1184%" y="213" width="0.0180%" height="15" fill="rgb(226,81,46)" fg:x="8524" fg:w="3"/><text x="51.3684%" y="223.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (2 samples, 0.01%)</title><rect x="51.1364%" y="229" width="0.0120%" height="15" fill="rgb(247,70,30)" fg:x="8527" fg:w="2"/><text x="51.3864%" y="239.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::func_op_try_write (6,923 samples, 41.52%)</title><rect x="50.3808%" y="245" width="41.5172%" height="15" fill="rgb(212,68,19)" fg:x="8401" fg:w="6923"/><text x="50.6308%" y="255.50">http_bench_json_ops`http_bench_json_ops::func_op_try_write</text></g><g><title>libsystem_kernel.dylib`__sendto (6,795 samples, 40.75%)</title><rect x="51.1484%" y="229" width="40.7496%" height="15" fill="rgb(240,187,13)" fg:x="8529" fg:w="6795"/><text x="51.3984%" y="239.50">libsystem_kernel.dylib`__sendto</text></g><g><title>http_bench_json_ops`http_bench_json_ops::op_try_write::call (3 samples, 0.02%)</title><rect x="91.8981%" y="245" width="0.0180%" height="15" fill="rgb(223,113,26)" fg:x="15324" fg:w="3"/><text x="92.1481%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::External::Value (2 samples, 0.01%)</title><rect x="91.9160%" y="245" width="0.0120%" height="15" fill="rgb(206,192,2)" fg:x="15327" fg:w="2"/><text x="92.1660%" y="255.50"></text></g><g><title>0x11000d138 (6,931 samples, 41.57%)</title><rect x="50.3688%" y="261" width="41.5652%" height="15" fill="rgb(241,108,4)" fg:x="8399" fg:w="6931"/><text x="50.6188%" y="271.50">0x11000d138</text></g><g><title>0x11000d13c (2 samples, 0.01%)</title><rect x="91.9340%" y="261" width="0.0120%" height="15" fill="rgb(247,173,49)" fg:x="15330" fg:w="2"/><text x="92.1840%" y="271.50"></text></g><g><title>0x11000d168 (2 samples, 0.01%)</title><rect x="91.9460%" y="261" width="0.0120%" height="15" fill="rgb(224,114,35)" fg:x="15332" fg:w="2"/><text x="92.1960%" y="271.50"></text></g><g><title>0x11000d294 (7 samples, 0.04%)</title><rect x="91.9880%" y="261" width="0.0420%" height="15" fill="rgb(245,159,27)" fg:x="15339" fg:w="7"/><text x="92.2380%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (7 samples, 0.04%)</title><rect x="91.9880%" y="245" width="0.0420%" height="15" fill="rgb(245,172,44)" fg:x="15339" fg:w="7"/><text x="92.2380%" y="255.50"></text></g><g><title>0x11000d2d8 (11 samples, 0.07%)</title><rect x="92.0420%" y="261" width="0.0660%" height="15" fill="rgb(236,23,11)" fg:x="15348" fg:w="11"/><text x="92.2920%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (11 samples, 0.07%)</title><rect x="92.0420%" y="245" width="0.0660%" height="15" fill="rgb(205,117,38)" fg:x="15348" fg:w="11"/><text x="92.2920%" y="255.50"></text></g><g><title>0x11000d3ac (2 samples, 0.01%)</title><rect x="92.1079%" y="261" width="0.0120%" height="15" fill="rgb(237,72,25)" fg:x="15359" fg:w="2"/><text x="92.3579%" y="271.50"></text></g><g><title>0x11000d3f4 (4 samples, 0.02%)</title><rect x="92.1199%" y="261" width="0.0240%" height="15" fill="rgb(244,70,9)" fg:x="15361" fg:w="4"/><text x="92.3699%" y="271.50"></text></g><g><title>0x11000d434 (4 samples, 0.02%)</title><rect x="92.1499%" y="261" width="0.0240%" height="15" fill="rgb(217,125,39)" fg:x="15366" fg:w="4"/><text x="92.3999%" y="271.50"></text></g><g><title>0x11000d454 (3 samples, 0.02%)</title><rect x="92.1739%" y="261" width="0.0180%" height="15" fill="rgb(235,36,10)" fg:x="15370" fg:w="3"/><text x="92.4239%" y="271.50"></text></g><g><title>0x11000d458 (3 samples, 0.02%)</title><rect x="92.1919%" y="261" width="0.0180%" height="15" fill="rgb(251,123,47)" fg:x="15373" fg:w="3"/><text x="92.4419%" y="271.50"></text></g><g><title>0x11000d478 (2 samples, 0.01%)</title><rect x="92.2159%" y="261" width="0.0120%" height="15" fill="rgb(221,13,13)" fg:x="15377" fg:w="2"/><text x="92.4659%" y="271.50"></text></g><g><title>0x11000d4d4 (2 samples, 0.01%)</title><rect x="92.2279%" y="261" width="0.0120%" height="15" fill="rgb(238,131,9)" fg:x="15379" fg:w="2"/><text x="92.4779%" y="271.50"></text></g><g><title>0x11000d4f8 (2 samples, 0.01%)</title><rect x="92.2399%" y="261" width="0.0120%" height="15" fill="rgb(211,50,8)" fg:x="15381" fg:w="2"/><text x="92.4899%" y="271.50"></text></g><g><title>0x11000d590 (39 samples, 0.23%)</title><rect x="92.2579%" y="261" width="0.2339%" height="15" fill="rgb(245,182,24)" fg:x="15384" fg:w="39"/><text x="92.5079%" y="271.50"></text></g><g><title>http_bench_json_ops`DYLD-STUB$$malloc (12 samples, 0.07%)</title><rect x="92.4918%" y="245" width="0.0720%" height="15" fill="rgb(242,14,37)" fg:x="15423" fg:w="12"/><text x="92.7418%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="92.8396%" y="229" width="0.0180%" height="15" fill="rgb(246,228,12)" fg:x="15481" fg:w="3"/><text x="93.0896%" y="239.50"></text></g><g><title>http_bench_json_ops`v8__Global__New (22 samples, 0.13%)</title><rect x="92.8636%" y="229" width="0.1319%" height="15" fill="rgb(213,55,15)" fg:x="15485" fg:w="22"/><text x="93.1136%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::Create (14 samples, 0.08%)</title><rect x="92.9115%" y="213" width="0.0840%" height="15" fill="rgb(209,9,3)" fg:x="15493" fg:w="14"/><text x="93.1615%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="93.0855%" y="213" width="0.0180%" height="15" fill="rgb(230,59,30)" fg:x="15522" fg:w="3"/><text x="93.3355%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (36 samples, 0.22%)</title><rect x="93.1454%" y="197" width="0.2159%" height="15" fill="rgb(209,121,21)" fg:x="15532" fg:w="36"/><text x="93.3954%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.11%)</title><rect x="93.2474%" y="181" width="0.1139%" height="15" fill="rgb(220,109,13)" fg:x="15549" fg:w="19"/><text x="93.4974%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (62 samples, 0.37%)</title><rect x="92.9955%" y="229" width="0.3718%" height="15" fill="rgb(232,18,1)" fg:x="15507" fg:w="62"/><text x="93.2455%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (44 samples, 0.26%)</title><rect x="93.1034%" y="213" width="0.2639%" height="15" fill="rgb(215,41,42)" fg:x="15525" fg:w="44"/><text x="93.3534%" y="223.50"></text></g><g><title>http_bench_json_ops`deno_core::ops_builtin::func_op_read (139 samples, 0.83%)</title><rect x="92.5637%" y="245" width="0.8336%" height="15" fill="rgb(224,123,36)" fg:x="15435" fg:w="139"/><text x="92.8137%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.03%)</title><rect x="93.3673%" y="229" width="0.0300%" height="15" fill="rgb(240,125,3)" fg:x="15569" fg:w="5"/><text x="93.6173%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::External::Value (3 samples, 0.02%)</title><rect x="93.3973%" y="245" width="0.0180%" height="15" fill="rgb(205,98,50)" fg:x="15574" fg:w="3"/><text x="93.6473%" y="255.50"></text></g><g><title>http_bench_json_ops`v8__Global__New (2 samples, 0.01%)</title><rect x="93.4153%" y="245" width="0.0120%" height="15" fill="rgb(205,185,37)" fg:x="15577" fg:w="2"/><text x="93.6653%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="93.4273%" y="245" width="0.0180%" height="15" fill="rgb(238,207,15)" fg:x="15579" fg:w="3"/><text x="93.6773%" y="255.50"></text></g><g><title>0x11000d598 (167 samples, 1.00%)</title><rect x="92.4918%" y="261" width="1.0015%" height="15" fill="rgb(213,199,42)" fg:x="15423" fg:w="167"/><text x="92.7418%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.05%)</title><rect x="93.4453%" y="245" width="0.0480%" height="15" fill="rgb(235,201,11)" fg:x="15582" fg:w="8"/><text x="93.6953%" y="255.50"></text></g><g><title>0x11000d5b4 (2 samples, 0.01%)</title><rect x="93.4933%" y="261" width="0.0120%" height="15" fill="rgb(207,46,11)" fg:x="15590" fg:w="2"/><text x="93.7433%" y="271.50"></text></g><g><title>0x11000d5c8 (5 samples, 0.03%)</title><rect x="93.5052%" y="261" width="0.0300%" height="15" fill="rgb(241,35,35)" fg:x="15592" fg:w="5"/><text x="93.7552%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitUncaught (113 samples, 0.68%)</title><rect x="93.5352%" y="245" width="0.6777%" height="15" fill="rgb(243,32,47)" fg:x="15597" fg:w="113"/><text x="93.7852%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_PerformPromiseThen (58 samples, 0.35%)</title><rect x="93.8651%" y="229" width="0.3478%" height="15" fill="rgb(247,202,23)" fg:x="15652" fg:w="58"/><text x="94.1151%" y="239.50"></text></g><g><title>0x11000d5d0 (114 samples, 0.68%)</title><rect x="93.5352%" y="261" width="0.6837%" height="15" fill="rgb(219,102,11)" fg:x="15597" fg:w="114"/><text x="93.7852%" y="271.50"></text></g><g><title>0x11000d648 (4 samples, 0.02%)</title><rect x="94.2309%" y="261" width="0.0240%" height="15" fill="rgb(243,110,44)" fg:x="15713" fg:w="4"/><text x="94.4809%" y="271.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (4 samples, 0.02%)</title><rect x="94.2909%" y="101" width="0.0240%" height="15" fill="rgb(222,74,54)" fg:x="15723" fg:w="4"/><text x="94.5409%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (3 samples, 0.02%)</title><rect x="94.3208%" y="101" width="0.0180%" height="15" fill="rgb(216,99,12)" fg:x="15728" fg:w="3"/><text x="94.5708%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::CompactionSpaceCollection::CompactionSpaceCollection (2 samples, 0.01%)</title><rect x="94.3268%" y="85" width="0.0120%" height="15" fill="rgb(226,22,26)" fg:x="15729" fg:w="2"/><text x="94.5768%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::~Scavenger (2 samples, 0.01%)</title><rect x="94.3388%" y="101" width="0.0120%" height="15" fill="rgb(217,163,10)" fg:x="15731" fg:w="2"/><text x="94.5888%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::CompactionSpaceCollection::~CompactionSpaceCollection (2 samples, 0.01%)</title><rect x="94.3388%" y="85" width="0.0120%" height="15" fill="rgb(213,25,53)" fg:x="15731" fg:w="2"/><text x="94.5888%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::PagedSpace::~PagedSpace (2 samples, 0.01%)</title><rect x="94.3388%" y="69" width="0.0120%" height="15" fill="rgb(252,105,26)" fg:x="15731" fg:w="2"/><text x="94.5888%" y="79.50"></text></g><g><title>http_bench_json_ops`heap::base::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.01%)</title><rect x="94.3508%" y="37" width="0.0120%" height="15" fill="rgb(220,39,43)" fg:x="15733" fg:w="2"/><text x="94.6008%" y="47.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobState::Join (4 samples, 0.02%)</title><rect x="94.3508%" y="85" width="0.0240%" height="15" fill="rgb(229,68,48)" fg:x="15733" fg:w="4"/><text x="94.6008%" y="95.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::JobTask::ProcessItems (4 samples, 0.02%)</title><rect x="94.3508%" y="69" width="0.0240%" height="15" fill="rgb(252,8,32)" fg:x="15733" fg:w="4"/><text x="94.6008%" y="79.50"></text></g><g><title>http_bench_json_ops`v8::internal::Scavenger::Process (4 samples, 0.02%)</title><rect x="94.3508%" y="53" width="0.0240%" height="15" fill="rgb(223,20,43)" fg:x="15733" fg:w="4"/><text x="94.6008%" y="63.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultJobHandle::Join (6 samples, 0.04%)</title><rect x="94.3508%" y="101" width="0.0360%" height="15" fill="rgb(229,81,49)" fg:x="15733" fg:w="6"/><text x="94.6008%" y="111.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::PerformGarbageCollection (19 samples, 0.11%)</title><rect x="94.2789%" y="149" width="0.1139%" height="15" fill="rgb(236,28,36)" fg:x="15721" fg:w="19"/><text x="94.5289%" y="159.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::Scavenge (19 samples, 0.11%)</title><rect x="94.2789%" y="133" width="0.1139%" height="15" fill="rgb(249,185,26)" fg:x="15721" fg:w="19"/><text x="94.5289%" y="143.50"></text></g><g><title>http_bench_json_ops`v8::internal::ScavengerCollector::CollectGarbage (19 samples, 0.11%)</title><rect x="94.2789%" y="117" width="0.1139%" height="15" fill="rgb(249,174,33)" fg:x="15721" fg:w="19"/><text x="94.5289%" y="127.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (22 samples, 0.13%)</title><rect x="94.2669%" y="197" width="0.1319%" height="15" fill="rgb(233,201,37)" fg:x="15719" fg:w="22"/><text x="94.5169%" y="207.50"></text></g><g><title>http_bench_json_ops`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (22 samples, 0.13%)</title><rect x="94.2669%" y="181" width="0.1319%" height="15" fill="rgb(221,78,26)" fg:x="15719" fg:w="22"/><text x="94.5169%" y="191.50"></text></g><g><title>http_bench_json_ops`v8::internal::Heap::CollectGarbage (22 samples, 0.13%)</title><rect x="94.2669%" y="165" width="0.1319%" height="15" fill="rgb(250,127,30)" fg:x="15719" fg:w="22"/><text x="94.5169%" y="175.50"></text></g><g><title>http_bench_json_ops`v8::internal::SemiSpaceNewSpace::EnsureAllocation (2 samples, 0.01%)</title><rect x="94.4108%" y="197" width="0.0120%" height="15" fill="rgb(230,49,44)" fg:x="15743" fg:w="2"/><text x="94.6608%" y="207.50"></text></g><g><title>http_bench_json_ops`v8::internal::Factory::NewFillerObject (29 samples, 0.17%)</title><rect x="94.2549%" y="213" width="0.1739%" height="15" fill="rgb(229,67,23)" fg:x="15717" fg:w="29"/><text x="94.5049%" y="223.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (30 samples, 0.18%)</title><rect x="94.2549%" y="245" width="0.1799%" height="15" fill="rgb(249,83,47)" fg:x="15717" fg:w="30"/><text x="94.5049%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::Runtime_AllocateInYoungGeneration (30 samples, 0.18%)</title><rect x="94.2549%" y="229" width="0.1799%" height="15" fill="rgb(215,43,3)" fg:x="15717" fg:w="30"/><text x="94.5049%" y="239.50"></text></g><g><title>0x11000d8f8 (31 samples, 0.19%)</title><rect x="94.2549%" y="261" width="0.1859%" height="15" fill="rgb(238,154,13)" fg:x="15717" fg:w="31"/><text x="94.5049%" y="271.50"></text></g><g><title>0x11000d9f4 (3 samples, 0.02%)</title><rect x="94.4408%" y="261" width="0.0180%" height="15" fill="rgb(219,56,2)" fg:x="15748" fg:w="3"/><text x="94.6908%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (4 samples, 0.02%)</title><rect x="94.4648%" y="245" width="0.0240%" height="15" fill="rgb(233,0,4)" fg:x="15752" fg:w="4"/><text x="94.7148%" y="255.50"></text></g><g><title>http_bench_json_ops`v8::internal::Builtin_HandleApiCall (4 samples, 0.02%)</title><rect x="94.4648%" y="229" width="0.0240%" height="15" fill="rgb(235,30,7)" fg:x="15752" fg:w="4"/><text x="94.7148%" y="239.50"></text></g><g><title>http_bench_json_ops`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (4 samples, 0.02%)</title><rect x="94.4648%" y="213" width="0.0240%" height="15" fill="rgb(250,79,13)" fg:x="15752" fg:w="4"/><text x="94.7148%" y="223.50"></text></g><g><title>http_bench_json_ops`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (4 samples, 0.02%)</title><rect x="94.4648%" y="197" width="0.0240%" height="15" fill="rgb(211,146,34)" fg:x="15752" fg:w="4"/><text x="94.7148%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (3 samples, 0.02%)</title><rect x="94.4708%" y="181" width="0.0180%" height="15" fill="rgb(228,22,38)" fg:x="15753" fg:w="3"/><text x="94.7208%" y="191.50"></text></g><g><title>http_bench_json_ops`Builtins_InterpreterEntryTrampoline (3 samples, 0.02%)</title><rect x="94.4888%" y="229" width="0.0180%" height="15" fill="rgb(235,168,5)" fg:x="15756" fg:w="3"/><text x="94.7388%" y="239.50"></text></g><g><title>http_bench_json_ops`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="94.4948%" y="213" width="0.0120%" height="15" fill="rgb(221,155,16)" fg:x="15757" fg:w="2"/><text x="94.7448%" y="223.50"></text></g><g><title>http_bench_json_ops`Builtins_ConstructHandler (2 samples, 0.01%)</title><rect x="94.4948%" y="197" width="0.0120%" height="15" fill="rgb(215,215,53)" fg:x="15757" fg:w="2"/><text x="94.7448%" y="207.50"></text></g><g><title>http_bench_json_ops`Builtins_JSBuiltinsConstructStub (2 samples, 0.01%)</title><rect x="94.4948%" y="181" width="0.0120%" height="15" fill="rgb(223,4,10)" fg:x="15757" fg:w="2"/><text x="94.7448%" y="191.50"></text></g><g><title>http_bench_json_ops`Builtins_InterpreterEntryTrampoline (4 samples, 0.02%)</title><rect x="94.4888%" y="245" width="0.0240%" height="15" fill="rgb(234,103,6)" fg:x="15756" fg:w="4"/><text x="94.7388%" y="255.50"></text></g><g><title>http_bench_json_ops`Builtins_InterpreterEntryTrampoline (9 samples, 0.05%)</title><rect x="94.4648%" y="261" width="0.0540%" height="15" fill="rgb(227,97,0)" fg:x="15752" fg:w="9"/><text x="94.7148%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadIC (20 samples, 0.12%)</title><rect x="94.5187%" y="261" width="0.1199%" height="15" fill="rgb(234,150,53)" fg:x="15761" fg:w="20"/><text x="94.7687%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_LoadICTrampoline (4 samples, 0.02%)</title><rect x="94.6387%" y="261" width="0.0240%" height="15" fill="rgb(228,201,54)" fg:x="15781" fg:w="4"/><text x="94.8887%" y="271.50"></text></g><g><title>http_bench_json_ops`deno_core::ops_builtin::func_op_read (5 samples, 0.03%)</title><rect x="94.6627%" y="261" width="0.0300%" height="15" fill="rgb(222,22,37)" fg:x="15785" fg:w="5"/><text x="94.9127%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure (7,494 samples, 44.94%)</title><rect x="49.7931%" y="277" width="44.9415%" height="15" fill="rgb(237,53,32)" fg:x="8303" fg:w="7494"/><text x="50.0431%" y="287.50">http_bench_json_ops`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>http_bench_json_ops`http_bench_json_ops::func_op_try_write (7 samples, 0.04%)</title><rect x="94.6927%" y="261" width="0.0420%" height="15" fill="rgb(233,25,53)" fg:x="15790" fg:w="7"/><text x="94.9427%" y="271.50"></text></g><g><title>http_bench_json_ops`Builtins_JSRunMicrotasksEntry (7,574 samples, 45.42%)</title><rect x="49.3913%" y="325" width="45.4213%" height="15" fill="rgb(210,40,34)" fg:x="8236" fg:w="7574"/><text x="49.6413%" y="335.50">http_bench_json_ops`Builtins_JSRunMicrotasksEntry</text></g><g><title>http_bench_json_ops`Builtins_RunMicrotasks (7,565 samples, 45.37%)</title><rect x="49.4453%" y="309" width="45.3673%" height="15" fill="rgb(241,220,44)" fg:x="8245" fg:w="7565"/><text x="49.6953%" y="319.50">http_bench_json_ops`Builtins_RunMicrotasks</text></g><g><title>http_bench_json_ops`Builtins_PromiseFulfillReactionJob (7,517 samples, 45.08%)</title><rect x="49.7331%" y="293" width="45.0795%" height="15" fill="rgb(235,28,35)" fg:x="8293" fg:w="7517"/><text x="49.9831%" y="303.50">http_bench_json_ops`Builtins_PromiseFulfillReactionJob</text></g><g><title>http_bench_json_ops`Builtins_ResumeGeneratorTrampoline (13 samples, 0.08%)</title><rect x="94.7346%" y="277" width="0.0780%" height="15" fill="rgb(210,56,17)" fg:x="15797" fg:w="13"/><text x="94.9846%" y="287.50"></text></g><g><title>http_bench_json_ops`Builtins_RunMicrotasksTrampoline (2 samples, 0.01%)</title><rect x="94.8186%" y="325" width="0.0120%" height="15" fill="rgb(224,130,29)" fg:x="15811" fg:w="2"/><text x="95.0686%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (7,633 samples, 45.78%)</title><rect x="49.0735%" y="341" width="45.7751%" height="15" fill="rgb(235,212,8)" fg:x="8183" fg:w="7633"/><text x="49.3235%" y="351.50">http_bench_json_ops`v8::internal::(anonymous namespace)::Invoke(v8::interna..</text></g><g><title>http_bench_json_ops`v8::internal::SaveContext::SaveContext (3 samples, 0.02%)</title><rect x="94.8306%" y="325" width="0.0180%" height="15" fill="rgb(223,33,50)" fg:x="15813" fg:w="3"/><text x="95.0806%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::AllowJavascriptExecution::IsAllowed (3 samples, 0.02%)</title><rect x="94.8486%" y="341" width="0.0180%" height="15" fill="rgb(219,149,13)" fg:x="15816" fg:w="3"/><text x="95.0986%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::DumpOnJavascriptExecution::IsAllowed (2 samples, 0.01%)</title><rect x="94.8726%" y="341" width="0.0120%" height="15" fill="rgb(250,156,29)" fg:x="15820" fg:w="2"/><text x="95.1226%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::Isolate::RegisterTryCatchHandler (2 samples, 0.01%)</title><rect x="94.8846%" y="341" width="0.0120%" height="15" fill="rgb(216,193,19)" fg:x="15822" fg:w="2"/><text x="95.1346%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::SaveContext::SaveContext (2 samples, 0.01%)</title><rect x="94.9025%" y="341" width="0.0120%" height="15" fill="rgb(216,135,14)" fg:x="15825" fg:w="2"/><text x="95.1525%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal (7,756 samples, 46.51%)</title><rect x="48.4138%" y="405" width="46.5127%" height="15" fill="rgb(241,47,5)" fg:x="8073" fg:w="7756"/><text x="48.6638%" y="415.50">http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (7,735 samples, 46.39%)</title><rect x="48.5397%" y="389" width="46.3868%" height="15" fill="rgb(233,42,35)" fg:x="8094" fg:w="7735"/><text x="48.7897%" y="399.50">http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>http_bench_json_ops`v8::internal::Execution::TryRunMicrotasks (7,708 samples, 46.22%)</title><rect x="48.7016%" y="373" width="46.2249%" height="15" fill="rgb(231,13,6)" fg:x="8121" fg:w="7708"/><text x="48.9516%" y="383.50">http_bench_json_ops`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>http_bench_json_ops`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (7,673 samples, 46.01%)</title><rect x="48.9115%" y="357" width="46.0150%" height="15" fill="rgb(207,181,40)" fg:x="8156" fg:w="7673"/><text x="49.1615%" y="367.50">http_bench_json_ops`v8::internal::(anonymous namespace)::InvokeWithTryCatch..</text></g><g><title>http_bench_json_ops`v8::internal::Isolate::FireCallCompletedCallbackInternal (7,763 samples, 46.55%)</title><rect x="48.3838%" y="421" width="46.5547%" height="15" fill="rgb(254,173,49)" fg:x="8068" fg:w="7763"/><text x="48.6338%" y="431.50">http_bench_json_ops`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.01%)</title><rect x="94.9265%" y="405" width="0.0120%" height="15" fill="rgb(221,1,38)" fg:x="15829" fg:w="2"/><text x="95.1765%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (8,108 samples, 48.62%)</title><rect x="46.3208%" y="437" width="48.6237%" height="15" fill="rgb(206,124,46)" fg:x="7724" fg:w="8108"/><text x="46.5708%" y="447.50">http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Val..</text></g><g><title>http_bench_json_ops`v8::base::Mutex::Lock (3 samples, 0.02%)</title><rect x="94.9445%" y="437" width="0.0180%" height="15" fill="rgb(249,21,11)" fg:x="15832" fg:w="3"/><text x="95.1945%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (2 samples, 0.01%)</title><rect x="94.9625%" y="437" width="0.0120%" height="15" fill="rgb(222,201,40)" fg:x="15835" fg:w="2"/><text x="95.2125%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (9 samples, 0.05%)</title><rect x="94.9745%" y="437" width="0.0540%" height="15" fill="rgb(235,61,29)" fg:x="15837" fg:w="9"/><text x="95.2245%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScope::Extend (2 samples, 0.01%)</title><rect x="95.0285%" y="437" width="0.0120%" height="15" fill="rgb(219,207,3)" fg:x="15846" fg:w="2"/><text x="95.2785%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::Isolate::FireCallCompletedCallbackInternal (6 samples, 0.04%)</title><rect x="95.0525%" y="437" width="0.0360%" height="15" fill="rgb(222,56,46)" fg:x="15850" fg:w="6"/><text x="95.3025%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (9 samples, 0.05%)</title><rect x="95.1004%" y="437" width="0.0540%" height="15" fill="rgb(239,76,54)" fg:x="15858" fg:w="9"/><text x="95.3504%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.01%)</title><rect x="95.1604%" y="421" width="0.0120%" height="15" fill="rgb(231,124,27)" fg:x="15868" fg:w="2"/><text x="95.4104%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::wasm::WasmEngine::HasRunningCompileJob (4 samples, 0.02%)</title><rect x="95.1604%" y="437" width="0.0240%" height="15" fill="rgb(249,195,6)" fg:x="15868" fg:w="4"/><text x="95.4104%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="95.1724%" y="421" width="0.0120%" height="15" fill="rgb(237,174,47)" fg:x="15870" fg:w="2"/><text x="95.4224%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::Context::Exit (2 samples, 0.01%)</title><rect x="95.2144%" y="405" width="0.0120%" height="15" fill="rgb(206,201,31)" fg:x="15877" fg:w="2"/><text x="95.4644%" y="415.50"></text></g><g><title>http_bench_json_ops`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (7 samples, 0.04%)</title><rect x="95.1964%" y="421" width="0.0420%" height="15" fill="rgb(231,57,52)" fg:x="15874" fg:w="7"/><text x="95.4464%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::~HandleScope (2 samples, 0.01%)</title><rect x="95.2264%" y="405" width="0.0120%" height="15" fill="rgb(248,177,22)" fg:x="15879" fg:w="2"/><text x="95.4764%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::HandleScope::DeleteExtensions (2 samples, 0.01%)</title><rect x="95.2264%" y="389" width="0.0120%" height="15" fill="rgb(215,211,37)" fg:x="15879" fg:w="2"/><text x="95.4764%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::~HandleScope (2 samples, 0.01%)</title><rect x="95.2384%" y="421" width="0.0120%" height="15" fill="rgb(241,128,51)" fg:x="15881" fg:w="2"/><text x="95.4884%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::scope::data::ScopeData::try_exit_scope (12 samples, 0.07%)</title><rect x="95.1844%" y="437" width="0.0720%" height="15" fill="rgb(227,165,31)" fg:x="15872" fg:w="12"/><text x="95.4344%" y="447.50"></text></g><g><title>http_bench_json_ops`v8__Null (8 samples, 0.05%)</title><rect x="95.2564%" y="437" width="0.0480%" height="15" fill="rgb(228,167,24)" fg:x="15884" fg:w="8"/><text x="95.5064%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.09%)</title><rect x="95.4123%" y="421" width="0.0900%" height="15" fill="rgb(228,143,12)" fg:x="15910" fg:w="15"/><text x="95.6623%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.20%)</title><rect x="95.3043%" y="437" width="0.2039%" height="15" fill="rgb(249,149,8)" fg:x="15892" fg:w="34"/><text x="95.5543%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="95.5082%" y="437" width="0.0120%" height="15" fill="rgb(243,35,44)" fg:x="15926" fg:w="2"/><text x="95.7582%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.06%)</title><rect x="95.5202%" y="437" width="0.0600%" height="15" fill="rgb(246,89,9)" fg:x="15928" fg:w="10"/><text x="95.7702%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.03%)</title><rect x="95.5802%" y="437" width="0.0300%" height="15" fill="rgb(233,213,13)" fg:x="15938" fg:w="5"/><text x="95.8302%" y="447.50"></text></g><g><title>http_bench_json_ops`deno_core::runtime::JsRuntime::poll_event_loop (15,855 samples, 95.08%)</title><rect x="0.5337%" y="453" width="95.0825%" height="15" fill="rgb(233,141,41)" fg:x="89" fg:w="15855"/><text x="0.7837%" y="463.50">http_bench_json_ops`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>http_bench_json_ops`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (9 samples, 0.05%)</title><rect x="95.6222%" y="453" width="0.0540%" height="15" fill="rgb(239,167,4)" fg:x="15945" fg:w="9"/><text x="95.8722%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::HandleScope::HandleScope (2 samples, 0.01%)</title><rect x="95.6822%" y="453" width="0.0120%" height="15" fill="rgb(209,217,16)" fg:x="15955" fg:w="2"/><text x="95.9322%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::Isolate::HasPendingBackgroundTasks (6 samples, 0.04%)</title><rect x="95.6942%" y="453" width="0.0360%" height="15" fill="rgb(219,88,35)" fg:x="15957" fg:w="6"/><text x="95.9442%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::Isolate::PerformMicrotaskCheckpoint (2 samples, 0.01%)</title><rect x="95.7301%" y="453" width="0.0120%" height="15" fill="rgb(220,193,23)" fg:x="15963" fg:w="2"/><text x="95.9801%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::internal::GlobalHandles::NodeSpace&lt;v8::internal::GlobalHandles::Node&gt;::Release (6 samples, 0.04%)</title><rect x="95.7481%" y="453" width="0.0360%" height="15" fill="rgb(230,90,52)" fg:x="15966" fg:w="6"/><text x="95.9981%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::internal::MicrotaskQueue::PerformCheckpointInternal (2 samples, 0.01%)</title><rect x="95.7841%" y="453" width="0.0120%" height="15" fill="rgb(252,106,19)" fg:x="15972" fg:w="2"/><text x="96.0341%" y="463.50"></text></g><g><title>http_bench_json_ops`v8__Undefined (2 samples, 0.01%)</title><rect x="95.8081%" y="453" width="0.0120%" height="15" fill="rgb(206,74,20)" fg:x="15976" fg:w="2"/><text x="96.0581%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.04%)</title><rect x="95.8201%" y="453" width="0.0360%" height="15" fill="rgb(230,138,44)" fg:x="15978" fg:w="6"/><text x="96.0701%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="95.8561%" y="453" width="0.0360%" height="15" fill="rgb(235,182,43)" fg:x="15984" fg:w="6"/><text x="96.1061%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.03%)</title><rect x="95.8921%" y="453" width="0.0300%" height="15" fill="rgb(242,16,51)" fg:x="15990" fg:w="5"/><text x="96.1421%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="95.9220%" y="453" width="0.0120%" height="15" fill="rgb(248,9,4)" fg:x="15995" fg:w="2"/><text x="96.1720%" y="463.50"></text></g><g><title>http_bench_json_ops`http_bench_json_ops::main (15,996 samples, 95.93%)</title><rect x="0.0420%" y="469" width="95.9280%" height="15" fill="rgb(210,31,22)" fg:x="7" fg:w="15996"/><text x="0.2920%" y="479.50">http_bench_json_ops`http_bench_json_ops::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.04%)</title><rect x="95.9340%" y="453" width="0.0360%" height="15" fill="rgb(239,54,39)" fg:x="15997" fg:w="6"/><text x="96.1840%" y="463.50"></text></g><g><title>dyld`start (16,666 samples, 99.95%)</title><rect x="0.0000%" y="517" width="99.9460%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="16666"/><text x="0.2500%" y="527.50">dyld`start</text></g><g><title>http_bench_json_ops`main (16,666 samples, 99.95%)</title><rect x="0.0000%" y="501" width="99.9460%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="16666"/><text x="0.2500%" y="511.50">http_bench_json_ops`main</text></g><g><title>http_bench_json_ops`std::sys_common::backtrace::__rust_begin_short_backtrace (16,666 samples, 99.95%)</title><rect x="0.0000%" y="485" width="99.9460%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="16666"/><text x="0.2500%" y="495.50">http_bench_json_ops`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_kernel.dylib`kevent (663 samples, 3.98%)</title><rect x="95.9700%" y="469" width="3.9760%" height="15" fill="rgb(215,133,35)" fg:x="16003" fg:w="663"/><text x="96.2200%" y="479.50">libs..</text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::CreateGraph (3 samples, 0.02%)</title><rect x="99.9460%" y="389" width="0.0180%" height="15" fill="rgb(213,28,5)" fg:x="16666" fg:w="3"/><text x="100.1960%" y="399.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (2 samples, 0.01%)</title><rect x="99.9520%" y="373" width="0.0120%" height="15" fill="rgb(215,77,49)" fg:x="16667" fg:w="2"/><text x="100.2020%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::InliningPhase::Run (2 samples, 0.01%)</title><rect x="99.9520%" y="357" width="0.0120%" height="15" fill="rgb(248,100,22)" fg:x="16667" fg:w="2"/><text x="100.2020%" y="367.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.01%)</title><rect x="99.9520%" y="341" width="0.0120%" height="15" fill="rgb(208,67,9)" fg:x="16667" fg:w="2"/><text x="100.2020%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.01%)</title><rect x="99.9520%" y="325" width="0.0120%" height="15" fill="rgb(219,133,21)" fg:x="16667" fg:w="2"/><text x="100.2020%" y="335.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="99.9520%" y="309" width="0.0120%" height="15" fill="rgb(246,46,29)" fg:x="16667" fg:w="2"/><text x="100.2020%" y="319.50"></text></g><g><title>all (16,675 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(246,185,52)" fg:x="0" fg:w="16675"/><text x="0.2500%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (9 samples, 0.05%)</title><rect x="99.9460%" y="517" width="0.0540%" height="15" fill="rgb(252,136,11)" fg:x="16666" fg:w="9"/><text x="100.1960%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (9 samples, 0.05%)</title><rect x="99.9460%" y="501" width="0.0540%" height="15" fill="rgb(219,138,53)" fg:x="16666" fg:w="9"/><text x="100.1960%" y="511.50"></text></g><g><title>http_bench_json_ops`v8::base::ThreadEntry (9 samples, 0.05%)</title><rect x="99.9460%" y="485" width="0.0540%" height="15" fill="rgb(211,51,23)" fg:x="16666" fg:w="9"/><text x="100.1960%" y="495.50"></text></g><g><title>http_bench_json_ops`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (9 samples, 0.05%)</title><rect x="99.9460%" y="469" width="0.0540%" height="15" fill="rgb(247,221,28)" fg:x="16666" fg:w="9"/><text x="100.1960%" y="479.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (9 samples, 0.05%)</title><rect x="99.9460%" y="453" width="0.0540%" height="15" fill="rgb(251,222,45)" fg:x="16666" fg:w="9"/><text x="100.1960%" y="463.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizingCompileDispatcher::CompileNext (9 samples, 0.05%)</title><rect x="99.9460%" y="437" width="0.0540%" height="15" fill="rgb(217,162,53)" fg:x="16666" fg:w="9"/><text x="100.1960%" y="447.50"></text></g><g><title>http_bench_json_ops`v8::internal::OptimizedCompilationJob::ExecuteJob (9 samples, 0.05%)</title><rect x="99.9460%" y="421" width="0.0540%" height="15" fill="rgb(229,93,14)" fg:x="16666" fg:w="9"/><text x="100.1960%" y="431.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (9 samples, 0.05%)</title><rect x="99.9460%" y="405" width="0.0540%" height="15" fill="rgb(209,67,49)" fg:x="16666" fg:w="9"/><text x="100.1960%" y="415.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::OptimizeGraph (6 samples, 0.04%)</title><rect x="99.9640%" y="389" width="0.0360%" height="15" fill="rgb(213,87,29)" fg:x="16669" fg:w="6"/><text x="100.2140%" y="399.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::SelectInstructions (2 samples, 0.01%)</title><rect x="99.9880%" y="373" width="0.0120%" height="15" fill="rgb(205,151,52)" fg:x="16673" fg:w="2"/><text x="100.2380%" y="383.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (2 samples, 0.01%)</title><rect x="99.9880%" y="357" width="0.0120%" height="15" fill="rgb(253,215,39)" fg:x="16673" fg:w="2"/><text x="100.2380%" y="367.50"></text></g><g><title>http_bench_json_ops`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (2 samples, 0.01%)</title><rect x="99.9880%" y="341" width="0.0120%" height="15" fill="rgb(221,220,41)" fg:x="16673" fg:w="2"/><text x="100.2380%" y="351.50"></text></g><g><title>http_bench_json_ops`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (2 samples, 0.01%)</title><rect x="99.9880%" y="325" width="0.0120%" height="15" fill="rgb(218,133,21)" fg:x="16673" fg:w="2"/><text x="100.2380%" y="335.50"></text></g></svg></svg>