<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="12061"><g><title>deno`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="0.1575%" y="565" width="0.0166%" height="15" fill="rgb(227,0,7)" fg:x="19" fg:w="2"/><text x="0.4075%" y="575.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="0.1741%" y="565" width="0.0166%" height="15" fill="rgb(217,0,24)" fg:x="21" fg:w="2"/><text x="0.4241%" y="575.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="0.1741%" y="549" width="0.0166%" height="15" fill="rgb(221,193,54)" fg:x="21" fg:w="2"/><text x="0.4241%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.02%)</title><rect x="0.1741%" y="533" width="0.0166%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="2"/><text x="0.4241%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.02%)</title><rect x="0.1741%" y="517" width="0.0166%" height="15" fill="rgb(208,68,35)" fg:x="21" fg:w="2"/><text x="0.4241%" y="527.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="0.1907%" y="565" width="0.0415%" height="15" fill="rgb(232,128,0)" fg:x="23" fg:w="5"/><text x="0.4407%" y="575.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (2 samples, 0.02%)</title><rect x="0.2322%" y="565" width="0.0166%" height="15" fill="rgb(207,160,47)" fg:x="28" fg:w="2"/><text x="0.4822%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="0.2653%" y="549" width="0.0332%" height="15" fill="rgb(228,23,34)" fg:x="32" fg:w="4"/><text x="0.5153%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="0.2819%" y="533" width="0.0166%" height="15" fill="rgb(218,30,26)" fg:x="34" fg:w="2"/><text x="0.5319%" y="543.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (17 samples, 0.14%)</title><rect x="0.2487%" y="565" width="0.1410%" height="15" fill="rgb(220,122,19)" fg:x="30" fg:w="17"/><text x="0.4987%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.09%)</title><rect x="0.2985%" y="549" width="0.0912%" height="15" fill="rgb(250,228,42)" fg:x="36" fg:w="11"/><text x="0.5485%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (7 samples, 0.06%)</title><rect x="0.3316%" y="533" width="0.0580%" height="15" fill="rgb(240,193,28)" fg:x="40" fg:w="7"/><text x="0.5816%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.06%)</title><rect x="0.3316%" y="517" width="0.0580%" height="15" fill="rgb(216,20,37)" fg:x="40" fg:w="7"/><text x="0.5816%" y="527.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (4 samples, 0.03%)</title><rect x="0.3897%" y="565" width="0.0332%" height="15" fill="rgb(206,188,39)" fg:x="47" fg:w="4"/><text x="0.6397%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`kevent (4 samples, 0.03%)</title><rect x="0.3897%" y="549" width="0.0332%" height="15" fill="rgb(217,207,13)" fg:x="47" fg:w="4"/><text x="0.6397%" y="559.50"></text></g><g><title>0x11003ac20 (2 samples, 0.02%)</title><rect x="0.4311%" y="485" width="0.0166%" height="15" fill="rgb(231,73,38)" fg:x="52" fg:w="2"/><text x="0.6811%" y="495.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (2 samples, 0.02%)</title><rect x="0.4643%" y="437" width="0.0166%" height="15" fill="rgb(225,20,46)" fg:x="56" fg:w="2"/><text x="0.7143%" y="447.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (8 samples, 0.07%)</title><rect x="0.4643%" y="469" width="0.0663%" height="15" fill="rgb(210,31,41)" fg:x="56" fg:w="8"/><text x="0.7143%" y="479.50"></text></g><g><title>deno`Builtins_ResolvePromise (8 samples, 0.07%)</title><rect x="0.4643%" y="453" width="0.0663%" height="15" fill="rgb(221,200,47)" fg:x="56" fg:w="8"/><text x="0.7143%" y="463.50"></text></g><g><title>deno`Builtins_FulfillPromise (6 samples, 0.05%)</title><rect x="0.4809%" y="437" width="0.0497%" height="15" fill="rgb(226,26,5)" fg:x="58" fg:w="6"/><text x="0.7309%" y="447.50"></text></g><g><title>0x11003ad7c (9 samples, 0.07%)</title><rect x="0.4643%" y="485" width="0.0746%" height="15" fill="rgb(249,33,26)" fg:x="56" fg:w="9"/><text x="0.7143%" y="495.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (2 samples, 0.02%)</title><rect x="0.5389%" y="485" width="0.0166%" height="15" fill="rgb(235,183,28)" fg:x="65" fg:w="2"/><text x="0.7889%" y="495.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (20 samples, 0.17%)</title><rect x="0.4229%" y="549" width="0.1658%" height="15" fill="rgb(221,5,38)" fg:x="51" fg:w="20"/><text x="0.6729%" y="559.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (20 samples, 0.17%)</title><rect x="0.4229%" y="533" width="0.1658%" height="15" fill="rgb(247,18,42)" fg:x="51" fg:w="20"/><text x="0.6729%" y="543.50"></text></g><g><title>deno`Builtins_JSEntry (19 samples, 0.16%)</title><rect x="0.4311%" y="517" width="0.1575%" height="15" fill="rgb(241,131,45)" fg:x="52" fg:w="19"/><text x="0.6811%" y="527.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (19 samples, 0.16%)</title><rect x="0.4311%" y="501" width="0.1575%" height="15" fill="rgb(249,31,29)" fg:x="52" fg:w="19"/><text x="0.6811%" y="511.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (2 samples, 0.02%)</title><rect x="0.5721%" y="485" width="0.0166%" height="15" fill="rgb(225,111,53)" fg:x="69" fg:w="2"/><text x="0.8221%" y="495.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (4 samples, 0.03%)</title><rect x="0.7628%" y="421" width="0.0332%" height="15" fill="rgb(238,160,17)" fg:x="92" fg:w="4"/><text x="1.0128%" y="431.50"></text></g><g><title>0x11004ee4c (3 samples, 0.02%)</title><rect x="0.8789%" y="405" width="0.0249%" height="15" fill="rgb(214,148,48)" fg:x="106" fg:w="3"/><text x="1.1289%" y="415.50"></text></g><g><title>0x1100604b8 (3 samples, 0.02%)</title><rect x="0.9037%" y="405" width="0.0249%" height="15" fill="rgb(232,36,49)" fg:x="109" fg:w="3"/><text x="1.1537%" y="415.50"></text></g><g><title>0x11006fbd4 (2 samples, 0.02%)</title><rect x="1.0032%" y="405" width="0.0166%" height="15" fill="rgb(209,103,24)" fg:x="121" fg:w="2"/><text x="1.2532%" y="415.50"></text></g><g><title>deno`Builtins_HasProperty (2 samples, 0.02%)</title><rect x="1.0032%" y="389" width="0.0166%" height="15" fill="rgb(229,88,8)" fg:x="121" fg:w="2"/><text x="1.2532%" y="399.50"></text></g><g><title>0x11006fcdc (2 samples, 0.02%)</title><rect x="1.0198%" y="405" width="0.0166%" height="15" fill="rgb(213,181,19)" fg:x="123" fg:w="2"/><text x="1.2698%" y="415.50"></text></g><g><title>0x11006fd60 (2 samples, 0.02%)</title><rect x="1.0447%" y="405" width="0.0166%" height="15" fill="rgb(254,191,54)" fg:x="126" fg:w="2"/><text x="1.2947%" y="415.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (4 samples, 0.03%)</title><rect x="1.0613%" y="389" width="0.0332%" height="15" fill="rgb(241,83,37)" fg:x="128" fg:w="4"/><text x="1.3113%" y="399.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.02%)</title><rect x="1.0779%" y="373" width="0.0166%" height="15" fill="rgb(233,36,39)" fg:x="130" fg:w="2"/><text x="1.3279%" y="383.50"></text></g><g><title>0x11006fd68 (5 samples, 0.04%)</title><rect x="1.0613%" y="405" width="0.0415%" height="15" fill="rgb(226,3,54)" fg:x="128" fg:w="5"/><text x="1.3113%" y="415.50"></text></g><g><title>0x1100702e8 (2 samples, 0.02%)</title><rect x="1.1525%" y="405" width="0.0166%" height="15" fill="rgb(245,192,40)" fg:x="139" fg:w="2"/><text x="1.4025%" y="415.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (2 samples, 0.02%)</title><rect x="1.1525%" y="389" width="0.0166%" height="15" fill="rgb(238,167,29)" fg:x="139" fg:w="2"/><text x="1.4025%" y="399.50"></text></g><g><title>0x11003a380 (8 samples, 0.07%)</title><rect x="1.1856%" y="389" width="0.0663%" height="15" fill="rgb(232,182,51)" fg:x="143" fg:w="8"/><text x="1.4356%" y="399.50"></text></g><g><title>deno`deno_runtime::ops::fs::open_helper (3 samples, 0.02%)</title><rect x="1.2686%" y="277" width="0.0249%" height="15" fill="rgb(231,60,39)" fg:x="153" fg:w="3"/><text x="1.5186%" y="287.50"></text></g><g><title>deno`deno_runtime::permissions::UnaryPermission&lt;deno_runtime::permissions::ReadDescriptor&gt;::check (3 samples, 0.02%)</title><rect x="1.2686%" y="261" width="0.0249%" height="15" fill="rgb(208,69,12)" fg:x="153" fg:w="3"/><text x="1.5186%" y="271.50"></text></g><g><title>deno`deno_runtime::permissions::resolved_and_display_path (2 samples, 0.02%)</title><rect x="1.2768%" y="245" width="0.0166%" height="15" fill="rgb(235,93,37)" fg:x="154" fg:w="2"/><text x="1.5268%" y="255.50"></text></g><g><title>deno`deno_runtime::fs_util::resolve_from_cwd (2 samples, 0.02%)</title><rect x="1.2768%" y="229" width="0.0166%" height="15" fill="rgb(213,116,39)" fg:x="154" fg:w="2"/><text x="1.5268%" y="239.50"></text></g><g><title>deno`std::path::PathBuf::_push (2 samples, 0.02%)</title><rect x="1.2768%" y="213" width="0.0166%" height="15" fill="rgb(222,207,29)" fg:x="154" fg:w="2"/><text x="1.5268%" y="223.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="1.2768%" y="197" width="0.0166%" height="15" fill="rgb(206,96,30)" fg:x="154" fg:w="2"/><text x="1.5268%" y="207.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="1.2768%" y="181" width="0.0166%" height="15" fill="rgb(218,138,4)" fg:x="154" fg:w="2"/><text x="1.5268%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.02%)</title><rect x="1.2768%" y="165" width="0.0166%" height="15" fill="rgb(250,191,14)" fg:x="154" fg:w="2"/><text x="1.5268%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.02%)</title><rect x="1.2768%" y="149" width="0.0166%" height="15" fill="rgb(239,60,40)" fg:x="154" fg:w="2"/><text x="1.5268%" y="159.50"></text></g><g><title>0x11004e7cc (7 samples, 0.06%)</title><rect x="1.2686%" y="373" width="0.0580%" height="15" fill="rgb(206,27,48)" fg:x="153" fg:w="7"/><text x="1.5186%" y="383.50"></text></g><g><title>0x1100502ac (7 samples, 0.06%)</title><rect x="1.2686%" y="357" width="0.0580%" height="15" fill="rgb(225,35,8)" fg:x="153" fg:w="7"/><text x="1.5186%" y="367.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (7 samples, 0.06%)</title><rect x="1.2686%" y="341" width="0.0580%" height="15" fill="rgb(250,213,24)" fg:x="153" fg:w="7"/><text x="1.5186%" y="351.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (7 samples, 0.06%)</title><rect x="1.2686%" y="325" width="0.0580%" height="15" fill="rgb(247,123,22)" fg:x="153" fg:w="7"/><text x="1.5186%" y="335.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (7 samples, 0.06%)</title><rect x="1.2686%" y="309" width="0.0580%" height="15" fill="rgb(231,138,38)" fg:x="153" fg:w="7"/><text x="1.5186%" y="319.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (7 samples, 0.06%)</title><rect x="1.2686%" y="293" width="0.0580%" height="15" fill="rgb(231,145,46)" fg:x="153" fg:w="7"/><text x="1.5186%" y="303.50"></text></g><g><title>deno`std::fs::OpenOptions::_open (4 samples, 0.03%)</title><rect x="1.2934%" y="277" width="0.0332%" height="15" fill="rgb(251,118,11)" fg:x="156" fg:w="4"/><text x="1.5434%" y="287.50"></text></g><g><title>deno`std::sys::unix::fs::File::open_c (4 samples, 0.03%)</title><rect x="1.2934%" y="261" width="0.0332%" height="15" fill="rgb(217,147,25)" fg:x="156" fg:w="4"/><text x="1.5434%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__open (4 samples, 0.03%)</title><rect x="1.2934%" y="245" width="0.0332%" height="15" fill="rgb(247,81,37)" fg:x="156" fg:w="4"/><text x="1.5434%" y="255.50"></text></g><g><title>0x110050ecc (2 samples, 0.02%)</title><rect x="1.3266%" y="293" width="0.0166%" height="15" fill="rgb(209,12,38)" fg:x="160" fg:w="2"/><text x="1.5766%" y="303.50"></text></g><g><title>0x1100510b4 (3 samples, 0.02%)</title><rect x="1.3432%" y="293" width="0.0249%" height="15" fill="rgb(227,1,9)" fg:x="162" fg:w="3"/><text x="1.5932%" y="303.50"></text></g><g><title>0x11004e7f8 (6 samples, 0.05%)</title><rect x="1.3266%" y="373" width="0.0497%" height="15" fill="rgb(248,47,43)" fg:x="160" fg:w="6"/><text x="1.5766%" y="383.50"></text></g><g><title>deno`Builtins_LoadIC (6 samples, 0.05%)</title><rect x="1.3266%" y="357" width="0.0497%" height="15" fill="rgb(221,10,30)" fg:x="160" fg:w="6"/><text x="1.5766%" y="367.50"></text></g><g><title>0x11004d934 (6 samples, 0.05%)</title><rect x="1.3266%" y="341" width="0.0497%" height="15" fill="rgb(210,229,1)" fg:x="160" fg:w="6"/><text x="1.5766%" y="351.50"></text></g><g><title>0x11004d710 (6 samples, 0.05%)</title><rect x="1.3266%" y="325" width="0.0497%" height="15" fill="rgb(222,148,37)" fg:x="160" fg:w="6"/><text x="1.5766%" y="335.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (6 samples, 0.05%)</title><rect x="1.3266%" y="309" width="0.0497%" height="15" fill="rgb(234,67,33)" fg:x="160" fg:w="6"/><text x="1.5766%" y="319.50"></text></g><g><title>0x110056cc8 (17 samples, 0.14%)</title><rect x="1.2686%" y="389" width="0.1410%" height="15" fill="rgb(247,98,35)" fg:x="153" fg:w="17"/><text x="1.5186%" y="399.50"></text></g><g><title>0x11004e824 (4 samples, 0.03%)</title><rect x="1.3763%" y="373" width="0.0332%" height="15" fill="rgb(247,138,52)" fg:x="166" fg:w="4"/><text x="1.6263%" y="383.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (4 samples, 0.03%)</title><rect x="1.3763%" y="357" width="0.0332%" height="15" fill="rgb(213,79,30)" fg:x="166" fg:w="4"/><text x="1.6263%" y="367.50"></text></g><g><title>0x11004e4c8 (3 samples, 0.02%)</title><rect x="1.3846%" y="341" width="0.0249%" height="15" fill="rgb(246,177,23)" fg:x="167" fg:w="3"/><text x="1.6346%" y="351.50"></text></g><g><title>0x1100589e8 (2 samples, 0.02%)</title><rect x="1.4095%" y="389" width="0.0166%" height="15" fill="rgb(230,62,27)" fg:x="170" fg:w="2"/><text x="1.6595%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (4 samples, 0.03%)</title><rect x="1.4427%" y="277" width="0.0332%" height="15" fill="rgb(216,154,8)" fg:x="174" fg:w="4"/><text x="1.6927%" y="287.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.04%)</title><rect x="1.4427%" y="293" width="0.0415%" height="15" fill="rgb(244,35,45)" fg:x="174" fg:w="5"/><text x="1.6927%" y="303.50"></text></g><g><title>0x1100518f8 (30 samples, 0.25%)</title><rect x="1.4344%" y="373" width="0.2487%" height="15" fill="rgb(251,115,12)" fg:x="173" fg:w="30"/><text x="1.6844%" y="383.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (30 samples, 0.25%)</title><rect x="1.4344%" y="357" width="0.2487%" height="15" fill="rgb(240,54,50)" fg:x="173" fg:w="30"/><text x="1.6844%" y="367.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (30 samples, 0.25%)</title><rect x="1.4344%" y="341" width="0.2487%" height="15" fill="rgb(233,84,52)" fg:x="173" fg:w="30"/><text x="1.6844%" y="351.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (30 samples, 0.25%)</title><rect x="1.4344%" y="325" width="0.2487%" height="15" fill="rgb(207,117,47)" fg:x="173" fg:w="30"/><text x="1.6844%" y="335.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (30 samples, 0.25%)</title><rect x="1.4344%" y="309" width="0.2487%" height="15" fill="rgb(249,43,39)" fg:x="173" fg:w="30"/><text x="1.6844%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`sendfile (21 samples, 0.17%)</title><rect x="1.5090%" y="293" width="0.1741%" height="15" fill="rgb(209,38,44)" fg:x="182" fg:w="21"/><text x="1.7590%" y="303.50"></text></g><g><title>0x110058c78 (32 samples, 0.27%)</title><rect x="1.4261%" y="389" width="0.2653%" height="15" fill="rgb(236,212,23)" fg:x="172" fg:w="32"/><text x="1.6761%" y="399.50"></text></g><g><title>0x11006216c (2 samples, 0.02%)</title><rect x="1.6914%" y="389" width="0.0166%" height="15" fill="rgb(242,79,21)" fg:x="204" fg:w="2"/><text x="1.9414%" y="399.50"></text></g><g><title>0x110062498 (2 samples, 0.02%)</title><rect x="1.7246%" y="389" width="0.0166%" height="15" fill="rgb(211,96,35)" fg:x="208" fg:w="2"/><text x="1.9746%" y="399.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="1.7992%" y="341" width="0.0249%" height="15" fill="rgb(253,215,40)" fg:x="217" fg:w="3"/><text x="2.0492%" y="351.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.07%)</title><rect x="1.7743%" y="357" width="0.0663%" height="15" fill="rgb(211,81,21)" fg:x="214" fg:w="8"/><text x="2.0243%" y="367.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="1.8241%" y="341" width="0.0166%" height="15" fill="rgb(208,190,38)" fg:x="220" fg:w="2"/><text x="2.0741%" y="351.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (7 samples, 0.06%)</title><rect x="1.9401%" y="341" width="0.0580%" height="15" fill="rgb(235,213,38)" fg:x="234" fg:w="7"/><text x="2.1901%" y="351.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (21 samples, 0.17%)</title><rect x="1.8489%" y="357" width="0.1741%" height="15" fill="rgb(237,122,38)" fg:x="223" fg:w="21"/><text x="2.0989%" y="367.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.02%)</title><rect x="1.9982%" y="341" width="0.0249%" height="15" fill="rgb(244,218,35)" fg:x="241" fg:w="3"/><text x="2.2482%" y="351.50"></text></g><g><title>deno`deno_flash::op_flash_next_fast (35 samples, 0.29%)</title><rect x="1.7494%" y="373" width="0.2902%" height="15" fill="rgb(240,68,47)" fg:x="211" fg:w="35"/><text x="1.9994%" y="383.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.02%)</title><rect x="2.0230%" y="357" width="0.0166%" height="15" fill="rgb(210,16,53)" fg:x="244" fg:w="2"/><text x="2.2730%" y="367.50"></text></g><g><title>0x110062750 (37 samples, 0.31%)</title><rect x="1.7494%" y="389" width="0.3068%" height="15" fill="rgb(235,124,12)" fg:x="211" fg:w="37"/><text x="1.9994%" y="399.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (2 samples, 0.02%)</title><rect x="2.0396%" y="373" width="0.0166%" height="15" fill="rgb(224,169,11)" fg:x="246" fg:w="2"/><text x="2.2896%" y="383.50"></text></g><g><title>0x1100627e4 (4 samples, 0.03%)</title><rect x="2.0645%" y="389" width="0.0332%" height="15" fill="rgb(250,166,2)" fg:x="249" fg:w="4"/><text x="2.3145%" y="399.50"></text></g><g><title>0x1100627e8 (3 samples, 0.02%)</title><rect x="2.0977%" y="389" width="0.0249%" height="15" fill="rgb(242,216,29)" fg:x="253" fg:w="3"/><text x="2.3477%" y="399.50"></text></g><g><title>0x110062cb4 (2 samples, 0.02%)</title><rect x="2.1806%" y="389" width="0.0166%" height="15" fill="rgb(230,116,27)" fg:x="263" fg:w="2"/><text x="2.4306%" y="399.50"></text></g><g><title>0x110062d94 (2 samples, 0.02%)</title><rect x="2.2055%" y="389" width="0.0166%" height="15" fill="rgb(228,99,48)" fg:x="266" fg:w="2"/><text x="2.4555%" y="399.50"></text></g><g><title>0x110062f00 (2 samples, 0.02%)</title><rect x="2.2386%" y="389" width="0.0166%" height="15" fill="rgb(253,11,6)" fg:x="270" fg:w="2"/><text x="2.4886%" y="399.50"></text></g><g><title>0x110062f90 (5 samples, 0.04%)</title><rect x="2.2552%" y="389" width="0.0415%" height="15" fill="rgb(247,143,39)" fg:x="272" fg:w="5"/><text x="2.5052%" y="399.50"></text></g><g><title>0x110069918 (3 samples, 0.02%)</title><rect x="2.2718%" y="373" width="0.0249%" height="15" fill="rgb(236,97,10)" fg:x="274" fg:w="3"/><text x="2.5218%" y="383.50"></text></g><g><title>deno`Builtins_HasProperty (3 samples, 0.02%)</title><rect x="2.2718%" y="357" width="0.0249%" height="15" fill="rgb(233,208,19)" fg:x="274" fg:w="3"/><text x="2.5218%" y="367.50"></text></g><g><title>0x110063098 (2 samples, 0.02%)</title><rect x="2.2967%" y="389" width="0.0166%" height="15" fill="rgb(216,164,2)" fg:x="277" fg:w="2"/><text x="2.5467%" y="399.50"></text></g><g><title>0x110063130 (2 samples, 0.02%)</title><rect x="2.3215%" y="389" width="0.0166%" height="15" fill="rgb(220,129,5)" fg:x="280" fg:w="2"/><text x="2.5715%" y="399.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (2 samples, 0.02%)</title><rect x="2.3215%" y="373" width="0.0166%" height="15" fill="rgb(242,17,10)" fg:x="280" fg:w="2"/><text x="2.5715%" y="383.50"></text></g><g><title>0x1100610e0 (6 samples, 0.05%)</title><rect x="2.4127%" y="373" width="0.0497%" height="15" fill="rgb(242,107,0)" fg:x="291" fg:w="6"/><text x="2.6627%" y="383.50"></text></g><g><title>deno`Builtins_ObjectAssign (6 samples, 0.05%)</title><rect x="2.4127%" y="357" width="0.0497%" height="15" fill="rgb(251,28,31)" fg:x="291" fg:w="6"/><text x="2.6627%" y="367.50"></text></g><g><title>deno`Builtins_SetDataProperties (3 samples, 0.02%)</title><rect x="2.4376%" y="341" width="0.0249%" height="15" fill="rgb(233,223,10)" fg:x="294" fg:w="3"/><text x="2.6876%" y="351.50"></text></g><g><title>0x110061278 (6 samples, 0.05%)</title><rect x="2.4874%" y="373" width="0.0497%" height="15" fill="rgb(215,21,27)" fg:x="300" fg:w="6"/><text x="2.7374%" y="383.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (6 samples, 0.05%)</title><rect x="2.4874%" y="357" width="0.0497%" height="15" fill="rgb(232,23,21)" fg:x="300" fg:w="6"/><text x="2.7374%" y="367.50"></text></g><g><title>0x1100633fc (21 samples, 0.17%)</title><rect x="2.3962%" y="389" width="0.1741%" height="15" fill="rgb(244,5,23)" fg:x="289" fg:w="21"/><text x="2.6462%" y="399.50"></text></g><g><title>deno`Builtins_Typeof (2 samples, 0.02%)</title><rect x="2.5537%" y="373" width="0.0166%" height="15" fill="rgb(226,81,46)" fg:x="308" fg:w="2"/><text x="2.8037%" y="383.50"></text></g><g><title>deno`Builtins_FastNewObject (2 samples, 0.02%)</title><rect x="2.5703%" y="373" width="0.0166%" height="15" fill="rgb(247,70,30)" fg:x="310" fg:w="2"/><text x="2.8203%" y="383.50"></text></g><g><title>0x110063440 (13 samples, 0.11%)</title><rect x="2.5703%" y="389" width="0.1078%" height="15" fill="rgb(212,68,19)" fg:x="310" fg:w="13"/><text x="2.8203%" y="399.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (11 samples, 0.09%)</title><rect x="2.5869%" y="373" width="0.0912%" height="15" fill="rgb(240,187,13)" fg:x="312" fg:w="11"/><text x="2.8369%" y="383.50"></text></g><g><title>deno`Builtins_LoadIC (3 samples, 0.02%)</title><rect x="2.6532%" y="357" width="0.0249%" height="15" fill="rgb(223,113,26)" fg:x="320" fg:w="3"/><text x="2.9032%" y="367.50"></text></g><g><title>0x110069d90 (5 samples, 0.04%)</title><rect x="2.6863%" y="373" width="0.0415%" height="15" fill="rgb(206,192,2)" fg:x="324" fg:w="5"/><text x="2.9363%" y="383.50"></text></g><g><title>deno`Builtins_ToString (5 samples, 0.04%)</title><rect x="2.6863%" y="357" width="0.0415%" height="15" fill="rgb(241,108,4)" fg:x="324" fg:w="5"/><text x="2.9363%" y="367.50"></text></g><g><title>0x110069f20 (2 samples, 0.02%)</title><rect x="2.7775%" y="373" width="0.0166%" height="15" fill="rgb(247,173,49)" fg:x="335" fg:w="2"/><text x="3.0275%" y="383.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (2 samples, 0.02%)</title><rect x="2.7775%" y="357" width="0.0166%" height="15" fill="rgb(224,114,35)" fg:x="335" fg:w="2"/><text x="3.0275%" y="367.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.02%)</title><rect x="2.7775%" y="341" width="0.0166%" height="15" fill="rgb(245,159,27)" fg:x="335" fg:w="2"/><text x="3.0275%" y="351.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.02%)</title><rect x="2.7775%" y="325" width="0.0166%" height="15" fill="rgb(245,172,44)" fg:x="335" fg:w="2"/><text x="3.0275%" y="335.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.02%)</title><rect x="2.7775%" y="309" width="0.0166%" height="15" fill="rgb(236,23,11)" fg:x="335" fg:w="2"/><text x="3.0275%" y="319.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.02%)</title><rect x="2.7775%" y="293" width="0.0166%" height="15" fill="rgb(205,117,38)" fg:x="335" fg:w="2"/><text x="3.0275%" y="303.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.02%)</title><rect x="2.7775%" y="277" width="0.0166%" height="15" fill="rgb(237,72,25)" fg:x="335" fg:w="2"/><text x="3.0275%" y="287.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.02%)</title><rect x="2.7775%" y="261" width="0.0166%" height="15" fill="rgb(244,70,9)" fg:x="335" fg:w="2"/><text x="3.0275%" y="271.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.02%)</title><rect x="2.7775%" y="245" width="0.0166%" height="15" fill="rgb(217,125,39)" fg:x="335" fg:w="2"/><text x="3.0275%" y="255.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.02%)</title><rect x="2.7775%" y="229" width="0.0166%" height="15" fill="rgb(235,36,10)" fg:x="335" fg:w="2"/><text x="3.0275%" y="239.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.02%)</title><rect x="2.7775%" y="213" width="0.0166%" height="15" fill="rgb(251,123,47)" fg:x="335" fg:w="2"/><text x="3.0275%" y="223.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.02%)</title><rect x="2.7775%" y="197" width="0.0166%" height="15" fill="rgb(221,13,13)" fg:x="335" fg:w="2"/><text x="3.0275%" y="207.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.02%)</title><rect x="2.7775%" y="181" width="0.0166%" height="15" fill="rgb(238,131,9)" fg:x="335" fg:w="2"/><text x="3.0275%" y="191.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.02%)</title><rect x="2.7775%" y="165" width="0.0166%" height="15" fill="rgb(211,50,8)" fg:x="335" fg:w="2"/><text x="3.0275%" y="175.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (2 samples, 0.02%)</title><rect x="2.7775%" y="149" width="0.0166%" height="15" fill="rgb(245,182,24)" fg:x="335" fg:w="2"/><text x="3.0275%" y="159.50"></text></g><g><title>0x110063518 (35 samples, 0.29%)</title><rect x="2.6781%" y="389" width="0.2902%" height="15" fill="rgb(242,14,37)" fg:x="323" fg:w="35"/><text x="2.9281%" y="399.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (20 samples, 0.17%)</title><rect x="2.8024%" y="373" width="0.1658%" height="15" fill="rgb(246,228,12)" fg:x="338" fg:w="20"/><text x="3.0524%" y="383.50"></text></g><g><title>0x110063594 (2 samples, 0.02%)</title><rect x="2.9682%" y="389" width="0.0166%" height="15" fill="rgb(213,55,15)" fg:x="358" fg:w="2"/><text x="3.2182%" y="399.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (5 samples, 0.04%)</title><rect x="3.1175%" y="341" width="0.0415%" height="15" fill="rgb(209,9,3)" fg:x="376" fg:w="5"/><text x="3.3675%" y="351.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::FunctionCallbackArguments (2 samples, 0.02%)</title><rect x="3.1672%" y="341" width="0.0166%" height="15" fill="rgb(230,59,30)" fg:x="382" fg:w="2"/><text x="3.4172%" y="351.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (6 samples, 0.05%)</title><rect x="3.4160%" y="309" width="0.0497%" height="15" fill="rgb(209,121,21)" fg:x="412" fg:w="6"/><text x="3.6660%" y="319.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.02%)</title><rect x="3.7145%" y="293" width="0.0166%" height="15" fill="rgb(220,109,13)" fg:x="448" fg:w="2"/><text x="3.9645%" y="303.50"></text></g><g><title>deno`&lt;T as core::any::Any&gt;::type_id (2 samples, 0.02%)</title><rect x="3.7310%" y="293" width="0.0166%" height="15" fill="rgb(232,18,1)" fg:x="450" fg:w="2"/><text x="3.9810%" y="303.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;deno_runtime::ops::io::StdFileResource&gt;&gt; (2 samples, 0.02%)</title><rect x="3.7891%" y="277" width="0.0166%" height="15" fill="rgb(215,41,42)" fg:x="457" fg:w="2"/><text x="4.0391%" y="287.50"></text></g><g><title>deno`deno_core::async_cell::internal::BorrowCount::remove (5 samples, 0.04%)</title><rect x="3.8057%" y="261" width="0.0415%" height="15" fill="rgb(224,123,36)" fg:x="459" fg:w="5"/><text x="4.0557%" y="271.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cell::internal::AsyncBorrowImpl&lt;core::option::Option&lt;(deno_runtime::ops::io::StdFileResourceInner,deno_runtime::ops::io::FileMetadata)&gt;,deno_core::async_cell::internal::Exclusive&gt;&gt; (7 samples, 0.06%)</title><rect x="3.8057%" y="277" width="0.0580%" height="15" fill="rgb(240,125,3)" fg:x="459" fg:w="7"/><text x="4.0557%" y="287.50"></text></g><g><title>deno`deno_core::async_cell::internal::_&lt;impl deno_core::async_cell::AsyncRefCell&lt;T&gt;&gt;::wake_waiters (2 samples, 0.02%)</title><rect x="3.8471%" y="261" width="0.0166%" height="15" fill="rgb(205,98,50)" fg:x="464" fg:w="2"/><text x="4.0971%" y="271.50"></text></g><g><title>deno`&lt;deno_runtime::ops::io::StdFileResource as deno_core::resources::Resource&gt;::backing_fd (16 samples, 0.13%)</title><rect x="3.7476%" y="293" width="0.1327%" height="15" fill="rgb(205,185,37)" fg:x="452" fg:w="16"/><text x="3.9976%" y="303.50"></text></g><g><title>deno`deno_core::async_cell::internal::BorrowCount::remove (2 samples, 0.02%)</title><rect x="3.8637%" y="277" width="0.0166%" height="15" fill="rgb(238,207,15)" fg:x="466" fg:w="2"/><text x="4.1137%" y="287.50"></text></g><g><title>deno`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (6 samples, 0.05%)</title><rect x="3.9383%" y="277" width="0.0497%" height="15" fill="rgb(213,199,42)" fg:x="475" fg:w="6"/><text x="4.1883%" y="287.50"></text></g><g><title>deno`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::remove (13 samples, 0.11%)</title><rect x="3.8969%" y="293" width="0.1078%" height="15" fill="rgb(235,201,11)" fg:x="470" fg:w="13"/><text x="4.1469%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="3.9881%" y="277" width="0.0166%" height="15" fill="rgb(207,46,11)" fg:x="481" fg:w="2"/><text x="4.2381%" y="287.50"></text></g><g><title>deno`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="4.0212%" y="261" width="0.0166%" height="15" fill="rgb(241,35,35)" fg:x="485" fg:w="2"/><text x="4.2712%" y="271.50"></text></g><g><title>deno`core::fmt::Formatter::pad_integral (3 samples, 0.02%)</title><rect x="4.0378%" y="261" width="0.0249%" height="15" fill="rgb(243,32,47)" fg:x="487" fg:w="3"/><text x="4.2878%" y="271.50"></text></g><g><title>deno`core::fmt::Formatter::pad_integral (5 samples, 0.04%)</title><rect x="4.1041%" y="245" width="0.0415%" height="15" fill="rgb(247,202,23)" fg:x="495" fg:w="5"/><text x="4.3541%" y="255.50"></text></g><g><title>deno`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (13 samples, 0.11%)</title><rect x="4.0627%" y="261" width="0.1078%" height="15" fill="rgb(219,102,11)" fg:x="490" fg:w="13"/><text x="4.3127%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="4.1539%" y="245" width="0.0166%" height="15" fill="rgb(243,110,44)" fg:x="501" fg:w="2"/><text x="4.4039%" y="255.50"></text></g><g><title>deno`core::fmt::write (20 samples, 0.17%)</title><rect x="4.0129%" y="277" width="0.1658%" height="15" fill="rgb(222,74,54)" fg:x="484" fg:w="20"/><text x="4.2629%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="4.1788%" y="245" width="0.0166%" height="15" fill="rgb(216,99,12)" fg:x="504" fg:w="2"/><text x="4.4288%" y="255.50"></text></g><g><title>deno`alloc::fmt::format (23 samples, 0.19%)</title><rect x="4.0129%" y="293" width="0.1907%" height="15" fill="rgb(226,22,26)" fg:x="484" fg:w="23"/><text x="4.2629%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="4.1788%" y="277" width="0.0249%" height="15" fill="rgb(217,163,10)" fg:x="504" fg:w="3"/><text x="4.4288%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="4.1788%" y="261" width="0.0249%" height="15" fill="rgb(213,25,53)" fg:x="504" fg:w="3"/><text x="4.4288%" y="271.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="4.2119%" y="293" width="0.0249%" height="15" fill="rgb(252,105,26)" fg:x="508" fg:w="3"/><text x="4.4619%" y="303.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_flash::op_flash_write_resource::call::{{closure}}&gt;&gt; (2 samples, 0.02%)</title><rect x="4.2368%" y="293" width="0.0166%" height="15" fill="rgb(220,39,43)" fg:x="511" fg:w="2"/><text x="4.4868%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="4.2617%" y="277" width="0.0332%" height="15" fill="rgb(229,68,48)" fg:x="514" fg:w="4"/><text x="4.5117%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="4.2783%" y="261" width="0.0166%" height="15" fill="rgb(252,8,32)" fg:x="516" fg:w="2"/><text x="4.5283%" y="271.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_runtime::ops::io::StdFileResource&gt; (6 samples, 0.05%)</title><rect x="4.2617%" y="293" width="0.0497%" height="15" fill="rgb(223,20,43)" fg:x="514" fg:w="6"/><text x="4.5117%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="4.2948%" y="277" width="0.0166%" height="15" fill="rgb(229,81,49)" fg:x="518" fg:w="2"/><text x="4.5448%" y="287.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (2 samples, 0.02%)</title><rect x="4.3114%" y="293" width="0.0166%" height="15" fill="rgb(236,28,36)" fg:x="520" fg:w="2"/><text x="4.5614%" y="303.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (11 samples, 0.09%)</title><rect x="4.3280%" y="293" width="0.0912%" height="15" fill="rgb(249,185,26)" fg:x="522" fg:w="11"/><text x="4.5780%" y="303.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (2 samples, 0.02%)</title><rect x="4.4192%" y="293" width="0.0166%" height="15" fill="rgb(249,174,33)" fg:x="533" fg:w="2"/><text x="4.6692%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1,239 samples, 10.27%)</title><rect x="4.4358%" y="293" width="10.2728%" height="15" fill="rgb(233,201,37)" fg:x="535" fg:w="1239"/><text x="4.6858%" y="303.50">libsystem_kerne..</text></g><g><title>libsystem_kernel.dylib`close (207 samples, 1.72%)</title><rect x="14.7086%" y="293" width="1.7163%" height="15" fill="rgb(221,78,26)" fg:x="1774" fg:w="207"/><text x="14.9586%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.04%)</title><rect x="16.5824%" y="277" width="0.0415%" height="15" fill="rgb(250,127,30)" fg:x="2000" fg:w="5"/><text x="16.8324%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_size (9 samples, 0.07%)</title><rect x="16.6238%" y="277" width="0.0746%" height="15" fill="rgb(230,49,44)" fg:x="2005" fg:w="9"/><text x="16.8738%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (50 samples, 0.41%)</title><rect x="16.4248%" y="293" width="0.4146%" height="15" fill="rgb(229,67,23)" fg:x="1981" fg:w="50"/><text x="16.6748%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.14%)</title><rect x="16.6984%" y="277" width="0.1410%" height="15" fill="rgb(249,83,47)" fg:x="2014" fg:w="17"/><text x="16.9484%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.10%)</title><rect x="16.7399%" y="261" width="0.0995%" height="15" fill="rgb(215,43,3)" fg:x="2019" fg:w="12"/><text x="16.9899%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.04%)</title><rect x="17.0384%" y="277" width="0.0415%" height="15" fill="rgb(238,154,13)" fg:x="2055" fg:w="5"/><text x="17.2884%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (42 samples, 0.35%)</title><rect x="16.8394%" y="293" width="0.3482%" height="15" fill="rgb(219,56,2)" fg:x="2031" fg:w="42"/><text x="17.0894%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.09%)</title><rect x="17.0964%" y="277" width="0.0912%" height="15" fill="rgb(233,0,4)" fg:x="2062" fg:w="11"/><text x="17.3464%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="17.1959%" y="293" width="0.0332%" height="15" fill="rgb(235,30,7)" fg:x="2074" fg:w="4"/><text x="17.4459%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="17.2291%" y="293" width="0.0166%" height="15" fill="rgb(250,79,13)" fg:x="2078" fg:w="2"/><text x="17.4791%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.02%)</title><rect x="17.2457%" y="293" width="0.0166%" height="15" fill="rgb(211,146,34)" fg:x="2080" fg:w="2"/><text x="17.4957%" y="303.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,666 samples, 13.81%)</title><rect x="3.4657%" y="309" width="13.8131%" height="15" fill="rgb(228,22,38)" fg:x="418" fg:w="1666"/><text x="3.7157%" y="319.50">deno`&lt;core::future::f..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="17.2623%" y="293" width="0.0166%" height="15" fill="rgb(235,168,5)" fg:x="2082" fg:w="2"/><text x="17.5123%" y="303.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_flash::op_flash_write_resource::call::{{closure}}&gt;&gt; (11 samples, 0.09%)</title><rect x="17.3369%" y="309" width="0.0912%" height="15" fill="rgb(221,155,16)" fg:x="2091" fg:w="11"/><text x="17.5869%" y="319.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;futures_util::future::maybe_done::MaybeDone&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = (v8::handle::Global&lt;v8::data::Context&gt;,i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="17.4281%" y="309" width="0.0166%" height="15" fill="rgb(215,215,53)" fg:x="2102" fg:w="2"/><text x="17.6781%" y="319.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.02%)</title><rect x="17.4447%" y="309" width="0.0249%" height="15" fill="rgb(223,4,10)" fg:x="2104" fg:w="3"/><text x="17.6947%" y="319.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (2 samples, 0.02%)</title><rect x="17.4695%" y="309" width="0.0166%" height="15" fill="rgb(234,103,6)" fg:x="2107" fg:w="2"/><text x="17.7195%" y="319.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (13 samples, 0.11%)</title><rect x="17.4861%" y="309" width="0.1078%" height="15" fill="rgb(227,97,0)" fg:x="2109" fg:w="13"/><text x="17.7361%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.08%)</title><rect x="17.5110%" y="293" width="0.0829%" height="15" fill="rgb(234,150,53)" fg:x="2112" fg:w="10"/><text x="17.7610%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.08%)</title><rect x="17.5110%" y="277" width="0.0829%" height="15" fill="rgb(228,201,54)" fg:x="2112" fg:w="10"/><text x="17.7610%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.08%)</title><rect x="17.5110%" y="261" width="0.0829%" height="15" fill="rgb(222,22,37)" fg:x="2112" fg:w="10"/><text x="17.7610%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.02%)</title><rect x="17.5773%" y="245" width="0.0166%" height="15" fill="rgb(237,53,32)" fg:x="2120" fg:w="2"/><text x="17.8273%" y="255.50"></text></g><g><title>deno`serde_v8::magic::v8slice::to_ranged_buffer (2 samples, 0.02%)</title><rect x="17.6105%" y="261" width="0.0166%" height="15" fill="rgb(233,25,53)" fg:x="2124" fg:w="2"/><text x="17.8605%" y="271.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (4 samples, 0.03%)</title><rect x="17.6105%" y="277" width="0.0332%" height="15" fill="rgb(210,40,34)" fg:x="2124" fg:w="4"/><text x="17.8605%" y="287.50"></text></g><g><title>deno`__rust_alloc (3 samples, 0.02%)</title><rect x="17.6436%" y="277" width="0.0249%" height="15" fill="rgb(241,220,44)" fg:x="2128" fg:w="3"/><text x="17.8936%" y="287.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (2 samples, 0.02%)</title><rect x="17.8841%" y="213" width="0.0166%" height="15" fill="rgb(235,28,35)" fg:x="2157" fg:w="2"/><text x="18.1341%" y="223.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (7 samples, 0.06%)</title><rect x="17.9090%" y="213" width="0.0580%" height="15" fill="rgb(210,56,17)" fg:x="2160" fg:w="7"/><text x="18.1590%" y="223.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (4 samples, 0.03%)</title><rect x="17.9338%" y="197" width="0.0332%" height="15" fill="rgb(224,130,29)" fg:x="2163" fg:w="4"/><text x="18.1838%" y="207.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (3 samples, 0.02%)</title><rect x="17.9421%" y="181" width="0.0249%" height="15" fill="rgb(235,212,8)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="191.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (3 samples, 0.02%)</title><rect x="17.9421%" y="165" width="0.0249%" height="15" fill="rgb(223,33,50)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (3 samples, 0.02%)</title><rect x="17.9421%" y="149" width="0.0249%" height="15" fill="rgb(219,149,13)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (3 samples, 0.02%)</title><rect x="17.9421%" y="133" width="0.0249%" height="15" fill="rgb(250,156,29)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (3 samples, 0.02%)</title><rect x="17.9421%" y="117" width="0.0249%" height="15" fill="rgb(216,193,19)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="127.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.02%)</title><rect x="17.9421%" y="101" width="0.0249%" height="15" fill="rgb(216,135,14)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="111.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (3 samples, 0.02%)</title><rect x="17.9421%" y="85" width="0.0249%" height="15" fill="rgb(241,47,5)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="95.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (3 samples, 0.02%)</title><rect x="17.9421%" y="69" width="0.0249%" height="15" fill="rgb(233,42,35)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="79.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (3 samples, 0.02%)</title><rect x="17.9421%" y="53" width="0.0249%" height="15" fill="rgb(231,13,6)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="63.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (3 samples, 0.02%)</title><rect x="17.9421%" y="37" width="0.0249%" height="15" fill="rgb(207,181,40)" fg:x="2164" fg:w="3"/><text x="18.1921%" y="47.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (14 samples, 0.12%)</title><rect x="17.9670%" y="213" width="0.1161%" height="15" fill="rgb(254,173,49)" fg:x="2167" fg:w="14"/><text x="18.2170%" y="223.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (6 samples, 0.05%)</title><rect x="18.0333%" y="197" width="0.0497%" height="15" fill="rgb(221,1,38)" fg:x="2175" fg:w="6"/><text x="18.2833%" y="207.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (44 samples, 0.36%)</title><rect x="17.8012%" y="229" width="0.3648%" height="15" fill="rgb(206,124,46)" fg:x="2147" fg:w="44"/><text x="18.0512%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.08%)</title><rect x="18.0831%" y="213" width="0.0829%" height="15" fill="rgb(249,21,11)" fg:x="2181" fg:w="10"/><text x="18.3331%" y="223.50"></text></g><g><title>deno`v8::String::WriteUtf8 (61 samples, 0.51%)</title><rect x="17.6768%" y="245" width="0.5058%" height="15" fill="rgb(222,201,40)" fg:x="2132" fg:w="61"/><text x="17.9268%" y="255.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (2 samples, 0.02%)</title><rect x="18.1660%" y="229" width="0.0166%" height="15" fill="rgb(235,61,29)" fg:x="2191" fg:w="2"/><text x="18.4160%" y="239.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.02%)</title><rect x="18.1826%" y="245" width="0.0166%" height="15" fill="rgb(219,207,3)" fg:x="2193" fg:w="2"/><text x="18.4326%" y="255.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8 (73 samples, 0.61%)</title><rect x="17.6768%" y="261" width="0.6053%" height="15" fill="rgb(222,56,46)" fg:x="2132" fg:w="73"/><text x="17.9268%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.08%)</title><rect x="18.1992%" y="245" width="0.0829%" height="15" fill="rgb(239,76,54)" fg:x="2195" fg:w="10"/><text x="18.4492%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="18.3069%" y="245" width="0.0166%" height="15" fill="rgb(231,124,27)" fg:x="2208" fg:w="2"/><text x="18.5569%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="18.2821%" y="261" width="0.0497%" height="15" fill="rgb(249,195,6)" fg:x="2205" fg:w="6"/><text x="18.5321%" y="271.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (81 samples, 0.67%)</title><rect x="17.6685%" y="277" width="0.6716%" height="15" fill="rgb(237,174,47)" fg:x="2131" fg:w="81"/><text x="17.9185%" y="287.50"></text></g><g><title>deno`&lt;serde_v8::magic::string_or_buffer::StringOrBuffer as serde_v8::magic::transl8::FromV8&gt;::from_v8 (92 samples, 0.76%)</title><rect x="17.5939%" y="293" width="0.7628%" height="15" fill="rgb(206,201,31)" fg:x="2122" fg:w="92"/><text x="17.8439%" y="303.50"></text></g><g><title>deno`serde_v8::de::from_v8 (93 samples, 0.77%)</title><rect x="17.5939%" y="309" width="0.7711%" height="15" fill="rgb(231,57,52)" fg:x="2122" fg:w="93"/><text x="17.8439%" y="319.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.02%)</title><rect x="18.3650%" y="309" width="0.0166%" height="15" fill="rgb(248,177,22)" fg:x="2215" fg:w="2"/><text x="18.6150%" y="319.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (2 samples, 0.02%)</title><rect x="18.3816%" y="309" width="0.0166%" height="15" fill="rgb(215,211,37)" fg:x="2217" fg:w="2"/><text x="18.6316%" y="319.50"></text></g><g><title>deno`v8::Number::Value (2 samples, 0.02%)</title><rect x="18.3981%" y="309" width="0.0166%" height="15" fill="rgb(241,128,51)" fg:x="2219" fg:w="2"/><text x="18.6481%" y="319.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::get (2 samples, 0.02%)</title><rect x="18.4313%" y="309" width="0.0166%" height="15" fill="rgb(227,165,31)" fg:x="2223" fg:w="2"/><text x="18.6813%" y="319.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (11 samples, 0.09%)</title><rect x="18.4479%" y="309" width="0.0912%" height="15" fill="rgb(228,167,24)" fg:x="2225" fg:w="11"/><text x="18.6979%" y="319.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (4 samples, 0.03%)</title><rect x="18.5391%" y="309" width="0.0332%" height="15" fill="rgb(228,143,12)" fg:x="2236" fg:w="4"/><text x="18.7891%" y="319.50"></text></g><g><title>deno`v8::scope::HandleScope::get_current_context (2 samples, 0.02%)</title><rect x="18.5805%" y="309" width="0.0166%" height="15" fill="rgb(249,149,8)" fg:x="2241" fg:w="2"/><text x="18.8305%" y="319.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (2 samples, 0.02%)</title><rect x="18.5805%" y="293" width="0.0166%" height="15" fill="rgb(243,35,44)" fg:x="2241" fg:w="2"/><text x="18.8305%" y="303.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (2 samples, 0.02%)</title><rect x="18.5971%" y="309" width="0.0166%" height="15" fill="rgb(246,89,9)" fg:x="2243" fg:w="2"/><text x="18.8471%" y="319.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (6 samples, 0.05%)</title><rect x="18.6137%" y="309" width="0.0497%" height="15" fill="rgb(233,213,13)" fg:x="2245" fg:w="6"/><text x="18.8637%" y="319.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.02%)</title><rect x="18.6386%" y="293" width="0.0249%" height="15" fill="rgb(233,141,41)" fg:x="2248" fg:w="3"/><text x="18.8886%" y="303.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (2 samples, 0.02%)</title><rect x="18.6635%" y="309" width="0.0166%" height="15" fill="rgb(239,167,4)" fg:x="2251" fg:w="2"/><text x="18.9135%" y="319.50"></text></g><g><title>deno`v8__Global__New (3 samples, 0.02%)</title><rect x="18.6800%" y="309" width="0.0249%" height="15" fill="rgb(209,217,16)" fg:x="2253" fg:w="3"/><text x="18.9300%" y="319.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.02%)</title><rect x="18.6883%" y="293" width="0.0166%" height="15" fill="rgb(219,88,35)" fg:x="2254" fg:w="2"/><text x="18.9383%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`fstat (223 samples, 1.85%)</title><rect x="18.7049%" y="309" width="1.8489%" height="15" fill="rgb(220,193,23)" fg:x="2256" fg:w="223"/><text x="18.9549%" y="319.50">l..</text></g><g><title>libsystem_kernel.dylib`sendfile (3,857 samples, 31.98%)</title><rect x="20.5539%" y="309" width="31.9791%" height="15" fill="rgb(230,90,52)" fg:x="2479" fg:w="3857"/><text x="20.8039%" y="319.50">libsystem_kernel.dylib`sendfile</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.11%)</title><rect x="52.5495%" y="293" width="0.1078%" height="15" fill="rgb(252,106,19)" fg:x="6338" fg:w="13"/><text x="52.7995%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.11%)</title><rect x="52.5495%" y="277" width="0.1078%" height="15" fill="rgb(206,74,20)" fg:x="6338" fg:w="13"/><text x="52.7995%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.07%)</title><rect x="52.5910%" y="261" width="0.0663%" height="15" fill="rgb(230,138,44)" fg:x="6343" fg:w="8"/><text x="52.8410%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.04%)</title><rect x="52.6159%" y="245" width="0.0415%" height="15" fill="rgb(235,182,43)" fg:x="6346" fg:w="5"/><text x="52.8659%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.13%)</title><rect x="52.5330%" y="309" width="0.1327%" height="15" fill="rgb(242,16,51)" fg:x="6336" fg:w="16"/><text x="52.7830%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.09%)</title><rect x="52.6739%" y="309" width="0.0912%" height="15" fill="rgb(248,9,4)" fg:x="6353" fg:w="11"/><text x="52.9239%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.05%)</title><rect x="52.7154%" y="293" width="0.0497%" height="15" fill="rgb(210,31,22)" fg:x="6358" fg:w="6"/><text x="52.9654%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.04%)</title><rect x="52.7237%" y="277" width="0.0415%" height="15" fill="rgb(239,54,39)" fg:x="6359" fg:w="5"/><text x="52.9737%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.02%)</title><rect x="52.7651%" y="309" width="0.0249%" height="15" fill="rgb(230,99,41)" fg:x="6364" fg:w="3"/><text x="53.0151%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="52.8812%" y="277" width="0.0249%" height="15" fill="rgb(253,106,12)" fg:x="6378" fg:w="3"/><text x="53.1312%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.12%)</title><rect x="52.7900%" y="309" width="0.1244%" height="15" fill="rgb(213,46,41)" fg:x="6367" fg:w="15"/><text x="53.0400%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.12%)</title><rect x="52.7900%" y="293" width="0.1244%" height="15" fill="rgb(215,133,35)" fg:x="6367" fg:w="15"/><text x="53.0400%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.02%)</title><rect x="52.9144%" y="309" width="0.0249%" height="15" fill="rgb(213,28,5)" fg:x="6382" fg:w="3"/><text x="53.1644%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="52.9392%" y="309" width="0.0166%" height="15" fill="rgb(215,77,49)" fg:x="6385" fg:w="2"/><text x="53.1892%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.02%)</title><rect x="52.9558%" y="309" width="0.0249%" height="15" fill="rgb(248,100,22)" fg:x="6387" fg:w="3"/><text x="53.2058%" y="319.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (5,992 samples, 49.68%)</title><rect x="3.3165%" y="325" width="49.6808%" height="15" fill="rgb(208,67,9)" fg:x="400" fg:w="5992"/><text x="3.5665%" y="335.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn</text></g><g><title>deno`core::ptr::drop_in_place&lt;futures_util::future::maybe_done::MaybeDone&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = (v8::handle::Global&lt;v8::data::Context&gt;,i32,usize,deno_core::ops::OpResult)&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="53.0138%" y="325" width="0.0166%" height="15" fill="rgb(219,133,21)" fg:x="6394" fg:w="2"/><text x="53.2638%" y="335.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (5 samples, 0.04%)</title><rect x="53.0304%" y="325" width="0.0415%" height="15" fill="rgb(246,46,29)" fg:x="6396" fg:w="5"/><text x="53.2804%" y="335.50"></text></g><g><title>deno`futures_task::noop_waker::noop (2 samples, 0.02%)</title><rect x="53.0719%" y="325" width="0.0166%" height="15" fill="rgb(246,185,52)" fg:x="6401" fg:w="2"/><text x="53.3219%" y="335.50"></text></g><g><title>deno`serde_v8::de::from_v8 (3 samples, 0.02%)</title><rect x="53.0968%" y="325" width="0.0249%" height="15" fill="rgb(252,136,11)" fg:x="6404" fg:w="3"/><text x="53.3468%" y="335.50"></text></g><g><title>deno`v8::Integer::Value (2 samples, 0.02%)</title><rect x="53.1299%" y="325" width="0.0166%" height="15" fill="rgb(219,138,53)" fg:x="6408" fg:w="2"/><text x="53.3799%" y="335.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::get (2 samples, 0.02%)</title><rect x="53.1548%" y="325" width="0.0166%" height="15" fill="rgb(211,51,23)" fg:x="6411" fg:w="2"/><text x="53.4048%" y="335.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (3 samples, 0.02%)</title><rect x="53.1714%" y="325" width="0.0249%" height="15" fill="rgb(247,221,28)" fg:x="6413" fg:w="3"/><text x="53.4214%" y="335.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (5 samples, 0.04%)</title><rect x="53.2045%" y="325" width="0.0415%" height="15" fill="rgb(251,222,45)" fg:x="6417" fg:w="5"/><text x="53.4545%" y="335.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (6,066 samples, 50.29%)</title><rect x="3.0512%" y="357" width="50.2943%" height="15" fill="rgb(217,162,53)" fg:x="368" fg:w="6066"/><text x="3.3012%" y="367.50">deno`v8::internal::Builtin_HandleApiCall</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (6,050 samples, 50.16%)</title><rect x="3.1838%" y="341" width="50.1617%" height="15" fill="rgb(229,93,14)" fg:x="384" fg:w="6050"/><text x="3.4338%" y="351.50">deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous names..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.04%)</title><rect x="53.3040%" y="325" width="0.0415%" height="15" fill="rgb(209,67,49)" fg:x="6429" fg:w="5"/><text x="53.5540%" y="335.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (6,072 samples, 50.34%)</title><rect x="3.0180%" y="373" width="50.3441%" height="15" fill="rgb(213,87,29)" fg:x="364" fg:w="6072"/><text x="3.2680%" y="383.50">deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2 samples, 0.02%)</title><rect x="53.3455%" y="357" width="0.0166%" height="15" fill="rgb(205,151,52)" fg:x="6434" fg:w="2"/><text x="53.5955%" y="367.50"></text></g><g><title>0x110063664 (6,076 samples, 50.38%)</title><rect x="3.0097%" y="389" width="50.3772%" height="15" fill="rgb(253,215,39)" fg:x="363" fg:w="6076"/><text x="3.2597%" y="399.50">0x110063664</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.02%)</title><rect x="53.3621%" y="373" width="0.0249%" height="15" fill="rgb(221,220,41)" fg:x="6436" fg:w="3"/><text x="53.6121%" y="383.50"></text></g><g><title>deno`Builtins_MapPrototypeSet (3 samples, 0.02%)</title><rect x="53.4201%" y="357" width="0.0249%" height="15" fill="rgb(218,133,21)" fg:x="6443" fg:w="3"/><text x="53.6701%" y="367.50"></text></g><g><title>0x11006ce40 (4 samples, 0.03%)</title><rect x="53.4201%" y="373" width="0.0332%" height="15" fill="rgb(221,193,43)" fg:x="6443" fg:w="4"/><text x="53.6701%" y="383.50"></text></g><g><title>0x11006cefc (2 samples, 0.02%)</title><rect x="53.4782%" y="373" width="0.0166%" height="15" fill="rgb(240,128,52)" fg:x="6450" fg:w="2"/><text x="53.7282%" y="383.50"></text></g><g><title>0x11006cf84 (2 samples, 0.02%)</title><rect x="53.5113%" y="373" width="0.0166%" height="15" fill="rgb(253,114,12)" fg:x="6454" fg:w="2"/><text x="53.7613%" y="383.50"></text></g><g><title>0x11006cf9c (3 samples, 0.02%)</title><rect x="53.5279%" y="373" width="0.0249%" height="15" fill="rgb(215,223,47)" fg:x="6456" fg:w="3"/><text x="53.7779%" y="383.50"></text></g><g><title>0x1100636e4 (23 samples, 0.19%)</title><rect x="53.4035%" y="389" width="0.1907%" height="15" fill="rgb(248,225,23)" fg:x="6441" fg:w="23"/><text x="53.6535%" y="399.50"></text></g><g><title>0x11006d114 (4 samples, 0.03%)</title><rect x="53.5611%" y="373" width="0.0332%" height="15" fill="rgb(250,108,0)" fg:x="6460" fg:w="4"/><text x="53.8111%" y="383.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (4 samples, 0.03%)</title><rect x="53.5611%" y="357" width="0.0332%" height="15" fill="rgb(228,208,7)" fg:x="6460" fg:w="4"/><text x="53.8111%" y="367.50"></text></g><g><title>0x11006371c (31 samples, 0.26%)</title><rect x="53.6025%" y="389" width="0.2570%" height="15" fill="rgb(244,45,10)" fg:x="6465" fg:w="31"/><text x="53.8525%" y="399.50"></text></g><g><title>deno`Builtins_PromisePrototypeThen (30 samples, 0.25%)</title><rect x="53.6108%" y="373" width="0.2487%" height="15" fill="rgb(207,125,25)" fg:x="6466" fg:w="30"/><text x="53.8608%" y="383.50"></text></g><g><title>0x1100638b4 (3 samples, 0.02%)</title><rect x="53.8844%" y="389" width="0.0249%" height="15" fill="rgb(210,195,18)" fg:x="6499" fg:w="3"/><text x="54.1344%" y="399.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (3 samples, 0.02%)</title><rect x="53.8844%" y="373" width="0.0249%" height="15" fill="rgb(249,80,12)" fg:x="6499" fg:w="3"/><text x="54.1344%" y="383.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="53.9425%" y="357" width="0.0166%" height="15" fill="rgb(221,65,9)" fg:x="6506" fg:w="2"/><text x="54.1925%" y="367.50"></text></g><g><title>0x1100641fc (9 samples, 0.07%)</title><rect x="53.9259%" y="389" width="0.0746%" height="15" fill="rgb(235,49,36)" fg:x="6504" fg:w="9"/><text x="54.1759%" y="399.50"></text></g><g><title>deno`deno_flash::op_flash_get_method_fast (8 samples, 0.07%)</title><rect x="53.9342%" y="373" width="0.0663%" height="15" fill="rgb(225,32,20)" fg:x="6505" fg:w="8"/><text x="54.1842%" y="383.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="53.9590%" y="357" width="0.0415%" height="15" fill="rgb(215,141,46)" fg:x="6508" fg:w="5"/><text x="54.2090%" y="367.50"></text></g><g><title>0x11003a3ac (2 samples, 0.02%)</title><rect x="54.0420%" y="373" width="0.0166%" height="15" fill="rgb(250,160,47)" fg:x="6518" fg:w="2"/><text x="54.2920%" y="383.50"></text></g><g><title>0x11003a3bc (3 samples, 0.02%)</title><rect x="54.0585%" y="373" width="0.0249%" height="15" fill="rgb(216,222,40)" fg:x="6520" fg:w="3"/><text x="54.3085%" y="383.50"></text></g><g><title>0x11003a3c8 (17 samples, 0.14%)</title><rect x="54.0834%" y="373" width="0.1410%" height="15" fill="rgb(234,217,39)" fg:x="6523" fg:w="17"/><text x="54.3334%" y="383.50"></text></g><g><title>0x11003a3e8 (2 samples, 0.02%)</title><rect x="54.2244%" y="373" width="0.0166%" height="15" fill="rgb(207,178,40)" fg:x="6540" fg:w="2"/><text x="54.4744%" y="383.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (2 samples, 0.02%)</title><rect x="54.2244%" y="357" width="0.0166%" height="15" fill="rgb(221,136,13)" fg:x="6540" fg:w="2"/><text x="54.4744%" y="367.50"></text></g><g><title>0x11005e0fc (2 samples, 0.02%)</title><rect x="54.2409%" y="373" width="0.0166%" height="15" fill="rgb(249,199,10)" fg:x="6542" fg:w="2"/><text x="54.4909%" y="383.50"></text></g><g><title>0x110064508 (27 samples, 0.22%)</title><rect x="54.0420%" y="389" width="0.2239%" height="15" fill="rgb(249,222,13)" fg:x="6518" fg:w="27"/><text x="54.2920%" y="399.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_u32 (3 samples, 0.02%)</title><rect x="54.3819%" y="341" width="0.0249%" height="15" fill="rgb(244,185,38)" fg:x="6559" fg:w="3"/><text x="54.6319%" y="351.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new_from_unsigned (3 samples, 0.02%)</title><rect x="54.3819%" y="325" width="0.0249%" height="15" fill="rgb(236,202,9)" fg:x="6559" fg:w="3"/><text x="54.6319%" y="335.50"></text></g><g><title>deno`v8::Integer::NewFromUnsigned (3 samples, 0.02%)</title><rect x="54.3819%" y="309" width="0.0249%" height="15" fill="rgb(250,229,37)" fg:x="6559" fg:w="3"/><text x="54.6319%" y="319.50"></text></g><g><title>deno`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="54.4151%" y="341" width="0.0166%" height="15" fill="rgb(206,174,23)" fg:x="6563" fg:w="2"/><text x="54.6651%" y="351.50"></text></g><g><title>deno`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (8 samples, 0.07%)</title><rect x="54.4316%" y="341" width="0.0663%" height="15" fill="rgb(211,33,43)" fg:x="6565" fg:w="8"/><text x="54.6816%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.06%)</title><rect x="54.5394%" y="325" width="0.0580%" height="15" fill="rgb(245,58,50)" fg:x="6578" fg:w="7"/><text x="54.7894%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.06%)</title><rect x="54.5394%" y="309" width="0.0580%" height="15" fill="rgb(244,68,36)" fg:x="6578" fg:w="7"/><text x="54.7894%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.05%)</title><rect x="54.5477%" y="293" width="0.0497%" height="15" fill="rgb(232,229,15)" fg:x="6579" fg:w="6"/><text x="54.7977%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.03%)</title><rect x="54.5643%" y="277" width="0.0332%" height="15" fill="rgb(254,30,23)" fg:x="6581" fg:w="4"/><text x="54.8143%" y="287.50"></text></g><g><title>deno`deno_core::resources::ResourceTable::add (13 samples, 0.11%)</title><rect x="54.4980%" y="341" width="0.1078%" height="15" fill="rgb(235,160,14)" fg:x="6573" fg:w="13"/><text x="54.7480%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="54.7716%" y="229" width="0.0166%" height="15" fill="rgb(212,155,44)" fg:x="6606" fg:w="2"/><text x="55.0216%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="54.8130%" y="197" width="0.0332%" height="15" fill="rgb(226,2,50)" fg:x="6611" fg:w="4"/><text x="55.0630%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="54.8628%" y="181" width="0.0249%" height="15" fill="rgb(234,177,6)" fg:x="6617" fg:w="3"/><text x="55.1128%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.08%)</title><rect x="54.8462%" y="197" width="0.0829%" height="15" fill="rgb(217,24,9)" fg:x="6615" fg:w="10"/><text x="55.0962%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="54.8959%" y="181" width="0.0332%" height="15" fill="rgb(220,13,46)" fg:x="6621" fg:w="4"/><text x="55.1459%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.16%)</title><rect x="54.7965%" y="213" width="0.1575%" height="15" fill="rgb(239,221,27)" fg:x="6609" fg:w="19"/><text x="55.0465%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="54.9291%" y="197" width="0.0249%" height="15" fill="rgb(222,198,25)" fg:x="6625" fg:w="3"/><text x="55.1791%" y="207.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.21%)</title><rect x="54.7633%" y="261" width="0.2073%" height="15" fill="rgb(211,99,13)" fg:x="6605" fg:w="25"/><text x="55.0133%" y="271.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (24 samples, 0.20%)</title><rect x="54.7716%" y="245" width="0.1990%" height="15" fill="rgb(232,111,31)" fg:x="6606" fg:w="24"/><text x="55.0216%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (22 samples, 0.18%)</title><rect x="54.7882%" y="229" width="0.1824%" height="15" fill="rgb(245,82,37)" fg:x="6608" fg:w="22"/><text x="55.0382%" y="239.50"></text></g><g><title>deno`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (29 samples, 0.24%)</title><rect x="54.7384%" y="277" width="0.2404%" height="15" fill="rgb(227,149,46)" fg:x="6602" fg:w="29"/><text x="54.9884%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.02%)</title><rect x="55.0452%" y="181" width="0.0166%" height="15" fill="rgb(218,36,50)" fg:x="6639" fg:w="2"/><text x="55.2952%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.05%)</title><rect x="55.0369%" y="197" width="0.0497%" height="15" fill="rgb(226,80,48)" fg:x="6638" fg:w="6"/><text x="55.2869%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.02%)</title><rect x="55.0618%" y="181" width="0.0249%" height="15" fill="rgb(238,224,15)" fg:x="6641" fg:w="3"/><text x="55.3118%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="55.0701%" y="165" width="0.0166%" height="15" fill="rgb(241,136,10)" fg:x="6642" fg:w="2"/><text x="55.3201%" y="175.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (11 samples, 0.09%)</title><rect x="55.0120%" y="229" width="0.0912%" height="15" fill="rgb(208,32,45)" fg:x="6635" fg:w="11"/><text x="55.2620%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.09%)</title><rect x="55.0120%" y="213" width="0.0912%" height="15" fill="rgb(207,135,9)" fg:x="6635" fg:w="11"/><text x="55.2620%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="55.0866%" y="197" width="0.0166%" height="15" fill="rgb(206,86,44)" fg:x="6644" fg:w="2"/><text x="55.3366%" y="207.50"></text></g><g><title>deno`&lt;core::str::lossy::Utf8Lossy as core::fmt::Display&gt;::fmt (16 samples, 0.13%)</title><rect x="54.9789%" y="277" width="0.1327%" height="15" fill="rgb(245,177,15)" fg:x="6631" fg:w="16"/><text x="55.2289%" y="287.50"></text></g><g><title>deno`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (15 samples, 0.12%)</title><rect x="54.9871%" y="261" width="0.1244%" height="15" fill="rgb(206,64,50)" fg:x="6632" fg:w="15"/><text x="55.2371%" y="271.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.12%)</title><rect x="54.9871%" y="245" width="0.1244%" height="15" fill="rgb(234,36,40)" fg:x="6632" fg:w="15"/><text x="55.2371%" y="255.50"></text></g><g><title>deno`&lt;core::str::lossy::Utf8LossyChunksIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="55.1115%" y="277" width="0.0912%" height="15" fill="rgb(213,64,8)" fg:x="6647" fg:w="11"/><text x="55.3615%" y="287.50"></text></g><g><title>deno`core::fmt::write (62 samples, 0.51%)</title><rect x="54.7052%" y="293" width="0.5141%" height="15" fill="rgb(210,75,36)" fg:x="6598" fg:w="62"/><text x="54.9552%" y="303.50"></text></g><g><title>deno`alloc::fmt::format (68 samples, 0.56%)</title><rect x="54.6804%" y="309" width="0.5638%" height="15" fill="rgb(229,88,21)" fg:x="6595" fg:w="68"/><text x="54.9304%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="55.2193%" y="293" width="0.0249%" height="15" fill="rgb(252,204,47)" fg:x="6660" fg:w="3"/><text x="55.4693%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="55.2276%" y="277" width="0.0166%" height="15" fill="rgb(208,77,27)" fg:x="6661" fg:w="2"/><text x="55.4776%" y="287.50"></text></g><g><title>deno`deno_runtime::fs_util::resolve_from_cwd (9 samples, 0.07%)</title><rect x="55.2442%" y="309" width="0.0746%" height="15" fill="rgb(221,76,26)" fg:x="6663" fg:w="9"/><text x="55.4942%" y="319.50"></text></g><g><title>deno`&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.07%)</title><rect x="55.3271%" y="293" width="0.0663%" height="15" fill="rgb(225,139,18)" fg:x="6673" fg:w="8"/><text x="55.5771%" y="303.50"></text></g><g><title>deno`&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.20%)</title><rect x="55.5758%" y="277" width="0.1990%" height="15" fill="rgb(230,137,11)" fg:x="6703" fg:w="24"/><text x="55.8258%" y="287.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="55.7748%" y="277" width="0.0249%" height="15" fill="rgb(212,28,1)" fg:x="6727" fg:w="3"/><text x="56.0248%" y="287.50"></text></g><g><title>deno`std::path::Path::to_path_buf (3 samples, 0.02%)</title><rect x="55.7997%" y="277" width="0.0249%" height="15" fill="rgb(248,164,17)" fg:x="6730" fg:w="3"/><text x="56.0497%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="55.7997%" y="261" width="0.0249%" height="15" fill="rgb(222,171,42)" fg:x="6730" fg:w="3"/><text x="56.0497%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="55.9406%" y="229" width="0.0166%" height="15" fill="rgb(243,84,45)" fg:x="6747" fg:w="2"/><text x="56.1906%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="55.9406%" y="213" width="0.0166%" height="15" fill="rgb(252,49,23)" fg:x="6747" fg:w="2"/><text x="56.1906%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="55.9406%" y="197" width="0.0166%" height="15" fill="rgb(215,19,7)" fg:x="6747" fg:w="2"/><text x="56.1906%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="55.9572%" y="229" width="0.0249%" height="15" fill="rgb(238,81,41)" fg:x="6749" fg:w="3"/><text x="56.2072%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="56.0484%" y="197" width="0.0332%" height="15" fill="rgb(210,199,37)" fg:x="6760" fg:w="4"/><text x="56.2984%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="56.1065%" y="181" width="0.0415%" height="15" fill="rgb(244,192,49)" fg:x="6767" fg:w="5"/><text x="56.3565%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.04%)</title><rect x="56.1065%" y="165" width="0.0415%" height="15" fill="rgb(226,211,11)" fg:x="6767" fg:w="5"/><text x="56.3565%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.09%)</title><rect x="56.0816%" y="197" width="0.0912%" height="15" fill="rgb(236,162,54)" fg:x="6764" fg:w="11"/><text x="56.3316%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="56.1479%" y="181" width="0.0249%" height="15" fill="rgb(220,229,9)" fg:x="6772" fg:w="3"/><text x="56.3979%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.16%)</title><rect x="56.0235%" y="213" width="0.1575%" height="15" fill="rgb(250,87,22)" fg:x="6757" fg:w="19"/><text x="56.2735%" y="223.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (39 samples, 0.32%)</title><rect x="55.9158%" y="261" width="0.3234%" height="15" fill="rgb(239,43,17)" fg:x="6744" fg:w="39"/><text x="56.1658%" y="271.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (37 samples, 0.31%)</title><rect x="55.9323%" y="245" width="0.3068%" height="15" fill="rgb(231,177,25)" fg:x="6746" fg:w="37"/><text x="56.1823%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.26%)</title><rect x="55.9821%" y="229" width="0.2570%" height="15" fill="rgb(219,179,1)" fg:x="6752" fg:w="31"/><text x="56.2321%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.06%)</title><rect x="56.1811%" y="213" width="0.0580%" height="15" fill="rgb(238,219,53)" fg:x="6776" fg:w="7"/><text x="56.4311%" y="223.50"></text></g><g><title>deno`std::path::PathBuf::_push (52 samples, 0.43%)</title><rect x="55.8246%" y="277" width="0.4311%" height="15" fill="rgb(232,167,36)" fg:x="6733" fg:w="52"/><text x="56.0746%" y="287.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="56.2391%" y="261" width="0.0166%" height="15" fill="rgb(244,19,51)" fg:x="6783" fg:w="2"/><text x="56.4891%" y="271.50"></text></g><g><title>deno`deno_runtime::fs_util::resolve_from_cwd (120 samples, 0.99%)</title><rect x="55.4017%" y="293" width="0.9949%" height="15" fill="rgb(224,6,22)" fg:x="6682" fg:w="120"/><text x="55.6517%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.12%)</title><rect x="56.2806%" y="277" width="0.1161%" height="15" fill="rgb(224,145,5)" fg:x="6788" fg:w="14"/><text x="56.5306%" y="287.50"></text></g><g><title>deno`deno_runtime::permissions::UnaryPermission&lt;deno_runtime::permissions::ReadDescriptor&gt;::query (138 samples, 1.14%)</title><rect x="55.3188%" y="309" width="1.1442%" height="15" fill="rgb(234,130,49)" fg:x="6672" fg:w="138"/><text x="55.5688%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.05%)</title><rect x="56.4132%" y="293" width="0.0497%" height="15" fill="rgb(254,6,2)" fg:x="6804" fg:w="6"/><text x="56.6632%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="56.4381%" y="277" width="0.0249%" height="15" fill="rgb(208,96,46)" fg:x="6807" fg:w="3"/><text x="56.6881%" y="287.50"></text></g><g><title>deno`&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="56.4713%" y="293" width="0.0497%" height="15" fill="rgb(239,3,39)" fg:x="6811" fg:w="6"/><text x="56.7213%" y="303.50"></text></g><g><title>deno`&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.35%)</title><rect x="56.7449%" y="277" width="0.3482%" height="15" fill="rgb(233,210,1)" fg:x="6844" fg:w="42"/><text x="56.9949%" y="287.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="57.1014%" y="277" width="0.0166%" height="15" fill="rgb(244,137,37)" fg:x="6887" fg:w="2"/><text x="57.3514%" y="287.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.02%)</title><rect x="57.1180%" y="277" width="0.0249%" height="15" fill="rgb(240,136,2)" fg:x="6889" fg:w="3"/><text x="57.3680%" y="287.50"></text></g><g><title>deno`std::path::Path::to_path_buf (4 samples, 0.03%)</title><rect x="57.1429%" y="277" width="0.0332%" height="15" fill="rgb(239,18,37)" fg:x="6892" fg:w="4"/><text x="57.3929%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="57.1429%" y="261" width="0.0332%" height="15" fill="rgb(218,185,22)" fg:x="6892" fg:w="4"/><text x="57.3929%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="57.1511%" y="245" width="0.0249%" height="15" fill="rgb(225,218,4)" fg:x="6893" fg:w="3"/><text x="57.4011%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.02%)</title><rect x="57.1511%" y="229" width="0.0249%" height="15" fill="rgb(230,182,32)" fg:x="6893" fg:w="3"/><text x="57.4011%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.12%)</title><rect x="57.3253%" y="229" width="0.1161%" height="15" fill="rgb(242,56,43)" fg:x="6914" fg:w="14"/><text x="57.5753%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.08%)</title><rect x="57.3584%" y="213" width="0.0829%" height="15" fill="rgb(233,99,24)" fg:x="6918" fg:w="10"/><text x="57.6084%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.07%)</title><rect x="57.3750%" y="197" width="0.0663%" height="15" fill="rgb(234,209,42)" fg:x="6920" fg:w="8"/><text x="57.6250%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (3 samples, 0.02%)</title><rect x="57.5160%" y="197" width="0.0249%" height="15" fill="rgb(227,7,12)" fg:x="6937" fg:w="3"/><text x="57.7660%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="57.5408%" y="197" width="0.0166%" height="15" fill="rgb(245,203,43)" fg:x="6940" fg:w="2"/><text x="57.7908%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.06%)</title><rect x="57.5906%" y="181" width="0.0580%" height="15" fill="rgb(238,205,33)" fg:x="6946" fg:w="7"/><text x="57.8406%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="57.6486%" y="181" width="0.0415%" height="15" fill="rgb(231,56,7)" fg:x="6953" fg:w="5"/><text x="57.8986%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="57.6569%" y="165" width="0.0332%" height="15" fill="rgb(244,186,29)" fg:x="6954" fg:w="4"/><text x="57.9069%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (18 samples, 0.15%)</title><rect x="57.5657%" y="197" width="0.1492%" height="15" fill="rgb(234,111,31)" fg:x="6943" fg:w="18"/><text x="57.8157%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.02%)</title><rect x="57.6901%" y="181" width="0.0249%" height="15" fill="rgb(241,149,10)" fg:x="6958" fg:w="3"/><text x="57.9401%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (26 samples, 0.22%)</title><rect x="57.5077%" y="213" width="0.2156%" height="15" fill="rgb(249,206,44)" fg:x="6936" fg:w="26"/><text x="57.7577%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="57.7232%" y="213" width="0.0166%" height="15" fill="rgb(251,153,30)" fg:x="6962" fg:w="2"/><text x="57.9732%" y="223.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (51 samples, 0.42%)</title><rect x="57.3253%" y="245" width="0.4229%" height="15" fill="rgb(239,152,38)" fg:x="6914" fg:w="51"/><text x="57.5753%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (36 samples, 0.30%)</title><rect x="57.4496%" y="229" width="0.2985%" height="15" fill="rgb(249,139,47)" fg:x="6929" fg:w="36"/><text x="57.6996%" y="239.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (55 samples, 0.46%)</title><rect x="57.3004%" y="261" width="0.4560%" height="15" fill="rgb(244,64,35)" fg:x="6911" fg:w="55"/><text x="57.5504%" y="271.50"></text></g><g><title>deno`std::path::PathBuf::_push (71 samples, 0.59%)</title><rect x="57.1760%" y="277" width="0.5887%" height="15" fill="rgb(216,46,15)" fg:x="6896" fg:w="71"/><text x="57.4260%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="57.7730%" y="277" width="0.0249%" height="15" fill="rgb(250,74,19)" fg:x="6968" fg:w="3"/><text x="58.0230%" y="287.50"></text></g><g><title>deno`deno_runtime::fs_util::resolve_from_cwd (169 samples, 1.40%)</title><rect x="56.5293%" y="293" width="1.4012%" height="15" fill="rgb(249,42,33)" fg:x="6818" fg:w="169"/><text x="56.7793%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.12%)</title><rect x="57.8144%" y="277" width="0.1161%" height="15" fill="rgb(242,149,17)" fg:x="6973" fg:w="14"/><text x="58.0644%" y="287.50"></text></g><g><title>deno`std::path::Component::as_os_str (5 samples, 0.04%)</title><rect x="57.9305%" y="293" width="0.0415%" height="15" fill="rgb(244,29,21)" fg:x="6987" fg:w="5"/><text x="58.1805%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="57.9803%" y="245" width="0.0332%" height="15" fill="rgb(220,130,37)" fg:x="6993" fg:w="4"/><text x="58.2303%" y="255.50"></text></g><g><title>deno`std::path::Path::to_path_buf (6 samples, 0.05%)</title><rect x="57.9720%" y="293" width="0.0497%" height="15" fill="rgb(211,67,2)" fg:x="6992" fg:w="6"/><text x="58.2220%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="57.9720%" y="277" width="0.0497%" height="15" fill="rgb(235,68,52)" fg:x="6992" fg:w="6"/><text x="58.2220%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="57.9803%" y="261" width="0.0415%" height="15" fill="rgb(246,142,3)" fg:x="6993" fg:w="5"/><text x="58.2303%" y="271.50"></text></g><g><title>deno`std::path::PathBuf::_push (3 samples, 0.02%)</title><rect x="58.0217%" y="293" width="0.0249%" height="15" fill="rgb(241,25,7)" fg:x="6998" fg:w="3"/><text x="58.2717%" y="303.50"></text></g><g><title>deno`deno_runtime::permissions::resolved_and_display_path (196 samples, 1.63%)</title><rect x="56.4630%" y="309" width="1.6251%" height="15" fill="rgb(242,119,39)" fg:x="6810" fg:w="196"/><text x="56.7130%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="58.0632%" y="293" width="0.0249%" height="15" fill="rgb(241,98,45)" fg:x="7003" fg:w="3"/><text x="58.3132%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.09%)</title><rect x="58.0963%" y="309" width="0.0912%" height="15" fill="rgb(254,28,30)" fg:x="7007" fg:w="11"/><text x="58.3463%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.04%)</title><rect x="58.1461%" y="293" width="0.0415%" height="15" fill="rgb(241,142,54)" fg:x="7013" fg:w="5"/><text x="58.3961%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="58.1875%" y="309" width="0.0166%" height="15" fill="rgb(222,85,15)" fg:x="7018" fg:w="2"/><text x="58.4375%" y="319.50"></text></g><g><title>deno`deno_runtime::permissions::UnaryPermission&lt;deno_runtime::permissions::ReadDescriptor&gt;::check (431 samples, 3.57%)</title><rect x="54.6472%" y="325" width="3.5735%" height="15" fill="rgb(210,85,47)" fg:x="6591" fg:w="431"/><text x="54.8972%" y="335.50">deno..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="58.2041%" y="309" width="0.0166%" height="15" fill="rgb(224,206,25)" fg:x="7020" fg:w="2"/><text x="58.4541%" y="319.50"></text></g><g><title>deno`std::path::Path::to_path_buf (4 samples, 0.03%)</title><rect x="58.2207%" y="325" width="0.0332%" height="15" fill="rgb(243,201,19)" fg:x="7022" fg:w="4"/><text x="58.4707%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="58.2290%" y="309" width="0.0249%" height="15" fill="rgb(236,59,4)" fg:x="7023" fg:w="3"/><text x="58.4790%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="58.2622%" y="325" width="0.0249%" height="15" fill="rgb(254,179,45)" fg:x="7027" fg:w="3"/><text x="58.5122%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="58.2870%" y="325" width="0.0166%" height="15" fill="rgb(226,14,10)" fg:x="7030" fg:w="2"/><text x="58.5370%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="58.3036%" y="325" width="0.0166%" height="15" fill="rgb(244,27,41)" fg:x="7032" fg:w="2"/><text x="58.5536%" y="335.50"></text></g><g><title>deno`deno_runtime::ops::fs::open_helper (451 samples, 3.74%)</title><rect x="54.6058%" y="341" width="3.7393%" height="15" fill="rgb(235,35,32)" fg:x="6586" fg:w="451"/><text x="54.8558%" y="351.50">deno..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="58.3202%" y="325" width="0.0249%" height="15" fill="rgb(218,68,31)" fg:x="7034" fg:w="3"/><text x="58.5702%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.10%)</title><rect x="58.3534%" y="325" width="0.0995%" height="15" fill="rgb(207,120,37)" fg:x="7038" fg:w="12"/><text x="58.6034%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.08%)</title><rect x="58.3700%" y="309" width="0.0829%" height="15" fill="rgb(227,98,0)" fg:x="7040" fg:w="10"/><text x="58.6200%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.07%)</title><rect x="58.3865%" y="293" width="0.0663%" height="15" fill="rgb(207,7,3)" fg:x="7042" fg:w="8"/><text x="58.6365%" y="303.50"></text></g><g><title>deno`deno_runtime::ops::io::StdFileResource::fs_file (14 samples, 0.12%)</title><rect x="58.3451%" y="341" width="0.1161%" height="15" fill="rgb(206,98,19)" fg:x="7037" fg:w="14"/><text x="58.5951%" y="351.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.02%)</title><rect x="58.5026%" y="309" width="0.0249%" height="15" fill="rgb(217,5,26)" fg:x="7056" fg:w="3"/><text x="58.7526%" y="319.50"></text></g><g><title>deno`v8::String::WriteUtf8 (14 samples, 0.12%)</title><rect x="58.5524%" y="293" width="0.1161%" height="15" fill="rgb(235,190,38)" fg:x="7062" fg:w="14"/><text x="58.8024%" y="303.50"></text></g><g><title>deno`v8::internal::String::SlowGetFlatContent(v8::internal::CombinationAssertScope&lt;v8::internal::PerThreadAssertScopeDebugOnly&lt;(v8::internal::PerThreadAssertType)0, false&gt;, v8::internal::PerThreadAssertScopeDebugOnly&lt; (2 samples, 0.02%)</title><rect x="58.6519%" y="277" width="0.0166%" height="15" fill="rgb(247,86,24)" fg:x="7074" fg:w="2"/><text x="58.9019%" y="287.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8 (21 samples, 0.17%)</title><rect x="58.5358%" y="309" width="0.1741%" height="15" fill="rgb(205,101,16)" fg:x="7060" fg:w="21"/><text x="58.7858%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.04%)</title><rect x="58.6684%" y="293" width="0.0415%" height="15" fill="rgb(246,168,33)" fg:x="7076" fg:w="5"/><text x="58.9184%" y="303.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (32 samples, 0.27%)</title><rect x="58.4860%" y="325" width="0.2653%" height="15" fill="rgb(231,114,1)" fg:x="7054" fg:w="32"/><text x="58.7360%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="58.7099%" y="309" width="0.0415%" height="15" fill="rgb(207,184,53)" fg:x="7081" fg:w="5"/><text x="58.9599%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="58.7348%" y="293" width="0.0166%" height="15" fill="rgb(224,95,51)" fg:x="7084" fg:w="2"/><text x="58.9848%" y="303.50"></text></g><g><title>deno`serde_v8::de::from_v8 (35 samples, 0.29%)</title><rect x="58.4777%" y="341" width="0.2902%" height="15" fill="rgb(212,188,45)" fg:x="7053" fg:w="35"/><text x="58.7277%" y="351.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (2 samples, 0.02%)</title><rect x="58.7679%" y="341" width="0.0166%" height="15" fill="rgb(223,154,38)" fg:x="7088" fg:w="2"/><text x="59.0179%" y="351.50"></text></g><g><title>deno`core::slice::memchr::memchr_general_case (3 samples, 0.02%)</title><rect x="58.8094%" y="309" width="0.0249%" height="15" fill="rgb(251,22,52)" fg:x="7093" fg:w="3"/><text x="59.0594%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="58.8343%" y="309" width="0.0415%" height="15" fill="rgb(229,209,22)" fg:x="7096" fg:w="5"/><text x="59.0843%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="58.8426%" y="293" width="0.0332%" height="15" fill="rgb(234,138,34)" fg:x="7097" fg:w="4"/><text x="59.0926%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.03%)</title><rect x="58.8426%" y="277" width="0.0332%" height="15" fill="rgb(212,95,11)" fg:x="7097" fg:w="4"/><text x="59.0926%" y="287.50"></text></g><g><title>deno`&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (11 samples, 0.09%)</title><rect x="58.7928%" y="325" width="0.0912%" height="15" fill="rgb(240,179,47)" fg:x="7091" fg:w="11"/><text x="59.0428%" y="335.50"></text></g><g><title>deno`alloc::ffi::c_str::CString::_from_vec_unchecked (2 samples, 0.02%)</title><rect x="58.8840%" y="325" width="0.0166%" height="15" fill="rgb(240,163,11)" fg:x="7102" fg:w="2"/><text x="59.1340%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__open (1,601 samples, 13.27%)</title><rect x="58.9089%" y="309" width="13.2742%" height="15" fill="rgb(236,37,12)" fg:x="7105" fg:w="1601"/><text x="59.1589%" y="319.50">libsystem_kernel.dyl..</text></g><g><title>deno`std::sys::unix::fs::File::open_c (1,603 samples, 13.29%)</title><rect x="58.9006%" y="325" width="13.2908%" height="15" fill="rgb(232,164,16)" fg:x="7104" fg:w="1603"/><text x="59.1506%" y="335.50">deno`std::sys::unix:..</text></g><g><title>libsystem_kernel.dylib`open (2 samples, 0.02%)</title><rect x="72.1914%" y="325" width="0.0166%" height="15" fill="rgb(244,205,15)" fg:x="8707" fg:w="2"/><text x="72.4414%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.04%)</title><rect x="72.2079%" y="325" width="0.0415%" height="15" fill="rgb(223,117,47)" fg:x="8709" fg:w="5"/><text x="72.4579%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="72.2328%" y="309" width="0.0166%" height="15" fill="rgb(244,107,35)" fg:x="8712" fg:w="2"/><text x="72.4828%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="72.2494%" y="325" width="0.0166%" height="15" fill="rgb(205,140,8)" fg:x="8714" fg:w="2"/><text x="72.4994%" y="335.50"></text></g><g><title>deno`std::fs::OpenOptions::_open (1,628 samples, 13.50%)</title><rect x="58.7845%" y="341" width="13.4981%" height="15" fill="rgb(228,84,46)" fg:x="7090" fg:w="1628"/><text x="59.0345%" y="351.50">deno`std::fs::OpenOp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="72.2660%" y="325" width="0.0166%" height="15" fill="rgb(254,188,9)" fg:x="8716" fg:w="2"/><text x="72.5160%" y="335.50"></text></g><g><title>deno`std::sys::unix::fs::File::open_c (3 samples, 0.02%)</title><rect x="72.2909%" y="341" width="0.0249%" height="15" fill="rgb(206,112,54)" fg:x="8719" fg:w="3"/><text x="72.5409%" y="351.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (2 samples, 0.02%)</title><rect x="72.3323%" y="341" width="0.0166%" height="15" fill="rgb(216,84,49)" fg:x="8724" fg:w="2"/><text x="72.5823%" y="351.50"></text></g><g><title>deno`v8__Value__IsNullOrUndefined (3 samples, 0.02%)</title><rect x="72.3655%" y="341" width="0.0249%" height="15" fill="rgb(214,194,35)" fg:x="8728" fg:w="3"/><text x="72.6155%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="72.3986%" y="341" width="0.0166%" height="15" fill="rgb(249,28,3)" fg:x="8732" fg:w="2"/><text x="72.6486%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.06%)</title><rect x="72.4152%" y="341" width="0.0580%" height="15" fill="rgb(222,56,52)" fg:x="8734" fg:w="7"/><text x="72.6652%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="72.4401%" y="325" width="0.0332%" height="15" fill="rgb(245,217,50)" fg:x="8737" fg:w="4"/><text x="72.6901%" y="335.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2,196 samples, 18.21%)</title><rect x="54.2907%" y="357" width="18.2074%" height="15" fill="rgb(213,201,24)" fg:x="6548" fg:w="2196"/><text x="54.5407%" y="367.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="72.4816%" y="341" width="0.0166%" height="15" fill="rgb(248,116,28)" fg:x="8742" fg:w="2"/><text x="72.7316%" y="351.50"></text></g><g><title>deno`deno_runtime::ops::fs::open_helper (3 samples, 0.02%)</title><rect x="72.5147%" y="357" width="0.0249%" height="15" fill="rgb(219,72,43)" fg:x="8746" fg:w="3"/><text x="72.7647%" y="367.50"></text></g><g><title>deno`serde_v8::de::from_v8 (3 samples, 0.02%)</title><rect x="72.5396%" y="357" width="0.0249%" height="15" fill="rgb(209,138,14)" fg:x="8749" fg:w="3"/><text x="72.7896%" y="367.50"></text></g><g><title>deno`v8::function::FunctionCallbackArguments::get (2 samples, 0.02%)</title><rect x="72.5728%" y="357" width="0.0166%" height="15" fill="rgb(222,18,33)" fg:x="8753" fg:w="2"/><text x="72.8228%" y="367.50"></text></g><g><title>0x110064554 (2,213 samples, 18.35%)</title><rect x="54.2741%" y="389" width="18.3484%" height="15" fill="rgb(213,199,7)" fg:x="6546" fg:w="2213"/><text x="54.5241%" y="399.50">0x110064554</text></g><g><title>deno`Builtins_CallApiCallback (2,212 samples, 18.34%)</title><rect x="54.2824%" y="373" width="18.3401%" height="15" fill="rgb(250,110,10)" fg:x="6547" fg:w="2212"/><text x="54.5324%" y="383.50">deno`Builtins_CallApiCallback</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="72.6059%" y="357" width="0.0166%" height="15" fill="rgb(248,123,6)" fg:x="8757" fg:w="2"/><text x="72.8559%" y="367.50"></text></g><g><title>0x1100512fc (2 samples, 0.02%)</title><rect x="72.6225%" y="325" width="0.0166%" height="15" fill="rgb(206,91,31)" fg:x="8759" fg:w="2"/><text x="72.8725%" y="335.50"></text></g><g><title>0x110067a84 (2 samples, 0.02%)</title><rect x="72.6391%" y="325" width="0.0166%" height="15" fill="rgb(211,154,13)" fg:x="8761" fg:w="2"/><text x="72.8891%" y="335.50"></text></g><g><title>0x11006153c (2 samples, 0.02%)</title><rect x="72.6391%" y="309" width="0.0166%" height="15" fill="rgb(225,148,7)" fg:x="8761" fg:w="2"/><text x="72.8891%" y="319.50"></text></g><g><title>0x11004d934 (5 samples, 0.04%)</title><rect x="72.6225%" y="373" width="0.0415%" height="15" fill="rgb(220,160,43)" fg:x="8759" fg:w="5"/><text x="72.8725%" y="383.50"></text></g><g><title>0x11004d710 (5 samples, 0.04%)</title><rect x="72.6225%" y="357" width="0.0415%" height="15" fill="rgb(213,52,39)" fg:x="8759" fg:w="5"/><text x="72.8725%" y="367.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (5 samples, 0.04%)</title><rect x="72.6225%" y="341" width="0.0415%" height="15" fill="rgb(243,137,7)" fg:x="8759" fg:w="5"/><text x="72.8725%" y="351.50"></text></g><g><title>0x11006b038 (2 samples, 0.02%)</title><rect x="72.6805%" y="373" width="0.0166%" height="15" fill="rgb(230,79,13)" fg:x="8766" fg:w="2"/><text x="72.9305%" y="383.50"></text></g><g><title>0x110067dd4 (2 samples, 0.02%)</title><rect x="72.7220%" y="357" width="0.0166%" height="15" fill="rgb(247,105,23)" fg:x="8771" fg:w="2"/><text x="72.9720%" y="367.50"></text></g><g><title>deno`Builtins_FastNewObject (2 samples, 0.02%)</title><rect x="72.7386%" y="357" width="0.0166%" height="15" fill="rgb(223,179,41)" fg:x="8773" fg:w="2"/><text x="72.9886%" y="367.50"></text></g><g><title>deno`Builtins_JSConstructStubGeneric (2 samples, 0.02%)</title><rect x="72.7552%" y="357" width="0.0166%" height="15" fill="rgb(218,9,34)" fg:x="8775" fg:w="2"/><text x="73.0052%" y="367.50"></text></g><g><title>0x11003af80 (2 samples, 0.02%)</title><rect x="72.8215%" y="341" width="0.0166%" height="15" fill="rgb(222,106,8)" fg:x="8783" fg:w="2"/><text x="73.0715%" y="351.50"></text></g><g><title>0x1100610e0 (5 samples, 0.04%)</title><rect x="72.9459%" y="325" width="0.0415%" height="15" fill="rgb(211,220,0)" fg:x="8798" fg:w="5"/><text x="73.1959%" y="335.50"></text></g><g><title>deno`Builtins_ObjectAssign (5 samples, 0.04%)</title><rect x="72.9459%" y="309" width="0.0415%" height="15" fill="rgb(229,52,16)" fg:x="8798" fg:w="5"/><text x="73.1959%" y="319.50"></text></g><g><title>0x110061278 (11 samples, 0.09%)</title><rect x="72.9873%" y="325" width="0.0912%" height="15" fill="rgb(212,155,18)" fg:x="8803" fg:w="11"/><text x="73.2373%" y="335.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (11 samples, 0.09%)</title><rect x="72.9873%" y="309" width="0.0912%" height="15" fill="rgb(242,21,14)" fg:x="8803" fg:w="11"/><text x="73.2373%" y="319.50"></text></g><g><title>deno`Builtins_ObjectAssign (3 samples, 0.02%)</title><rect x="73.0951%" y="325" width="0.0249%" height="15" fill="rgb(222,19,48)" fg:x="8816" fg:w="3"/><text x="73.3451%" y="335.50"></text></g><g><title>0x110067978 (27 samples, 0.22%)</title><rect x="72.9127%" y="341" width="0.2239%" height="15" fill="rgb(232,45,27)" fg:x="8794" fg:w="27"/><text x="73.1627%" y="351.50"></text></g><g><title>deno`Builtins_Typeof (2 samples, 0.02%)</title><rect x="73.1200%" y="325" width="0.0166%" height="15" fill="rgb(249,103,42)" fg:x="8819" fg:w="2"/><text x="73.3700%" y="335.50"></text></g><g><title>0x1100610e0 (4 samples, 0.03%)</title><rect x="73.1863%" y="325" width="0.0332%" height="15" fill="rgb(246,81,33)" fg:x="8827" fg:w="4"/><text x="73.4363%" y="335.50"></text></g><g><title>deno`Builtins_ObjectAssign (4 samples, 0.03%)</title><rect x="73.1863%" y="309" width="0.0332%" height="15" fill="rgb(252,33,42)" fg:x="8827" fg:w="4"/><text x="73.4363%" y="319.50"></text></g><g><title>deno`Builtins_SetDataProperties (2 samples, 0.02%)</title><rect x="73.2029%" y="293" width="0.0166%" height="15" fill="rgb(209,212,41)" fg:x="8829" fg:w="2"/><text x="73.4529%" y="303.50"></text></g><g><title>0x1100611e0 (3 samples, 0.02%)</title><rect x="73.2443%" y="325" width="0.0249%" height="15" fill="rgb(207,154,6)" fg:x="8834" fg:w="3"/><text x="73.4943%" y="335.50"></text></g><g><title>0x11006123c (3 samples, 0.02%)</title><rect x="73.2941%" y="325" width="0.0249%" height="15" fill="rgb(223,64,47)" fg:x="8840" fg:w="3"/><text x="73.5441%" y="335.50"></text></g><g><title>0x110061278 (26 samples, 0.22%)</title><rect x="73.3438%" y="325" width="0.2156%" height="15" fill="rgb(211,161,38)" fg:x="8846" fg:w="26"/><text x="73.5938%" y="335.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (26 samples, 0.22%)</title><rect x="73.3438%" y="309" width="0.2156%" height="15" fill="rgb(219,138,40)" fg:x="8846" fg:w="26"/><text x="73.5938%" y="319.50"></text></g><g><title>0x1100612d0 (4 samples, 0.03%)</title><rect x="73.5843%" y="325" width="0.0332%" height="15" fill="rgb(241,228,46)" fg:x="8875" fg:w="4"/><text x="73.8343%" y="335.50"></text></g><g><title>deno`Builtins_ToString (4 samples, 0.03%)</title><rect x="73.5843%" y="309" width="0.0332%" height="15" fill="rgb(223,209,38)" fg:x="8875" fg:w="4"/><text x="73.8343%" y="319.50"></text></g><g><title>0x110061328 (4 samples, 0.03%)</title><rect x="73.6423%" y="325" width="0.0332%" height="15" fill="rgb(236,164,45)" fg:x="8882" fg:w="4"/><text x="73.8923%" y="335.50"></text></g><g><title>0x110061330 (2 samples, 0.02%)</title><rect x="73.6755%" y="325" width="0.0166%" height="15" fill="rgb(231,15,5)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="335.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (2 samples, 0.02%)</title><rect x="73.6755%" y="309" width="0.0166%" height="15" fill="rgb(252,35,15)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="319.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.02%)</title><rect x="73.6755%" y="293" width="0.0166%" height="15" fill="rgb(248,181,18)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="303.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.02%)</title><rect x="73.6755%" y="277" width="0.0166%" height="15" fill="rgb(233,39,42)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="287.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.02%)</title><rect x="73.6755%" y="261" width="0.0166%" height="15" fill="rgb(238,110,33)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="271.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.02%)</title><rect x="73.6755%" y="245" width="0.0166%" height="15" fill="rgb(233,195,10)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="255.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.02%)</title><rect x="73.6755%" y="229" width="0.0166%" height="15" fill="rgb(254,105,3)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="239.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.02%)</title><rect x="73.6755%" y="213" width="0.0166%" height="15" fill="rgb(221,225,9)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="223.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.02%)</title><rect x="73.6755%" y="197" width="0.0166%" height="15" fill="rgb(224,227,45)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.02%)</title><rect x="73.6755%" y="181" width="0.0166%" height="15" fill="rgb(229,198,43)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="191.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.02%)</title><rect x="73.6755%" y="165" width="0.0166%" height="15" fill="rgb(206,209,35)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="175.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.02%)</title><rect x="73.6755%" y="149" width="0.0166%" height="15" fill="rgb(245,195,53)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="159.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.02%)</title><rect x="73.6755%" y="133" width="0.0166%" height="15" fill="rgb(240,92,26)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="143.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.02%)</title><rect x="73.6755%" y="117" width="0.0166%" height="15" fill="rgb(207,40,23)" fg:x="8886" fg:w="2"/><text x="73.9255%" y="127.50"></text></g><g><title>0x110061358 (2 samples, 0.02%)</title><rect x="73.7004%" y="325" width="0.0166%" height="15" fill="rgb(223,111,35)" fg:x="8889" fg:w="2"/><text x="73.9504%" y="335.50"></text></g><g><title>deno`Builtins_ToString (2 samples, 0.02%)</title><rect x="73.7004%" y="309" width="0.0166%" height="15" fill="rgb(229,147,28)" fg:x="8889" fg:w="2"/><text x="73.9504%" y="319.50"></text></g><g><title>0x11006139c (3 samples, 0.02%)</title><rect x="73.7335%" y="325" width="0.0249%" height="15" fill="rgb(211,29,28)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="335.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (3 samples, 0.02%)</title><rect x="73.7335%" y="309" width="0.0249%" height="15" fill="rgb(228,72,33)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="319.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="73.7335%" y="293" width="0.0249%" height="15" fill="rgb(205,214,31)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="303.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.02%)</title><rect x="73.7335%" y="277" width="0.0249%" height="15" fill="rgb(224,111,15)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="287.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (3 samples, 0.02%)</title><rect x="73.7335%" y="261" width="0.0249%" height="15" fill="rgb(253,21,26)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="271.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (3 samples, 0.02%)</title><rect x="73.7335%" y="245" width="0.0249%" height="15" fill="rgb(245,139,43)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="255.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (3 samples, 0.02%)</title><rect x="73.7335%" y="229" width="0.0249%" height="15" fill="rgb(252,170,7)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="239.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (3 samples, 0.02%)</title><rect x="73.7335%" y="213" width="0.0249%" height="15" fill="rgb(231,118,14)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="223.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (3 samples, 0.02%)</title><rect x="73.7335%" y="197" width="0.0249%" height="15" fill="rgb(238,83,0)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (3 samples, 0.02%)</title><rect x="73.7335%" y="181" width="0.0249%" height="15" fill="rgb(221,39,39)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="191.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.02%)</title><rect x="73.7335%" y="165" width="0.0249%" height="15" fill="rgb(222,119,46)" fg:x="8893" fg:w="3"/><text x="73.9835%" y="175.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.02%)</title><rect x="73.7418%" y="149" width="0.0166%" height="15" fill="rgb(222,165,49)" fg:x="8894" fg:w="2"/><text x="73.9918%" y="159.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.02%)</title><rect x="73.7418%" y="133" width="0.0166%" height="15" fill="rgb(219,113,52)" fg:x="8894" fg:w="2"/><text x="73.9918%" y="143.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.02%)</title><rect x="73.7418%" y="117" width="0.0166%" height="15" fill="rgb(214,7,15)" fg:x="8894" fg:w="2"/><text x="73.9918%" y="127.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (2 samples, 0.02%)</title><rect x="73.7418%" y="101" width="0.0166%" height="15" fill="rgb(235,32,4)" fg:x="8894" fg:w="2"/><text x="73.9918%" y="111.50"></text></g><g><title>0x1100613ac (3 samples, 0.02%)</title><rect x="73.7584%" y="325" width="0.0249%" height="15" fill="rgb(238,90,54)" fg:x="8896" fg:w="3"/><text x="74.0084%" y="335.50"></text></g><g><title>0x110061418 (2 samples, 0.02%)</title><rect x="73.8164%" y="325" width="0.0166%" height="15" fill="rgb(213,208,19)" fg:x="8903" fg:w="2"/><text x="74.0664%" y="335.50"></text></g><g><title>0x110061420 (4 samples, 0.03%)</title><rect x="73.8330%" y="325" width="0.0332%" height="15" fill="rgb(233,156,4)" fg:x="8905" fg:w="4"/><text x="74.0830%" y="335.50"></text></g><g><title>deno`Builtins_ToString (4 samples, 0.03%)</title><rect x="73.8330%" y="309" width="0.0332%" height="15" fill="rgb(207,194,5)" fg:x="8905" fg:w="4"/><text x="74.0830%" y="319.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.02%)</title><rect x="73.8911%" y="85" width="0.0166%" height="15" fill="rgb(206,111,30)" fg:x="8912" fg:w="2"/><text x="74.1411%" y="95.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (6 samples, 0.05%)</title><rect x="73.8745%" y="101" width="0.0497%" height="15" fill="rgb(243,70,54)" fg:x="8910" fg:w="6"/><text x="74.1245%" y="111.50"></text></g><g><title>0x11006146c (7 samples, 0.06%)</title><rect x="73.8745%" y="325" width="0.0580%" height="15" fill="rgb(242,28,8)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="335.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (7 samples, 0.06%)</title><rect x="73.8745%" y="309" width="0.0580%" height="15" fill="rgb(219,106,18)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="319.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (7 samples, 0.06%)</title><rect x="73.8745%" y="293" width="0.0580%" height="15" fill="rgb(244,222,10)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="303.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (7 samples, 0.06%)</title><rect x="73.8745%" y="277" width="0.0580%" height="15" fill="rgb(236,179,52)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="287.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (7 samples, 0.06%)</title><rect x="73.8745%" y="261" width="0.0580%" height="15" fill="rgb(213,23,39)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="271.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (7 samples, 0.06%)</title><rect x="73.8745%" y="245" width="0.0580%" height="15" fill="rgb(238,48,10)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="255.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (7 samples, 0.06%)</title><rect x="73.8745%" y="229" width="0.0580%" height="15" fill="rgb(251,196,23)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="239.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (7 samples, 0.06%)</title><rect x="73.8745%" y="213" width="0.0580%" height="15" fill="rgb(250,152,24)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="223.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (7 samples, 0.06%)</title><rect x="73.8745%" y="197" width="0.0580%" height="15" fill="rgb(209,150,17)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (7 samples, 0.06%)</title><rect x="73.8745%" y="181" width="0.0580%" height="15" fill="rgb(234,202,34)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="191.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (7 samples, 0.06%)</title><rect x="73.8745%" y="165" width="0.0580%" height="15" fill="rgb(253,148,53)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="175.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (7 samples, 0.06%)</title><rect x="73.8745%" y="149" width="0.0580%" height="15" fill="rgb(218,129,16)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="159.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (7 samples, 0.06%)</title><rect x="73.8745%" y="133" width="0.0580%" height="15" fill="rgb(216,85,19)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="143.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (7 samples, 0.06%)</title><rect x="73.8745%" y="117" width="0.0580%" height="15" fill="rgb(235,228,7)" fg:x="8910" fg:w="7"/><text x="74.1245%" y="127.50"></text></g><g><title>0x110061480 (3 samples, 0.02%)</title><rect x="73.9325%" y="325" width="0.0249%" height="15" fill="rgb(245,175,0)" fg:x="8917" fg:w="3"/><text x="74.1825%" y="335.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (2 samples, 0.02%)</title><rect x="73.9574%" y="101" width="0.0166%" height="15" fill="rgb(208,168,36)" fg:x="8920" fg:w="2"/><text x="74.2074%" y="111.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (3 samples, 0.02%)</title><rect x="73.9574%" y="133" width="0.0249%" height="15" fill="rgb(246,171,24)" fg:x="8920" fg:w="3"/><text x="74.2074%" y="143.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (3 samples, 0.02%)</title><rect x="73.9574%" y="117" width="0.0249%" height="15" fill="rgb(215,142,24)" fg:x="8920" fg:w="3"/><text x="74.2074%" y="127.50"></text></g><g><title>0x1100614cc (4 samples, 0.03%)</title><rect x="73.9574%" y="325" width="0.0332%" height="15" fill="rgb(250,187,7)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="335.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (4 samples, 0.03%)</title><rect x="73.9574%" y="309" width="0.0332%" height="15" fill="rgb(228,66,33)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="319.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (4 samples, 0.03%)</title><rect x="73.9574%" y="293" width="0.0332%" height="15" fill="rgb(234,215,21)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="303.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (4 samples, 0.03%)</title><rect x="73.9574%" y="277" width="0.0332%" height="15" fill="rgb(222,191,20)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="287.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (4 samples, 0.03%)</title><rect x="73.9574%" y="261" width="0.0332%" height="15" fill="rgb(245,79,54)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="271.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (4 samples, 0.03%)</title><rect x="73.9574%" y="245" width="0.0332%" height="15" fill="rgb(240,10,37)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="255.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (4 samples, 0.03%)</title><rect x="73.9574%" y="229" width="0.0332%" height="15" fill="rgb(214,192,32)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="239.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (4 samples, 0.03%)</title><rect x="73.9574%" y="213" width="0.0332%" height="15" fill="rgb(209,36,54)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="223.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (4 samples, 0.03%)</title><rect x="73.9574%" y="197" width="0.0332%" height="15" fill="rgb(220,10,11)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (4 samples, 0.03%)</title><rect x="73.9574%" y="181" width="0.0332%" height="15" fill="rgb(221,106,17)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="191.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (4 samples, 0.03%)</title><rect x="73.9574%" y="165" width="0.0332%" height="15" fill="rgb(251,142,44)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="175.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (4 samples, 0.03%)</title><rect x="73.9574%" y="149" width="0.0332%" height="15" fill="rgb(238,13,15)" fg:x="8920" fg:w="4"/><text x="74.2074%" y="159.50"></text></g><g><title>0x1100614ec (17 samples, 0.14%)</title><rect x="73.9988%" y="325" width="0.1410%" height="15" fill="rgb(208,107,27)" fg:x="8925" fg:w="17"/><text x="74.2488%" y="335.50"></text></g><g><title>deno`Builtins_CloneObjectIC (17 samples, 0.14%)</title><rect x="73.9988%" y="309" width="0.1410%" height="15" fill="rgb(205,136,37)" fg:x="8925" fg:w="17"/><text x="74.2488%" y="319.50"></text></g><g><title>0x110061508 (2 samples, 0.02%)</title><rect x="74.1481%" y="325" width="0.0166%" height="15" fill="rgb(250,205,27)" fg:x="8943" fg:w="2"/><text x="74.3981%" y="335.50"></text></g><g><title>0x11006b398 (6 samples, 0.05%)</title><rect x="74.1895%" y="309" width="0.0497%" height="15" fill="rgb(210,80,43)" fg:x="8948" fg:w="6"/><text x="74.4395%" y="319.50"></text></g><g><title>deno`Builtins_CloneObjectIC (6 samples, 0.05%)</title><rect x="74.1895%" y="293" width="0.0497%" height="15" fill="rgb(247,160,36)" fg:x="8948" fg:w="6"/><text x="74.4395%" y="303.50"></text></g><g><title>deno`v8::internal::JSReceiver::CreateDataProperty(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::Maybe (2 samples, 0.02%)</title><rect x="74.2642%" y="277" width="0.0166%" height="15" fill="rgb(234,13,49)" fg:x="8957" fg:w="2"/><text x="74.5142%" y="287.50"></text></g><g><title>deno`v8::internal::LookupIterator::WriteDataValue(v8::internal::Handle (2 samples, 0.02%)</title><rect x="74.3554%" y="229" width="0.0166%" height="15" fill="rgb(234,122,0)" fg:x="8968" fg:w="2"/><text x="74.6054%" y="239.50"></text></g><g><title>deno`v8::internal::Object::AddDataProperty(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (5 samples, 0.04%)</title><rect x="74.3719%" y="229" width="0.0415%" height="15" fill="rgb(207,146,38)" fg:x="8970" fg:w="5"/><text x="74.6219%" y="239.50"></text></g><g><title>deno`v8::internal::JSObject::MigrateToMap(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSObject&gt;, v8::internal::Handle (2 samples, 0.02%)</title><rect x="74.4549%" y="213" width="0.0166%" height="15" fill="rgb(207,177,25)" fg:x="8980" fg:w="2"/><text x="74.7049%" y="223.50"></text></g><g><title>deno`v8::internal::JSObject::FastPropertyAtPut (2 samples, 0.02%)</title><rect x="74.5295%" y="197" width="0.0166%" height="15" fill="rgb(211,178,42)" fg:x="8989" fg:w="2"/><text x="74.7795%" y="207.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (8 samples, 0.07%)</title><rect x="74.6870%" y="181" width="0.0663%" height="15" fill="rgb(230,69,54)" fg:x="9008" fg:w="8"/><text x="74.9370%" y="191.50"></text></g><g><title>deno`v8::internal::Factory::NewPropertyArray (7 samples, 0.06%)</title><rect x="74.7533%" y="181" width="0.0580%" height="15" fill="rgb(214,135,41)" fg:x="9016" fg:w="7"/><text x="75.0033%" y="191.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::AllocateRawFixedArray (4 samples, 0.03%)</title><rect x="74.7782%" y="165" width="0.0332%" height="15" fill="rgb(237,67,25)" fg:x="9019" fg:w="4"/><text x="75.0282%" y="175.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (3 samples, 0.02%)</title><rect x="74.7865%" y="149" width="0.0249%" height="15" fill="rgb(222,189,50)" fg:x="9020" fg:w="3"/><text x="75.0365%" y="159.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::AllocateRawFixedArray (2 samples, 0.02%)</title><rect x="74.8114%" y="181" width="0.0166%" height="15" fill="rgb(245,148,34)" fg:x="9023" fg:w="2"/><text x="75.0614%" y="191.50"></text></g><g><title>deno`v8::internal::JSObject::FastPropertyAtPut (3 samples, 0.02%)</title><rect x="74.8362%" y="181" width="0.0249%" height="15" fill="rgb(222,29,6)" fg:x="9026" fg:w="3"/><text x="75.0862%" y="191.50"></text></g><g><title>deno`v8::internal::JSObject::MigrateToMap(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSObject&gt;, v8::internal::Handle (41 samples, 0.34%)</title><rect x="74.5461%" y="197" width="0.3399%" height="15" fill="rgb(221,189,43)" fg:x="8991" fg:w="41"/><text x="74.7961%" y="207.50"></text></g><g><title>deno`v8::internal::JSReceiver::SetProperties (3 samples, 0.02%)</title><rect x="74.8611%" y="181" width="0.0249%" height="15" fill="rgb(207,36,27)" fg:x="9029" fg:w="3"/><text x="75.1111%" y="191.50"></text></g><g><title>deno`v8::internal::LookupIterator::State v8::internal::LookupIterator::LookupInRegularHolder&lt;false&gt; (4 samples, 0.03%)</title><rect x="74.8943%" y="197" width="0.0332%" height="15" fill="rgb(217,90,24)" fg:x="9033" fg:w="4"/><text x="75.1443%" y="207.50"></text></g><g><title>deno`v8::internal::LookupIterator::ApplyTransitionToDataProperty(v8::internal::Handle (57 samples, 0.47%)</title><rect x="74.4797%" y="213" width="0.4726%" height="15" fill="rgb(224,66,35)" fg:x="8983" fg:w="57"/><text x="74.7297%" y="223.50"></text></g><g><title>deno`v8::internal::Map::NumberOfFields (2 samples, 0.02%)</title><rect x="74.9357%" y="197" width="0.0166%" height="15" fill="rgb(221,13,50)" fg:x="9038" fg:w="2"/><text x="75.1857%" y="207.50"></text></g><g><title>deno`v8::internal::Map::CopyWithField(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (4 samples, 0.03%)</title><rect x="75.0021%" y="197" width="0.0332%" height="15" fill="rgb(236,68,49)" fg:x="9046" fg:w="4"/><text x="75.2521%" y="207.50"></text></g><g><title>deno`v8::internal::Descriptor::DataField(v8::internal::Handle (9 samples, 0.07%)</title><rect x="75.0850%" y="181" width="0.0746%" height="15" fill="rgb(229,146,28)" fg:x="9056" fg:w="9"/><text x="75.3350%" y="191.50"></text></g><g><title>deno`v8::internal::FieldType::Any (2 samples, 0.02%)</title><rect x="75.1596%" y="181" width="0.0166%" height="15" fill="rgb(225,31,38)" fg:x="9065" fg:w="2"/><text x="75.4096%" y="191.50"></text></g><g><title>deno`v8::internal::FieldType::IsClass (3 samples, 0.02%)</title><rect x="75.1762%" y="181" width="0.0249%" height="15" fill="rgb(250,208,3)" fg:x="9067" fg:w="3"/><text x="75.4262%" y="191.50"></text></g><g><title>deno`v8::internal::Map::CopyAddDescriptor(v8::internal::Isolate*, v8::internal::Handle (4 samples, 0.03%)</title><rect x="75.2011%" y="181" width="0.0332%" height="15" fill="rgb(246,54,23)" fg:x="9070" fg:w="4"/><text x="75.4511%" y="191.50"></text></g><g><title>deno`v8::internal::DescriptorArray::Append (5 samples, 0.04%)</title><rect x="75.2674%" y="165" width="0.0415%" height="15" fill="rgb(243,76,11)" fg:x="9078" fg:w="5"/><text x="75.5174%" y="175.50"></text></g><g><title>deno`v8::internal::DescriptorArray::CopyUpTo(v8::internal::Isolate*, v8::internal::Handle (4 samples, 0.03%)</title><rect x="75.3088%" y="165" width="0.0332%" height="15" fill="rgb(245,21,50)" fg:x="9083" fg:w="4"/><text x="75.5588%" y="175.50"></text></g><g><title>deno`v8::internal::DescriptorArray::Append (12 samples, 0.10%)</title><rect x="75.3586%" y="149" width="0.0995%" height="15" fill="rgb(228,9,43)" fg:x="9089" fg:w="12"/><text x="75.6086%" y="159.50"></text></g><g><title>deno`v8::internal::DescriptorArray::Set (2 samples, 0.02%)</title><rect x="75.4415%" y="133" width="0.0166%" height="15" fill="rgb(208,100,47)" fg:x="9099" fg:w="2"/><text x="75.6915%" y="143.50"></text></g><g><title>deno`v8::internal::DescriptorArray::Initialize (3 samples, 0.02%)</title><rect x="75.4664%" y="133" width="0.0249%" height="15" fill="rgb(232,26,8)" fg:x="9102" fg:w="3"/><text x="75.7164%" y="143.50"></text></g><g><title>deno`v8::internal::DescriptorArray::Set (4 samples, 0.03%)</title><rect x="75.4913%" y="133" width="0.0332%" height="15" fill="rgb(216,166,38)" fg:x="9105" fg:w="4"/><text x="75.7413%" y="143.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (3 samples, 0.02%)</title><rect x="75.5244%" y="133" width="0.0249%" height="15" fill="rgb(251,202,51)" fg:x="9109" fg:w="3"/><text x="75.7744%" y="143.50"></text></g><g><title>deno`v8::internal::DescriptorArray::CopyUpTo(v8::internal::Isolate*, v8::internal::Handle (14 samples, 0.12%)</title><rect x="75.4581%" y="149" width="0.1161%" height="15" fill="rgb(254,216,34)" fg:x="9101" fg:w="14"/><text x="75.7081%" y="159.50"></text></g><g><title>deno`v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewDescriptorArray (3 samples, 0.02%)</title><rect x="75.5493%" y="133" width="0.0249%" height="15" fill="rgb(251,32,27)" fg:x="9112" fg:w="3"/><text x="75.7993%" y="143.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (2 samples, 0.02%)</title><rect x="75.5576%" y="117" width="0.0166%" height="15" fill="rgb(208,127,28)" fg:x="9113" fg:w="2"/><text x="75.8076%" y="127.50"></text></g><g><title>deno`v8::internal::DescriptorArray::Set (9 samples, 0.07%)</title><rect x="75.5742%" y="149" width="0.0746%" height="15" fill="rgb(224,137,22)" fg:x="9115" fg:w="9"/><text x="75.8242%" y="159.50"></text></g><g><title>deno`v8::internal::Map::ConnectTransition(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle (2 samples, 0.02%)</title><rect x="75.6488%" y="149" width="0.0166%" height="15" fill="rgb(254,70,32)" fg:x="9124" fg:w="2"/><text x="75.8988%" y="159.50"></text></g><g><title>deno`v8::internal::Factory::NewMap (2 samples, 0.02%)</title><rect x="75.6654%" y="133" width="0.0166%" height="15" fill="rgb(229,75,37)" fg:x="9126" fg:w="2"/><text x="75.9154%" y="143.50"></text></g><g><title>deno`v8::internal::Map::ConnectTransition(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle (2 samples, 0.02%)</title><rect x="75.6820%" y="133" width="0.0166%" height="15" fill="rgb(252,64,23)" fg:x="9128" fg:w="2"/><text x="75.9320%" y="143.50"></text></g><g><title>deno`v8::internal::DependentCode::empty_dependent_code (8 samples, 0.07%)</title><rect x="75.7566%" y="101" width="0.0663%" height="15" fill="rgb(232,162,48)" fg:x="9137" fg:w="8"/><text x="76.0066%" y="111.50"></text></g><g><title>deno`v8::internal::Factory::InitializeMap (10 samples, 0.08%)</title><rect x="75.8229%" y="101" width="0.0829%" height="15" fill="rgb(246,160,12)" fg:x="9145" fg:w="10"/><text x="76.0729%" y="111.50"></text></g><g><title>deno`v8::internal::Map::SetInstanceDescriptors (2 samples, 0.02%)</title><rect x="75.8892%" y="85" width="0.0166%" height="15" fill="rgb(247,166,0)" fg:x="9153" fg:w="2"/><text x="76.1392%" y="95.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (5 samples, 0.04%)</title><rect x="75.9058%" y="101" width="0.0415%" height="15" fill="rgb(249,219,21)" fg:x="9155" fg:w="5"/><text x="76.1558%" y="111.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (6 samples, 0.05%)</title><rect x="75.9473%" y="101" width="0.0497%" height="15" fill="rgb(205,209,3)" fg:x="9160" fg:w="6"/><text x="76.1973%" y="111.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (4 samples, 0.03%)</title><rect x="75.9639%" y="85" width="0.0332%" height="15" fill="rgb(243,44,1)" fg:x="9162" fg:w="4"/><text x="76.2139%" y="95.50"></text></g><g><title>deno`v8::internal::Factory::NewMap (34 samples, 0.28%)</title><rect x="75.7317%" y="117" width="0.2819%" height="15" fill="rgb(206,159,16)" fg:x="9134" fg:w="34"/><text x="75.9817%" y="127.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (5 samples, 0.04%)</title><rect x="76.0136%" y="117" width="0.0415%" height="15" fill="rgb(244,77,30)" fg:x="9168" fg:w="5"/><text x="76.2636%" y="127.50"></text></g><g><title>deno`v8::internal::JSObject::OptimizeAsPrototype(v8::internal::Handle (2 samples, 0.02%)</title><rect x="76.0551%" y="117" width="0.0166%" height="15" fill="rgb(218,69,12)" fg:x="9173" fg:w="2"/><text x="76.3051%" y="127.50"></text></g><g><title>deno`v8::internal::Map::RawCopy(v8::internal::Isolate*, v8::internal::Handle (49 samples, 0.41%)</title><rect x="75.6985%" y="133" width="0.4063%" height="15" fill="rgb(212,87,7)" fg:x="9130" fg:w="49"/><text x="75.9485%" y="143.50"></text></g><g><title>deno`v8::internal::Map::SetPrototype(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle (4 samples, 0.03%)</title><rect x="76.0716%" y="117" width="0.0332%" height="15" fill="rgb(245,114,25)" fg:x="9175" fg:w="4"/><text x="76.3216%" y="127.50"></text></g><g><title>deno`v8::internal::JSObject::OptimizeAsPrototype(v8::internal::Handle (2 samples, 0.02%)</title><rect x="76.0882%" y="101" width="0.0166%" height="15" fill="rgb(210,61,42)" fg:x="9177" fg:w="2"/><text x="76.3382%" y="111.50"></text></g><g><title>deno`v8::internal::Map::CopyWithField(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (110 samples, 0.91%)</title><rect x="75.2342%" y="181" width="0.9120%" height="15" fill="rgb(211,52,33)" fg:x="9074" fg:w="110"/><text x="75.4842%" y="191.50"></text></g><g><title>deno`v8::internal::Map::CopyAddDescriptor(v8::internal::Isolate*, v8::internal::Handle (97 samples, 0.80%)</title><rect x="75.3420%" y="165" width="0.8042%" height="15" fill="rgb(234,58,33)" fg:x="9087" fg:w="97"/><text x="75.5920%" y="175.50"></text></g><g><title>deno`v8::internal::Map::CopyReplaceDescriptors(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::DescriptorArray&gt;, v8::internal::TransitionFlag, v8::internal::MaybeHandle (58 samples, 0.48%)</title><rect x="75.6654%" y="149" width="0.4809%" height="15" fill="rgb(220,115,36)" fg:x="9126" fg:w="58"/><text x="75.9154%" y="159.50"></text></g><g><title>deno`v8::internal::Map::SetInstanceDescriptors (5 samples, 0.04%)</title><rect x="76.1048%" y="133" width="0.0415%" height="15" fill="rgb(243,153,54)" fg:x="9179" fg:w="5"/><text x="76.3548%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::CombinedGenerationalAndSharedBarrierSlow (2 samples, 0.02%)</title><rect x="76.1297%" y="117" width="0.0166%" height="15" fill="rgb(251,47,18)" fg:x="9182" fg:w="2"/><text x="76.3797%" y="127.50"></text></g><g><title>deno`v8::internal::Map::TransitionToDataProperty(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (135 samples, 1.12%)</title><rect x="75.0435%" y="197" width="1.1193%" height="15" fill="rgb(242,102,42)" fg:x="9051" fg:w="135"/><text x="75.2935%" y="207.50"></text></g><g><title>deno`v8::internal::TransitionsAccessor::SearchTransition (2 samples, 0.02%)</title><rect x="76.1463%" y="181" width="0.0166%" height="15" fill="rgb(234,31,38)" fg:x="9184" fg:w="2"/><text x="76.3963%" y="191.50"></text></g><g><title>deno`v8::internal::LookupIterator::PrepareTransitionToDataProperty(v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle (149 samples, 1.24%)</title><rect x="74.9523%" y="213" width="1.2354%" height="15" fill="rgb(221,117,51)" fg:x="9040" fg:w="149"/><text x="75.2023%" y="223.50"></text></g><g><title>deno`v8::internal::TransitionsAccessor::SearchTransition(v8::internal::Isolate*, v8::internal::Handle (3 samples, 0.02%)</title><rect x="76.1628%" y="197" width="0.0249%" height="15" fill="rgb(212,20,18)" fg:x="9186" fg:w="3"/><text x="76.4128%" y="207.50"></text></g><g><title>deno`v8::internal::JSObject::DefineOwnPropertyIgnoreAttributes(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (230 samples, 1.91%)</title><rect x="74.3222%" y="245" width="1.9070%" height="15" fill="rgb(245,133,36)" fg:x="8964" fg:w="230"/><text x="74.5722%" y="255.50">d..</text></g><g><title>deno`v8::internal::Object::TransitionAndWriteDataProperty(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (219 samples, 1.82%)</title><rect x="74.4134%" y="229" width="1.8158%" height="15" fill="rgb(212,6,19)" fg:x="8975" fg:w="219"/><text x="74.6634%" y="239.50">d..</text></g><g><title>deno`v8::internal::Map::TransitionToDataProperty(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, v8::internal::Handle (5 samples, 0.04%)</title><rect x="76.1877%" y="213" width="0.0415%" height="15" fill="rgb(218,1,36)" fg:x="9189" fg:w="5"/><text x="76.4377%" y="223.50"></text></g><g><title>deno`v8::internal::JSReceiver::CheckIfCanDefine(v8::internal::Isolate*, v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::Maybe (2 samples, 0.02%)</title><rect x="76.2375%" y="245" width="0.0166%" height="15" fill="rgb(246,84,54)" fg:x="9195" fg:w="2"/><text x="76.4875%" y="255.50"></text></g><g><title>deno`v8::internal::JSObject::IsExtensible(v8::internal::Handle (2 samples, 0.02%)</title><rect x="76.2375%" y="229" width="0.0166%" height="15" fill="rgb(242,110,6)" fg:x="9195" fg:w="2"/><text x="76.4875%" y="239.50"></text></g><g><title>deno`v8::internal::JSReceiver::GetPropertyAttributes (4 samples, 0.03%)</title><rect x="76.2540%" y="245" width="0.0332%" height="15" fill="rgb(214,47,5)" fg:x="9197" fg:w="4"/><text x="76.5040%" y="255.50"></text></g><g><title>deno`v8::internal::Object::AddDataProperty(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (2 samples, 0.02%)</title><rect x="76.2872%" y="245" width="0.0166%" height="15" fill="rgb(218,159,25)" fg:x="9201" fg:w="2"/><text x="76.5372%" y="255.50"></text></g><g><title>deno`v8::internal::JSReceiver::CreateDataProperty(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::Maybe (244 samples, 2.02%)</title><rect x="74.3056%" y="261" width="2.0230%" height="15" fill="rgb(215,211,28)" fg:x="8962" fg:w="244"/><text x="74.5556%" y="271.50">d..</text></g><g><title>deno`v8::internal::Object::TransitionAndWriteDataProperty(v8::internal::LookupIterator*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::PropertyAttributes, v8::Maybe (3 samples, 0.02%)</title><rect x="76.3038%" y="245" width="0.0249%" height="15" fill="rgb(238,59,32)" fg:x="9203" fg:w="3"/><text x="76.5538%" y="255.50"></text></g><g><title>deno`v8::internal::JSReceiver::GetPropertyAttributes (6 samples, 0.05%)</title><rect x="76.3287%" y="261" width="0.0497%" height="15" fill="rgb(226,82,3)" fg:x="9206" fg:w="6"/><text x="76.5787%" y="271.50"></text></g><g><title>deno`void v8::internal::LookupIterator::NextInternal&lt;false&gt; (3 samples, 0.02%)</title><rect x="76.4199%" y="245" width="0.0249%" height="15" fill="rgb(240,164,32)" fg:x="9217" fg:w="3"/><text x="76.6699%" y="255.50"></text></g><g><title>deno`v8::internal::LookupIterator::LookupIterator(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, unsigned long, v8::internal::Handle (14 samples, 0.12%)</title><rect x="76.3784%" y="261" width="0.1161%" height="15" fill="rgb(232,46,7)" fg:x="9212" fg:w="14"/><text x="76.6284%" y="271.50"></text></g><g><title>deno`void v8::internal::LookupIterator::Start&lt;false&gt; (6 samples, 0.05%)</title><rect x="76.4447%" y="245" width="0.0497%" height="15" fill="rgb(229,129,53)" fg:x="9220" fg:w="6"/><text x="76.6947%" y="255.50"></text></g><g><title>deno`v8::internal::LookupIterator::State v8::internal::LookupIterator::LookupInRegularHolder&lt;false&gt; (5 samples, 0.04%)</title><rect x="76.4530%" y="229" width="0.0415%" height="15" fill="rgb(234,188,29)" fg:x="9221" fg:w="5"/><text x="76.7030%" y="239.50"></text></g><g><title>deno`v8::internal::PropertyKey::PropertyKey(v8::internal::Isolate*, v8::internal::Handle (3 samples, 0.02%)</title><rect x="76.4945%" y="261" width="0.0249%" height="15" fill="rgb(246,141,4)" fg:x="9226" fg:w="3"/><text x="76.7445%" y="271.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (277 samples, 2.30%)</title><rect x="74.2393%" y="293" width="2.2967%" height="15" fill="rgb(229,23,39)" fg:x="8954" fg:w="277"/><text x="74.4893%" y="303.50">d..</text></g><g><title>deno`v8::internal::Runtime_DefineNamedOwnIC_Slow (272 samples, 2.26%)</title><rect x="74.2807%" y="277" width="2.2552%" height="15" fill="rgb(206,12,3)" fg:x="8959" fg:w="272"/><text x="74.5307%" y="287.50">d..</text></g><g><title>deno`void v8::internal::LookupIterator::NextInternal&lt;false&gt; (2 samples, 0.02%)</title><rect x="76.5194%" y="261" width="0.0166%" height="15" fill="rgb(252,226,20)" fg:x="9229" fg:w="2"/><text x="76.7694%" y="271.50"></text></g><g><title>0x11006b3b8 (279 samples, 2.31%)</title><rect x="74.2393%" y="309" width="2.3132%" height="15" fill="rgb(216,123,35)" fg:x="8954" fg:w="279"/><text x="74.4893%" y="319.50">0..</text></g><g><title>deno`v8::internal::FeedbackNexus::FeedbackNexus(v8::internal::Handle (4 samples, 0.03%)</title><rect x="76.5691%" y="277" width="0.0332%" height="15" fill="rgb(212,68,40)" fg:x="9235" fg:w="4"/><text x="76.8191%" y="287.50"></text></g><g><title>deno`v8::internal::FeedbackVector::GetKind (7 samples, 0.06%)</title><rect x="76.6106%" y="277" width="0.0580%" height="15" fill="rgb(254,125,32)" fg:x="9240" fg:w="7"/><text x="76.8606%" y="287.50"></text></g><g><title>deno`v8::internal::IC::UpdateState(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (9 samples, 0.07%)</title><rect x="76.6686%" y="277" width="0.0746%" height="15" fill="rgb(253,97,22)" fg:x="9247" fg:w="9"/><text x="76.9186%" y="287.50"></text></g><g><title>deno`v8::internal::LoadIC::Load(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, bool, v8::internal::Handle (6 samples, 0.05%)</title><rect x="76.7432%" y="277" width="0.0497%" height="15" fill="rgb(241,101,14)" fg:x="9256" fg:w="6"/><text x="76.9932%" y="287.50"></text></g><g><title>deno`v8::internal::FeedbackNexus::GetFeedbackPair (2 samples, 0.02%)</title><rect x="76.8013%" y="261" width="0.0166%" height="15" fill="rgb(238,103,29)" fg:x="9263" fg:w="2"/><text x="77.0513%" y="271.50"></text></g><g><title>deno`v8::internal::FeedbackNexus::ic_state (6 samples, 0.05%)</title><rect x="76.8178%" y="261" width="0.0497%" height="15" fill="rgb(233,195,47)" fg:x="9265" fg:w="6"/><text x="77.0678%" y="271.50"></text></g><g><title>deno`v8::internal::FeedbackNexus::GetFeedbackPair (4 samples, 0.03%)</title><rect x="76.8344%" y="245" width="0.0332%" height="15" fill="rgb(246,218,30)" fg:x="9267" fg:w="4"/><text x="77.0844%" y="255.50"></text></g><g><title>deno`v8::internal::IC::UpdateState(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (3 samples, 0.02%)</title><rect x="76.8676%" y="261" width="0.0249%" height="15" fill="rgb(219,145,47)" fg:x="9271" fg:w="3"/><text x="77.1176%" y="271.50"></text></g><g><title>deno`v8::internal::JSObject::MakePrototypesFast(v8::internal::Handle (14 samples, 0.12%)</title><rect x="76.9754%" y="245" width="0.1161%" height="15" fill="rgb(243,12,26)" fg:x="9284" fg:w="14"/><text x="77.2254%" y="255.50"></text></g><g><title>deno`v8::internal::PrototypeIterator::Advance (3 samples, 0.02%)</title><rect x="77.0666%" y="229" width="0.0249%" height="15" fill="rgb(214,87,16)" fg:x="9295" fg:w="3"/><text x="77.3166%" y="239.50"></text></g><g><title>deno`v8::internal::LoadIC::ComputeHandler (2 samples, 0.02%)</title><rect x="77.0915%" y="245" width="0.0166%" height="15" fill="rgb(208,99,42)" fg:x="9298" fg:w="2"/><text x="77.3415%" y="255.50"></text></g><g><title>deno`v8::internal::Builtins::code (7 samples, 0.06%)</title><rect x="77.1412%" y="213" width="0.0580%" height="15" fill="rgb(253,99,2)" fg:x="9304" fg:w="7"/><text x="77.3912%" y="223.50"></text></g><g><title>deno`v8::internal::IC::SetCache(v8::internal::Handle (9 samples, 0.07%)</title><rect x="77.1329%" y="229" width="0.0746%" height="15" fill="rgb(220,168,23)" fg:x="9303" fg:w="9"/><text x="77.3829%" y="239.50"></text></g><g><title>deno`v8::internal::LoadIC::ComputeHandler (4 samples, 0.03%)</title><rect x="77.2075%" y="229" width="0.0332%" height="15" fill="rgb(242,38,24)" fg:x="9312" fg:w="4"/><text x="77.4575%" y="239.50"></text></g><g><title>deno`v8::internal::LoadIC::UpdateCaches (19 samples, 0.16%)</title><rect x="77.1080%" y="245" width="0.1575%" height="15" fill="rgb(225,182,9)" fg:x="9300" fg:w="19"/><text x="77.3580%" y="255.50"></text></g><g><title>deno`v8::internal::StubCache::Set (3 samples, 0.02%)</title><rect x="77.2407%" y="229" width="0.0249%" height="15" fill="rgb(243,178,37)" fg:x="9316" fg:w="3"/><text x="77.4907%" y="239.50"></text></g><g><title>deno`v8::internal::LookupIterator::FetchValue (3 samples, 0.02%)</title><rect x="77.2656%" y="245" width="0.0249%" height="15" fill="rgb(232,139,19)" fg:x="9319" fg:w="3"/><text x="77.5156%" y="255.50"></text></g><g><title>deno`v8::internal::LookupIterator::GetDataValue (4 samples, 0.03%)</title><rect x="77.2904%" y="245" width="0.0332%" height="15" fill="rgb(225,201,24)" fg:x="9322" fg:w="4"/><text x="77.5404%" y="255.50"></text></g><g><title>deno`v8::internal::LookupIterator::LookupIterator(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, unsigned long, v8::internal::Handle (3 samples, 0.02%)</title><rect x="77.3236%" y="245" width="0.0249%" height="15" fill="rgb(221,47,46)" fg:x="9326" fg:w="3"/><text x="77.5736%" y="255.50"></text></g><g><title>deno`v8::internal::Handle&lt;v8::internal::Object&gt; v8::internal::Object::WrapForRead&lt;(v8::internal::AllocationType)0, v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle (3 samples, 0.02%)</title><rect x="77.4148%" y="229" width="0.0249%" height="15" fill="rgb(249,23,13)" fg:x="9337" fg:w="3"/><text x="77.6648%" y="239.50"></text></g><g><title>deno`v8::internal::Object::GetProperty (17 samples, 0.14%)</title><rect x="77.3485%" y="245" width="0.1410%" height="15" fill="rgb(219,9,5)" fg:x="9329" fg:w="17"/><text x="77.5985%" y="255.50"></text></g><g><title>deno`v8::internal::LookupIterator::FetchValue (5 samples, 0.04%)</title><rect x="77.4480%" y="229" width="0.0415%" height="15" fill="rgb(254,171,16)" fg:x="9341" fg:w="5"/><text x="77.6980%" y="239.50"></text></g><g><title>deno`v8::internal::JSObject::FastPropertyAt(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.02%)</title><rect x="77.4728%" y="213" width="0.0166%" height="15" fill="rgb(230,171,20)" fg:x="9344" fg:w="2"/><text x="77.7228%" y="223.50"></text></g><g><title>deno`v8::internal::LoadIC::Load(v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, bool, v8::internal::Handle (76 samples, 0.63%)</title><rect x="76.9008%" y="261" width="0.6301%" height="15" fill="rgb(210,71,41)" fg:x="9275" fg:w="76"/><text x="77.1508%" y="271.50"></text></g><g><title>deno`v8::internal::PrototypeIterator::Advance (5 samples, 0.04%)</title><rect x="77.4894%" y="245" width="0.0415%" height="15" fill="rgb(206,173,20)" fg:x="9346" fg:w="5"/><text x="77.7394%" y="255.50"></text></g><g><title>deno`v8::internal::LoadIC::UpdateCaches (2 samples, 0.02%)</title><rect x="77.5309%" y="261" width="0.0166%" height="15" fill="rgb(233,88,34)" fg:x="9351" fg:w="2"/><text x="77.7809%" y="271.50"></text></g><g><title>deno`v8::internal::LookupIterator::LookupIterator(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Name&gt;, unsigned long, v8::internal::Handle (2 samples, 0.02%)</title><rect x="77.5475%" y="261" width="0.0166%" height="15" fill="rgb(223,209,46)" fg:x="9353" fg:w="2"/><text x="77.7975%" y="271.50"></text></g><g><title>0x11006b42c (125 samples, 1.04%)</title><rect x="76.5691%" y="309" width="1.0364%" height="15" fill="rgb(250,43,18)" fg:x="9235" fg:w="125"/><text x="76.8191%" y="319.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (125 samples, 1.04%)</title><rect x="76.5691%" y="293" width="1.0364%" height="15" fill="rgb(208,13,10)" fg:x="9235" fg:w="125"/><text x="76.8191%" y="303.50"></text></g><g><title>deno`v8::internal::Runtime_LoadIC_Miss (98 samples, 0.81%)</title><rect x="76.7930%" y="277" width="0.8125%" height="15" fill="rgb(212,200,36)" fg:x="9262" fg:w="98"/><text x="77.0430%" y="287.50"></text></g><g><title>deno`v8::internal::Object::GetProperty (5 samples, 0.04%)</title><rect x="77.5640%" y="261" width="0.0415%" height="15" fill="rgb(225,90,30)" fg:x="9355" fg:w="5"/><text x="77.8140%" y="271.50"></text></g><g><title>0x11006d474 (4 samples, 0.03%)</title><rect x="77.6304%" y="309" width="0.0332%" height="15" fill="rgb(236,182,39)" fg:x="9363" fg:w="4"/><text x="77.8804%" y="319.50"></text></g><g><title>deno`Builtins_StringConstructor (4 samples, 0.03%)</title><rect x="77.6304%" y="293" width="0.0332%" height="15" fill="rgb(212,144,35)" fg:x="9363" fg:w="4"/><text x="77.8804%" y="303.50"></text></g><g><title>0x11006d4c0 (2 samples, 0.02%)</title><rect x="77.6635%" y="309" width="0.0166%" height="15" fill="rgb(228,63,44)" fg:x="9367" fg:w="2"/><text x="77.9135%" y="319.50"></text></g><g><title>deno`Builtins_FindOrderedHashSetEntry (7 samples, 0.06%)</title><rect x="77.6884%" y="293" width="0.0580%" height="15" fill="rgb(228,109,6)" fg:x="9370" fg:w="7"/><text x="77.9384%" y="303.50"></text></g><g><title>0x11006d4c4 (9 samples, 0.07%)</title><rect x="77.6801%" y="309" width="0.0746%" height="15" fill="rgb(238,117,24)" fg:x="9369" fg:w="9"/><text x="77.9301%" y="319.50"></text></g><g><title>deno`Builtins_DefineNamedOwnIC (3 samples, 0.02%)</title><rect x="77.7630%" y="309" width="0.0249%" height="15" fill="rgb(242,26,26)" fg:x="9379" fg:w="3"/><text x="78.0130%" y="319.50"></text></g><g><title>deno`Builtins_FindOrderedHashSetEntry (4 samples, 0.03%)</title><rect x="77.7962%" y="309" width="0.0332%" height="15" fill="rgb(221,92,48)" fg:x="9383" fg:w="4"/><text x="78.0462%" y="319.50"></text></g><g><title>deno`Builtins_LoadIC (2 samples, 0.02%)</title><rect x="77.8294%" y="309" width="0.0166%" height="15" fill="rgb(209,209,32)" fg:x="9387" fg:w="2"/><text x="78.0794%" y="319.50"></text></g><g><title>0x11006153c (445 samples, 3.69%)</title><rect x="74.1647%" y="325" width="3.6896%" height="15" fill="rgb(221,70,22)" fg:x="8945" fg:w="445"/><text x="74.4147%" y="335.50">0x11..</text></g><g><title>deno`Builtins_KeyedStoreIC (12 samples, 0.10%)</title><rect x="77.8625%" y="309" width="0.0995%" height="15" fill="rgb(248,145,5)" fg:x="9391" fg:w="12"/><text x="78.1125%" y="319.50"></text></g><g><title>0x110061554 (50 samples, 0.41%)</title><rect x="77.8625%" y="325" width="0.4146%" height="15" fill="rgb(226,116,26)" fg:x="9391" fg:w="50"/><text x="78.1125%" y="335.50"></text></g><g><title>deno`Builtins_KeyedStoreIC_Megamorphic (38 samples, 0.32%)</title><rect x="77.9620%" y="309" width="0.3151%" height="15" fill="rgb(244,5,17)" fg:x="9403" fg:w="38"/><text x="78.2120%" y="319.50"></text></g><g><title>0x110061584 (4 samples, 0.03%)</title><rect x="78.2771%" y="325" width="0.0332%" height="15" fill="rgb(252,159,33)" fg:x="9441" fg:w="4"/><text x="78.5271%" y="335.50"></text></g><g><title>0x11006d220 (2 samples, 0.02%)</title><rect x="78.3268%" y="325" width="0.0166%" height="15" fill="rgb(206,71,0)" fg:x="9447" fg:w="2"/><text x="78.5768%" y="335.50"></text></g><g><title>0x11006d380 (11 samples, 0.09%)</title><rect x="78.3434%" y="325" width="0.0912%" height="15" fill="rgb(233,118,54)" fg:x="9449" fg:w="11"/><text x="78.5934%" y="335.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (9 samples, 0.07%)</title><rect x="78.4346%" y="325" width="0.0746%" height="15" fill="rgb(234,83,48)" fg:x="9460" fg:w="9"/><text x="78.6846%" y="335.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (38 samples, 0.32%)</title><rect x="78.5341%" y="325" width="0.3151%" height="15" fill="rgb(228,3,54)" fg:x="9472" fg:w="38"/><text x="78.7841%" y="335.50"></text></g><g><title>0x110067a84 (688 samples, 5.70%)</title><rect x="73.1531%" y="341" width="5.7043%" height="15" fill="rgb(226,155,13)" fg:x="8823" fg:w="688"/><text x="73.4031%" y="351.50">0x11006..</text></g><g><title>0x11003afb0 (2 samples, 0.02%)</title><rect x="78.8823%" y="325" width="0.0166%" height="15" fill="rgb(241,28,37)" fg:x="9514" fg:w="2"/><text x="79.1323%" y="335.50"></text></g><g><title>0x11003afc0 (6 samples, 0.05%)</title><rect x="78.9072%" y="325" width="0.0497%" height="15" fill="rgb(233,93,10)" fg:x="9517" fg:w="6"/><text x="79.1572%" y="335.50"></text></g><g><title>0x11003b038 (2 samples, 0.02%)</title><rect x="78.9570%" y="325" width="0.0166%" height="15" fill="rgb(225,113,19)" fg:x="9523" fg:w="2"/><text x="79.2070%" y="335.50"></text></g><g><title>0x11003b09c (2 samples, 0.02%)</title><rect x="78.9736%" y="325" width="0.0166%" height="15" fill="rgb(241,2,18)" fg:x="9525" fg:w="2"/><text x="79.2236%" y="335.50"></text></g><g><title>0x11003b1fc (2 samples, 0.02%)</title><rect x="79.0399%" y="325" width="0.0166%" height="15" fill="rgb(228,207,21)" fg:x="9533" fg:w="2"/><text x="79.2899%" y="335.50"></text></g><g><title>0x11003b2fc (2 samples, 0.02%)</title><rect x="79.0648%" y="325" width="0.0166%" height="15" fill="rgb(213,211,35)" fg:x="9536" fg:w="2"/><text x="79.3148%" y="335.50"></text></g><g><title>0x11003b378 (2 samples, 0.02%)</title><rect x="79.0979%" y="325" width="0.0166%" height="15" fill="rgb(209,83,10)" fg:x="9540" fg:w="2"/><text x="79.3479%" y="335.50"></text></g><g><title>0x11003b3c0 (2 samples, 0.02%)</title><rect x="79.1145%" y="325" width="0.0166%" height="15" fill="rgb(209,164,1)" fg:x="9542" fg:w="2"/><text x="79.3645%" y="335.50"></text></g><g><title>0x11003b3fc (3 samples, 0.02%)</title><rect x="79.1311%" y="325" width="0.0249%" height="15" fill="rgb(213,184,43)" fg:x="9544" fg:w="3"/><text x="79.3811%" y="335.50"></text></g><g><title>0x11003b47c (2 samples, 0.02%)</title><rect x="79.1642%" y="325" width="0.0166%" height="15" fill="rgb(231,61,34)" fg:x="9548" fg:w="2"/><text x="79.4142%" y="335.50"></text></g><g><title>deno`Builtins_FulfillPromise (2 samples, 0.02%)</title><rect x="79.2223%" y="293" width="0.0166%" height="15" fill="rgb(235,75,3)" fg:x="9555" fg:w="2"/><text x="79.4723%" y="303.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (7 samples, 0.06%)</title><rect x="79.1974%" y="309" width="0.0580%" height="15" fill="rgb(220,106,47)" fg:x="9552" fg:w="7"/><text x="79.4474%" y="319.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.02%)</title><rect x="79.2389%" y="293" width="0.0166%" height="15" fill="rgb(210,196,33)" fg:x="9557" fg:w="2"/><text x="79.4889%" y="303.50"></text></g><g><title>0x11003b55c (8 samples, 0.07%)</title><rect x="79.1974%" y="325" width="0.0663%" height="15" fill="rgb(229,154,42)" fg:x="9552" fg:w="8"/><text x="79.4474%" y="335.50"></text></g><g><title>0x11003b620 (5 samples, 0.04%)</title><rect x="79.2886%" y="325" width="0.0415%" height="15" fill="rgb(228,114,26)" fg:x="9563" fg:w="5"/><text x="79.5386%" y="335.50"></text></g><g><title>deno`Builtins_PromisePrototypeThen (5 samples, 0.04%)</title><rect x="79.2886%" y="309" width="0.0415%" height="15" fill="rgb(208,144,1)" fg:x="9563" fg:w="5"/><text x="79.5386%" y="319.50"></text></g><g><title>0x11003b658 (6 samples, 0.05%)</title><rect x="79.3384%" y="325" width="0.0497%" height="15" fill="rgb(239,112,37)" fg:x="9569" fg:w="6"/><text x="79.5884%" y="335.50"></text></g><g><title>deno`Builtins_PromisePrototypeThen (6 samples, 0.05%)</title><rect x="79.3384%" y="309" width="0.0497%" height="15" fill="rgb(210,96,50)" fg:x="9569" fg:w="6"/><text x="79.5884%" y="319.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (3 samples, 0.02%)</title><rect x="79.4130%" y="325" width="0.0249%" height="15" fill="rgb(222,178,2)" fg:x="9578" fg:w="3"/><text x="79.6630%" y="335.50"></text></g><g><title>0x110067dbc (69 samples, 0.57%)</title><rect x="78.8823%" y="341" width="0.5721%" height="15" fill="rgb(226,74,18)" fg:x="9514" fg:w="69"/><text x="79.1323%" y="351.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (2 samples, 0.02%)</title><rect x="79.4379%" y="325" width="0.0166%" height="15" fill="rgb(225,67,54)" fg:x="9581" fg:w="2"/><text x="79.6879%" y="335.50"></text></g><g><title>0x110067e88 (3 samples, 0.02%)</title><rect x="79.4627%" y="341" width="0.0249%" height="15" fill="rgb(251,92,32)" fg:x="9584" fg:w="3"/><text x="79.7127%" y="351.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="79.4627%" y="325" width="0.0249%" height="15" fill="rgb(228,149,22)" fg:x="9584" fg:w="3"/><text x="79.7127%" y="335.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.02%)</title><rect x="79.4627%" y="309" width="0.0249%" height="15" fill="rgb(243,54,13)" fg:x="9584" fg:w="3"/><text x="79.7127%" y="319.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.02%)</title><rect x="79.4710%" y="293" width="0.0166%" height="15" fill="rgb(243,180,28)" fg:x="9585" fg:w="2"/><text x="79.7210%" y="303.50"></text></g><g><title>deno`Builtins_LoadIC (12 samples, 0.10%)</title><rect x="79.4876%" y="341" width="0.0995%" height="15" fill="rgb(208,167,24)" fg:x="9587" fg:w="12"/><text x="79.7376%" y="351.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (4 samples, 0.03%)</title><rect x="79.5871%" y="341" width="0.0332%" height="15" fill="rgb(245,73,45)" fg:x="9599" fg:w="4"/><text x="79.8371%" y="351.50"></text></g><g><title>0x11006b0e8 (835 samples, 6.92%)</title><rect x="72.7137%" y="373" width="6.9231%" height="15" fill="rgb(237,203,48)" fg:x="8770" fg:w="835"/><text x="72.9637%" y="383.50">0x11006b0..</text></g><g><title>deno`construct_stub_create_deopt_addr (828 samples, 6.87%)</title><rect x="72.7717%" y="357" width="6.8651%" height="15" fill="rgb(211,197,16)" fg:x="8777" fg:w="828"/><text x="73.0217%" y="367.50">deno`cons..</text></g><g><title>deno`Builtins_SameValueNumbersOnly (2 samples, 0.02%)</title><rect x="79.6203%" y="341" width="0.0166%" height="15" fill="rgb(243,99,51)" fg:x="9603" fg:w="2"/><text x="79.8703%" y="351.50"></text></g><g><title>0x1100645dc (849 samples, 7.04%)</title><rect x="72.6225%" y="389" width="7.0392%" height="15" fill="rgb(215,123,29)" fg:x="8759" fg:w="849"/><text x="72.8725%" y="399.50">0x1100645..</text></g><g><title>0x11006b138 (2 samples, 0.02%)</title><rect x="79.6451%" y="373" width="0.0166%" height="15" fill="rgb(239,186,37)" fg:x="9606" fg:w="2"/><text x="79.8951%" y="383.50"></text></g><g><title>0x1100645fc (2 samples, 0.02%)</title><rect x="79.6617%" y="389" width="0.0166%" height="15" fill="rgb(252,136,39)" fg:x="9608" fg:w="2"/><text x="79.9117%" y="399.50"></text></g><g><title>deno`Builtins_FastNewObject (4 samples, 0.03%)</title><rect x="79.6783%" y="373" width="0.0332%" height="15" fill="rgb(223,213,32)" fg:x="9610" fg:w="4"/><text x="79.9283%" y="383.50"></text></g><g><title>0x1100681f0 (2 samples, 0.02%)</title><rect x="79.7529%" y="357" width="0.0166%" height="15" fill="rgb(233,115,5)" fg:x="9619" fg:w="2"/><text x="80.0029%" y="367.50"></text></g><g><title>0x11006dd98 (2 samples, 0.02%)</title><rect x="79.7778%" y="341" width="0.0166%" height="15" fill="rgb(207,226,44)" fg:x="9622" fg:w="2"/><text x="80.0278%" y="351.50"></text></g><g><title>0x11006ddd4 (2 samples, 0.02%)</title><rect x="79.7944%" y="341" width="0.0166%" height="15" fill="rgb(208,126,0)" fg:x="9624" fg:w="2"/><text x="80.0444%" y="351.50"></text></g><g><title>0x1100682fc (6 samples, 0.05%)</title><rect x="79.7778%" y="357" width="0.0497%" height="15" fill="rgb(244,66,21)" fg:x="9622" fg:w="6"/><text x="80.0278%" y="367.50"></text></g><g><title>0x110068528 (3 samples, 0.02%)</title><rect x="79.8358%" y="357" width="0.0249%" height="15" fill="rgb(222,97,12)" fg:x="9629" fg:w="3"/><text x="80.0858%" y="367.50"></text></g><g><title>0x1100685f8 (2 samples, 0.02%)</title><rect x="79.8773%" y="357" width="0.0166%" height="15" fill="rgb(219,213,19)" fg:x="9634" fg:w="2"/><text x="80.1273%" y="367.50"></text></g><g><title>0x110068ae0 (2 samples, 0.02%)</title><rect x="79.9022%" y="341" width="0.0166%" height="15" fill="rgb(252,169,30)" fg:x="9637" fg:w="2"/><text x="80.1522%" y="351.50"></text></g><g><title>0x110068b28 (4 samples, 0.03%)</title><rect x="79.9270%" y="341" width="0.0332%" height="15" fill="rgb(206,32,51)" fg:x="9640" fg:w="4"/><text x="80.1770%" y="351.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (3 samples, 0.02%)</title><rect x="79.9353%" y="325" width="0.0249%" height="15" fill="rgb(250,172,42)" fg:x="9641" fg:w="3"/><text x="80.1853%" y="335.50"></text></g><g><title>0x110068d44 (4 samples, 0.03%)</title><rect x="80.0182%" y="341" width="0.0332%" height="15" fill="rgb(209,34,43)" fg:x="9651" fg:w="4"/><text x="80.2682%" y="351.50"></text></g><g><title>deno`Builtins_HasProperty (4 samples, 0.03%)</title><rect x="80.0182%" y="325" width="0.0332%" height="15" fill="rgb(223,11,35)" fg:x="9651" fg:w="4"/><text x="80.2682%" y="335.50"></text></g><g><title>0x110068600 (24 samples, 0.20%)</title><rect x="79.8939%" y="357" width="0.1990%" height="15" fill="rgb(251,219,26)" fg:x="9636" fg:w="24"/><text x="80.1439%" y="367.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.02%)</title><rect x="80.1094%" y="197" width="0.0166%" height="15" fill="rgb(231,119,3)" fg:x="9662" fg:w="2"/><text x="80.3594%" y="207.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.02%)</title><rect x="80.1094%" y="181" width="0.0166%" height="15" fill="rgb(216,97,11)" fg:x="9662" fg:w="2"/><text x="80.3594%" y="191.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.02%)</title><rect x="80.1094%" y="165" width="0.0166%" height="15" fill="rgb(223,59,9)" fg:x="9662" fg:w="2"/><text x="80.3594%" y="175.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (2 samples, 0.02%)</title><rect x="80.1094%" y="149" width="0.0166%" height="15" fill="rgb(233,93,31)" fg:x="9662" fg:w="2"/><text x="80.3594%" y="159.50"></text></g><g><title>0x110068784 (3 samples, 0.02%)</title><rect x="80.1094%" y="357" width="0.0249%" height="15" fill="rgb(239,81,33)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="367.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="80.1094%" y="341" width="0.0249%" height="15" fill="rgb(213,120,34)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="351.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.02%)</title><rect x="80.1094%" y="325" width="0.0249%" height="15" fill="rgb(243,49,53)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="335.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (3 samples, 0.02%)</title><rect x="80.1094%" y="309" width="0.0249%" height="15" fill="rgb(247,216,33)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="319.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (3 samples, 0.02%)</title><rect x="80.1094%" y="293" width="0.0249%" height="15" fill="rgb(226,26,14)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="303.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (3 samples, 0.02%)</title><rect x="80.1094%" y="277" width="0.0249%" height="15" fill="rgb(215,49,53)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="287.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (3 samples, 0.02%)</title><rect x="80.1094%" y="261" width="0.0249%" height="15" fill="rgb(245,162,40)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="271.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (3 samples, 0.02%)</title><rect x="80.1094%" y="245" width="0.0249%" height="15" fill="rgb(229,68,17)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="255.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (3 samples, 0.02%)</title><rect x="80.1094%" y="229" width="0.0249%" height="15" fill="rgb(213,182,10)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="239.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.02%)</title><rect x="80.1094%" y="213" width="0.0249%" height="15" fill="rgb(245,125,30)" fg:x="9662" fg:w="3"/><text x="80.3594%" y="223.50"></text></g><g><title>deno`Builtins_LoadIC (7 samples, 0.06%)</title><rect x="80.1343%" y="357" width="0.0580%" height="15" fill="rgb(232,202,2)" fg:x="9665" fg:w="7"/><text x="80.3843%" y="367.50"></text></g><g><title>0x110064600 (67 samples, 0.56%)</title><rect x="79.6783%" y="389" width="0.5555%" height="15" fill="rgb(237,140,51)" fg:x="9610" fg:w="67"/><text x="79.9283%" y="399.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (63 samples, 0.52%)</title><rect x="79.7115%" y="373" width="0.5223%" height="15" fill="rgb(236,157,25)" fg:x="9614" fg:w="63"/><text x="79.9615%" y="383.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (5 samples, 0.04%)</title><rect x="80.1924%" y="357" width="0.0415%" height="15" fill="rgb(219,209,0)" fg:x="9672" fg:w="5"/><text x="80.4424%" y="367.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (4 samples, 0.03%)</title><rect x="80.3831%" y="357" width="0.0332%" height="15" fill="rgb(240,116,54)" fg:x="9695" fg:w="4"/><text x="80.6331%" y="367.50"></text></g><g><title>deno`Builtins_FulfillPromise (3 samples, 0.02%)</title><rect x="80.4245%" y="341" width="0.0249%" height="15" fill="rgb(216,10,36)" fg:x="9700" fg:w="3"/><text x="80.6745%" y="351.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (40 samples, 0.33%)</title><rect x="80.2421%" y="373" width="0.3316%" height="15" fill="rgb(222,72,44)" fg:x="9678" fg:w="40"/><text x="80.4921%" y="383.50"></text></g><g><title>deno`Builtins_ResolvePromise (19 samples, 0.16%)</title><rect x="80.4162%" y="357" width="0.1575%" height="15" fill="rgb(232,159,9)" fg:x="9699" fg:w="19"/><text x="80.6662%" y="367.50"></text></g><g><title>deno`Builtins_GetProperty (15 samples, 0.12%)</title><rect x="80.4494%" y="341" width="0.1244%" height="15" fill="rgb(210,39,32)" fg:x="9703" fg:w="15"/><text x="80.6994%" y="351.50"></text></g><g><title>0x110064614 (43 samples, 0.36%)</title><rect x="80.2338%" y="389" width="0.3565%" height="15" fill="rgb(216,194,45)" fg:x="9677" fg:w="43"/><text x="80.4838%" y="399.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.02%)</title><rect x="80.5738%" y="373" width="0.0166%" height="15" fill="rgb(218,18,35)" fg:x="9718" fg:w="2"/><text x="80.8238%" y="383.50"></text></g><g><title>0x110064b3c (2 samples, 0.02%)</title><rect x="80.6318%" y="389" width="0.0166%" height="15" fill="rgb(207,83,51)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="399.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.02%)</title><rect x="80.6318%" y="373" width="0.0166%" height="15" fill="rgb(225,63,43)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="383.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.02%)</title><rect x="80.6318%" y="357" width="0.0166%" height="15" fill="rgb(207,57,36)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="367.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.02%)</title><rect x="80.6318%" y="341" width="0.0166%" height="15" fill="rgb(216,99,33)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="351.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.02%)</title><rect x="80.6318%" y="325" width="0.0166%" height="15" fill="rgb(225,42,16)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="335.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.02%)</title><rect x="80.6318%" y="309" width="0.0166%" height="15" fill="rgb(220,201,45)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="319.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.02%)</title><rect x="80.6318%" y="293" width="0.0166%" height="15" fill="rgb(225,33,4)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="303.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.02%)</title><rect x="80.6318%" y="277" width="0.0166%" height="15" fill="rgb(224,33,50)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="287.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.02%)</title><rect x="80.6318%" y="261" width="0.0166%" height="15" fill="rgb(246,198,51)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="271.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.02%)</title><rect x="80.6318%" y="245" width="0.0166%" height="15" fill="rgb(205,22,4)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="255.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.02%)</title><rect x="80.6318%" y="229" width="0.0166%" height="15" fill="rgb(206,3,8)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="239.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.02%)</title><rect x="80.6318%" y="213" width="0.0166%" height="15" fill="rgb(251,23,15)" fg:x="9725" fg:w="2"/><text x="80.8818%" y="223.50"></text></g><g><title>0x1100653c0 (2 samples, 0.02%)</title><rect x="80.6484%" y="389" width="0.0166%" height="15" fill="rgb(252,88,28)" fg:x="9727" fg:w="2"/><text x="80.8984%" y="399.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.02%)</title><rect x="80.6484%" y="373" width="0.0166%" height="15" fill="rgb(212,127,14)" fg:x="9727" fg:w="2"/><text x="80.8984%" y="383.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.02%)</title><rect x="80.6484%" y="357" width="0.0166%" height="15" fill="rgb(247,145,37)" fg:x="9727" fg:w="2"/><text x="80.8984%" y="367.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.02%)</title><rect x="80.6484%" y="341" width="0.0166%" height="15" fill="rgb(209,117,53)" fg:x="9727" fg:w="2"/><text x="80.8984%" y="351.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.02%)</title><rect x="80.6484%" y="325" width="0.0166%" height="15" fill="rgb(212,90,42)" fg:x="9727" fg:w="2"/><text x="80.8984%" y="335.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.02%)</title><rect x="80.6484%" y="309" width="0.0166%" height="15" fill="rgb(218,164,37)" fg:x="9727" fg:w="2"/><text x="80.8984%" y="319.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.02%)</title><rect x="80.6484%" y="293" width="0.0166%" height="15" fill="rgb(246,65,34)" fg:x="9727" fg:w="2"/><text x="80.8984%" y="303.50"></text></g><g><title>0x110065418 (2 samples, 0.02%)</title><rect x="80.6650%" y="389" width="0.0166%" height="15" fill="rgb(231,100,33)" fg:x="9729" fg:w="2"/><text x="80.9150%" y="399.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.02%)</title><rect x="80.6650%" y="373" width="0.0166%" height="15" fill="rgb(228,126,14)" fg:x="9729" fg:w="2"/><text x="80.9150%" y="383.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.02%)</title><rect x="80.6650%" y="357" width="0.0166%" height="15" fill="rgb(215,173,21)" fg:x="9729" fg:w="2"/><text x="80.9150%" y="367.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.02%)</title><rect x="80.6650%" y="341" width="0.0166%" height="15" fill="rgb(210,6,40)" fg:x="9729" fg:w="2"/><text x="80.9150%" y="351.50"></text></g><g><title>0x110065450 (2 samples, 0.02%)</title><rect x="80.6815%" y="389" width="0.0166%" height="15" fill="rgb(212,48,18)" fg:x="9731" fg:w="2"/><text x="80.9315%" y="399.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.02%)</title><rect x="80.6815%" y="373" width="0.0166%" height="15" fill="rgb(230,214,11)" fg:x="9731" fg:w="2"/><text x="80.9315%" y="383.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.02%)</title><rect x="80.6815%" y="357" width="0.0166%" height="15" fill="rgb(254,105,39)" fg:x="9731" fg:w="2"/><text x="80.9315%" y="367.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.02%)</title><rect x="80.6815%" y="341" width="0.0166%" height="15" fill="rgb(245,158,5)" fg:x="9731" fg:w="2"/><text x="80.9315%" y="351.50"></text></g><g><title>0x110065734 (2 samples, 0.02%)</title><rect x="80.7396%" y="389" width="0.0166%" height="15" fill="rgb(249,208,11)" fg:x="9738" fg:w="2"/><text x="80.9896%" y="399.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (2 samples, 0.02%)</title><rect x="80.7396%" y="373" width="0.0166%" height="15" fill="rgb(210,39,28)" fg:x="9738" fg:w="2"/><text x="80.9896%" y="383.50"></text></g><g><title>0x110065794 (2 samples, 0.02%)</title><rect x="80.7562%" y="389" width="0.0166%" height="15" fill="rgb(211,56,53)" fg:x="9740" fg:w="2"/><text x="81.0062%" y="399.50"></text></g><g><title>0x11006cd60 (4 samples, 0.03%)</title><rect x="80.8142%" y="389" width="0.0332%" height="15" fill="rgb(226,201,30)" fg:x="9747" fg:w="4"/><text x="81.0642%" y="399.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (2 samples, 0.02%)</title><rect x="80.8639%" y="389" width="0.0166%" height="15" fill="rgb(239,101,34)" fg:x="9753" fg:w="2"/><text x="81.1139%" y="399.50"></text></g><g><title>deno`Builtins_CallApiCallback (3 samples, 0.02%)</title><rect x="80.8888%" y="389" width="0.0249%" height="15" fill="rgb(226,209,5)" fg:x="9756" fg:w="3"/><text x="81.1388%" y="399.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (2 samples, 0.02%)</title><rect x="80.9137%" y="389" width="0.0166%" height="15" fill="rgb(250,105,47)" fg:x="9759" fg:w="2"/><text x="81.1637%" y="399.50"></text></g><g><title>deno`Builtins_GetNamedPropertyHandler (2 samples, 0.02%)</title><rect x="80.9634%" y="357" width="0.0166%" height="15" fill="rgb(230,72,3)" fg:x="9765" fg:w="2"/><text x="81.2134%" y="367.50"></text></g><g><title>deno`Builtins_LoadIC_NoFeedback (2 samples, 0.02%)</title><rect x="80.9634%" y="341" width="0.0166%" height="15" fill="rgb(232,218,39)" fg:x="9765" fg:w="2"/><text x="81.2134%" y="351.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="80.9634%" y="325" width="0.0166%" height="15" fill="rgb(248,166,6)" fg:x="9765" fg:w="2"/><text x="81.2134%" y="335.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.02%)</title><rect x="80.9634%" y="309" width="0.0166%" height="15" fill="rgb(247,89,20)" fg:x="9765" fg:w="2"/><text x="81.2134%" y="319.50"></text></g><g><title>deno`Builtins_ConstructHandler (2 samples, 0.02%)</title><rect x="80.9634%" y="293" width="0.0166%" height="15" fill="rgb(248,130,54)" fg:x="9765" fg:w="2"/><text x="81.2134%" y="303.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (7 samples, 0.06%)</title><rect x="80.9303%" y="389" width="0.0580%" height="15" fill="rgb(234,196,4)" fg:x="9761" fg:w="7"/><text x="81.1803%" y="399.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (5 samples, 0.04%)</title><rect x="80.9469%" y="373" width="0.0415%" height="15" fill="rgb(250,143,31)" fg:x="9763" fg:w="5"/><text x="81.1969%" y="383.50"></text></g><g><title>deno`Builtins_LoadIC (5 samples, 0.04%)</title><rect x="80.9883%" y="389" width="0.0415%" height="15" fill="rgb(211,110,34)" fg:x="9768" fg:w="5"/><text x="81.2383%" y="399.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (9,636 samples, 79.89%)</title><rect x="1.1691%" y="405" width="79.8939%" height="15" fill="rgb(215,124,48)" fg:x="141" fg:w="9636"/><text x="1.4191%" y="415.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_BaselineLeaveFrame (2 samples, 0.02%)</title><rect x="81.0629%" y="405" width="0.0166%" height="15" fill="rgb(216,46,13)" fg:x="9777" fg:w="2"/><text x="81.3129%" y="415.50"></text></g><g><title>deno`Builtins_CompileLazy (2 samples, 0.02%)</title><rect x="81.0795%" y="405" width="0.0166%" height="15" fill="rgb(205,184,25)" fg:x="9779" fg:w="2"/><text x="81.3295%" y="415.50"></text></g><g><title>deno`Builtins_ResolvePromise (17 samples, 0.14%)</title><rect x="81.0961%" y="405" width="0.1410%" height="15" fill="rgb(228,1,10)" fg:x="9781" fg:w="17"/><text x="81.3461%" y="415.50"></text></g><g><title>deno`Builtins_FulfillPromise (14 samples, 0.12%)</title><rect x="81.1210%" y="389" width="0.1161%" height="15" fill="rgb(213,116,27)" fg:x="9784" fg:w="14"/><text x="81.3710%" y="399.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (9,707 samples, 80.48%)</title><rect x="0.8042%" y="421" width="80.4825%" height="15" fill="rgb(241,95,50)" fg:x="97" fg:w="9707"/><text x="1.0542%" y="431.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (6 samples, 0.05%)</title><rect x="81.2370%" y="405" width="0.0497%" height="15" fill="rgb(238,48,32)" fg:x="9798" fg:w="6"/><text x="81.4870%" y="415.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (9,758 samples, 80.91%)</title><rect x="0.4229%" y="565" width="80.9054%" height="15" fill="rgb(235,113,49)" fg:x="51" fg:w="9758"/><text x="0.6729%" y="575.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (9,738 samples, 80.74%)</title><rect x="0.5887%" y="549" width="80.7396%" height="15" fill="rgb(205,127,43)" fg:x="71" fg:w="9738"/><text x="0.8387%" y="559.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (9,738 samples, 80.74%)</title><rect x="0.5887%" y="533" width="80.7396%" height="15" fill="rgb(250,162,2)" fg:x="71" fg:w="9738"/><text x="0.8387%" y="543.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (9,738 samples, 80.74%)</title><rect x="0.5887%" y="517" width="80.7396%" height="15" fill="rgb(220,13,41)" fg:x="71" fg:w="9738"/><text x="0.8387%" y="527.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*, v8::internal::MaybeHandle (9,738 samples, 80.74%)</title><rect x="0.5887%" y="501" width="80.7396%" height="15" fill="rgb(249,221,25)" fg:x="71" fg:w="9738"/><text x="0.8387%" y="511.50">deno`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*, v8::internal::MaybeHandle</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (9,738 samples, 80.74%)</title><rect x="0.5887%" y="485" width="80.7396%" height="15" fill="rgb(215,208,19)" fg:x="71" fg:w="9738"/><text x="0.8387%" y="495.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (9,738 samples, 80.74%)</title><rect x="0.5887%" y="469" width="80.7396%" height="15" fill="rgb(236,175,2)" fg:x="71" fg:w="9738"/><text x="0.8387%" y="479.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (9,738 samples, 80.74%)</title><rect x="0.5887%" y="453" width="80.7396%" height="15" fill="rgb(241,52,2)" fg:x="71" fg:w="9738"/><text x="0.8387%" y="463.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (9,738 samples, 80.74%)</title><rect x="0.5887%" y="437" width="80.7396%" height="15" fill="rgb(248,140,14)" fg:x="71" fg:w="9738"/><text x="0.8387%" y="447.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_ResolvePromise (5 samples, 0.04%)</title><rect x="81.2868%" y="421" width="0.0415%" height="15" fill="rgb(253,22,42)" fg:x="9804" fg:w="5"/><text x="81.5368%" y="431.50"></text></g><g><title>deno`void v8::internal::LiveObjectVisitor::VisitBlackObjectsNoFail&lt;v8::internal::EvacuateNewSpacePageVisitor&lt;(v8::internal::PageEvacuationMode)1&gt;, v8::internal::NonAtomicMarkingState&gt;(v8::internal::MemoryChunk*, v8::internal::NonAtomicMarkingState*, v8::internal::EvacuateNewSpacePageVisitor&lt; (3 samples, 0.02%)</title><rect x="81.3448%" y="341" width="0.0249%" height="15" fill="rgb(234,61,47)" fg:x="9811" fg:w="3"/><text x="81.5948%" y="351.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::EvacuatePagesInParallel (4 samples, 0.03%)</title><rect x="81.3448%" y="437" width="0.0332%" height="15" fill="rgb(208,226,15)" fg:x="9811" fg:w="4"/><text x="81.5948%" y="447.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (4 samples, 0.03%)</title><rect x="81.3448%" y="421" width="0.0332%" height="15" fill="rgb(217,221,4)" fg:x="9811" fg:w="4"/><text x="81.5948%" y="431.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (4 samples, 0.03%)</title><rect x="81.3448%" y="405" width="0.0332%" height="15" fill="rgb(212,174,34)" fg:x="9811" fg:w="4"/><text x="81.5948%" y="415.50"></text></g><g><title>deno`v8::internal::PageEvacuationJob::Run (4 samples, 0.03%)</title><rect x="81.3448%" y="389" width="0.0332%" height="15" fill="rgb(253,83,4)" fg:x="9811" fg:w="4"/><text x="81.5948%" y="399.50"></text></g><g><title>deno`v8::internal::Evacuator::EvacuatePage (4 samples, 0.03%)</title><rect x="81.3448%" y="373" width="0.0332%" height="15" fill="rgb(250,195,49)" fg:x="9811" fg:w="4"/><text x="81.5948%" y="383.50"></text></g><g><title>deno`v8::internal::FullEvacuator::RawEvacuatePage (4 samples, 0.03%)</title><rect x="81.3448%" y="357" width="0.0332%" height="15" fill="rgb(241,192,25)" fg:x="9811" fg:w="4"/><text x="81.5948%" y="367.50"></text></g><g><title>deno`v8::internal::Heap::FinalizeIncrementalMarkingIfComplete (7 samples, 0.06%)</title><rect x="81.3365%" y="533" width="0.0580%" height="15" fill="rgb(208,124,10)" fg:x="9810" fg:w="7"/><text x="81.5865%" y="543.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (7 samples, 0.06%)</title><rect x="81.3365%" y="517" width="0.0580%" height="15" fill="rgb(222,33,0)" fg:x="9810" fg:w="7"/><text x="81.5865%" y="527.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (7 samples, 0.06%)</title><rect x="81.3365%" y="501" width="0.0580%" height="15" fill="rgb(234,209,28)" fg:x="9810" fg:w="7"/><text x="81.5865%" y="511.50"></text></g><g><title>deno`v8::internal::Heap::MarkCompact (7 samples, 0.06%)</title><rect x="81.3365%" y="485" width="0.0580%" height="15" fill="rgb(224,11,23)" fg:x="9810" fg:w="7"/><text x="81.5865%" y="495.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::CollectGarbage (7 samples, 0.06%)</title><rect x="81.3365%" y="469" width="0.0580%" height="15" fill="rgb(232,99,1)" fg:x="9810" fg:w="7"/><text x="81.5865%" y="479.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::Evacuate (6 samples, 0.05%)</title><rect x="81.3448%" y="453" width="0.0497%" height="15" fill="rgb(237,95,45)" fg:x="9811" fg:w="6"/><text x="81.5948%" y="463.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::UpdatePointersAfterEvacuation (2 samples, 0.02%)</title><rect x="81.3780%" y="437" width="0.0166%" height="15" fill="rgb(208,109,11)" fg:x="9815" fg:w="2"/><text x="81.6280%" y="447.50"></text></g><g><title>deno`v8::internal::Heap::IterateRootsIncludingClients(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.02%)</title><rect x="81.3780%" y="421" width="0.0166%" height="15" fill="rgb(216,190,48)" fg:x="9815" fg:w="2"/><text x="81.6280%" y="431.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.02%)</title><rect x="81.3780%" y="405" width="0.0166%" height="15" fill="rgb(251,171,36)" fg:x="9815" fg:w="2"/><text x="81.6280%" y="415.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.02%)</title><rect x="81.3780%" y="389" width="0.0166%" height="15" fill="rgb(230,62,22)" fg:x="9815" fg:w="2"/><text x="81.6280%" y="399.50"></text></g><g><title>deno`void v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt;::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (4 samples, 0.03%)</title><rect x="81.4195%" y="485" width="0.0332%" height="15" fill="rgb(225,114,35)" fg:x="9820" fg:w="4"/><text x="81.6695%" y="495.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::ProcessMarkingWorklist (8 samples, 0.07%)</title><rect x="81.3946%" y="501" width="0.0663%" height="15" fill="rgb(215,118,42)" fg:x="9817" fg:w="8"/><text x="81.6446%" y="511.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::AdvanceWithDeadline (11 samples, 0.09%)</title><rect x="81.3946%" y="533" width="0.0912%" height="15" fill="rgb(243,119,21)" fg:x="9817" fg:w="11"/><text x="81.6446%" y="543.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::Step (11 samples, 0.09%)</title><rect x="81.3946%" y="517" width="0.0912%" height="15" fill="rgb(252,177,53)" fg:x="9817" fg:w="11"/><text x="81.6446%" y="527.50"></text></g><g><title>deno`void v8::internal::MarkingVisitorBase&lt;v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt;, v8::internal::MarkingState&gt;::ProcessStrongHeapObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.02%)</title><rect x="81.4692%" y="501" width="0.0166%" height="15" fill="rgb(237,209,29)" fg:x="9826" fg:w="2"/><text x="81.7192%" y="511.50"></text></g><g><title>deno`v8::internal::IncrementalMarkingJob::Task::RunInternal (19 samples, 0.16%)</title><rect x="81.3365%" y="549" width="0.1575%" height="15" fill="rgb(212,65,23)" fg:x="9810" fg:w="19"/><text x="81.5865%" y="559.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (7 samples, 0.06%)</title><rect x="81.6101%" y="405" width="0.0580%" height="15" fill="rgb(230,222,46)" fg:x="9843" fg:w="7"/><text x="81.8601%" y="415.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (3 samples, 0.02%)</title><rect x="81.6765%" y="405" width="0.0249%" height="15" fill="rgb(215,135,32)" fg:x="9851" fg:w="3"/><text x="81.9265%" y="415.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.02%)</title><rect x="81.6848%" y="389" width="0.0166%" height="15" fill="rgb(246,101,22)" fg:x="9852" fg:w="2"/><text x="81.9348%" y="399.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (20 samples, 0.17%)</title><rect x="81.5521%" y="421" width="0.1658%" height="15" fill="rgb(206,107,13)" fg:x="9836" fg:w="20"/><text x="81.8021%" y="431.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (2 samples, 0.02%)</title><rect x="81.7014%" y="405" width="0.0166%" height="15" fill="rgb(250,100,44)" fg:x="9854" fg:w="2"/><text x="81.9514%" y="415.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (9 samples, 0.07%)</title><rect x="81.7179%" y="421" width="0.0746%" height="15" fill="rgb(231,147,38)" fg:x="9856" fg:w="9"/><text x="81.9679%" y="431.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (6 samples, 0.05%)</title><rect x="81.7428%" y="405" width="0.0497%" height="15" fill="rgb(229,8,40)" fg:x="9859" fg:w="6"/><text x="81.9928%" y="415.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (30 samples, 0.25%)</title><rect x="81.5521%" y="437" width="0.2487%" height="15" fill="rgb(221,135,30)" fg:x="9836" fg:w="30"/><text x="81.8021%" y="447.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (37 samples, 0.31%)</title><rect x="81.5024%" y="485" width="0.3068%" height="15" fill="rgb(249,193,18)" fg:x="9830" fg:w="37"/><text x="81.7524%" y="495.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (31 samples, 0.26%)</title><rect x="81.5521%" y="469" width="0.2570%" height="15" fill="rgb(209,133,39)" fg:x="9836" fg:w="31"/><text x="81.8021%" y="479.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (31 samples, 0.26%)</title><rect x="81.5521%" y="453" width="0.2570%" height="15" fill="rgb(232,100,14)" fg:x="9836" fg:w="31"/><text x="81.8021%" y="463.50"></text></g><g><title>deno`v8::internal::SemiSpace::Swap (3 samples, 0.02%)</title><rect x="81.8091%" y="485" width="0.0249%" height="15" fill="rgb(224,185,1)" fg:x="9867" fg:w="3"/><text x="82.0591%" y="495.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (41 samples, 0.34%)</title><rect x="81.5024%" y="501" width="0.3399%" height="15" fill="rgb(223,139,8)" fg:x="9830" fg:w="41"/><text x="81.7524%" y="511.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (62 samples, 0.51%)</title><rect x="81.3365%" y="565" width="0.5141%" height="15" fill="rgb(232,213,38)" fg:x="9810" fg:w="62"/><text x="81.5865%" y="575.50"></text></g><g><title>deno`v8::internal::ScavengeJob::Task::RunInternal (43 samples, 0.36%)</title><rect x="81.4941%" y="549" width="0.3565%" height="15" fill="rgb(207,94,22)" fg:x="9829" fg:w="43"/><text x="81.7441%" y="559.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (43 samples, 0.36%)</title><rect x="81.4941%" y="533" width="0.3565%" height="15" fill="rgb(219,183,54)" fg:x="9829" fg:w="43"/><text x="81.7441%" y="543.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (42 samples, 0.35%)</title><rect x="81.5024%" y="517" width="0.3482%" height="15" fill="rgb(216,185,54)" fg:x="9830" fg:w="42"/><text x="81.7524%" y="527.50"></text></g><g><title>deno`v8::primitives::null (2 samples, 0.02%)</title><rect x="81.8506%" y="565" width="0.0166%" height="15" fill="rgb(254,217,39)" fg:x="9872" fg:w="2"/><text x="82.1006%" y="575.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (9,872 samples, 81.85%)</title><rect x="0.0249%" y="581" width="81.8506%" height="15" fill="rgb(240,178,23)" fg:x="3" fg:w="9872"/><text x="0.2749%" y="591.50">deno`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,878 samples, 81.90%)</title><rect x="0.0000%" y="629" width="81.9003%" height="15" fill="rgb(218,11,47)" fg:x="0" fg:w="9878"/><text x="0.2500%" y="639.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,878 samples, 81.90%)</title><rect x="0.0000%" y="613" width="81.9003%" height="15" fill="rgb(218,51,51)" fg:x="0" fg:w="9878"/><text x="0.2500%" y="623.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,878 samples, 81.90%)</title><rect x="0.0000%" y="597" width="81.9003%" height="15" fill="rgb(238,126,27)" fg:x="0" fg:w="9878"/><text x="0.2500%" y="607.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.02%)</title><rect x="81.9003%" y="581" width="0.0166%" height="15" fill="rgb(249,202,22)" fg:x="9878" fg:w="2"/><text x="82.1503%" y="591.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.03%)</title><rect x="81.9003%" y="597" width="0.0332%" height="15" fill="rgb(254,195,49)" fg:x="9878" fg:w="4"/><text x="82.1503%" y="607.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.02%)</title><rect x="81.9169%" y="581" width="0.0166%" height="15" fill="rgb(208,123,14)" fg:x="9880" fg:w="2"/><text x="82.1669%" y="591.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.02%)</title><rect x="81.9169%" y="565" width="0.0166%" height="15" fill="rgb(224,200,8)" fg:x="9880" fg:w="2"/><text x="82.1669%" y="575.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.02%)</title><rect x="81.9169%" y="549" width="0.0166%" height="15" fill="rgb(217,61,36)" fg:x="9880" fg:w="2"/><text x="82.1669%" y="559.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.02%)</title><rect x="81.9169%" y="533" width="0.0166%" height="15" fill="rgb(206,35,45)" fg:x="9880" fg:w="2"/><text x="82.1669%" y="543.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.02%)</title><rect x="81.9169%" y="517" width="0.0166%" height="15" fill="rgb(217,65,33)" fg:x="9880" fg:w="2"/><text x="82.1669%" y="527.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,883 samples, 81.94%)</title><rect x="0.0000%" y="661" width="81.9418%" height="15" fill="rgb(222,158,48)" fg:x="0" fg:w="9883"/><text x="0.2500%" y="671.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (9,883 samples, 81.94%)</title><rect x="0.0000%" y="645" width="81.9418%" height="15" fill="rgb(254,2,54)" fg:x="0" fg:w="9883"/><text x="0.2500%" y="655.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`deno::worker::create_main_worker (5 samples, 0.04%)</title><rect x="81.9003%" y="629" width="0.0415%" height="15" fill="rgb(250,143,38)" fg:x="9878" fg:w="5"/><text x="82.1503%" y="639.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (5 samples, 0.04%)</title><rect x="81.9003%" y="613" width="0.0415%" height="15" fill="rgb(248,25,0)" fg:x="9878" fg:w="5"/><text x="82.1503%" y="623.50"></text></g><g><title>deno`deno::main::_{{closure}} (9,884 samples, 81.95%)</title><rect x="0.0000%" y="677" width="81.9501%" height="15" fill="rgb(206,152,27)" fg:x="0" fg:w="9884"/><text x="0.2500%" y="687.50">deno`deno::main::_{{closure}}</text></g><g><title>dyld`start (9,885 samples, 81.96%)</title><rect x="0.0000%" y="773" width="81.9584%" height="15" fill="rgb(240,77,30)" fg:x="0" fg:w="9885"/><text x="0.2500%" y="783.50">dyld`start</text></g><g><title>deno`main (9,885 samples, 81.96%)</title><rect x="0.0000%" y="757" width="81.9584%" height="15" fill="rgb(231,5,3)" fg:x="0" fg:w="9885"/><text x="0.2500%" y="767.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (9,885 samples, 81.96%)</title><rect x="0.0000%" y="741" width="81.9584%" height="15" fill="rgb(207,226,32)" fg:x="0" fg:w="9885"/><text x="0.2500%" y="751.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (9,885 samples, 81.96%)</title><rect x="0.0000%" y="725" width="81.9584%" height="15" fill="rgb(222,207,47)" fg:x="0" fg:w="9885"/><text x="0.2500%" y="735.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (9,885 samples, 81.96%)</title><rect x="0.0000%" y="709" width="81.9584%" height="15" fill="rgb(229,115,45)" fg:x="0" fg:w="9885"/><text x="0.2500%" y="719.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,885 samples, 81.96%)</title><rect x="0.0000%" y="693" width="81.9584%" height="15" fill="rgb(224,191,6)" fg:x="0" fg:w="9885"/><text x="0.2500%" y="703.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="81.9667%" y="677" width="0.0166%" height="15" fill="rgb(230,227,24)" fg:x="9886" fg:w="2"/><text x="82.2167%" y="687.50"></text></g><g><title>deno`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="81.9915%" y="677" width="0.0332%" height="15" fill="rgb(228,80,19)" fg:x="9889" fg:w="4"/><text x="82.2415%" y="687.50"></text></g><g><title>deno`OUTLINED_FUNCTION_136 (8 samples, 0.07%)</title><rect x="82.0247%" y="677" width="0.0663%" height="15" fill="rgb(247,229,0)" fg:x="9893" fg:w="8"/><text x="82.2747%" y="687.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2839 (4 samples, 0.03%)</title><rect x="82.0910%" y="677" width="0.0332%" height="15" fill="rgb(237,194,15)" fg:x="9901" fg:w="4"/><text x="82.3410%" y="687.50"></text></g><g><title>deno`OUTLINED_FUNCTION_91 (3 samples, 0.02%)</title><rect x="82.1325%" y="677" width="0.0249%" height="15" fill="rgb(219,203,20)" fg:x="9906" fg:w="3"/><text x="82.3825%" y="687.50"></text></g><g><title>deno`__rust_alloc_zeroed (4 samples, 0.03%)</title><rect x="82.1574%" y="677" width="0.0332%" height="15" fill="rgb(234,128,8)" fg:x="9909" fg:w="4"/><text x="82.4074%" y="687.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="82.6134%" y="661" width="0.0166%" height="15" fill="rgb(248,202,8)" fg:x="9964" fg:w="2"/><text x="82.8634%" y="671.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="82.6383%" y="661" width="0.0497%" height="15" fill="rgb(206,104,37)" fg:x="9967" fg:w="6"/><text x="82.8883%" y="671.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (5 samples, 0.04%)</title><rect x="82.6880%" y="661" width="0.0415%" height="15" fill="rgb(223,8,27)" fg:x="9973" fg:w="5"/><text x="82.9380%" y="671.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="82.7295%" y="661" width="0.0249%" height="15" fill="rgb(216,217,28)" fg:x="9978" fg:w="3"/><text x="82.9795%" y="671.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11234 (7 samples, 0.06%)</title><rect x="82.7626%" y="661" width="0.0580%" height="15" fill="rgb(249,199,1)" fg:x="9982" fg:w="7"/><text x="83.0126%" y="671.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2565 (4 samples, 0.03%)</title><rect x="82.8372%" y="661" width="0.0332%" height="15" fill="rgb(240,85,17)" fg:x="9991" fg:w="4"/><text x="83.0872%" y="671.50"></text></g><g><title>deno`OUTLINED_FUNCTION_35226 (6 samples, 0.05%)</title><rect x="82.8787%" y="661" width="0.0497%" height="15" fill="rgb(206,108,45)" fg:x="9996" fg:w="6"/><text x="83.1287%" y="671.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36800 (2 samples, 0.02%)</title><rect x="82.9284%" y="661" width="0.0166%" height="15" fill="rgb(245,210,41)" fg:x="10002" fg:w="2"/><text x="83.1784%" y="671.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="82.9533%" y="661" width="0.0166%" height="15" fill="rgb(206,13,37)" fg:x="10005" fg:w="2"/><text x="83.2033%" y="671.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (4 samples, 0.03%)</title><rect x="82.9782%" y="661" width="0.0332%" height="15" fill="rgb(250,61,18)" fg:x="10008" fg:w="4"/><text x="83.2282%" y="671.50"></text></g><g><title>deno`http::header::name::parse_hdr (13 samples, 0.11%)</title><rect x="83.0114%" y="661" width="0.1078%" height="15" fill="rgb(235,172,48)" fg:x="10012" fg:w="13"/><text x="83.2614%" y="671.50"></text></g><g><title>deno`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.09%)</title><rect x="83.1689%" y="645" width="0.0912%" height="15" fill="rgb(249,201,17)" fg:x="10031" fg:w="11"/><text x="83.4189%" y="655.50"></text></g><g><title>deno`OUTLINED_FUNCTION_1367 (2 samples, 0.02%)</title><rect x="83.2684%" y="645" width="0.0166%" height="15" fill="rgb(219,208,6)" fg:x="10043" fg:w="2"/><text x="83.5184%" y="655.50"></text></g><g><title>deno`OUTLINED_FUNCTION_14271 (3 samples, 0.02%)</title><rect x="83.2850%" y="645" width="0.0249%" height="15" fill="rgb(248,31,23)" fg:x="10045" fg:w="3"/><text x="83.5350%" y="655.50"></text></g><g><title>deno`OUTLINED_FUNCTION_19360 (6 samples, 0.05%)</title><rect x="83.3098%" y="645" width="0.0497%" height="15" fill="rgb(245,15,42)" fg:x="10048" fg:w="6"/><text x="83.5598%" y="655.50"></text></g><g><title>deno`OUTLINED_FUNCTION_22443 (5 samples, 0.04%)</title><rect x="83.3596%" y="645" width="0.0415%" height="15" fill="rgb(222,217,39)" fg:x="10054" fg:w="5"/><text x="83.6096%" y="655.50"></text></g><g><title>deno`OUTLINED_FUNCTION_30872 (2 samples, 0.02%)</title><rect x="83.4010%" y="645" width="0.0166%" height="15" fill="rgb(210,219,27)" fg:x="10059" fg:w="2"/><text x="83.6510%" y="655.50"></text></g><g><title>deno`OUTLINED_FUNCTION_457 (2 samples, 0.02%)</title><rect x="83.4176%" y="645" width="0.0166%" height="15" fill="rgb(252,166,36)" fg:x="10061" fg:w="2"/><text x="83.6676%" y="655.50"></text></g><g><title>deno`OUTLINED_FUNCTION_8742 (2 samples, 0.02%)</title><rect x="83.4342%" y="645" width="0.0166%" height="15" fill="rgb(245,132,34)" fg:x="10063" fg:w="2"/><text x="83.6842%" y="655.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (14 samples, 0.12%)</title><rect x="83.4591%" y="645" width="0.1161%" height="15" fill="rgb(236,54,3)" fg:x="10066" fg:w="14"/><text x="83.7091%" y="655.50"></text></g><g><title>deno`httparse::parse_version (2 samples, 0.02%)</title><rect x="83.5752%" y="645" width="0.0166%" height="15" fill="rgb(241,173,43)" fg:x="10080" fg:w="2"/><text x="83.8252%" y="655.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (59 samples, 0.49%)</title><rect x="83.1191%" y="661" width="0.4892%" height="15" fill="rgb(215,190,9)" fg:x="10025" fg:w="59"/><text x="83.3691%" y="671.50"></text></g><g><title>deno`httparse::skip_empty_lines (2 samples, 0.02%)</title><rect x="83.5917%" y="645" width="0.0166%" height="15" fill="rgb(242,101,16)" fg:x="10082" fg:w="2"/><text x="83.8417%" y="655.50"></text></g><g><title>deno`mio::poll::Poll::poll (7 samples, 0.06%)</title><rect x="83.6083%" y="661" width="0.0580%" height="15" fill="rgb(223,190,21)" fg:x="10084" fg:w="7"/><text x="83.8583%" y="671.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (2 samples, 0.02%)</title><rect x="83.6664%" y="661" width="0.0166%" height="15" fill="rgb(215,228,25)" fg:x="10091" fg:w="2"/><text x="83.9164%" y="671.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (10 samples, 0.08%)</title><rect x="83.6829%" y="661" width="0.0829%" height="15" fill="rgb(225,36,22)" fg:x="10093" fg:w="10"/><text x="83.9329%" y="671.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (8 samples, 0.07%)</title><rect x="83.6995%" y="645" width="0.0663%" height="15" fill="rgb(251,106,46)" fg:x="10095" fg:w="8"/><text x="83.9495%" y="655.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.02%)</title><rect x="83.7659%" y="661" width="0.0166%" height="15" fill="rgb(208,90,1)" fg:x="10103" fg:w="2"/><text x="84.0159%" y="671.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (2 samples, 0.02%)</title><rect x="83.7824%" y="661" width="0.0166%" height="15" fill="rgb(243,10,4)" fg:x="10105" fg:w="2"/><text x="84.0324%" y="671.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.12%)</title><rect x="83.7990%" y="661" width="0.1161%" height="15" fill="rgb(212,137,27)" fg:x="10107" fg:w="14"/><text x="84.0490%" y="671.50"></text></g><g><title>libsystem_c.dylib`recv (4 samples, 0.03%)</title><rect x="83.9234%" y="661" width="0.0332%" height="15" fill="rgb(231,220,49)" fg:x="10122" fg:w="4"/><text x="84.1734%" y="671.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (540 samples, 4.48%)</title><rect x="83.9566%" y="661" width="4.4772%" height="15" fill="rgb(237,96,20)" fg:x="10126" fg:w="540"/><text x="84.2066%" y="671.50">libsy..</text></g><g><title>libsystem_kernel.dylib`kevent (741 samples, 6.14%)</title><rect x="88.4338%" y="661" width="6.1438%" height="15" fill="rgb(239,229,30)" fg:x="10666" fg:w="741"/><text x="88.6838%" y="671.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (4 samples, 0.03%)</title><rect x="94.5859%" y="629" width="0.0332%" height="15" fill="rgb(219,65,33)" fg:x="11408" fg:w="4"/><text x="94.8359%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.05%)</title><rect x="94.7102%" y="597" width="0.0497%" height="15" fill="rgb(243,134,7)" fg:x="11423" fg:w="6"/><text x="94.9602%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.20%)</title><rect x="94.6190%" y="629" width="0.1990%" height="15" fill="rgb(216,177,54)" fg:x="11412" fg:w="24"/><text x="94.8690%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.14%)</title><rect x="94.6771%" y="613" width="0.1410%" height="15" fill="rgb(211,160,20)" fg:x="11419" fg:w="17"/><text x="94.9271%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.05%)</title><rect x="94.7683%" y="597" width="0.0497%" height="15" fill="rgb(239,85,39)" fg:x="11430" fg:w="6"/><text x="95.0183%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (37 samples, 0.31%)</title><rect x="94.5776%" y="661" width="0.3068%" height="15" fill="rgb(232,125,22)" fg:x="11407" fg:w="37"/><text x="94.8276%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.30%)</title><rect x="94.5859%" y="645" width="0.2985%" height="15" fill="rgb(244,57,34)" fg:x="11408" fg:w="36"/><text x="94.8359%" y="655.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.07%)</title><rect x="94.8180%" y="629" width="0.0663%" height="15" fill="rgb(214,203,32)" fg:x="11436" fg:w="8"/><text x="95.0680%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="94.9258%" y="645" width="0.0166%" height="15" fill="rgb(207,58,43)" fg:x="11449" fg:w="2"/><text x="95.1758%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.03%)</title><rect x="95.1414%" y="597" width="0.0332%" height="15" fill="rgb(215,193,15)" fg:x="11475" fg:w="4"/><text x="95.3914%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (3 samples, 0.02%)</title><rect x="95.1745%" y="597" width="0.0249%" height="15" fill="rgb(232,15,44)" fg:x="11479" fg:w="3"/><text x="95.4245%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.42%)</title><rect x="94.8843%" y="661" width="0.4229%" height="15" fill="rgb(212,3,48)" fg:x="11444" fg:w="51"/><text x="95.1343%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.36%)</title><rect x="94.9424%" y="645" width="0.3648%" height="15" fill="rgb(218,128,7)" fg:x="11451" fg:w="44"/><text x="95.1924%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (41 samples, 0.34%)</title><rect x="94.9672%" y="629" width="0.3399%" height="15" fill="rgb(226,216,39)" fg:x="11454" fg:w="41"/><text x="95.2172%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (29 samples, 0.24%)</title><rect x="95.0667%" y="613" width="0.2404%" height="15" fill="rgb(243,47,51)" fg:x="11466" fg:w="29"/><text x="95.3167%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.11%)</title><rect x="95.1994%" y="597" width="0.1078%" height="15" fill="rgb(241,183,40)" fg:x="11482" fg:w="13"/><text x="95.4494%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="95.3072%" y="661" width="0.0249%" height="15" fill="rgb(231,217,32)" fg:x="11495" fg:w="3"/><text x="95.5572%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (2 samples, 0.02%)</title><rect x="95.3404%" y="661" width="0.0166%" height="15" fill="rgb(229,61,38)" fg:x="11499" fg:w="2"/><text x="95.5904%" y="671.50"></text></g><g><title>deno`deno_flash::run_server (1,589 samples, 13.17%)</title><rect x="82.1988%" y="677" width="13.1747%" height="15" fill="rgb(225,210,5)" fg:x="9914" fg:w="1589"/><text x="82.4488%" y="687.50">deno`deno_flash::run..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="95.3569%" y="661" width="0.0166%" height="15" fill="rgb(231,79,45)" fg:x="11501" fg:w="2"/><text x="95.6069%" y="671.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (4 samples, 0.03%)</title><rect x="95.3735%" y="677" width="0.0332%" height="15" fill="rgb(224,100,7)" fg:x="11503" fg:w="4"/><text x="95.6235%" y="687.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (2 samples, 0.02%)</title><rect x="95.4067%" y="677" width="0.0166%" height="15" fill="rgb(241,198,18)" fg:x="11507" fg:w="2"/><text x="95.6567%" y="687.50"></text></g><g><title>deno`tokio::runtime::enter::enter (7 samples, 0.06%)</title><rect x="95.4233%" y="677" width="0.0580%" height="15" fill="rgb(252,97,53)" fg:x="11509" fg:w="7"/><text x="95.6733%" y="687.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (4 samples, 0.03%)</title><rect x="95.4813%" y="677" width="0.0332%" height="15" fill="rgb(220,88,7)" fg:x="11516" fg:w="4"/><text x="95.7313%" y="687.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (2 samples, 0.02%)</title><rect x="95.5145%" y="677" width="0.0166%" height="15" fill="rgb(213,176,14)" fg:x="11520" fg:w="2"/><text x="95.7645%" y="687.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::wake (2 samples, 0.02%)</title><rect x="95.5311%" y="677" width="0.0166%" height="15" fill="rgb(246,73,7)" fg:x="11522" fg:w="2"/><text x="95.7811%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="95.5642%" y="677" width="0.0166%" height="15" fill="rgb(245,64,36)" fg:x="11526" fg:w="2"/><text x="95.8142%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`calloc (2 samples, 0.02%)</title><rect x="95.5808%" y="677" width="0.0166%" height="15" fill="rgb(245,80,10)" fg:x="11528" fg:w="2"/><text x="95.8308%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.02%)</title><rect x="95.5974%" y="677" width="0.0249%" height="15" fill="rgb(232,107,50)" fg:x="11530" fg:w="3"/><text x="95.8474%" y="687.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (1,653 samples, 13.71%)</title><rect x="81.9584%" y="741" width="13.7053%" height="15" fill="rgb(253,3,0)" fg:x="9885" fg:w="1653"/><text x="82.2084%" y="751.50">deno`std::sys::unix::..</text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,653 samples, 13.71%)</title><rect x="81.9584%" y="725" width="13.7053%" height="15" fill="rgb(212,99,53)" fg:x="9885" fg:w="1653"/><text x="82.2084%" y="735.50">deno`core::ops::funct..</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (1,653 samples, 13.71%)</title><rect x="81.9584%" y="709" width="13.7053%" height="15" fill="rgb(249,111,54)" fg:x="9885" fg:w="1653"/><text x="82.2084%" y="719.50">deno`std::sys_common:..</text></g><g><title>deno`tokio::runtime::task::raw::poll (1,653 samples, 13.71%)</title><rect x="81.9584%" y="693" width="13.7053%" height="15" fill="rgb(249,55,30)" fg:x="9885" fg:w="1653"/><text x="82.2084%" y="703.50">deno`tokio::runtime::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.04%)</title><rect x="95.6223%" y="677" width="0.0415%" height="15" fill="rgb(237,47,42)" fg:x="11533" fg:w="5"/><text x="95.8723%" y="687.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AssembleCode (3 samples, 0.02%)</title><rect x="95.6637%" y="645" width="0.0249%" height="15" fill="rgb(211,20,18)" fg:x="11538" fg:w="3"/><text x="95.9137%" y="655.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleCode (3 samples, 0.02%)</title><rect x="95.6637%" y="629" width="0.0249%" height="15" fill="rgb(231,203,46)" fg:x="11538" fg:w="3"/><text x="95.9137%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleInstruction (3 samples, 0.02%)</title><rect x="95.6637%" y="613" width="0.0249%" height="15" fill="rgb(237,142,3)" fg:x="11538" fg:w="3"/><text x="95.9137%" y="623.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (2 samples, 0.02%)</title><rect x="95.6886%" y="629" width="0.0166%" height="15" fill="rgb(241,107,1)" fg:x="11541" fg:w="2"/><text x="95.9386%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::GraphBuilderPhase::Run (2 samples, 0.02%)</title><rect x="95.6886%" y="613" width="0.0166%" height="15" fill="rgb(229,83,13)" fg:x="11541" fg:w="2"/><text x="95.9386%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, int, v8::internal::CodeKind, v8::base::Flags (2 samples, 0.02%)</title><rect x="95.6886%" y="597" width="0.0166%" height="15" fill="rgb(241,91,40)" fg:x="11541" fg:w="2"/><text x="95.9386%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::Reduce (3 samples, 0.02%)</title><rect x="95.7217%" y="549" width="0.0249%" height="15" fill="rgb(225,3,45)" fg:x="11545" fg:w="3"/><text x="95.9717%" y="559.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::InlineCandidate (2 samples, 0.02%)</title><rect x="95.7300%" y="533" width="0.0166%" height="15" fill="rgb(244,223,14)" fg:x="11546" fg:w="2"/><text x="95.9800%" y="543.50"></text></g><g><title>deno`v8::internal::compiler::JSInliner::ReduceJSCall (2 samples, 0.02%)</title><rect x="95.7300%" y="517" width="0.0166%" height="15" fill="rgb(224,124,37)" fg:x="11546" fg:w="2"/><text x="95.9800%" y="527.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReduceJSDefineKeyedOwnProperty (2 samples, 0.02%)</title><rect x="95.7466%" y="549" width="0.0166%" height="15" fill="rgb(251,171,30)" fg:x="11548" fg:w="2"/><text x="95.9966%" y="559.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReducePropertyAccess(v8::internal::compiler::Node*, v8::internal::compiler::Node*, v8::base::Optional (2 samples, 0.02%)</title><rect x="95.7466%" y="533" width="0.0166%" height="15" fill="rgb(236,46,54)" fg:x="11548" fg:w="2"/><text x="95.9966%" y="543.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (9 samples, 0.07%)</title><rect x="95.7052%" y="581" width="0.0746%" height="15" fill="rgb(245,213,5)" fg:x="11543" fg:w="9"/><text x="95.9552%" y="591.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (9 samples, 0.07%)</title><rect x="95.7052%" y="565" width="0.0746%" height="15" fill="rgb(230,144,27)" fg:x="11543" fg:w="9"/><text x="95.9552%" y="575.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (13 samples, 0.11%)</title><rect x="95.6886%" y="645" width="0.1078%" height="15" fill="rgb(220,86,6)" fg:x="11541" fg:w="13"/><text x="95.9386%" y="655.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (11 samples, 0.09%)</title><rect x="95.7052%" y="629" width="0.0912%" height="15" fill="rgb(240,20,13)" fg:x="11543" fg:w="11"/><text x="95.9552%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (11 samples, 0.09%)</title><rect x="95.7052%" y="613" width="0.0912%" height="15" fill="rgb(217,89,34)" fg:x="11543" fg:w="11"/><text x="95.9552%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (11 samples, 0.09%)</title><rect x="95.7052%" y="597" width="0.0912%" height="15" fill="rgb(229,13,5)" fg:x="11543" fg:w="11"/><text x="95.9552%" y="607.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::DecompressionOptimizationPhase&gt; (2 samples, 0.02%)</title><rect x="95.8047%" y="629" width="0.0166%" height="15" fill="rgb(244,67,35)" fg:x="11555" fg:w="2"/><text x="96.0547%" y="639.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (5 samples, 0.04%)</title><rect x="95.8212%" y="629" width="0.0415%" height="15" fill="rgb(221,40,2)" fg:x="11557" fg:w="5"/><text x="96.0712%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::EarlyOptimizationPhase::Run (5 samples, 0.04%)</title><rect x="95.8212%" y="613" width="0.0415%" height="15" fill="rgb(237,157,21)" fg:x="11557" fg:w="5"/><text x="96.0712%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (5 samples, 0.04%)</title><rect x="95.8212%" y="597" width="0.0415%" height="15" fill="rgb(222,94,11)" fg:x="11557" fg:w="5"/><text x="96.0712%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (5 samples, 0.04%)</title><rect x="95.8212%" y="581" width="0.0415%" height="15" fill="rgb(249,113,6)" fg:x="11557" fg:w="5"/><text x="96.0712%" y="591.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (3 samples, 0.02%)</title><rect x="95.8378%" y="565" width="0.0249%" height="15" fill="rgb(238,137,36)" fg:x="11559" fg:w="3"/><text x="96.0878%" y="575.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="95.8627%" y="597" width="0.0249%" height="15" fill="rgb(210,102,26)" fg:x="11562" fg:w="3"/><text x="96.1127%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="95.8627%" y="581" width="0.0249%" height="15" fill="rgb(218,30,30)" fg:x="11562" fg:w="3"/><text x="96.1127%" y="591.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (5 samples, 0.04%)</title><rect x="95.8627%" y="629" width="0.0415%" height="15" fill="rgb(214,67,26)" fg:x="11562" fg:w="5"/><text x="96.1127%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (5 samples, 0.04%)</title><rect x="95.8627%" y="613" width="0.0415%" height="15" fill="rgb(251,9,53)" fg:x="11562" fg:w="5"/><text x="96.1127%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::EffectGraphReducer::ReduceFrom (3 samples, 0.02%)</title><rect x="95.9042%" y="597" width="0.0249%" height="15" fill="rgb(228,204,25)" fg:x="11567" fg:w="3"/><text x="96.1542%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysis::Reduce (3 samples, 0.02%)</title><rect x="95.9042%" y="581" width="0.0249%" height="15" fill="rgb(207,153,8)" fg:x="11567" fg:w="3"/><text x="96.1542%" y="591.50"></text></g><g><title>deno`v8::internal::compiler::VariableTracker::Scope::~Scope (2 samples, 0.02%)</title><rect x="95.9124%" y="565" width="0.0166%" height="15" fill="rgb(242,9,16)" fg:x="11568" fg:w="2"/><text x="96.1624%" y="575.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (7 samples, 0.06%)</title><rect x="95.9042%" y="629" width="0.0580%" height="15" fill="rgb(217,211,10)" fg:x="11567" fg:w="7"/><text x="96.1542%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (7 samples, 0.06%)</title><rect x="95.9042%" y="613" width="0.0580%" height="15" fill="rgb(219,228,52)" fg:x="11567" fg:w="7"/><text x="96.1542%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="95.9373%" y="597" width="0.0249%" height="15" fill="rgb(231,92,29)" fg:x="11571" fg:w="3"/><text x="96.1873%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="95.9373%" y="581" width="0.0249%" height="15" fill="rgb(232,8,23)" fg:x="11571" fg:w="3"/><text x="96.1873%" y="591.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.02%)</title><rect x="95.9456%" y="565" width="0.0166%" height="15" fill="rgb(216,211,34)" fg:x="11572" fg:w="2"/><text x="96.1956%" y="575.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisReducer::Reduce (2 samples, 0.02%)</title><rect x="95.9456%" y="549" width="0.0166%" height="15" fill="rgb(236,151,0)" fg:x="11572" fg:w="2"/><text x="96.1956%" y="559.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisReducer::ReduceFrameStateInputs (2 samples, 0.02%)</title><rect x="95.9456%" y="533" width="0.0166%" height="15" fill="rgb(209,168,3)" fg:x="11572" fg:w="2"/><text x="96.1956%" y="543.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GenericLoweringPhase&gt; (3 samples, 0.02%)</title><rect x="95.9622%" y="629" width="0.0249%" height="15" fill="rgb(208,129,28)" fg:x="11574" fg:w="3"/><text x="96.2122%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::GenericLoweringPhase::Run (3 samples, 0.02%)</title><rect x="95.9622%" y="613" width="0.0249%" height="15" fill="rgb(229,78,22)" fg:x="11574" fg:w="3"/><text x="96.2122%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="95.9622%" y="597" width="0.0249%" height="15" fill="rgb(228,187,13)" fg:x="11574" fg:w="3"/><text x="96.2122%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="95.9622%" y="581" width="0.0249%" height="15" fill="rgb(240,119,24)" fg:x="11574" fg:w="3"/><text x="96.2122%" y="591.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (2 samples, 0.02%)</title><rect x="95.9871%" y="629" width="0.0166%" height="15" fill="rgb(209,194,42)" fg:x="11577" fg:w="2"/><text x="96.2371%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (2 samples, 0.02%)</title><rect x="95.9871%" y="613" width="0.0166%" height="15" fill="rgb(247,200,46)" fg:x="11577" fg:w="2"/><text x="96.2371%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="95.9871%" y="597" width="0.0166%" height="15" fill="rgb(218,76,16)" fg:x="11577" fg:w="2"/><text x="96.2371%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="95.9871%" y="581" width="0.0166%" height="15" fill="rgb(225,21,48)" fg:x="11577" fg:w="2"/><text x="96.2371%" y="591.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (3 samples, 0.02%)</title><rect x="96.0036%" y="629" width="0.0249%" height="15" fill="rgb(239,223,50)" fg:x="11579" fg:w="3"/><text x="96.2536%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (3 samples, 0.02%)</title><rect x="96.0036%" y="613" width="0.0249%" height="15" fill="rgb(244,45,21)" fg:x="11579" fg:w="3"/><text x="96.2536%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="96.0036%" y="597" width="0.0249%" height="15" fill="rgb(232,33,43)" fg:x="11579" fg:w="3"/><text x="96.2536%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="96.0036%" y="581" width="0.0249%" height="15" fill="rgb(209,8,3)" fg:x="11579" fg:w="3"/><text x="96.2536%" y="591.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (3 samples, 0.02%)</title><rect x="96.0036%" y="565" width="0.0249%" height="15" fill="rgb(214,25,53)" fg:x="11579" fg:w="3"/><text x="96.2536%" y="575.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoopPeelingPhase&gt; (3 samples, 0.02%)</title><rect x="96.0285%" y="629" width="0.0249%" height="15" fill="rgb(254,186,54)" fg:x="11582" fg:w="3"/><text x="96.2785%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::LoopPeelingPhase::Run (3 samples, 0.02%)</title><rect x="96.0285%" y="613" width="0.0249%" height="15" fill="rgb(208,174,49)" fg:x="11582" fg:w="3"/><text x="96.2785%" y="623.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MachineOperatorOptimizationPhase&gt; (2 samples, 0.02%)</title><rect x="96.0534%" y="629" width="0.0166%" height="15" fill="rgb(233,191,51)" fg:x="11585" fg:w="2"/><text x="96.3034%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::MachineOperatorOptimizationPhase::Run (2 samples, 0.02%)</title><rect x="96.0534%" y="613" width="0.0166%" height="15" fill="rgb(222,134,10)" fg:x="11585" fg:w="2"/><text x="96.3034%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="96.0534%" y="597" width="0.0166%" height="15" fill="rgb(230,226,20)" fg:x="11585" fg:w="2"/><text x="96.3034%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="96.0534%" y="581" width="0.0166%" height="15" fill="rgb(251,111,25)" fg:x="11585" fg:w="2"/><text x="96.3034%" y="591.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MemoryOptimizationPhase&gt; (2 samples, 0.02%)</title><rect x="96.0700%" y="629" width="0.0166%" height="15" fill="rgb(224,40,46)" fg:x="11587" fg:w="2"/><text x="96.3200%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::MemoryOptimizationPhase::Run (2 samples, 0.02%)</title><rect x="96.0700%" y="613" width="0.0166%" height="15" fill="rgb(236,108,47)" fg:x="11587" fg:w="2"/><text x="96.3200%" y="623.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TypedLoweringPhase&gt; (2 samples, 0.02%)</title><rect x="96.0949%" y="629" width="0.0166%" height="15" fill="rgb(234,93,0)" fg:x="11590" fg:w="2"/><text x="96.3449%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::TypedLoweringPhase::Run (2 samples, 0.02%)</title><rect x="96.0949%" y="613" width="0.0166%" height="15" fill="rgb(224,213,32)" fg:x="11590" fg:w="2"/><text x="96.3449%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="96.0949%" y="597" width="0.0166%" height="15" fill="rgb(251,11,48)" fg:x="11590" fg:w="2"/><text x="96.3449%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="96.0949%" y="581" width="0.0166%" height="15" fill="rgb(236,173,5)" fg:x="11590" fg:w="2"/><text x="96.3449%" y="591.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TyperPhase, v8::internal::compiler::Typer*&gt; (2 samples, 0.02%)</title><rect x="96.1114%" y="629" width="0.0166%" height="15" fill="rgb(230,95,12)" fg:x="11592" fg:w="2"/><text x="96.3614%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::TyperPhase::Run (2 samples, 0.02%)</title><rect x="96.1114%" y="613" width="0.0166%" height="15" fill="rgb(232,209,1)" fg:x="11592" fg:w="2"/><text x="96.3614%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Run(v8::internal::ZoneVector (2 samples, 0.02%)</title><rect x="96.1114%" y="597" width="0.0166%" height="15" fill="rgb(232,6,1)" fg:x="11592" fg:w="2"/><text x="96.3614%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.02%)</title><rect x="96.1114%" y="581" width="0.0166%" height="15" fill="rgb(210,224,50)" fg:x="11592" fg:w="2"/><text x="96.3614%" y="591.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.02%)</title><rect x="96.1114%" y="565" width="0.0166%" height="15" fill="rgb(228,127,35)" fg:x="11592" fg:w="2"/><text x="96.3614%" y="575.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InstructionSelectionPhase, v8::internal::compiler::Linkage*&amp;&gt; (2 samples, 0.02%)</title><rect x="96.1280%" y="613" width="0.0166%" height="15" fill="rgb(245,102,45)" fg:x="11594" fg:w="2"/><text x="96.3780%" y="623.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelectionPhase::Run (2 samples, 0.02%)</title><rect x="96.1280%" y="597" width="0.0166%" height="15" fill="rgb(214,1,49)" fg:x="11594" fg:w="2"/><text x="96.3780%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::SelectInstructions (2 samples, 0.02%)</title><rect x="96.1280%" y="581" width="0.0166%" height="15" fill="rgb(226,163,40)" fg:x="11594" fg:w="2"/><text x="96.3780%" y="591.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitBlock (2 samples, 0.02%)</title><rect x="96.1280%" y="565" width="0.0166%" height="15" fill="rgb(239,212,28)" fg:x="11594" fg:w="2"/><text x="96.3780%" y="575.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitControl (2 samples, 0.02%)</title><rect x="96.1280%" y="549" width="0.0166%" height="15" fill="rgb(220,20,13)" fg:x="11594" fg:w="2"/><text x="96.3780%" y="559.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (5 samples, 0.04%)</title><rect x="96.1529%" y="581" width="0.0415%" height="15" fill="rgb(210,164,35)" fg:x="11597" fg:w="5"/><text x="96.4029%" y="591.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (6 samples, 0.05%)</title><rect x="96.1529%" y="597" width="0.0497%" height="15" fill="rgb(248,109,41)" fg:x="11597" fg:w="6"/><text x="96.4029%" y="607.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::CommitAssignmentPhase&gt; (2 samples, 0.02%)</title><rect x="96.2026%" y="597" width="0.0166%" height="15" fill="rgb(238,23,50)" fg:x="11603" fg:w="2"/><text x="96.4526%" y="607.50"></text></g><g><title>deno`v8::internal::compiler::OperandAssigner::CommitAssignment (2 samples, 0.02%)</title><rect x="96.2026%" y="581" width="0.0166%" height="15" fill="rgb(211,48,49)" fg:x="11603" fg:w="2"/><text x="96.4526%" y="591.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (12 samples, 0.10%)</title><rect x="96.1280%" y="629" width="0.0995%" height="15" fill="rgb(223,36,21)" fg:x="11594" fg:w="12"/><text x="96.3780%" y="639.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (10 samples, 0.08%)</title><rect x="96.1446%" y="613" width="0.0829%" height="15" fill="rgb(207,123,46)" fg:x="11596" fg:w="10"/><text x="96.3946%" y="623.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (69 samples, 0.57%)</title><rect x="95.6637%" y="709" width="0.5721%" height="15" fill="rgb(240,218,32)" fg:x="11538" fg:w="69"/><text x="95.9137%" y="719.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (69 samples, 0.57%)</title><rect x="95.6637%" y="693" width="0.5721%" height="15" fill="rgb(252,5,43)" fg:x="11538" fg:w="69"/><text x="95.9137%" y="703.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (69 samples, 0.57%)</title><rect x="95.6637%" y="677" width="0.5721%" height="15" fill="rgb(252,84,19)" fg:x="11538" fg:w="69"/><text x="95.9137%" y="687.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (69 samples, 0.57%)</title><rect x="95.6637%" y="661" width="0.5721%" height="15" fill="rgb(243,152,39)" fg:x="11538" fg:w="69"/><text x="95.9137%" y="671.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (53 samples, 0.44%)</title><rect x="95.7964%" y="645" width="0.4394%" height="15" fill="rgb(234,160,15)" fg:x="11554" fg:w="53"/><text x="96.0464%" y="655.50"></text></g><g><title>deno`v8::internal::ConcurrentMarkingVisitor::ShouldVisit (2 samples, 0.02%)</title><rect x="96.4680%" y="645" width="0.0166%" height="15" fill="rgb(237,34,20)" fg:x="11635" fg:w="2"/><text x="96.7180%" y="655.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ConcurrentMarkingVisitor&gt; (5 samples, 0.04%)</title><rect x="96.4928%" y="645" width="0.0415%" height="15" fill="rgb(229,97,13)" fg:x="11638" fg:w="5"/><text x="96.7428%" y="655.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (2 samples, 0.02%)</title><rect x="96.5177%" y="629" width="0.0166%" height="15" fill="rgb(234,71,50)" fg:x="11641" fg:w="2"/><text x="96.7677%" y="639.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (4 samples, 0.03%)</title><rect x="96.5343%" y="645" width="0.0332%" height="15" fill="rgb(253,155,4)" fg:x="11643" fg:w="4"/><text x="96.7843%" y="655.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitor::VisitJSObjectSubclass&lt;v8::internal::JSFunction, v8::internal::JSFunction::BodyDescriptor&gt; (19 samples, 0.16%)</title><rect x="96.4597%" y="661" width="0.1575%" height="15" fill="rgb(222,185,37)" fg:x="11634" fg:w="19"/><text x="96.7097%" y="671.50"></text></g><g><title>deno`void v8::internal::MarkingVisitorBase&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::ConcurrentMarkingState&gt;::ProcessStrongHeapObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (6 samples, 0.05%)</title><rect x="96.5674%" y="645" width="0.0497%" height="15" fill="rgb(251,177,13)" fg:x="11647" fg:w="6"/><text x="96.8174%" y="655.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitor::VisitLeftTrimmableArray&lt;v8::internal::FixedArray&gt; (5 samples, 0.04%)</title><rect x="96.6172%" y="661" width="0.0415%" height="15" fill="rgb(250,179,40)" fg:x="11653" fg:w="5"/><text x="96.8672%" y="671.50"></text></g><g><title>deno`void v8::internal::MarkingVisitorBase&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::ConcurrentMarkingState&gt;::ProcessStrongHeapObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (3 samples, 0.02%)</title><rect x="96.6338%" y="645" width="0.0249%" height="15" fill="rgb(242,44,2)" fg:x="11655" fg:w="3"/><text x="96.8838%" y="655.50"></text></g><g><title>deno`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, v8::internal::BasicMemoryChunk::Hasher, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, v8::internal::BasicMemoryChunk::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt; &gt; &gt;::__emplace_unique_key_args&lt;v8::internal::MemoryChunk*, std::__1::piecewise_construct_t const&amp;, std::__1::tuple (3 samples, 0.02%)</title><rect x="96.6587%" y="661" width="0.0249%" height="15" fill="rgb(216,177,13)" fg:x="11658" fg:w="3"/><text x="96.9087%" y="671.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ConcurrentMarkingVisitor&gt; (3 samples, 0.02%)</title><rect x="96.7084%" y="661" width="0.0249%" height="15" fill="rgb(216,106,43)" fg:x="11664" fg:w="3"/><text x="96.9584%" y="671.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (5 samples, 0.04%)</title><rect x="96.7333%" y="661" width="0.0415%" height="15" fill="rgb(216,183,2)" fg:x="11667" fg:w="5"/><text x="96.9833%" y="671.50"></text></g><g><title>deno`void v8::internal::MarkingVisitorBase&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::ConcurrentMarkingState&gt;::ProcessStrongHeapObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (15 samples, 0.12%)</title><rect x="96.7747%" y="661" width="0.1244%" height="15" fill="rgb(249,75,3)" fg:x="11672" fg:w="15"/><text x="97.0247%" y="671.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::Run(v8::JobDelegate*, v8::base::EnumSet (82 samples, 0.68%)</title><rect x="96.2358%" y="677" width="0.6799%" height="15" fill="rgb(219,67,39)" fg:x="11607" fg:w="82"/><text x="96.4858%" y="687.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::JobTask::Run (86 samples, 0.71%)</title><rect x="96.2358%" y="693" width="0.7130%" height="15" fill="rgb(253,228,2)" fg:x="11607" fg:w="86"/><text x="96.4858%" y="703.50"></text></g><g><title>deno`void v8::internal::MarkingVisitorBase&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::ConcurrentMarkingState&gt;::ProcessStrongHeapObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.02%)</title><rect x="96.9323%" y="677" width="0.0166%" height="15" fill="rgb(235,138,27)" fg:x="11691" fg:w="2"/><text x="97.1823%" y="687.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::RecordMigratedSlotVisitor&gt; (2 samples, 0.02%)</title><rect x="96.9654%" y="629" width="0.0166%" height="15" fill="rgb(236,97,51)" fg:x="11695" fg:w="2"/><text x="97.2154%" y="639.50"></text></g><g><title>deno`void v8::internal::CallIterateBody::apply&lt;v8::internal::Context::BodyDescriptor, v8::internal::RecordMigratedSlotVisitor&gt; (2 samples, 0.02%)</title><rect x="96.9820%" y="629" width="0.0166%" height="15" fill="rgb(240,80,30)" fg:x="11697" fg:w="2"/><text x="97.2320%" y="639.50"></text></g><g><title>deno`void v8::internal::LiveObjectVisitor::VisitBlackObjectsNoFail&lt;v8::internal::EvacuateNewSpacePageVisitor&lt;(v8::internal::PageEvacuationMode)1&gt;, v8::internal::NonAtomicMarkingState&gt;(v8::internal::MemoryChunk*, v8::internal::NonAtomicMarkingState*, v8::internal::EvacuateNewSpacePageVisitor&lt; (7 samples, 0.06%)</title><rect x="96.9488%" y="645" width="0.0580%" height="15" fill="rgb(230,178,19)" fg:x="11693" fg:w="7"/><text x="97.1988%" y="655.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::RecordMigratedSlotVisitor&gt; (2 samples, 0.02%)</title><rect x="97.0152%" y="581" width="0.0166%" height="15" fill="rgb(210,190,27)" fg:x="11701" fg:w="2"/><text x="97.2652%" y="591.50"></text></g><g><title>deno`v8::internal::PageEvacuationJob::Run (12 samples, 0.10%)</title><rect x="96.9488%" y="693" width="0.0995%" height="15" fill="rgb(222,107,31)" fg:x="11693" fg:w="12"/><text x="97.1988%" y="703.50"></text></g><g><title>deno`v8::internal::Evacuator::EvacuatePage (12 samples, 0.10%)</title><rect x="96.9488%" y="677" width="0.0995%" height="15" fill="rgb(216,127,34)" fg:x="11693" fg:w="12"/><text x="97.1988%" y="687.50"></text></g><g><title>deno`v8::internal::FullEvacuator::RawEvacuatePage (12 samples, 0.10%)</title><rect x="96.9488%" y="661" width="0.0995%" height="15" fill="rgb(234,116,52)" fg:x="11693" fg:w="12"/><text x="97.1988%" y="671.50"></text></g><g><title>deno`void v8::internal::LiveObjectVisitor::VisitBlackObjectsNoFail&lt;v8::internal::EvacuateNewSpaceVisitor, v8::internal::NonAtomicMarkingState&gt; (5 samples, 0.04%)</title><rect x="97.0069%" y="645" width="0.0415%" height="15" fill="rgb(222,124,15)" fg:x="11700" fg:w="5"/><text x="97.2569%" y="655.50"></text></g><g><title>deno`v8::internal::EvacuateNewSpaceVisitor::Visit (5 samples, 0.04%)</title><rect x="97.0069%" y="629" width="0.0415%" height="15" fill="rgb(231,179,28)" fg:x="11700" fg:w="5"/><text x="97.2569%" y="639.50"></text></g><g><title>deno`v8::internal::EvacuateVisitorBase::TryEvacuateObject (4 samples, 0.03%)</title><rect x="97.0152%" y="613" width="0.0332%" height="15" fill="rgb(226,93,45)" fg:x="11701" fg:w="4"/><text x="97.2652%" y="623.50"></text></g><g><title>deno`void v8::internal::EvacuateVisitorBase::RawMigrateObject&lt;(v8::internal::EvacuateVisitorBase::MigrationMode)0&gt; (4 samples, 0.03%)</title><rect x="97.0152%" y="597" width="0.0332%" height="15" fill="rgb(215,8,51)" fg:x="11701" fg:w="4"/><text x="97.2652%" y="607.50"></text></g><g><title>deno`void v8::internal::CallIterateBody::apply&lt;v8::internal::Context::BodyDescriptor, v8::internal::RecordMigratedSlotVisitor&gt; (2 samples, 0.02%)</title><rect x="97.0318%" y="581" width="0.0166%" height="15" fill="rgb(223,106,5)" fg:x="11703" fg:w="2"/><text x="97.2818%" y="591.50"></text></g><g><title>deno`auto v8::internal::BodyDescriptorApply&lt;v8::internal::CallIterateBody, v8::internal::Map&amp;, v8::internal::HeapObject&amp;, int&amp;, v8::internal::IterateAndScavengePromotedObjectsVisitor*&amp;&gt; (7 samples, 0.06%)</title><rect x="97.6287%" y="645" width="0.0580%" height="15" fill="rgb(250,191,5)" fg:x="11775" fg:w="7"/><text x="97.8787%" y="655.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (4 samples, 0.03%)</title><rect x="97.6536%" y="629" width="0.0332%" height="15" fill="rgb(242,132,44)" fg:x="11778" fg:w="4"/><text x="97.9036%" y="639.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.02%)</title><rect x="97.6702%" y="613" width="0.0166%" height="15" fill="rgb(251,152,29)" fg:x="11780" fg:w="2"/><text x="97.9202%" y="623.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (2 samples, 0.02%)</title><rect x="97.6868%" y="645" width="0.0166%" height="15" fill="rgb(218,179,5)" fg:x="11782" fg:w="2"/><text x="97.9368%" y="655.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInNewSpace (2 samples, 0.02%)</title><rect x="97.7033%" y="645" width="0.0166%" height="15" fill="rgb(227,67,19)" fg:x="11784" fg:w="2"/><text x="97.9533%" y="655.50"></text></g><g><title>deno`v8::internal::ScavengeVisitor::VisitPointers (2 samples, 0.02%)</title><rect x="97.7365%" y="645" width="0.0166%" height="15" fill="rgb(233,119,31)" fg:x="11788" fg:w="2"/><text x="97.9865%" y="655.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (9 samples, 0.07%)</title><rect x="98.3666%" y="629" width="0.0746%" height="15" fill="rgb(241,120,22)" fg:x="11864" fg:w="9"/><text x="98.6166%" y="639.50"></text></g><g><title>deno`v8::internal::Heap::GetFillToAlign (7 samples, 0.06%)</title><rect x="98.4413%" y="629" width="0.0580%" height="15" fill="rgb(224,102,30)" fg:x="11873" fg:w="7"/><text x="98.6913%" y="639.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (96 samples, 0.80%)</title><rect x="97.7614%" y="645" width="0.7960%" height="15" fill="rgb(210,164,37)" fg:x="11791" fg:w="96"/><text x="98.0114%" y="655.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (7 samples, 0.06%)</title><rect x="98.4993%" y="629" width="0.0580%" height="15" fill="rgb(226,191,16)" fg:x="11880" fg:w="7"/><text x="98.7493%" y="639.50"></text></g><g><title>deno`v8::platform::DefaultJobState::NotifyConcurrencyIncrease (7 samples, 0.06%)</title><rect x="98.5573%" y="645" width="0.0580%" height="15" fill="rgb(214,40,45)" fg:x="11887" fg:w="7"/><text x="98.8073%" y="655.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (7 samples, 0.06%)</title><rect x="98.5573%" y="629" width="0.0580%" height="15" fill="rgb(244,29,26)" fg:x="11887" fg:w="7"/><text x="98.8073%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (7 samples, 0.06%)</title><rect x="98.5573%" y="613" width="0.0580%" height="15" fill="rgb(216,16,5)" fg:x="11887" fg:w="7"/><text x="98.8073%" y="623.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (2 samples, 0.02%)</title><rect x="98.6983%" y="629" width="0.0166%" height="15" fill="rgb(249,76,35)" fg:x="11904" fg:w="2"/><text x="98.9483%" y="639.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (4 samples, 0.03%)</title><rect x="98.7149%" y="629" width="0.0332%" height="15" fill="rgb(207,11,44)" fg:x="11906" fg:w="4"/><text x="98.9649%" y="639.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (3 samples, 0.02%)</title><rect x="98.9139%" y="613" width="0.0249%" height="15" fill="rgb(228,190,49)" fg:x="11930" fg:w="3"/><text x="99.1639%" y="623.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (42 samples, 0.35%)</title><rect x="98.6154%" y="645" width="0.3482%" height="15" fill="rgb(214,173,12)" fg:x="11894" fg:w="42"/><text x="98.8654%" y="655.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (24 samples, 0.20%)</title><rect x="98.7646%" y="629" width="0.1990%" height="15" fill="rgb(218,26,35)" fg:x="11912" fg:w="24"/><text x="99.0146%" y="639.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (2 samples, 0.02%)</title><rect x="98.9470%" y="613" width="0.0166%" height="15" fill="rgb(220,200,19)" fg:x="11934" fg:w="2"/><text x="99.1970%" y="623.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (8 samples, 0.07%)</title><rect x="98.9719%" y="645" width="0.0663%" height="15" fill="rgb(239,95,49)" fg:x="11937" fg:w="8"/><text x="99.2219%" y="655.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (4 samples, 0.03%)</title><rect x="99.0051%" y="629" width="0.0332%" height="15" fill="rgb(235,85,53)" fg:x="11941" fg:w="4"/><text x="99.2551%" y="639.50"></text></g><g><title>deno`v8::internal::ScavengeVisitor::VisitPointers (2 samples, 0.02%)</title><rect x="99.1128%" y="629" width="0.0166%" height="15" fill="rgb(233,133,31)" fg:x="11954" fg:w="2"/><text x="99.3628%" y="639.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (3 samples, 0.02%)</title><rect x="99.2123%" y="613" width="0.0249%" height="15" fill="rgb(218,25,20)" fg:x="11966" fg:w="3"/><text x="99.4623%" y="623.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (28 samples, 0.23%)</title><rect x="99.0382%" y="645" width="0.2322%" height="15" fill="rgb(252,210,38)" fg:x="11945" fg:w="28"/><text x="99.2882%" y="655.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (17 samples, 0.14%)</title><rect x="99.1294%" y="629" width="0.1410%" height="15" fill="rgb(242,134,21)" fg:x="11956" fg:w="17"/><text x="99.3794%" y="639.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (4 samples, 0.03%)</title><rect x="99.2372%" y="613" width="0.0332%" height="15" fill="rgb(213,28,48)" fg:x="11969" fg:w="4"/><text x="99.4872%" y="623.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (271 samples, 2.25%)</title><rect x="97.0649%" y="661" width="2.2469%" height="15" fill="rgb(250,196,2)" fg:x="11707" fg:w="271"/><text x="97.3149%" y="671.50">d..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (2 samples, 0.02%)</title><rect x="99.2952%" y="645" width="0.0166%" height="15" fill="rgb(227,5,17)" fg:x="11976" fg:w="2"/><text x="99.5452%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (2 samples, 0.02%)</title><rect x="99.2952%" y="629" width="0.0166%" height="15" fill="rgb(221,226,24)" fg:x="11976" fg:w="2"/><text x="99.5452%" y="639.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::ShouldBePromoted (2 samples, 0.02%)</title><rect x="99.3782%" y="645" width="0.0166%" height="15" fill="rgb(211,5,48)" fg:x="11986" fg:w="2"/><text x="99.6282%" y="655.50"></text></g><g><title>deno`heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;::Local::PublishPushSegment (2 samples, 0.02%)</title><rect x="99.5854%" y="629" width="0.0166%" height="15" fill="rgb(219,150,6)" fg:x="12011" fg:w="2"/><text x="99.8354%" y="639.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (7 samples, 0.06%)</title><rect x="99.6020%" y="629" width="0.0580%" height="15" fill="rgb(251,46,16)" fg:x="12013" fg:w="7"/><text x="99.8520%" y="639.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (2 samples, 0.02%)</title><rect x="99.6684%" y="629" width="0.0166%" height="15" fill="rgb(220,204,40)" fg:x="12021" fg:w="2"/><text x="99.9184%" y="639.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (36 samples, 0.30%)</title><rect x="99.3947%" y="645" width="0.2985%" height="15" fill="rgb(211,85,2)" fg:x="11988" fg:w="36"/><text x="99.6447%" y="655.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (47 samples, 0.39%)</title><rect x="99.3118%" y="661" width="0.3897%" height="15" fill="rgb(229,17,7)" fg:x="11978" fg:w="47"/><text x="99.5618%" y="671.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (9 samples, 0.07%)</title><rect x="99.7015%" y="661" width="0.0746%" height="15" fill="rgb(239,72,28)" fg:x="12025" fg:w="9"/><text x="99.9515%" y="671.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (11 samples, 0.09%)</title><rect x="99.7761%" y="661" width="0.0912%" height="15" fill="rgb(230,47,54)" fg:x="12034" fg:w="11"/><text x="100.0261%" y="671.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::Run (342 samples, 2.84%)</title><rect x="97.0483%" y="693" width="2.8356%" height="15" fill="rgb(214,50,8)" fg:x="11705" fg:w="342"/><text x="97.2983%" y="703.50">de..</text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (342 samples, 2.84%)</title><rect x="97.0483%" y="677" width="2.8356%" height="15" fill="rgb(216,198,43)" fg:x="11705" fg:w="342"/><text x="97.2983%" y="687.50">de..</text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (2 samples, 0.02%)</title><rect x="99.8673%" y="661" width="0.0166%" height="15" fill="rgb(234,20,35)" fg:x="12045" fg:w="2"/><text x="100.1173%" y="671.50"></text></g><g><title>deno`v8::internal::Sweeper::SweeperJob::Run (8 samples, 0.07%)</title><rect x="99.8839%" y="693" width="0.0663%" height="15" fill="rgb(254,45,19)" fg:x="12047" fg:w="8"/><text x="100.1339%" y="703.50"></text></g><g><title>deno`v8::internal::Sweeper::SweeperJob::RunImpl (8 samples, 0.07%)</title><rect x="99.8839%" y="677" width="0.0663%" height="15" fill="rgb(219,14,44)" fg:x="12047" fg:w="8"/><text x="100.1339%" y="687.50"></text></g><g><title>deno`v8::internal::Sweeper::ParallelSweepPage (8 samples, 0.07%)</title><rect x="99.8839%" y="661" width="0.0663%" height="15" fill="rgb(217,220,26)" fg:x="12047" fg:w="8"/><text x="100.1339%" y="671.50"></text></g><g><title>deno`v8::internal::Sweeper::RawSweep(v8::internal::Page*, v8::internal::FreeSpaceTreatmentMode, v8::internal::Sweeper::SweepingMode, v8::base::LockGuard&lt;v8::base::Mutex,  (8 samples, 0.07%)</title><rect x="99.8839%" y="645" width="0.0663%" height="15" fill="rgb(213,158,28)" fg:x="12047" fg:w="8"/><text x="100.1339%" y="655.50"></text></g><g><title>deno`v8::internal::LiveObjectRange&lt;(v8::internal::LiveObjectIterationMode)0&gt;::iterator::AdvanceToNextValidObject (7 samples, 0.06%)</title><rect x="99.8922%" y="629" width="0.0580%" height="15" fill="rgb(252,51,52)" fg:x="12048" fg:w="7"/><text x="100.1422%" y="639.50"></text></g><g><title>deno`v8::platform::DefaultJobWorker::Run (449 samples, 3.72%)</title><rect x="96.2358%" y="709" width="3.7227%" height="15" fill="rgb(246,89,16)" fg:x="11607" fg:w="449"/><text x="96.4858%" y="719.50">deno..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (4 samples, 0.03%)</title><rect x="99.9585%" y="693" width="0.0332%" height="15" fill="rgb(216,158,49)" fg:x="12056" fg:w="4"/><text x="100.2085%" y="703.50"></text></g><g><title>all (12,061 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(236,107,19)" fg:x="0" fg:w="12061"/><text x="0.2500%" y="799.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (2,176 samples, 18.04%)</title><rect x="81.9584%" y="773" width="18.0416%" height="15" fill="rgb(228,185,30)" fg:x="9885" fg:w="2176"/><text x="82.2084%" y="783.50">libsystem_pthread.dylib`thre..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (2,176 samples, 18.04%)</title><rect x="81.9584%" y="757" width="18.0416%" height="15" fill="rgb(246,134,8)" fg:x="9885" fg:w="2176"/><text x="82.2084%" y="767.50">libsystem_pthread.dylib`_pth..</text></g><g><title>deno`v8::base::ThreadEntry (523 samples, 4.34%)</title><rect x="95.6637%" y="741" width="4.3363%" height="15" fill="rgb(214,143,50)" fg:x="11538" fg:w="523"/><text x="95.9137%" y="751.50">deno`..</text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (523 samples, 4.34%)</title><rect x="95.6637%" y="725" width="4.3363%" height="15" fill="rgb(228,75,8)" fg:x="11538" fg:w="523"/><text x="95.9137%" y="735.50">deno`..</text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (5 samples, 0.04%)</title><rect x="99.9585%" y="709" width="0.0415%" height="15" fill="rgb(207,175,4)" fg:x="12056" fg:w="5"/><text x="100.2085%" y="719.50"></text></g></svg></svg>