<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1237.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="1686"><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="0.0000%" y="981" width="0.0593%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="0.0000%" y="965" width="0.0593%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="0.0000%" y="949" width="0.0593%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>deno`deno_graph::graph::parse_module (1 samples, 0.06%)</title><rect x="0.0000%" y="933" width="0.0593%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>deno`deno_graph::graph::parse_module_from_module_info (1 samples, 0.06%)</title><rect x="0.0000%" y="917" width="0.0593%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>deno`regex::re_unicode::Regex::new (1 samples, 0.06%)</title><rect x="0.0000%" y="901" width="0.0593%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>deno`regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.06%)</title><rect x="0.0000%" y="885" width="0.0593%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>deno`regex::exec::ExecBuilder::build (1 samples, 0.06%)</title><rect x="0.0000%" y="869" width="0.0593%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>deno`regex::compile::Compiler::new (1 samples, 0.06%)</title><rect x="0.0000%" y="853" width="0.0593%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.06%)</title><rect x="0.0000%" y="837" width="0.0593%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50"></text></g><g><title>deno`alloc::alloc::Global::alloc_impl (1 samples, 0.06%)</title><rect x="0.0000%" y="821" width="0.0593%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.06%)</title><rect x="0.0000%" y="805" width="0.0593%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="0.0000%" y="789" width="0.0593%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="0.0000%" y="773" width="0.0593%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>0x11000f7d0 (1 samples, 0.06%)</title><rect x="4.9229%" y="821" width="0.0593%" height="15" fill="rgb(217,207,13)" fg:x="83" fg:w="1"/><text x="5.1729%" y="831.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (1 samples, 0.06%)</title><rect x="4.9822%" y="821" width="0.0593%" height="15" fill="rgb(231,73,38)" fg:x="84" fg:w="1"/><text x="5.2322%" y="831.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (20 samples, 1.19%)</title><rect x="5.0415%" y="821" width="1.1862%" height="15" fill="rgb(225,20,46)" fg:x="85" fg:w="20"/><text x="5.2915%" y="831.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNullOrUndefined (1 samples, 0.06%)</title><rect x="6.2278%" y="821" width="0.0593%" height="15" fill="rgb(210,31,41)" fg:x="105" fg:w="1"/><text x="6.4778%" y="831.50"></text></g><g><title>0x11000f78c (5 samples, 0.30%)</title><rect x="7.5326%" y="805" width="0.2966%" height="15" fill="rgb(221,200,47)" fg:x="127" fg:w="5"/><text x="7.7826%" y="815.50"></text></g><g><title>0x11000f7a8 (3 samples, 0.18%)</title><rect x="7.8292%" y="805" width="0.1779%" height="15" fill="rgb(226,26,5)" fg:x="132" fg:w="3"/><text x="8.0792%" y="815.50"></text></g><g><title>0x11000f8a8 (3 samples, 0.18%)</title><rect x="8.0071%" y="805" width="0.1779%" height="15" fill="rgb(249,33,26)" fg:x="135" fg:w="3"/><text x="8.2571%" y="815.50"></text></g><g><title>0x11000ff70 (2 samples, 0.12%)</title><rect x="8.1851%" y="805" width="0.1186%" height="15" fill="rgb(235,183,28)" fg:x="138" fg:w="2"/><text x="8.4351%" y="815.50"></text></g><g><title>0x11000dc70 (1 samples, 0.06%)</title><rect x="8.7189%" y="773" width="0.0593%" height="15" fill="rgb(221,5,38)" fg:x="147" fg:w="1"/><text x="8.9689%" y="783.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.06%)</title><rect x="8.7782%" y="757" width="0.0593%" height="15" fill="rgb(247,18,42)" fg:x="148" fg:w="1"/><text x="9.0282%" y="767.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (1 samples, 0.06%)</title><rect x="8.8375%" y="725" width="0.0593%" height="15" fill="rgb(241,131,45)" fg:x="149" fg:w="1"/><text x="9.0875%" y="735.50"></text></g><g><title>0x11000dee0 (3 samples, 0.18%)</title><rect x="8.7782%" y="773" width="0.1779%" height="15" fill="rgb(249,31,29)" fg:x="148" fg:w="3"/><text x="9.0282%" y="783.50"></text></g><g><title>deno`Builtins_CallApiCallback (2 samples, 0.12%)</title><rect x="8.8375%" y="757" width="0.1186%" height="15" fill="rgb(225,111,53)" fg:x="149" fg:w="2"/><text x="9.0875%" y="767.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.12%)</title><rect x="8.8375%" y="741" width="0.1186%" height="15" fill="rgb(238,160,17)" fg:x="149" fg:w="2"/><text x="9.0875%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="8.8968%" y="725" width="0.0593%" height="15" fill="rgb(214,148,48)" fg:x="150" fg:w="1"/><text x="9.1468%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="8.8968%" y="709" width="0.0593%" height="15" fill="rgb(232,36,49)" fg:x="150" fg:w="1"/><text x="9.1468%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.06%)</title><rect x="8.8968%" y="693" width="0.0593%" height="15" fill="rgb(209,103,24)" fg:x="150" fg:w="1"/><text x="9.1468%" y="703.50"></text></g><g><title>0x11000bcc8 (5 samples, 0.30%)</title><rect x="8.7189%" y="789" width="0.2966%" height="15" fill="rgb(229,88,8)" fg:x="147" fg:w="5"/><text x="8.9689%" y="799.50"></text></g><g><title>0x11000df4c (1 samples, 0.06%)</title><rect x="8.9561%" y="773" width="0.0593%" height="15" fill="rgb(213,181,19)" fg:x="151" fg:w="1"/><text x="9.2061%" y="783.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (1 samples, 0.06%)</title><rect x="8.9561%" y="757" width="0.0593%" height="15" fill="rgb(254,191,54)" fg:x="151" fg:w="1"/><text x="9.2061%" y="767.50"></text></g><g><title>0x11000bd14 (1 samples, 0.06%)</title><rect x="9.0154%" y="789" width="0.0593%" height="15" fill="rgb(241,83,37)" fg:x="152" fg:w="1"/><text x="9.2654%" y="799.50"></text></g><g><title>0x11000bd34 (1 samples, 0.06%)</title><rect x="9.0747%" y="789" width="0.0593%" height="15" fill="rgb(233,36,39)" fg:x="153" fg:w="1"/><text x="9.3247%" y="799.50"></text></g><g><title>0x11000e604 (1 samples, 0.06%)</title><rect x="9.1340%" y="789" width="0.0593%" height="15" fill="rgb(226,3,54)" fg:x="154" fg:w="1"/><text x="9.3840%" y="799.50"></text></g><g><title>0x11000e720 (1 samples, 0.06%)</title><rect x="9.1934%" y="789" width="0.0593%" height="15" fill="rgb(245,192,40)" fg:x="155" fg:w="1"/><text x="9.4434%" y="799.50"></text></g><g><title>0x11000e754 (1 samples, 0.06%)</title><rect x="9.2527%" y="789" width="0.0593%" height="15" fill="rgb(238,167,29)" fg:x="156" fg:w="1"/><text x="9.5027%" y="799.50"></text></g><g><title>0x11000e774 (1 samples, 0.06%)</title><rect x="9.3120%" y="789" width="0.0593%" height="15" fill="rgb(232,182,51)" fg:x="157" fg:w="1"/><text x="9.5620%" y="799.50"></text></g><g><title>0x11000e778 (2 samples, 0.12%)</title><rect x="9.3713%" y="789" width="0.1186%" height="15" fill="rgb(231,60,39)" fg:x="158" fg:w="2"/><text x="9.6213%" y="799.50"></text></g><g><title>0x11000e81c (1 samples, 0.06%)</title><rect x="9.4899%" y="789" width="0.0593%" height="15" fill="rgb(208,69,12)" fg:x="160" fg:w="1"/><text x="9.7399%" y="799.50"></text></g><g><title>0x11000e824 (1 samples, 0.06%)</title><rect x="9.5492%" y="789" width="0.0593%" height="15" fill="rgb(235,93,37)" fg:x="161" fg:w="1"/><text x="9.7992%" y="799.50"></text></g><g><title>0x11000e930 (1 samples, 0.06%)</title><rect x="9.6085%" y="789" width="0.0593%" height="15" fill="rgb(213,116,39)" fg:x="162" fg:w="1"/><text x="9.8585%" y="799.50"></text></g><g><title>0x11000ead8 (1 samples, 0.06%)</title><rect x="9.6679%" y="789" width="0.0593%" height="15" fill="rgb(222,207,29)" fg:x="163" fg:w="1"/><text x="9.9179%" y="799.50"></text></g><g><title>0x11000eb28 (1 samples, 0.06%)</title><rect x="9.7272%" y="789" width="0.0593%" height="15" fill="rgb(206,96,30)" fg:x="164" fg:w="1"/><text x="9.9772%" y="799.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (1 samples, 0.06%)</title><rect x="9.7272%" y="773" width="0.0593%" height="15" fill="rgb(218,138,4)" fg:x="164" fg:w="1"/><text x="9.9772%" y="783.50"></text></g><g><title>0x11000eb64 (2 samples, 0.12%)</title><rect x="9.7865%" y="789" width="0.1186%" height="15" fill="rgb(250,191,14)" fg:x="165" fg:w="2"/><text x="10.0365%" y="799.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (1 samples, 0.06%)</title><rect x="11.2100%" y="741" width="0.0593%" height="15" fill="rgb(239,60,40)" fg:x="189" fg:w="1"/><text x="11.4600%" y="751.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.06%)</title><rect x="11.2693%" y="741" width="0.0593%" height="15" fill="rgb(206,27,48)" fg:x="190" fg:w="1"/><text x="11.5193%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (2 samples, 0.12%)</title><rect x="11.3286%" y="741" width="0.1186%" height="15" fill="rgb(225,35,8)" fg:x="191" fg:w="2"/><text x="11.5786%" y="751.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (4 samples, 0.24%)</title><rect x="11.4472%" y="741" width="0.2372%" height="15" fill="rgb(250,213,24)" fg:x="193" fg:w="4"/><text x="11.6972%" y="751.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (3 samples, 0.18%)</title><rect x="11.5065%" y="725" width="0.1779%" height="15" fill="rgb(247,123,22)" fg:x="194" fg:w="3"/><text x="11.7565%" y="735.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (2 samples, 0.12%)</title><rect x="11.6845%" y="741" width="0.1186%" height="15" fill="rgb(231,138,38)" fg:x="197" fg:w="2"/><text x="11.9345%" y="751.50"></text></g><g><title>deno`v8::Context::GetNumberOfEmbedderDataFields (1 samples, 0.06%)</title><rect x="11.8031%" y="741" width="0.0593%" height="15" fill="rgb(231,145,46)" fg:x="199" fg:w="1"/><text x="12.0531%" y="751.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (2 samples, 0.12%)</title><rect x="12.4555%" y="725" width="0.1186%" height="15" fill="rgb(251,118,11)" fg:x="210" fg:w="2"/><text x="12.7055%" y="735.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.12%)</title><rect x="12.5741%" y="725" width="0.1186%" height="15" fill="rgb(217,147,25)" fg:x="212" fg:w="2"/><text x="12.8241%" y="735.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.12%)</title><rect x="12.6928%" y="725" width="0.1186%" height="15" fill="rgb(247,81,37)" fg:x="214" fg:w="2"/><text x="12.9428%" y="735.50"></text></g><g><title>deno`Builtins_JSEntry (2 samples, 0.12%)</title><rect x="12.8707%" y="709" width="0.1186%" height="15" fill="rgb(209,12,38)" fg:x="217" fg:w="2"/><text x="13.1207%" y="719.50"></text></g><g><title>0x11000cb08 (1 samples, 0.06%)</title><rect x="13.2266%" y="677" width="0.0593%" height="15" fill="rgb(227,1,9)" fg:x="223" fg:w="1"/><text x="13.4766%" y="687.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (2 samples, 0.12%)</title><rect x="13.2859%" y="677" width="0.1186%" height="15" fill="rgb(248,47,43)" fg:x="224" fg:w="2"/><text x="13.5359%" y="687.50"></text></g><g><title>0x11000cbb8 (1 samples, 0.06%)</title><rect x="13.4638%" y="661" width="0.0593%" height="15" fill="rgb(221,10,30)" fg:x="227" fg:w="1"/><text x="13.7138%" y="671.50"></text></g><g><title>0x11000cbcc (1 samples, 0.06%)</title><rect x="13.5231%" y="661" width="0.0593%" height="15" fill="rgb(210,229,1)" fg:x="228" fg:w="1"/><text x="13.7731%" y="671.50"></text></g><g><title>0x11000cbe0 (2 samples, 0.12%)</title><rect x="13.5824%" y="661" width="0.1186%" height="15" fill="rgb(222,148,37)" fg:x="229" fg:w="2"/><text x="13.8324%" y="671.50"></text></g><g><title>0x11000cc48 (1 samples, 0.06%)</title><rect x="13.7011%" y="661" width="0.0593%" height="15" fill="rgb(234,67,33)" fg:x="231" fg:w="1"/><text x="13.9511%" y="671.50"></text></g><g><title>0x11000cc80 (6 samples, 0.36%)</title><rect x="13.7604%" y="661" width="0.3559%" height="15" fill="rgb(247,98,35)" fg:x="232" fg:w="6"/><text x="14.0104%" y="671.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (6 samples, 0.36%)</title><rect x="13.7604%" y="645" width="0.3559%" height="15" fill="rgb(247,138,52)" fg:x="232" fg:w="6"/><text x="14.0104%" y="655.50"></text></g><g><title>deno`Builtins_ResolvePromise (4 samples, 0.24%)</title><rect x="13.8790%" y="629" width="0.2372%" height="15" fill="rgb(213,79,30)" fg:x="234" fg:w="4"/><text x="14.1290%" y="639.50"></text></g><g><title>deno`Builtins_FulfillPromise (4 samples, 0.24%)</title><rect x="13.8790%" y="613" width="0.2372%" height="15" fill="rgb(246,177,23)" fg:x="234" fg:w="4"/><text x="14.1290%" y="623.50"></text></g><g><title>0x11000cc9c (1 samples, 0.06%)</title><rect x="14.1163%" y="661" width="0.0593%" height="15" fill="rgb(230,62,27)" fg:x="238" fg:w="1"/><text x="14.3663%" y="671.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (1 samples, 0.06%)</title><rect x="14.1756%" y="661" width="0.0593%" height="15" fill="rgb(216,154,8)" fg:x="239" fg:w="1"/><text x="14.4256%" y="671.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (22 samples, 1.30%)</title><rect x="12.9893%" y="709" width="1.3049%" height="15" fill="rgb(244,35,45)" fg:x="219" fg:w="22"/><text x="13.2393%" y="719.50"></text></g><g><title>deno`Builtins_JSEntry (21 samples, 1.25%)</title><rect x="13.0486%" y="693" width="1.2456%" height="15" fill="rgb(251,115,12)" fg:x="220" fg:w="21"/><text x="13.2986%" y="703.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (15 samples, 0.89%)</title><rect x="13.4045%" y="677" width="0.8897%" height="15" fill="rgb(240,54,50)" fg:x="226" fg:w="15"/><text x="13.6545%" y="687.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (1 samples, 0.06%)</title><rect x="14.2349%" y="661" width="0.0593%" height="15" fill="rgb(233,84,52)" fg:x="240" fg:w="1"/><text x="14.4849%" y="671.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (28 samples, 1.66%)</title><rect x="12.8114%" y="725" width="1.6607%" height="15" fill="rgb(207,117,47)" fg:x="216" fg:w="28"/><text x="13.0614%" y="735.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (3 samples, 0.18%)</title><rect x="14.2942%" y="709" width="0.1779%" height="15" fill="rgb(249,43,39)" fg:x="241" fg:w="3"/><text x="14.5442%" y="719.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (45 samples, 2.67%)</title><rect x="11.8624%" y="741" width="2.6690%" height="15" fill="rgb(209,38,44)" fg:x="200" fg:w="45"/><text x="12.1124%" y="751.50">de..</text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.06%)</title><rect x="14.4721%" y="725" width="0.0593%" height="15" fill="rgb(236,212,23)" fg:x="244" fg:w="1"/><text x="14.7221%" y="735.50"></text></g><g><title>deno`v8::Integer::New (1 samples, 0.06%)</title><rect x="14.5314%" y="741" width="0.0593%" height="15" fill="rgb(242,79,21)" fg:x="245" fg:w="1"/><text x="14.7814%" y="751.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (1 samples, 0.06%)</title><rect x="14.5907%" y="741" width="0.0593%" height="15" fill="rgb(211,96,35)" fg:x="246" fg:w="1"/><text x="14.8407%" y="751.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (3 samples, 0.18%)</title><rect x="14.6501%" y="741" width="0.1779%" height="15" fill="rgb(253,215,40)" fg:x="247" fg:w="3"/><text x="14.9001%" y="751.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (2 samples, 0.12%)</title><rect x="14.8280%" y="741" width="0.1186%" height="15" fill="rgb(211,81,21)" fg:x="250" fg:w="2"/><text x="15.0780%" y="751.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.06%)</title><rect x="14.9466%" y="741" width="0.0593%" height="15" fill="rgb(208,190,38)" fg:x="252" fg:w="1"/><text x="15.1966%" y="751.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (2 samples, 0.12%)</title><rect x="15.0059%" y="741" width="0.1186%" height="15" fill="rgb(235,213,38)" fg:x="253" fg:w="2"/><text x="15.2559%" y="751.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (1 samples, 0.06%)</title><rect x="15.1246%" y="741" width="0.0593%" height="15" fill="rgb(237,122,38)" fg:x="255" fg:w="1"/><text x="15.3746%" y="751.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (1 samples, 0.06%)</title><rect x="15.1839%" y="741" width="0.0593%" height="15" fill="rgb(244,218,35)" fg:x="256" fg:w="1"/><text x="15.4339%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (1 samples, 0.06%)</title><rect x="15.2432%" y="741" width="0.0593%" height="15" fill="rgb(240,68,47)" fg:x="257" fg:w="1"/><text x="15.4932%" y="751.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (1 samples, 0.06%)</title><rect x="15.2432%" y="725" width="0.0593%" height="15" fill="rgb(210,16,53)" fg:x="257" fg:w="1"/><text x="15.4932%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (1 samples, 0.06%)</title><rect x="15.3025%" y="741" width="0.0593%" height="15" fill="rgb(235,124,12)" fg:x="258" fg:w="1"/><text x="15.5525%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (1 samples, 0.06%)</title><rect x="15.3618%" y="741" width="0.0593%" height="15" fill="rgb(224,169,11)" fg:x="259" fg:w="1"/><text x="15.6118%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (7 samples, 0.42%)</title><rect x="15.4211%" y="741" width="0.4152%" height="15" fill="rgb(250,166,2)" fg:x="260" fg:w="7"/><text x="15.6711%" y="751.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (4 samples, 0.24%)</title><rect x="15.5991%" y="725" width="0.2372%" height="15" fill="rgb(242,216,29)" fg:x="263" fg:w="4"/><text x="15.8491%" y="735.50"></text></g><g><title>deno`v8::internal::GetCurrentStackPosition (2 samples, 0.12%)</title><rect x="15.7177%" y="709" width="0.1186%" height="15" fill="rgb(230,116,27)" fg:x="265" fg:w="2"/><text x="15.9677%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (5 samples, 0.30%)</title><rect x="15.8363%" y="741" width="0.2966%" height="15" fill="rgb(228,99,48)" fg:x="267" fg:w="5"/><text x="16.0863%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.18%)</title><rect x="15.9549%" y="725" width="0.1779%" height="15" fill="rgb(253,11,6)" fg:x="269" fg:w="3"/><text x="16.2049%" y="735.50"></text></g><g><title>deno`v8__Global__New (5 samples, 0.30%)</title><rect x="16.1329%" y="741" width="0.2966%" height="15" fill="rgb(247,143,39)" fg:x="272" fg:w="5"/><text x="16.3829%" y="751.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.18%)</title><rect x="16.2515%" y="725" width="0.1779%" height="15" fill="rgb(236,97,10)" fg:x="274" fg:w="3"/><text x="16.5015%" y="735.50"></text></g><g><title>deno`v8__Isolate__GetData (1 samples, 0.06%)</title><rect x="16.4294%" y="741" width="0.0593%" height="15" fill="rgb(233,208,19)" fg:x="277" fg:w="1"/><text x="16.6794%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.18%)</title><rect x="16.7853%" y="709" width="0.1779%" height="15" fill="rgb(216,164,2)" fg:x="283" fg:w="3"/><text x="17.0353%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.59%)</title><rect x="16.4887%" y="741" width="0.5931%" height="15" fill="rgb(220,129,5)" fg:x="278" fg:w="10"/><text x="16.7387%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.42%)</title><rect x="16.6667%" y="725" width="0.4152%" height="15" fill="rgb(242,17,10)" fg:x="281" fg:w="7"/><text x="16.9167%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.12%)</title><rect x="16.9632%" y="709" width="0.1186%" height="15" fill="rgb(242,107,0)" fg:x="286" fg:w="2"/><text x="17.2132%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.06%)</title><rect x="17.0819%" y="741" width="0.0593%" height="15" fill="rgb(251,28,31)" fg:x="288" fg:w="1"/><text x="17.3319%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.36%)</title><rect x="17.1412%" y="741" width="0.3559%" height="15" fill="rgb(233,223,10)" fg:x="289" fg:w="6"/><text x="17.3912%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.12%)</title><rect x="17.3784%" y="725" width="0.1186%" height="15" fill="rgb(215,21,27)" fg:x="293" fg:w="2"/><text x="17.6284%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.18%)</title><rect x="17.4970%" y="741" width="0.1779%" height="15" fill="rgb(232,23,21)" fg:x="295" fg:w="3"/><text x="17.7470%" y="751.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (132 samples, 7.83%)</title><rect x="9.9051%" y="757" width="7.8292%" height="15" fill="rgb(244,5,23)" fg:x="167" fg:w="132"/><text x="10.1551%" y="767.50">deno`&lt;exter..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="17.6750%" y="741" width="0.0593%" height="15" fill="rgb(226,81,46)" fg:x="298" fg:w="1"/><text x="17.9250%" y="751.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.06%)</title><rect x="17.7343%" y="757" width="0.0593%" height="15" fill="rgb(247,70,30)" fg:x="299" fg:w="1"/><text x="17.9843%" y="767.50"></text></g><g><title>deno`DYLD-STUB$$free (3 samples, 0.18%)</title><rect x="17.7936%" y="757" width="0.1779%" height="15" fill="rgb(212,68,19)" fg:x="300" fg:w="3"/><text x="18.0436%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (1 samples, 0.06%)</title><rect x="17.9715%" y="757" width="0.0593%" height="15" fill="rgb(240,187,13)" fg:x="303" fg:w="1"/><text x="18.2215%" y="767.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (1 samples, 0.06%)</title><rect x="18.0308%" y="757" width="0.0593%" height="15" fill="rgb(223,113,26)" fg:x="304" fg:w="1"/><text x="18.2808%" y="767.50"></text></g><g><title>deno`futures_task::noop_waker::noop (2 samples, 0.12%)</title><rect x="18.0902%" y="757" width="0.1186%" height="15" fill="rgb(206,192,2)" fg:x="305" fg:w="2"/><text x="18.3402%" y="767.50"></text></g><g><title>deno`v8::External::Value (1 samples, 0.06%)</title><rect x="18.2088%" y="757" width="0.0593%" height="15" fill="rgb(241,108,4)" fg:x="307" fg:w="1"/><text x="18.4588%" y="767.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (1 samples, 0.06%)</title><rect x="18.2681%" y="757" width="0.0593%" height="15" fill="rgb(247,173,49)" fg:x="308" fg:w="1"/><text x="18.5181%" y="767.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (1 samples, 0.06%)</title><rect x="18.3274%" y="757" width="0.0593%" height="15" fill="rgb(224,114,35)" fg:x="309" fg:w="1"/><text x="18.5774%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (1 samples, 0.06%)</title><rect x="18.3867%" y="757" width="0.0593%" height="15" fill="rgb(245,159,27)" fg:x="310" fg:w="1"/><text x="18.6367%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (1 samples, 0.06%)</title><rect x="18.4460%" y="757" width="0.0593%" height="15" fill="rgb(245,172,44)" fg:x="311" fg:w="1"/><text x="18.6960%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (1 samples, 0.06%)</title><rect x="18.5053%" y="757" width="0.0593%" height="15" fill="rgb(236,23,11)" fg:x="312" fg:w="1"/><text x="18.7553%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (3 samples, 0.18%)</title><rect x="18.5647%" y="757" width="0.1779%" height="15" fill="rgb(205,117,38)" fg:x="313" fg:w="3"/><text x="18.8147%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (2 samples, 0.12%)</title><rect x="18.7426%" y="757" width="0.1186%" height="15" fill="rgb(237,72,25)" fg:x="316" fg:w="2"/><text x="18.9926%" y="767.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__Data (3 samples, 0.18%)</title><rect x="18.8612%" y="757" width="0.1779%" height="15" fill="rgb(244,70,9)" fg:x="318" fg:w="3"/><text x="19.1112%" y="767.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (1 samples, 0.06%)</title><rect x="19.0391%" y="757" width="0.0593%" height="15" fill="rgb(217,125,39)" fg:x="321" fg:w="1"/><text x="19.2891%" y="767.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetReturnValue (1 samples, 0.06%)</title><rect x="19.0985%" y="757" width="0.0593%" height="15" fill="rgb(235,36,10)" fg:x="322" fg:w="1"/><text x="19.3485%" y="767.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.06%)</title><rect x="19.1578%" y="757" width="0.0593%" height="15" fill="rgb(251,123,47)" fg:x="323" fg:w="1"/><text x="19.4078%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.06%)</title><rect x="19.2171%" y="757" width="0.0593%" height="15" fill="rgb(221,13,13)" fg:x="324" fg:w="1"/><text x="19.4671%" y="767.50"></text></g><g><title>0x11000eb6c (159 samples, 9.43%)</title><rect x="9.9051%" y="789" width="9.4306%" height="15" fill="rgb(238,131,9)" fg:x="167" fg:w="159"/><text x="10.1551%" y="799.50">0x11000eb6c</text></g><g><title>deno`Builtins_CallApiCallback (159 samples, 9.43%)</title><rect x="9.9051%" y="773" width="9.4306%" height="15" fill="rgb(211,50,8)" fg:x="167" fg:w="159"/><text x="10.1551%" y="783.50">deno`Builtins..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="19.2764%" y="757" width="0.0593%" height="15" fill="rgb(245,182,24)" fg:x="325" fg:w="1"/><text x="19.5264%" y="767.50"></text></g><g><title>0x11000ebd0 (1 samples, 0.06%)</title><rect x="19.3357%" y="789" width="0.0593%" height="15" fill="rgb(242,14,37)" fg:x="326" fg:w="1"/><text x="19.5857%" y="799.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (2 samples, 0.12%)</title><rect x="19.3950%" y="773" width="0.1186%" height="15" fill="rgb(246,228,12)" fg:x="327" fg:w="2"/><text x="19.6450%" y="783.50"></text></g><g><title>0x11000ebd8 (7 samples, 0.42%)</title><rect x="19.3950%" y="789" width="0.4152%" height="15" fill="rgb(213,55,15)" fg:x="327" fg:w="7"/><text x="19.6450%" y="799.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (5 samples, 0.30%)</title><rect x="19.5136%" y="773" width="0.2966%" height="15" fill="rgb(209,9,3)" fg:x="329" fg:w="5"/><text x="19.7636%" y="783.50"></text></g><g><title>0x11000ebe4 (1 samples, 0.06%)</title><rect x="19.8102%" y="789" width="0.0593%" height="15" fill="rgb(230,59,30)" fg:x="334" fg:w="1"/><text x="20.0602%" y="799.50"></text></g><g><title>0x11000ecc0 (1 samples, 0.06%)</title><rect x="19.8695%" y="789" width="0.0593%" height="15" fill="rgb(209,121,21)" fg:x="335" fg:w="1"/><text x="20.1195%" y="799.50"></text></g><g><title>0x11000ece4 (1 samples, 0.06%)</title><rect x="19.9288%" y="789" width="0.0593%" height="15" fill="rgb(220,109,13)" fg:x="336" fg:w="1"/><text x="20.1788%" y="799.50"></text></g><g><title>0x11000ecec (11 samples, 0.65%)</title><rect x="19.9881%" y="789" width="0.6524%" height="15" fill="rgb(232,18,1)" fg:x="337" fg:w="11"/><text x="20.2381%" y="799.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (11 samples, 0.65%)</title><rect x="19.9881%" y="773" width="0.6524%" height="15" fill="rgb(215,41,42)" fg:x="337" fg:w="11"/><text x="20.2381%" y="783.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (2 samples, 0.12%)</title><rect x="20.5219%" y="757" width="0.1186%" height="15" fill="rgb(224,123,36)" fg:x="346" fg:w="2"/><text x="20.7719%" y="767.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (10 samples, 0.59%)</title><rect x="20.6406%" y="613" width="0.5931%" height="15" fill="rgb(240,125,3)" fg:x="348" fg:w="10"/><text x="20.8906%" y="623.50"></text></g><g><title>deno`v8::internal::CommonFrame::IterateTurbofanOptimizedFrame (1 samples, 0.06%)</title><rect x="21.2337%" y="597" width="0.0593%" height="15" fill="rgb(205,98,50)" fg:x="358" fg:w="1"/><text x="21.4837%" y="607.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointers (1 samples, 0.06%)</title><rect x="21.2337%" y="581" width="0.0593%" height="15" fill="rgb(205,185,37)" fg:x="358" fg:w="1"/><text x="21.4837%" y="591.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::FullHeapObjectSlot&gt; (1 samples, 0.06%)</title><rect x="21.2337%" y="565" width="0.0593%" height="15" fill="rgb(238,207,15)" fg:x="358" fg:w="1"/><text x="21.4837%" y="575.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.06%)</title><rect x="21.2337%" y="549" width="0.0593%" height="15" fill="rgb(213,199,42)" fg:x="358" fg:w="1"/><text x="21.4837%" y="559.50"></text></g><g><title>deno`v8::internal::OffHeapStackSlots (1 samples, 0.06%)</title><rect x="21.2930%" y="597" width="0.0593%" height="15" fill="rgb(235,201,11)" fg:x="359" fg:w="1"/><text x="21.5430%" y="607.50"></text></g><g><title>deno`v8::internal::Isolate::Iterate (3 samples, 0.18%)</title><rect x="21.2337%" y="613" width="0.1779%" height="15" fill="rgb(207,46,11)" fg:x="358" fg:w="3"/><text x="21.4837%" y="623.50"></text></g><g><title>deno`v8::internal::StackFrameIterator::Advance (1 samples, 0.06%)</title><rect x="21.3523%" y="597" width="0.0593%" height="15" fill="rgb(241,35,35)" fg:x="360" fg:w="1"/><text x="21.6023%" y="607.50"></text></g><g><title>deno`v8::internal::StackFrame::ComputeType (1 samples, 0.06%)</title><rect x="21.3523%" y="581" width="0.0593%" height="15" fill="rgb(243,32,47)" fg:x="360" fg:w="1"/><text x="21.6023%" y="591.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (14 samples, 0.83%)</title><rect x="20.6406%" y="629" width="0.8304%" height="15" fill="rgb(247,202,23)" fg:x="348" fg:w="14"/><text x="20.8906%" y="639.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (1 samples, 0.06%)</title><rect x="21.4116%" y="613" width="0.0593%" height="15" fill="rgb(219,102,11)" fg:x="361" fg:w="1"/><text x="21.6616%" y="623.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (4 samples, 0.24%)</title><rect x="21.4709%" y="629" width="0.2372%" height="15" fill="rgb(243,110,44)" fg:x="362" fg:w="4"/><text x="21.7209%" y="639.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (4 samples, 0.24%)</title><rect x="21.4709%" y="613" width="0.2372%" height="15" fill="rgb(222,74,54)" fg:x="362" fg:w="4"/><text x="21.7209%" y="623.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (4 samples, 0.24%)</title><rect x="21.4709%" y="597" width="0.2372%" height="15" fill="rgb(216,99,12)" fg:x="362" fg:w="4"/><text x="21.7209%" y="607.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (4 samples, 0.24%)</title><rect x="21.4709%" y="581" width="0.2372%" height="15" fill="rgb(226,22,26)" fg:x="362" fg:w="4"/><text x="21.7209%" y="591.50"></text></g><g><title>0x11000f08c (19 samples, 1.13%)</title><rect x="20.6406%" y="789" width="1.1269%" height="15" fill="rgb(217,163,10)" fg:x="348" fg:w="19"/><text x="20.8906%" y="799.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (19 samples, 1.13%)</title><rect x="20.6406%" y="773" width="1.1269%" height="15" fill="rgb(213,25,53)" fg:x="348" fg:w="19"/><text x="20.8906%" y="783.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (19 samples, 1.13%)</title><rect x="20.6406%" y="757" width="1.1269%" height="15" fill="rgb(252,105,26)" fg:x="348" fg:w="19"/><text x="20.8906%" y="767.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (19 samples, 1.13%)</title><rect x="20.6406%" y="741" width="1.1269%" height="15" fill="rgb(220,39,43)" fg:x="348" fg:w="19"/><text x="20.8906%" y="751.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (19 samples, 1.13%)</title><rect x="20.6406%" y="725" width="1.1269%" height="15" fill="rgb(229,68,48)" fg:x="348" fg:w="19"/><text x="20.8906%" y="735.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (19 samples, 1.13%)</title><rect x="20.6406%" y="709" width="1.1269%" height="15" fill="rgb(252,8,32)" fg:x="348" fg:w="19"/><text x="20.8906%" y="719.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (19 samples, 1.13%)</title><rect x="20.6406%" y="693" width="1.1269%" height="15" fill="rgb(223,20,43)" fg:x="348" fg:w="19"/><text x="20.8906%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (19 samples, 1.13%)</title><rect x="20.6406%" y="677" width="1.1269%" height="15" fill="rgb(229,81,49)" fg:x="348" fg:w="19"/><text x="20.8906%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (19 samples, 1.13%)</title><rect x="20.6406%" y="661" width="1.1269%" height="15" fill="rgb(236,28,36)" fg:x="348" fg:w="19"/><text x="20.8906%" y="671.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (19 samples, 1.13%)</title><rect x="20.6406%" y="645" width="1.1269%" height="15" fill="rgb(249,185,26)" fg:x="348" fg:w="19"/><text x="20.8906%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.06%)</title><rect x="21.7082%" y="629" width="0.0593%" height="15" fill="rgb(249,174,33)" fg:x="366" fg:w="1"/><text x="21.9582%" y="639.50"></text></g><g><title>0x11000f3bc (1 samples, 0.06%)</title><rect x="21.7675%" y="789" width="0.0593%" height="15" fill="rgb(233,201,37)" fg:x="367" fg:w="1"/><text x="22.0175%" y="799.50"></text></g><g><title>0x11000f3d4 (2 samples, 0.12%)</title><rect x="21.8268%" y="789" width="0.1186%" height="15" fill="rgb(221,78,26)" fg:x="368" fg:w="2"/><text x="22.0768%" y="799.50"></text></g><g><title>0x11000f3dc (3 samples, 0.18%)</title><rect x="21.9454%" y="789" width="0.1779%" height="15" fill="rgb(250,127,30)" fg:x="370" fg:w="3"/><text x="22.1954%" y="799.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (3 samples, 0.18%)</title><rect x="21.9454%" y="773" width="0.1779%" height="15" fill="rgb(230,49,44)" fg:x="370" fg:w="3"/><text x="22.1954%" y="783.50"></text></g><g><title>0x11000f8d0 (1 samples, 0.06%)</title><rect x="22.1234%" y="789" width="0.0593%" height="15" fill="rgb(229,67,23)" fg:x="373" fg:w="1"/><text x="22.3734%" y="799.50"></text></g><g><title>0x11000f8f8 (4 samples, 0.24%)</title><rect x="22.1827%" y="789" width="0.2372%" height="15" fill="rgb(249,83,47)" fg:x="374" fg:w="4"/><text x="22.4327%" y="799.50"></text></g><g><title>0x11000fb30 (4 samples, 0.24%)</title><rect x="22.4199%" y="789" width="0.2372%" height="15" fill="rgb(215,43,3)" fg:x="378" fg:w="4"/><text x="22.6699%" y="799.50"></text></g><g><title>0x11000fb40 (4 samples, 0.24%)</title><rect x="22.6572%" y="789" width="0.2372%" height="15" fill="rgb(238,154,13)" fg:x="382" fg:w="4"/><text x="22.9072%" y="799.50"></text></g><g><title>0x11000fb84 (2 samples, 0.12%)</title><rect x="22.8944%" y="789" width="0.1186%" height="15" fill="rgb(219,56,2)" fg:x="386" fg:w="2"/><text x="23.1444%" y="799.50"></text></g><g><title>0x11000fb8c (6 samples, 0.36%)</title><rect x="23.0130%" y="789" width="0.3559%" height="15" fill="rgb(233,0,4)" fg:x="388" fg:w="6"/><text x="23.2630%" y="799.50"></text></g><g><title>0x11000fb9c (3 samples, 0.18%)</title><rect x="23.3689%" y="789" width="0.1779%" height="15" fill="rgb(235,30,7)" fg:x="394" fg:w="3"/><text x="23.6189%" y="799.50"></text></g><g><title>0x11000fbb4 (1 samples, 0.06%)</title><rect x="23.5469%" y="789" width="0.0593%" height="15" fill="rgb(250,79,13)" fg:x="397" fg:w="1"/><text x="23.7969%" y="799.50"></text></g><g><title>0x11000fc20 (1 samples, 0.06%)</title><rect x="23.6062%" y="789" width="0.0593%" height="15" fill="rgb(211,146,34)" fg:x="398" fg:w="1"/><text x="23.8562%" y="799.50"></text></g><g><title>0x11000fc3c (1 samples, 0.06%)</title><rect x="23.6655%" y="789" width="0.0593%" height="15" fill="rgb(228,22,38)" fg:x="399" fg:w="1"/><text x="23.9155%" y="799.50"></text></g><g><title>0x11000ff60 (3 samples, 0.18%)</title><rect x="23.7248%" y="789" width="0.1779%" height="15" fill="rgb(235,168,5)" fg:x="400" fg:w="3"/><text x="23.9748%" y="799.50"></text></g><g><title>0x11001004c (4 samples, 0.24%)</title><rect x="23.9027%" y="789" width="0.2372%" height="15" fill="rgb(221,155,16)" fg:x="403" fg:w="4"/><text x="24.1527%" y="799.50"></text></g><g><title>0x11001007c (3 samples, 0.18%)</title><rect x="24.1400%" y="789" width="0.1779%" height="15" fill="rgb(215,215,53)" fg:x="407" fg:w="3"/><text x="24.3900%" y="799.50"></text></g><g><title>0x11001009c (1 samples, 0.06%)</title><rect x="24.3179%" y="789" width="0.0593%" height="15" fill="rgb(223,4,10)" fg:x="410" fg:w="1"/><text x="24.5679%" y="799.50"></text></g><g><title>0x1100100bc (2 samples, 0.12%)</title><rect x="24.3772%" y="789" width="0.1186%" height="15" fill="rgb(234,103,6)" fg:x="411" fg:w="2"/><text x="24.6272%" y="799.50"></text></g><g><title>0x1100100f8 (1 samples, 0.06%)</title><rect x="24.4958%" y="789" width="0.0593%" height="15" fill="rgb(227,97,0)" fg:x="413" fg:w="1"/><text x="24.7458%" y="799.50"></text></g><g><title>0x110010108 (3 samples, 0.18%)</title><rect x="24.5552%" y="789" width="0.1779%" height="15" fill="rgb(234,150,53)" fg:x="414" fg:w="3"/><text x="24.8052%" y="799.50"></text></g><g><title>0x110010120 (2 samples, 0.12%)</title><rect x="24.7331%" y="789" width="0.1186%" height="15" fill="rgb(228,201,54)" fg:x="417" fg:w="2"/><text x="24.9831%" y="799.50"></text></g><g><title>0x110010130 (1 samples, 0.06%)</title><rect x="24.8517%" y="789" width="0.0593%" height="15" fill="rgb(222,22,37)" fg:x="419" fg:w="1"/><text x="25.1017%" y="799.50"></text></g><g><title>0x11001014c (3 samples, 0.18%)</title><rect x="24.9110%" y="789" width="0.1779%" height="15" fill="rgb(237,53,32)" fg:x="420" fg:w="3"/><text x="25.1610%" y="799.50"></text></g><g><title>0x110010150 (1 samples, 0.06%)</title><rect x="25.0890%" y="789" width="0.0593%" height="15" fill="rgb(233,25,53)" fg:x="423" fg:w="1"/><text x="25.3390%" y="799.50"></text></g><g><title>0x110010188 (1 samples, 0.06%)</title><rect x="25.1483%" y="789" width="0.0593%" height="15" fill="rgb(210,40,34)" fg:x="424" fg:w="1"/><text x="25.3983%" y="799.50"></text></g><g><title>0x1100101f0 (3 samples, 0.18%)</title><rect x="25.2076%" y="789" width="0.1779%" height="15" fill="rgb(241,220,44)" fg:x="425" fg:w="3"/><text x="25.4576%" y="799.50"></text></g><g><title>0x110010218 (2 samples, 0.12%)</title><rect x="25.3855%" y="789" width="0.1186%" height="15" fill="rgb(235,28,35)" fg:x="428" fg:w="2"/><text x="25.6355%" y="799.50"></text></g><g><title>0x110010234 (6 samples, 0.36%)</title><rect x="25.5042%" y="789" width="0.3559%" height="15" fill="rgb(210,56,17)" fg:x="430" fg:w="6"/><text x="25.7542%" y="799.50"></text></g><g><title>0x110010254 (1 samples, 0.06%)</title><rect x="25.8600%" y="789" width="0.0593%" height="15" fill="rgb(224,130,29)" fg:x="436" fg:w="1"/><text x="26.1100%" y="799.50"></text></g><g><title>0x110010270 (4 samples, 0.24%)</title><rect x="25.9193%" y="789" width="0.2372%" height="15" fill="rgb(235,212,8)" fg:x="437" fg:w="4"/><text x="26.1693%" y="799.50"></text></g><g><title>0x110010278 (1 samples, 0.06%)</title><rect x="26.1566%" y="789" width="0.0593%" height="15" fill="rgb(223,33,50)" fg:x="441" fg:w="1"/><text x="26.4066%" y="799.50"></text></g><g><title>0x110010294 (1 samples, 0.06%)</title><rect x="26.2159%" y="789" width="0.0593%" height="15" fill="rgb(219,149,13)" fg:x="442" fg:w="1"/><text x="26.4659%" y="799.50"></text></g><g><title>0x1100102d8 (2 samples, 0.12%)</title><rect x="26.2752%" y="789" width="0.1186%" height="15" fill="rgb(250,156,29)" fg:x="443" fg:w="2"/><text x="26.5252%" y="799.50"></text></g><g><title>0x1100102e8 (2 samples, 0.12%)</title><rect x="26.3938%" y="789" width="0.1186%" height="15" fill="rgb(216,193,19)" fg:x="445" fg:w="2"/><text x="26.6438%" y="799.50"></text></g><g><title>0x1100102fc (2 samples, 0.12%)</title><rect x="26.5125%" y="789" width="0.1186%" height="15" fill="rgb(216,135,14)" fg:x="447" fg:w="2"/><text x="26.7625%" y="799.50"></text></g><g><title>0x110010320 (3 samples, 0.18%)</title><rect x="26.6311%" y="789" width="0.1779%" height="15" fill="rgb(241,47,5)" fg:x="449" fg:w="3"/><text x="26.8811%" y="799.50"></text></g><g><title>0x110010328 (14 samples, 0.83%)</title><rect x="26.8090%" y="789" width="0.8304%" height="15" fill="rgb(233,42,35)" fg:x="452" fg:w="14"/><text x="27.0590%" y="799.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (14 samples, 0.83%)</title><rect x="26.8090%" y="773" width="0.8304%" height="15" fill="rgb(231,13,6)" fg:x="452" fg:w="14"/><text x="27.0590%" y="783.50"></text></g><g><title>0x110010364 (2 samples, 0.12%)</title><rect x="27.6394%" y="789" width="0.1186%" height="15" fill="rgb(207,181,40)" fg:x="466" fg:w="2"/><text x="27.8894%" y="799.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (9 samples, 0.53%)</title><rect x="27.7580%" y="773" width="0.5338%" height="15" fill="rgb(254,173,49)" fg:x="468" fg:w="9"/><text x="28.0080%" y="783.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.18%)</title><rect x="29.0629%" y="757" width="0.1779%" height="15" fill="rgb(221,1,38)" fg:x="490" fg:w="3"/><text x="29.3129%" y="767.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="37.4259%" y="741" width="0.0593%" height="15" fill="rgb(206,124,46)" fg:x="631" fg:w="1"/><text x="37.6759%" y="751.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.42%)</title><rect x="37.4852%" y="741" width="0.4152%" height="15" fill="rgb(249,21,11)" fg:x="632" fg:w="7"/><text x="37.7352%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (3 samples, 0.18%)</title><rect x="37.9004%" y="741" width="0.1779%" height="15" fill="rgb(222,201,40)" fg:x="639" fg:w="3"/><text x="38.1504%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (3 samples, 0.18%)</title><rect x="38.0783%" y="741" width="0.1779%" height="15" fill="rgb(235,61,29)" fg:x="642" fg:w="3"/><text x="38.3283%" y="751.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.12%)</title><rect x="38.2562%" y="741" width="0.1186%" height="15" fill="rgb(219,207,3)" fg:x="645" fg:w="2"/><text x="38.5062%" y="751.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (4 samples, 0.24%)</title><rect x="38.4342%" y="725" width="0.2372%" height="15" fill="rgb(222,56,46)" fg:x="648" fg:w="4"/><text x="38.6842%" y="735.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (6 samples, 0.36%)</title><rect x="38.3749%" y="741" width="0.3559%" height="15" fill="rgb(239,76,54)" fg:x="647" fg:w="6"/><text x="38.6249%" y="751.50"></text></g><g><title>deno`v8__Null (1 samples, 0.06%)</title><rect x="38.6714%" y="725" width="0.0593%" height="15" fill="rgb(231,124,27)" fg:x="652" fg:w="1"/><text x="38.9214%" y="735.50"></text></g><g><title>deno`v8::Context::GetNumberOfEmbedderDataFields (8 samples, 0.47%)</title><rect x="39.7983%" y="725" width="0.4745%" height="15" fill="rgb(249,195,6)" fg:x="671" fg:w="8"/><text x="40.0483%" y="735.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (28 samples, 1.66%)</title><rect x="38.7307%" y="741" width="1.6607%" height="15" fill="rgb(237,174,47)" fg:x="653" fg:w="28"/><text x="38.9807%" y="751.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (2 samples, 0.12%)</title><rect x="40.2728%" y="725" width="0.1186%" height="15" fill="rgb(206,201,31)" fg:x="679" fg:w="2"/><text x="40.5228%" y="735.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (3 samples, 0.18%)</title><rect x="40.3915%" y="741" width="0.1779%" height="15" fill="rgb(231,57,52)" fg:x="681" fg:w="3"/><text x="40.6415%" y="751.50"></text></g><g><title>deno`v8::Context::GetNumberOfEmbedderDataFields (2 samples, 0.12%)</title><rect x="40.5694%" y="741" width="0.1186%" height="15" fill="rgb(248,177,22)" fg:x="684" fg:w="2"/><text x="40.8194%" y="751.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (1 samples, 0.06%)</title><rect x="40.6880%" y="741" width="0.0593%" height="15" fill="rgb(215,211,37)" fg:x="686" fg:w="1"/><text x="40.9380%" y="751.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (19 samples, 1.13%)</title><rect x="42.6453%" y="725" width="1.1269%" height="15" fill="rgb(241,128,51)" fg:x="719" fg:w="19"/><text x="42.8953%" y="735.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.12%)</title><rect x="43.6536%" y="709" width="0.1186%" height="15" fill="rgb(227,165,31)" fg:x="736" fg:w="2"/><text x="43.9036%" y="719.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (5 samples, 0.30%)</title><rect x="43.7722%" y="725" width="0.2966%" height="15" fill="rgb(228,167,24)" fg:x="738" fg:w="5"/><text x="44.0222%" y="735.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (8 samples, 0.47%)</title><rect x="44.0688%" y="725" width="0.4745%" height="15" fill="rgb(228,143,12)" fg:x="743" fg:w="8"/><text x="44.3188%" y="735.50"></text></g><g><title>deno`Builtins_JSEntry (12 samples, 0.71%)</title><rect x="45.2550%" y="709" width="0.7117%" height="15" fill="rgb(249,149,8)" fg:x="763" fg:w="12"/><text x="45.5050%" y="719.50"></text></g><g><title>0x11000cb08 (1 samples, 0.06%)</title><rect x="48.1613%" y="677" width="0.0593%" height="15" fill="rgb(243,35,44)" fg:x="812" fg:w="1"/><text x="48.4113%" y="687.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (4 samples, 0.24%)</title><rect x="48.2206%" y="677" width="0.2372%" height="15" fill="rgb(246,89,9)" fg:x="813" fg:w="4"/><text x="48.4706%" y="687.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (1 samples, 0.06%)</title><rect x="48.4579%" y="677" width="0.0593%" height="15" fill="rgb(233,213,13)" fg:x="817" fg:w="1"/><text x="48.7079%" y="687.50"></text></g><g><title>0x11000cb30 (1 samples, 0.06%)</title><rect x="49.2289%" y="661" width="0.0593%" height="15" fill="rgb(233,141,41)" fg:x="830" fg:w="1"/><text x="49.4789%" y="671.50"></text></g><g><title>0x11000cb70 (3 samples, 0.18%)</title><rect x="49.2883%" y="661" width="0.1779%" height="15" fill="rgb(239,167,4)" fg:x="831" fg:w="3"/><text x="49.5383%" y="671.50"></text></g><g><title>0x11000cb74 (2 samples, 0.12%)</title><rect x="49.4662%" y="661" width="0.1186%" height="15" fill="rgb(209,217,16)" fg:x="834" fg:w="2"/><text x="49.7162%" y="671.50"></text></g><g><title>0x11000cb88 (2 samples, 0.12%)</title><rect x="49.5848%" y="661" width="0.1186%" height="15" fill="rgb(219,88,35)" fg:x="836" fg:w="2"/><text x="49.8348%" y="671.50"></text></g><g><title>0x11000cbb8 (3 samples, 0.18%)</title><rect x="49.7034%" y="661" width="0.1779%" height="15" fill="rgb(220,193,23)" fg:x="838" fg:w="3"/><text x="49.9534%" y="671.50"></text></g><g><title>0x11000cbcc (2 samples, 0.12%)</title><rect x="49.8814%" y="661" width="0.1186%" height="15" fill="rgb(230,90,52)" fg:x="841" fg:w="2"/><text x="50.1314%" y="671.50"></text></g><g><title>0x11000cbe0 (1 samples, 0.06%)</title><rect x="50.0000%" y="661" width="0.0593%" height="15" fill="rgb(252,106,19)" fg:x="843" fg:w="1"/><text x="50.2500%" y="671.50"></text></g><g><title>0x11000cc00 (1 samples, 0.06%)</title><rect x="50.0593%" y="661" width="0.0593%" height="15" fill="rgb(206,74,20)" fg:x="844" fg:w="1"/><text x="50.3093%" y="671.50"></text></g><g><title>0x11000cc28 (1 samples, 0.06%)</title><rect x="50.1186%" y="661" width="0.0593%" height="15" fill="rgb(230,138,44)" fg:x="845" fg:w="1"/><text x="50.3686%" y="671.50"></text></g><g><title>0x11000cc48 (2 samples, 0.12%)</title><rect x="50.1779%" y="661" width="0.1186%" height="15" fill="rgb(235,182,43)" fg:x="846" fg:w="2"/><text x="50.4279%" y="671.50"></text></g><g><title>0x11000cc78 (2 samples, 0.12%)</title><rect x="50.2966%" y="661" width="0.1186%" height="15" fill="rgb(242,16,51)" fg:x="848" fg:w="2"/><text x="50.5466%" y="671.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (17 samples, 1.01%)</title><rect x="50.4152%" y="645" width="1.0083%" height="15" fill="rgb(248,9,4)" fg:x="850" fg:w="17"/><text x="50.6652%" y="655.50"></text></g><g><title>deno`Builtins_ResolvePromise (12 samples, 0.71%)</title><rect x="50.7117%" y="629" width="0.7117%" height="15" fill="rgb(210,31,22)" fg:x="855" fg:w="12"/><text x="50.9617%" y="639.50"></text></g><g><title>deno`Builtins_FulfillPromise (8 samples, 0.47%)</title><rect x="50.9490%" y="613" width="0.4745%" height="15" fill="rgb(239,54,39)" fg:x="859" fg:w="8"/><text x="51.1990%" y="623.50"></text></g><g><title>0x11000cc80 (22 samples, 1.30%)</title><rect x="50.4152%" y="661" width="1.3049%" height="15" fill="rgb(230,99,41)" fg:x="850" fg:w="22"/><text x="50.6652%" y="671.50"></text></g><g><title>deno`Builtins_ResolvePromise (5 samples, 0.30%)</title><rect x="51.4235%" y="645" width="0.2966%" height="15" fill="rgb(253,106,12)" fg:x="867" fg:w="5"/><text x="51.6735%" y="655.50"></text></g><g><title>0x11000cc9c (2 samples, 0.12%)</title><rect x="51.7200%" y="661" width="0.1186%" height="15" fill="rgb(213,46,41)" fg:x="872" fg:w="2"/><text x="51.9700%" y="671.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (2 samples, 0.12%)</title><rect x="51.8387%" y="661" width="0.1186%" height="15" fill="rgb(215,133,35)" fg:x="874" fg:w="2"/><text x="52.0887%" y="671.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNotNullOrUndefined (1 samples, 0.06%)</title><rect x="51.9573%" y="661" width="0.0593%" height="15" fill="rgb(213,28,5)" fg:x="876" fg:w="1"/><text x="52.2073%" y="671.50"></text></g><g><title>deno`Builtins_JSEntry (74 samples, 4.39%)</title><rect x="47.6868%" y="693" width="4.3891%" height="15" fill="rgb(215,77,49)" fg:x="804" fg:w="74"/><text x="47.9368%" y="703.50">deno`..</text></g><g><title>deno`Builtins_JSEntryTrampoline (60 samples, 3.56%)</title><rect x="48.5172%" y="677" width="3.5587%" height="15" fill="rgb(248,100,22)" fg:x="818" fg:w="60"/><text x="48.7672%" y="687.50">deno..</text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (1 samples, 0.06%)</title><rect x="52.0166%" y="661" width="0.0593%" height="15" fill="rgb(208,67,9)" fg:x="877" fg:w="1"/><text x="52.2666%" y="671.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (108 samples, 6.41%)</title><rect x="45.9668%" y="709" width="6.4057%" height="15" fill="rgb(219,133,21)" fg:x="775" fg:w="108"/><text x="46.2168%" y="719.50">deno`v8:..</text></g><g><title>deno`v8::internal::SaveContext::SaveContext (5 samples, 0.30%)</title><rect x="52.0759%" y="693" width="0.2966%" height="15" fill="rgb(246,46,29)" fg:x="878" fg:w="5"/><text x="52.3259%" y="703.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (1 samples, 0.06%)</title><rect x="52.3725%" y="709" width="0.0593%" height="15" fill="rgb(246,185,52)" fg:x="883" fg:w="1"/><text x="52.6225%" y="719.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (2 samples, 0.12%)</title><rect x="52.4318%" y="709" width="0.1186%" height="15" fill="rgb(252,136,11)" fg:x="884" fg:w="2"/><text x="52.6818%" y="719.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (6 samples, 0.36%)</title><rect x="52.5504%" y="709" width="0.3559%" height="15" fill="rgb(219,138,53)" fg:x="886" fg:w="6"/><text x="52.8004%" y="719.50"></text></g><g><title>deno`v8::internal::SaveContext::~SaveContext (2 samples, 0.12%)</title><rect x="52.9063%" y="709" width="0.1186%" height="15" fill="rgb(211,51,23)" fg:x="892" fg:w="2"/><text x="53.1563%" y="719.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (1 samples, 0.06%)</title><rect x="53.0249%" y="709" width="0.0593%" height="15" fill="rgb(247,221,28)" fg:x="894" fg:w="1"/><text x="53.2749%" y="719.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (145 samples, 8.60%)</title><rect x="44.5433%" y="725" width="8.6002%" height="15" fill="rgb(251,222,45)" fg:x="751" fg:w="145"/><text x="44.7933%" y="735.50">deno`v8::int..</text></g><g><title>deno`v8::internal::ThrowOnJavascriptExecution::IsAllowed (1 samples, 0.06%)</title><rect x="53.0842%" y="709" width="0.0593%" height="15" fill="rgb(217,162,53)" fg:x="895" fg:w="1"/><text x="53.3342%" y="719.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (211 samples, 12.51%)</title><rect x="40.7473%" y="741" width="12.5148%" height="15" fill="rgb(229,93,14)" fg:x="687" fg:w="211"/><text x="40.9973%" y="751.50">deno`v8::Function::..</text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.12%)</title><rect x="53.1435%" y="725" width="0.1186%" height="15" fill="rgb(209,67,49)" fg:x="896" fg:w="2"/><text x="53.3935%" y="735.50"></text></g><g><title>deno`v8::Integer::New (2 samples, 0.12%)</title><rect x="53.2622%" y="741" width="0.1186%" height="15" fill="rgb(213,87,29)" fg:x="898" fg:w="2"/><text x="53.5122%" y="751.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (5 samples, 0.30%)</title><rect x="53.3808%" y="741" width="0.2966%" height="15" fill="rgb(205,151,52)" fg:x="900" fg:w="5"/><text x="53.6308%" y="751.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (5 samples, 0.30%)</title><rect x="53.6773%" y="741" width="0.2966%" height="15" fill="rgb(253,215,39)" fg:x="905" fg:w="5"/><text x="53.9273%" y="751.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (3 samples, 0.18%)</title><rect x="53.9739%" y="741" width="0.1779%" height="15" fill="rgb(221,220,41)" fg:x="910" fg:w="3"/><text x="54.2239%" y="751.50"></text></g><g><title>deno`v8::Value::IsInt32 (5 samples, 0.30%)</title><rect x="54.1518%" y="741" width="0.2966%" height="15" fill="rgb(218,133,21)" fg:x="913" fg:w="5"/><text x="54.4018%" y="751.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (2 samples, 0.12%)</title><rect x="54.4484%" y="741" width="0.1186%" height="15" fill="rgb(221,193,43)" fg:x="918" fg:w="2"/><text x="54.6984%" y="751.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (3 samples, 0.18%)</title><rect x="54.5670%" y="741" width="0.1779%" height="15" fill="rgb(240,128,52)" fg:x="920" fg:w="3"/><text x="54.8170%" y="751.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (5 samples, 0.30%)</title><rect x="54.7450%" y="741" width="0.2966%" height="15" fill="rgb(253,114,12)" fg:x="923" fg:w="5"/><text x="54.9950%" y="751.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (18 samples, 1.07%)</title><rect x="55.0415%" y="741" width="1.0676%" height="15" fill="rgb(215,223,47)" fg:x="928" fg:w="18"/><text x="55.2915%" y="751.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (14 samples, 0.83%)</title><rect x="56.1091%" y="741" width="0.8304%" height="15" fill="rgb(248,225,23)" fg:x="946" fg:w="14"/><text x="56.3591%" y="751.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (6 samples, 0.36%)</title><rect x="56.9395%" y="741" width="0.3559%" height="15" fill="rgb(250,108,0)" fg:x="960" fg:w="6"/><text x="57.1895%" y="751.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (9 samples, 0.53%)</title><rect x="57.2954%" y="741" width="0.5338%" height="15" fill="rgb(228,208,7)" fg:x="966" fg:w="9"/><text x="57.5454%" y="751.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (9 samples, 0.53%)</title><rect x="57.8292%" y="741" width="0.5338%" height="15" fill="rgb(244,45,10)" fg:x="975" fg:w="9"/><text x="58.0792%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (7 samples, 0.42%)</title><rect x="58.3630%" y="741" width="0.4152%" height="15" fill="rgb(207,125,25)" fg:x="984" fg:w="7"/><text x="58.6130%" y="751.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (3 samples, 0.18%)</title><rect x="58.6002%" y="725" width="0.1779%" height="15" fill="rgb(210,195,18)" fg:x="988" fg:w="3"/><text x="58.8502%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (3 samples, 0.18%)</title><rect x="58.7782%" y="741" width="0.1779%" height="15" fill="rgb(249,80,12)" fg:x="991" fg:w="3"/><text x="59.0282%" y="751.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (6 samples, 0.36%)</title><rect x="58.9561%" y="741" width="0.3559%" height="15" fill="rgb(221,65,9)" fg:x="994" fg:w="6"/><text x="59.2061%" y="751.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (15 samples, 0.89%)</title><rect x="60.2610%" y="725" width="0.8897%" height="15" fill="rgb(235,49,36)" fg:x="1016" fg:w="15"/><text x="60.5110%" y="735.50"></text></g><g><title>deno`v8::internal::GetCurrentStackPosition (3 samples, 0.18%)</title><rect x="60.9727%" y="709" width="0.1779%" height="15" fill="rgb(225,32,20)" fg:x="1028" fg:w="3"/><text x="61.2227%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (33 samples, 1.96%)</title><rect x="59.3120%" y="741" width="1.9573%" height="15" fill="rgb(215,141,46)" fg:x="1000" fg:w="33"/><text x="59.5620%" y="751.50">d..</text></g><g><title>deno`v8::internal::Isolate::RegisterTryCatchHandler (2 samples, 0.12%)</title><rect x="61.1507%" y="725" width="0.1186%" height="15" fill="rgb(250,160,47)" fg:x="1031" fg:w="2"/><text x="61.4007%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (6 samples, 0.36%)</title><rect x="62.1590%" y="725" width="0.3559%" height="15" fill="rgb(216,222,40)" fg:x="1048" fg:w="6"/><text x="62.4090%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (29 samples, 1.72%)</title><rect x="61.2693%" y="741" width="1.7200%" height="15" fill="rgb(234,217,39)" fg:x="1033" fg:w="29"/><text x="61.5193%" y="751.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (8 samples, 0.47%)</title><rect x="62.5148%" y="725" width="0.4745%" height="15" fill="rgb(207,178,40)" fg:x="1054" fg:w="8"/><text x="62.7648%" y="735.50"></text></g><g><title>deno`v8__Context__GetAlignedPointerFromEmbedderData (1 samples, 0.06%)</title><rect x="62.9893%" y="741" width="0.0593%" height="15" fill="rgb(221,136,13)" fg:x="1062" fg:w="1"/><text x="63.2393%" y="751.50"></text></g><g><title>deno`v8__Global__New (31 samples, 1.84%)</title><rect x="63.0486%" y="741" width="1.8387%" height="15" fill="rgb(249,199,10)" fg:x="1063" fg:w="31"/><text x="63.2986%" y="751.50">d..</text></g><g><title>deno`v8::internal::GlobalHandles::Create (17 samples, 1.01%)</title><rect x="63.8790%" y="725" width="1.0083%" height="15" fill="rgb(249,222,13)" fg:x="1077" fg:w="17"/><text x="64.1290%" y="735.50"></text></g><g><title>deno`v8__Isolate__GetData (2 samples, 0.12%)</title><rect x="64.8873%" y="741" width="0.1186%" height="15" fill="rgb(244,185,38)" fg:x="1094" fg:w="2"/><text x="65.1373%" y="751.50"></text></g><g><title>deno`v8__Isolate__SetData (1 samples, 0.06%)</title><rect x="65.0059%" y="741" width="0.0593%" height="15" fill="rgb(236,202,9)" fg:x="1096" fg:w="1"/><text x="65.2559%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.18%)</title><rect x="65.7770%" y="725" width="0.1779%" height="15" fill="rgb(250,229,37)" fg:x="1109" fg:w="3"/><text x="66.0270%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (28 samples, 1.66%)</title><rect x="66.3108%" y="709" width="1.6607%" height="15" fill="rgb(206,174,23)" fg:x="1118" fg:w="28"/><text x="66.5608%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.47%)</title><rect x="67.4970%" y="693" width="0.4745%" height="15" fill="rgb(211,33,43)" fg:x="1138" fg:w="8"/><text x="67.7470%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (50 samples, 2.97%)</title><rect x="65.0652%" y="741" width="2.9656%" height="15" fill="rgb(245,58,50)" fg:x="1097" fg:w="50"/><text x="65.3152%" y="751.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 2.08%)</title><rect x="65.9549%" y="725" width="2.0759%" height="15" fill="rgb(244,68,36)" fg:x="1112" fg:w="35"/><text x="66.2049%" y="735.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.06%)</title><rect x="67.9715%" y="709" width="0.0593%" height="15" fill="rgb(232,229,15)" fg:x="1146" fg:w="1"/><text x="68.2215%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.12%)</title><rect x="68.0308%" y="741" width="0.1186%" height="15" fill="rgb(254,30,23)" fg:x="1147" fg:w="2"/><text x="68.2808%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 1.84%)</title><rect x="68.1495%" y="741" width="1.8387%" height="15" fill="rgb(235,160,14)" fg:x="1149" fg:w="31"/><text x="68.3995%" y="751.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.65%)</title><rect x="69.3357%" y="725" width="0.6524%" height="15" fill="rgb(212,155,44)" fg:x="1169" fg:w="11"/><text x="69.5857%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.06%)</title><rect x="69.9881%" y="741" width="0.0593%" height="15" fill="rgb(226,2,50)" fg:x="1180" fg:w="1"/><text x="70.2381%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.83%)</title><rect x="70.0474%" y="741" width="0.8304%" height="15" fill="rgb(234,177,6)" fg:x="1181" fg:w="14"/><text x="70.2974%" y="751.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (705 samples, 41.81%)</title><rect x="29.2408%" y="757" width="41.8149%" height="15" fill="rgb(217,24,9)" fg:x="493" fg:w="705"/><text x="29.4908%" y="767.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.18%)</title><rect x="70.8778%" y="741" width="0.1779%" height="15" fill="rgb(220,13,46)" fg:x="1195" fg:w="3"/><text x="71.1278%" y="751.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.24%)</title><rect x="71.0558%" y="757" width="0.2372%" height="15" fill="rgb(239,221,27)" fg:x="1198" fg:w="4"/><text x="71.3058%" y="767.50"></text></g><g><title>deno`DYLD-STUB$$free (5 samples, 0.30%)</title><rect x="71.2930%" y="757" width="0.2966%" height="15" fill="rgb(222,198,25)" fg:x="1202" fg:w="5"/><text x="71.5430%" y="767.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.06%)</title><rect x="71.5896%" y="757" width="0.0593%" height="15" fill="rgb(211,99,13)" fg:x="1207" fg:w="1"/><text x="71.8396%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (6 samples, 0.36%)</title><rect x="71.6489%" y="757" width="0.3559%" height="15" fill="rgb(232,111,31)" fg:x="1208" fg:w="6"/><text x="71.8989%" y="767.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (1 samples, 0.06%)</title><rect x="72.0047%" y="757" width="0.0593%" height="15" fill="rgb(245,82,37)" fg:x="1214" fg:w="1"/><text x="72.2547%" y="767.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (3 samples, 0.18%)</title><rect x="72.0641%" y="757" width="0.1779%" height="15" fill="rgb(227,149,46)" fg:x="1215" fg:w="3"/><text x="72.3141%" y="767.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (3 samples, 0.18%)</title><rect x="72.2420%" y="757" width="0.1779%" height="15" fill="rgb(218,36,50)" fg:x="1218" fg:w="3"/><text x="72.4920%" y="767.50"></text></g><g><title>deno`futures_task::noop_waker::noop (2 samples, 0.12%)</title><rect x="72.4199%" y="757" width="0.1186%" height="15" fill="rgb(226,80,48)" fg:x="1221" fg:w="2"/><text x="72.6699%" y="767.50"></text></g><g><title>deno`v8::External::Value (5 samples, 0.30%)</title><rect x="72.5386%" y="757" width="0.2966%" height="15" fill="rgb(238,224,15)" fg:x="1223" fg:w="5"/><text x="72.7886%" y="767.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (1 samples, 0.06%)</title><rect x="72.8351%" y="757" width="0.0593%" height="15" fill="rgb(241,136,10)" fg:x="1228" fg:w="1"/><text x="73.0851%" y="767.50"></text></g><g><title>deno`v8::Integer::New (3 samples, 0.18%)</title><rect x="72.8944%" y="757" width="0.1779%" height="15" fill="rgb(208,32,45)" fg:x="1229" fg:w="3"/><text x="73.1444%" y="767.50"></text></g><g><title>deno`v8::Integer::Value (5 samples, 0.30%)</title><rect x="73.0724%" y="757" width="0.2966%" height="15" fill="rgb(207,135,9)" fg:x="1232" fg:w="5"/><text x="73.3224%" y="767.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (9 samples, 0.53%)</title><rect x="73.3689%" y="757" width="0.5338%" height="15" fill="rgb(206,86,44)" fg:x="1237" fg:w="9"/><text x="73.6189%" y="767.50"></text></g><g><title>deno`v8::handle::HandleHost::get_isolate (1 samples, 0.06%)</title><rect x="73.9027%" y="757" width="0.0593%" height="15" fill="rgb(245,177,15)" fg:x="1246" fg:w="1"/><text x="74.1527%" y="767.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (7 samples, 0.42%)</title><rect x="73.9620%" y="757" width="0.4152%" height="15" fill="rgb(206,64,50)" fg:x="1247" fg:w="7"/><text x="74.2120%" y="767.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (2 samples, 0.12%)</title><rect x="74.3772%" y="757" width="0.1186%" height="15" fill="rgb(234,36,40)" fg:x="1254" fg:w="2"/><text x="74.6272%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (4 samples, 0.24%)</title><rect x="74.4958%" y="757" width="0.2372%" height="15" fill="rgb(213,64,8)" fg:x="1256" fg:w="4"/><text x="74.7458%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (1 samples, 0.06%)</title><rect x="74.7331%" y="757" width="0.0593%" height="15" fill="rgb(210,75,36)" fg:x="1260" fg:w="1"/><text x="74.9831%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (1 samples, 0.06%)</title><rect x="74.7924%" y="757" width="0.0593%" height="15" fill="rgb(229,88,21)" fg:x="1261" fg:w="1"/><text x="75.0424%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (5 samples, 0.30%)</title><rect x="74.8517%" y="757" width="0.2966%" height="15" fill="rgb(252,204,47)" fg:x="1262" fg:w="5"/><text x="75.1017%" y="767.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (5 samples, 0.30%)</title><rect x="75.1483%" y="757" width="0.2966%" height="15" fill="rgb(208,77,27)" fg:x="1267" fg:w="5"/><text x="75.3983%" y="767.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__Data (1 samples, 0.06%)</title><rect x="75.4448%" y="757" width="0.0593%" height="15" fill="rgb(221,76,26)" fg:x="1272" fg:w="1"/><text x="75.6948%" y="767.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (1 samples, 0.06%)</title><rect x="75.5042%" y="757" width="0.0593%" height="15" fill="rgb(225,139,18)" fg:x="1273" fg:w="1"/><text x="75.7542%" y="767.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetIsolate (2 samples, 0.12%)</title><rect x="75.5635%" y="757" width="0.1186%" height="15" fill="rgb(230,137,11)" fg:x="1274" fg:w="2"/><text x="75.8135%" y="767.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetReturnValue (3 samples, 0.18%)</title><rect x="75.6821%" y="757" width="0.1779%" height="15" fill="rgb(212,28,1)" fg:x="1276" fg:w="3"/><text x="75.9321%" y="767.50"></text></g><g><title>deno`v8__Global__New (4 samples, 0.24%)</title><rect x="75.8600%" y="757" width="0.2372%" height="15" fill="rgb(248,164,17)" fg:x="1279" fg:w="4"/><text x="76.1100%" y="767.50"></text></g><g><title>deno`v8__Undefined (1 samples, 0.06%)</title><rect x="76.0973%" y="757" width="0.0593%" height="15" fill="rgb(222,171,42)" fg:x="1283" fg:w="1"/><text x="76.3473%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.24%)</title><rect x="76.1566%" y="757" width="0.2372%" height="15" fill="rgb(243,84,45)" fg:x="1284" fg:w="4"/><text x="76.4066%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.24%)</title><rect x="76.3938%" y="757" width="0.2372%" height="15" fill="rgb(252,49,23)" fg:x="1288" fg:w="4"/><text x="76.6438%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.24%)</title><rect x="76.6311%" y="757" width="0.2372%" height="15" fill="rgb(215,19,7)" fg:x="1292" fg:w="4"/><text x="76.8811%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.24%)</title><rect x="76.8683%" y="757" width="0.2372%" height="15" fill="rgb(238,81,41)" fg:x="1296" fg:w="4"/><text x="77.1183%" y="767.50"></text></g><g><title>0x11001036c (835 samples, 49.53%)</title><rect x="27.7580%" y="789" width="49.5255%" height="15" fill="rgb(210,199,37)" fg:x="468" fg:w="835"/><text x="28.0080%" y="799.50">0x11001036c</text></g><g><title>deno`Builtins_CallApiCallback (826 samples, 48.99%)</title><rect x="28.2918%" y="773" width="48.9917%" height="15" fill="rgb(244,192,49)" fg:x="477" fg:w="826"/><text x="28.5418%" y="783.50">deno`Builtins_CallApiCallback</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.18%)</title><rect x="77.1056%" y="757" width="0.1779%" height="15" fill="rgb(226,211,11)" fg:x="1300" fg:w="3"/><text x="77.3556%" y="767.50"></text></g><g><title>0x11001037c (1 samples, 0.06%)</title><rect x="77.2835%" y="789" width="0.0593%" height="15" fill="rgb(236,162,54)" fg:x="1303" fg:w="1"/><text x="77.5335%" y="799.50"></text></g><g><title>0x1100103b0 (1 samples, 0.06%)</title><rect x="77.3428%" y="789" width="0.0593%" height="15" fill="rgb(220,229,9)" fg:x="1304" fg:w="1"/><text x="77.5928%" y="799.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (5 samples, 0.30%)</title><rect x="77.4021%" y="773" width="0.2966%" height="15" fill="rgb(250,87,22)" fg:x="1305" fg:w="5"/><text x="77.6521%" y="783.50"></text></g><g><title>0x1100103d8 (28 samples, 1.66%)</title><rect x="77.4021%" y="789" width="1.6607%" height="15" fill="rgb(239,43,17)" fg:x="1305" fg:w="28"/><text x="77.6521%" y="799.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (23 samples, 1.36%)</title><rect x="77.6987%" y="773" width="1.3642%" height="15" fill="rgb(231,177,25)" fg:x="1310" fg:w="23"/><text x="77.9487%" y="783.50"></text></g><g><title>0x1100103e4 (5 samples, 0.30%)</title><rect x="79.0629%" y="789" width="0.2966%" height="15" fill="rgb(219,179,1)" fg:x="1333" fg:w="5"/><text x="79.3129%" y="799.50"></text></g><g><title>0x1100103f4 (3 samples, 0.18%)</title><rect x="79.3594%" y="789" width="0.1779%" height="15" fill="rgb(238,219,53)" fg:x="1338" fg:w="3"/><text x="79.6094%" y="799.50"></text></g><g><title>0x11001044c (1 samples, 0.06%)</title><rect x="79.5374%" y="789" width="0.0593%" height="15" fill="rgb(232,167,36)" fg:x="1341" fg:w="1"/><text x="79.7874%" y="799.50"></text></g><g><title>0x1100104b0 (3 samples, 0.18%)</title><rect x="79.5967%" y="789" width="0.1779%" height="15" fill="rgb(244,19,51)" fg:x="1342" fg:w="3"/><text x="79.8467%" y="799.50"></text></g><g><title>0x1100104c0 (1 samples, 0.06%)</title><rect x="79.7746%" y="789" width="0.0593%" height="15" fill="rgb(224,6,22)" fg:x="1345" fg:w="1"/><text x="80.0246%" y="799.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (7 samples, 0.42%)</title><rect x="81.9098%" y="597" width="0.4152%" height="15" fill="rgb(224,145,5)" fg:x="1381" fg:w="7"/><text x="82.1598%" y="607.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (11 samples, 0.65%)</title><rect x="81.9098%" y="613" width="0.6524%" height="15" fill="rgb(234,130,49)" fg:x="1381" fg:w="11"/><text x="82.1598%" y="623.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (4 samples, 0.24%)</title><rect x="82.3250%" y="597" width="0.2372%" height="15" fill="rgb(254,6,2)" fg:x="1388" fg:w="4"/><text x="82.5750%" y="607.50"></text></g><g><title>deno`v8::internal::InvalidatedSlotsFilter::IsValid (1 samples, 0.06%)</title><rect x="82.5623%" y="549" width="0.0593%" height="15" fill="rgb(208,96,46)" fg:x="1392" fg:w="1"/><text x="82.8123%" y="559.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.12%)</title><rect x="82.5623%" y="613" width="0.1186%" height="15" fill="rgb(239,3,39)" fg:x="1392" fg:w="2"/><text x="82.8123%" y="623.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.12%)</title><rect x="82.5623%" y="597" width="0.1186%" height="15" fill="rgb(233,210,1)" fg:x="1392" fg:w="2"/><text x="82.8123%" y="607.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.12%)</title><rect x="82.5623%" y="581" width="0.1186%" height="15" fill="rgb(244,137,37)" fg:x="1392" fg:w="2"/><text x="82.8123%" y="591.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (2 samples, 0.12%)</title><rect x="82.5623%" y="565" width="0.1186%" height="15" fill="rgb(240,136,2)" fg:x="1392" fg:w="2"/><text x="82.8123%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="82.6216%" y="549" width="0.0593%" height="15" fill="rgb(239,18,37)" fg:x="1393" fg:w="1"/><text x="82.8716%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="82.6216%" y="533" width="0.0593%" height="15" fill="rgb(218,185,22)" fg:x="1393" fg:w="1"/><text x="82.8716%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="82.6216%" y="517" width="0.0593%" height="15" fill="rgb(225,218,4)" fg:x="1393" fg:w="1"/><text x="82.8716%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="82.6216%" y="501" width="0.0593%" height="15" fill="rgb(230,182,32)" fg:x="1393" fg:w="1"/><text x="82.8716%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="82.6216%" y="485" width="0.0593%" height="15" fill="rgb(242,56,43)" fg:x="1393" fg:w="1"/><text x="82.8716%" y="495.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (15 samples, 0.89%)</title><rect x="81.8505%" y="757" width="0.8897%" height="15" fill="rgb(233,99,24)" fg:x="1380" fg:w="15"/><text x="82.1005%" y="767.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (15 samples, 0.89%)</title><rect x="81.8505%" y="741" width="0.8897%" height="15" fill="rgb(234,209,42)" fg:x="1380" fg:w="15"/><text x="82.1005%" y="751.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (15 samples, 0.89%)</title><rect x="81.8505%" y="725" width="0.8897%" height="15" fill="rgb(227,7,12)" fg:x="1380" fg:w="15"/><text x="82.1005%" y="735.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (15 samples, 0.89%)</title><rect x="81.8505%" y="709" width="0.8897%" height="15" fill="rgb(245,203,43)" fg:x="1380" fg:w="15"/><text x="82.1005%" y="719.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (15 samples, 0.89%)</title><rect x="81.8505%" y="693" width="0.8897%" height="15" fill="rgb(238,205,33)" fg:x="1380" fg:w="15"/><text x="82.1005%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (15 samples, 0.89%)</title><rect x="81.8505%" y="677" width="0.8897%" height="15" fill="rgb(231,56,7)" fg:x="1380" fg:w="15"/><text x="82.1005%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (15 samples, 0.89%)</title><rect x="81.8505%" y="661" width="0.8897%" height="15" fill="rgb(244,186,29)" fg:x="1380" fg:w="15"/><text x="82.1005%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (15 samples, 0.89%)</title><rect x="81.8505%" y="645" width="0.8897%" height="15" fill="rgb(234,111,31)" fg:x="1380" fg:w="15"/><text x="82.1005%" y="655.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (15 samples, 0.89%)</title><rect x="81.8505%" y="629" width="0.8897%" height="15" fill="rgb(241,149,10)" fg:x="1380" fg:w="15"/><text x="82.1005%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="82.6809%" y="613" width="0.0593%" height="15" fill="rgb(249,206,44)" fg:x="1394" fg:w="1"/><text x="82.9309%" y="623.50"></text></g><g><title>0x1100104ec (74 samples, 4.39%)</title><rect x="79.8339%" y="789" width="4.3891%" height="15" fill="rgb(251,153,30)" fg:x="1346" fg:w="74"/><text x="80.0839%" y="799.50">0x110..</text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (74 samples, 4.39%)</title><rect x="79.8339%" y="773" width="4.3891%" height="15" fill="rgb(239,152,38)" fg:x="1346" fg:w="74"/><text x="80.0839%" y="783.50">deno`..</text></g><g><title>deno`Builtins_PerformPromiseThen (25 samples, 1.48%)</title><rect x="82.7402%" y="757" width="1.4828%" height="15" fill="rgb(249,139,47)" fg:x="1395" fg:w="25"/><text x="82.9902%" y="767.50"></text></g><g><title>0x11001051c (1 samples, 0.06%)</title><rect x="84.2230%" y="789" width="0.0593%" height="15" fill="rgb(244,64,35)" fg:x="1420" fg:w="1"/><text x="84.4730%" y="799.50"></text></g><g><title>0x110010528 (2 samples, 0.12%)</title><rect x="84.2823%" y="789" width="0.1186%" height="15" fill="rgb(216,46,15)" fg:x="1421" fg:w="2"/><text x="84.5323%" y="799.50"></text></g><g><title>0x110010558 (1 samples, 0.06%)</title><rect x="84.4009%" y="789" width="0.0593%" height="15" fill="rgb(250,74,19)" fg:x="1423" fg:w="1"/><text x="84.6509%" y="799.50"></text></g><g><title>libsystem_c.dylib`__Bfree_D2A (1 samples, 0.06%)</title><rect x="84.4603%" y="597" width="0.0593%" height="15" fill="rgb(249,42,33)" fg:x="1424" fg:w="1"/><text x="84.7103%" y="607.50"></text></g><g><title>libsystem_c.dylib`__d2b_D2A (1 samples, 0.06%)</title><rect x="84.5196%" y="581" width="0.0593%" height="15" fill="rgb(242,149,17)" fg:x="1425" fg:w="1"/><text x="84.7696%" y="591.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (3 samples, 0.18%)</title><rect x="84.4603%" y="677" width="0.1779%" height="15" fill="rgb(244,29,21)" fg:x="1424" fg:w="3"/><text x="84.7103%" y="687.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (3 samples, 0.18%)</title><rect x="84.4603%" y="661" width="0.1779%" height="15" fill="rgb(220,130,37)" fg:x="1424" fg:w="3"/><text x="84.7103%" y="671.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (3 samples, 0.18%)</title><rect x="84.4603%" y="645" width="0.1779%" height="15" fill="rgb(211,67,2)" fg:x="1424" fg:w="3"/><text x="84.7103%" y="655.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (3 samples, 0.18%)</title><rect x="84.4603%" y="629" width="0.1779%" height="15" fill="rgb(235,68,52)" fg:x="1424" fg:w="3"/><text x="84.7103%" y="639.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (3 samples, 0.18%)</title><rect x="84.4603%" y="613" width="0.1779%" height="15" fill="rgb(246,142,3)" fg:x="1424" fg:w="3"/><text x="84.7103%" y="623.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (2 samples, 0.12%)</title><rect x="84.5196%" y="597" width="0.1186%" height="15" fill="rgb(241,25,7)" fg:x="1425" fg:w="2"/><text x="84.7696%" y="607.50"></text></g><g><title>libsystem_c.dylib`__dtoa (1 samples, 0.06%)</title><rect x="84.5789%" y="581" width="0.0593%" height="15" fill="rgb(242,119,39)" fg:x="1426" fg:w="1"/><text x="84.8289%" y="591.50"></text></g><g><title>libsystem_c.dylib`__d2b_D2A (1 samples, 0.06%)</title><rect x="84.5789%" y="565" width="0.0593%" height="15" fill="rgb(241,98,45)" fg:x="1426" fg:w="1"/><text x="84.8289%" y="575.50"></text></g><g><title>libsystem_c.dylib`__Balloc_D2A (1 samples, 0.06%)</title><rect x="84.5789%" y="549" width="0.0593%" height="15" fill="rgb(254,28,30)" fg:x="1426" fg:w="1"/><text x="84.8289%" y="559.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionPrologueInSafepoint (1 samples, 0.06%)</title><rect x="84.6382%" y="661" width="0.0593%" height="15" fill="rgb(241,142,54)" fg:x="1427" fg:w="1"/><text x="84.8882%" y="671.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::Grow (1 samples, 0.06%)</title><rect x="84.6382%" y="645" width="0.0593%" height="15" fill="rgb(222,85,15)" fg:x="1427" fg:w="1"/><text x="84.8882%" y="655.50"></text></g><g><title>deno`v8::internal::SemiSpace::GrowTo (1 samples, 0.06%)</title><rect x="84.6382%" y="629" width="0.0593%" height="15" fill="rgb(210,85,47)" fg:x="1427" fg:w="1"/><text x="84.8882%" y="639.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (1 samples, 0.06%)</title><rect x="84.6382%" y="613" width="0.0593%" height="15" fill="rgb(224,206,25)" fg:x="1427" fg:w="1"/><text x="84.8882%" y="623.50"></text></g><g><title>deno`v8::internal::Page::Page (1 samples, 0.06%)</title><rect x="84.6382%" y="597" width="0.0593%" height="15" fill="rgb(243,201,19)" fg:x="1427" fg:w="1"/><text x="84.8882%" y="607.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (1 samples, 0.06%)</title><rect x="84.6382%" y="581" width="0.0593%" height="15" fill="rgb(236,59,4)" fg:x="1427" fg:w="1"/><text x="84.8882%" y="591.50"></text></g><g><title>deno`v8::internal::BasicMemoryChunk::BasicMemoryChunk (1 samples, 0.06%)</title><rect x="84.6382%" y="565" width="0.0593%" height="15" fill="rgb(254,179,45)" fg:x="1427" fg:w="1"/><text x="84.8882%" y="575.50"></text></g><g><title>deno`v8::base::TimeTicks::Now (1 samples, 0.06%)</title><rect x="84.6975%" y="629" width="0.0593%" height="15" fill="rgb(226,14,10)" fg:x="1428" fg:w="1"/><text x="84.9475%" y="639.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (15 samples, 0.89%)</title><rect x="84.7568%" y="613" width="0.8897%" height="15" fill="rgb(244,27,41)" fg:x="1429" fg:w="15"/><text x="85.0068%" y="623.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (14 samples, 0.83%)</title><rect x="85.6465%" y="613" width="0.8304%" height="15" fill="rgb(235,35,32)" fg:x="1444" fg:w="14"/><text x="85.8965%" y="623.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (30 samples, 1.78%)</title><rect x="84.7568%" y="629" width="1.7794%" height="15" fill="rgb(218,68,31)" fg:x="1429" fg:w="30"/><text x="85.0068%" y="639.50">d..</text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointers (1 samples, 0.06%)</title><rect x="86.4769%" y="613" width="0.0593%" height="15" fill="rgb(207,120,37)" fg:x="1458" fg:w="1"/><text x="86.7269%" y="623.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::FullHeapObjectSlot&gt; (1 samples, 0.06%)</title><rect x="86.4769%" y="597" width="0.0593%" height="15" fill="rgb(227,98,0)" fg:x="1458" fg:w="1"/><text x="86.7269%" y="607.50"></text></g><g><title>deno`v8::internal::IndexGenerator::IndexGenerator (1 samples, 0.06%)</title><rect x="86.5362%" y="629" width="0.0593%" height="15" fill="rgb(207,7,3)" fg:x="1459" fg:w="1"/><text x="86.7862%" y="639.50"></text></g><g><title>deno`v8::internal::Relocatable::Iterate (1 samples, 0.06%)</title><rect x="86.5955%" y="629" width="0.0593%" height="15" fill="rgb(206,98,19)" fg:x="1460" fg:w="1"/><text x="86.8455%" y="639.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (4 samples, 0.24%)</title><rect x="86.6548%" y="613" width="0.2372%" height="15" fill="rgb(217,5,26)" fg:x="1461" fg:w="4"/><text x="86.9048%" y="623.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (4 samples, 0.24%)</title><rect x="86.6548%" y="597" width="0.2372%" height="15" fill="rgb(235,190,38)" fg:x="1461" fg:w="4"/><text x="86.9048%" y="607.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (4 samples, 0.24%)</title><rect x="86.6548%" y="581" width="0.2372%" height="15" fill="rgb(247,86,24)" fg:x="1461" fg:w="4"/><text x="86.9048%" y="591.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (6 samples, 0.36%)</title><rect x="86.6548%" y="629" width="0.3559%" height="15" fill="rgb(205,101,16)" fg:x="1461" fg:w="6"/><text x="86.9048%" y="639.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (2 samples, 0.12%)</title><rect x="86.8921%" y="613" width="0.1186%" height="15" fill="rgb(246,168,33)" fg:x="1465" fg:w="2"/><text x="87.1421%" y="623.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (2 samples, 0.12%)</title><rect x="86.8921%" y="597" width="0.1186%" height="15" fill="rgb(231,114,1)" fg:x="1465" fg:w="2"/><text x="87.1421%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.12%)</title><rect x="86.8921%" y="581" width="0.1186%" height="15" fill="rgb(207,184,53)" fg:x="1465" fg:w="2"/><text x="87.1421%" y="591.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (40 samples, 2.37%)</title><rect x="84.6975%" y="645" width="2.3725%" height="15" fill="rgb(224,95,51)" fg:x="1428" fg:w="40"/><text x="84.9475%" y="655.50">de..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="87.0107%" y="629" width="0.0593%" height="15" fill="rgb(212,188,45)" fg:x="1467" fg:w="1"/><text x="87.2607%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="87.0107%" y="613" width="0.0593%" height="15" fill="rgb(223,154,38)" fg:x="1467" fg:w="1"/><text x="87.2607%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="87.0107%" y="597" width="0.0593%" height="15" fill="rgb(251,22,52)" fg:x="1467" fg:w="1"/><text x="87.2607%" y="607.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (41 samples, 2.43%)</title><rect x="84.6975%" y="661" width="2.4318%" height="15" fill="rgb(229,209,22)" fg:x="1428" fg:w="41"/><text x="84.9475%" y="671.50">de..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.06%)</title><rect x="87.0700%" y="645" width="0.0593%" height="15" fill="rgb(234,138,34)" fg:x="1468" fg:w="1"/><text x="87.3200%" y="655.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (47 samples, 2.79%)</title><rect x="84.4603%" y="725" width="2.7877%" height="15" fill="rgb(212,95,11)" fg:x="1424" fg:w="47"/><text x="84.7103%" y="735.50">de..</text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (47 samples, 2.79%)</title><rect x="84.4603%" y="709" width="2.7877%" height="15" fill="rgb(240,179,47)" fg:x="1424" fg:w="47"/><text x="84.7103%" y="719.50">de..</text></g><g><title>deno`v8::internal::Heap::CollectGarbage (47 samples, 2.79%)</title><rect x="84.4603%" y="693" width="2.7877%" height="15" fill="rgb(240,163,11)" fg:x="1424" fg:w="47"/><text x="84.7103%" y="703.50">de..</text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (44 samples, 2.61%)</title><rect x="84.6382%" y="677" width="2.6097%" height="15" fill="rgb(236,37,12)" fg:x="1427" fg:w="44"/><text x="84.8882%" y="687.50">de..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.12%)</title><rect x="87.1293%" y="661" width="0.1186%" height="15" fill="rgb(232,164,16)" fg:x="1469" fg:w="2"/><text x="87.3793%" y="671.50"></text></g><g><title>0x110010880 (48 samples, 2.85%)</title><rect x="84.4603%" y="789" width="2.8470%" height="15" fill="rgb(244,205,15)" fg:x="1424" fg:w="48"/><text x="84.7103%" y="799.50">0x..</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (48 samples, 2.85%)</title><rect x="84.4603%" y="773" width="2.8470%" height="15" fill="rgb(223,117,47)" fg:x="1424" fg:w="48"/><text x="84.7103%" y="783.50">de..</text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (48 samples, 2.85%)</title><rect x="84.4603%" y="757" width="2.8470%" height="15" fill="rgb(244,107,35)" fg:x="1424" fg:w="48"/><text x="84.7103%" y="767.50">de..</text></g><g><title>deno`v8::internal::Factory::NewFillerObject (48 samples, 2.85%)</title><rect x="84.4603%" y="741" width="2.8470%" height="15" fill="rgb(205,140,8)" fg:x="1424" fg:w="48"/><text x="84.7103%" y="751.50">de..</text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.06%)</title><rect x="87.2479%" y="725" width="0.0593%" height="15" fill="rgb(228,84,46)" fg:x="1471" fg:w="1"/><text x="87.4979%" y="735.50"></text></g><g><title>deno`v8::internal::SpaceWithLinearArea::AdvanceAllocationObservers (1 samples, 0.06%)</title><rect x="87.2479%" y="709" width="0.0593%" height="15" fill="rgb(254,188,9)" fg:x="1471" fg:w="1"/><text x="87.4979%" y="719.50"></text></g><g><title>deno`std::__1::__shared_mutex_base::lock (1 samples, 0.06%)</title><rect x="87.2479%" y="693" width="0.0593%" height="15" fill="rgb(206,112,54)" fg:x="1471" fg:w="1"/><text x="87.4979%" y="703.50"></text></g><g><title>deno`std::__1::mutex::lock (1 samples, 0.06%)</title><rect x="87.2479%" y="677" width="0.0593%" height="15" fill="rgb(216,84,49)" fg:x="1471" fg:w="1"/><text x="87.4979%" y="687.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.06%)</title><rect x="87.2479%" y="661" width="0.0593%" height="15" fill="rgb(214,194,35)" fg:x="1471" fg:w="1"/><text x="87.4979%" y="671.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (5 samples, 0.30%)</title><rect x="87.3072%" y="613" width="0.2966%" height="15" fill="rgb(249,28,3)" fg:x="1472" fg:w="5"/><text x="87.5572%" y="623.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (9 samples, 0.53%)</title><rect x="87.3072%" y="629" width="0.5338%" height="15" fill="rgb(222,56,52)" fg:x="1472" fg:w="9"/><text x="87.5572%" y="639.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (4 samples, 0.24%)</title><rect x="87.6038%" y="613" width="0.2372%" height="15" fill="rgb(245,217,50)" fg:x="1477" fg:w="4"/><text x="87.8538%" y="623.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (1 samples, 0.06%)</title><rect x="87.8410%" y="581" width="0.0593%" height="15" fill="rgb(213,201,24)" fg:x="1481" fg:w="1"/><text x="88.0910%" y="591.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.12%)</title><rect x="87.8410%" y="613" width="0.1186%" height="15" fill="rgb(248,116,28)" fg:x="1481" fg:w="2"/><text x="88.0910%" y="623.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.12%)</title><rect x="87.8410%" y="597" width="0.1186%" height="15" fill="rgb(219,72,43)" fg:x="1481" fg:w="2"/><text x="88.0910%" y="607.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::MonotonicallyIncreasingTime (1 samples, 0.06%)</title><rect x="87.9004%" y="581" width="0.0593%" height="15" fill="rgb(209,138,14)" fg:x="1482" fg:w="1"/><text x="88.1504%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.06%)</title><rect x="87.9004%" y="565" width="0.0593%" height="15" fill="rgb(222,18,33)" fg:x="1482" fg:w="1"/><text x="88.1504%" y="575.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (3 samples, 0.18%)</title><rect x="87.8410%" y="629" width="0.1779%" height="15" fill="rgb(213,199,7)" fg:x="1481" fg:w="3"/><text x="88.0910%" y="639.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (1 samples, 0.06%)</title><rect x="87.9597%" y="613" width="0.0593%" height="15" fill="rgb(250,110,10)" fg:x="1483" fg:w="1"/><text x="88.2097%" y="623.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (1 samples, 0.06%)</title><rect x="87.9597%" y="597" width="0.0593%" height="15" fill="rgb(248,123,6)" fg:x="1483" fg:w="1"/><text x="88.2097%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.06%)</title><rect x="87.9597%" y="581" width="0.0593%" height="15" fill="rgb(206,91,31)" fg:x="1483" fg:w="1"/><text x="88.2097%" y="591.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (13 samples, 0.77%)</title><rect x="87.3072%" y="725" width="0.7711%" height="15" fill="rgb(211,154,13)" fg:x="1472" fg:w="13"/><text x="87.5572%" y="735.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (13 samples, 0.77%)</title><rect x="87.3072%" y="709" width="0.7711%" height="15" fill="rgb(225,148,7)" fg:x="1472" fg:w="13"/><text x="87.5572%" y="719.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (13 samples, 0.77%)</title><rect x="87.3072%" y="693" width="0.7711%" height="15" fill="rgb(220,160,43)" fg:x="1472" fg:w="13"/><text x="87.5572%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (13 samples, 0.77%)</title><rect x="87.3072%" y="677" width="0.7711%" height="15" fill="rgb(213,52,39)" fg:x="1472" fg:w="13"/><text x="87.5572%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (13 samples, 0.77%)</title><rect x="87.3072%" y="661" width="0.7711%" height="15" fill="rgb(243,137,7)" fg:x="1472" fg:w="13"/><text x="87.5572%" y="671.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (13 samples, 0.77%)</title><rect x="87.3072%" y="645" width="0.7711%" height="15" fill="rgb(230,79,13)" fg:x="1472" fg:w="13"/><text x="87.5572%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.06%)</title><rect x="88.0190%" y="629" width="0.0593%" height="15" fill="rgb(247,105,23)" fg:x="1484" fg:w="1"/><text x="88.2690%" y="639.50"></text></g><g><title>0x1100108c0 (14 samples, 0.83%)</title><rect x="87.3072%" y="789" width="0.8304%" height="15" fill="rgb(223,179,41)" fg:x="1472" fg:w="14"/><text x="87.5572%" y="799.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (14 samples, 0.83%)</title><rect x="87.3072%" y="773" width="0.8304%" height="15" fill="rgb(218,9,34)" fg:x="1472" fg:w="14"/><text x="87.5572%" y="783.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (14 samples, 0.83%)</title><rect x="87.3072%" y="757" width="0.8304%" height="15" fill="rgb(222,106,8)" fg:x="1472" fg:w="14"/><text x="87.5572%" y="767.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (14 samples, 0.83%)</title><rect x="87.3072%" y="741" width="0.8304%" height="15" fill="rgb(211,220,0)" fg:x="1472" fg:w="14"/><text x="87.5572%" y="751.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.06%)</title><rect x="88.0783%" y="725" width="0.0593%" height="15" fill="rgb(229,52,16)" fg:x="1485" fg:w="1"/><text x="88.3283%" y="735.50"></text></g><g><title>deno`std::__1::__shared_mutex_base::lock (1 samples, 0.06%)</title><rect x="88.0783%" y="709" width="0.0593%" height="15" fill="rgb(212,155,18)" fg:x="1485" fg:w="1"/><text x="88.3283%" y="719.50"></text></g><g><title>0x110010a10 (1 samples, 0.06%)</title><rect x="88.1376%" y="789" width="0.0593%" height="15" fill="rgb(242,21,14)" fg:x="1486" fg:w="1"/><text x="88.3876%" y="799.50"></text></g><g><title>0x110010a40 (4 samples, 0.24%)</title><rect x="88.1969%" y="789" width="0.2372%" height="15" fill="rgb(222,19,48)" fg:x="1487" fg:w="4"/><text x="88.4469%" y="799.50"></text></g><g><title>0x110010aa0 (1 samples, 0.06%)</title><rect x="88.4342%" y="789" width="0.0593%" height="15" fill="rgb(232,45,27)" fg:x="1491" fg:w="1"/><text x="88.6842%" y="799.50"></text></g><g><title>0x110010b00 (2 samples, 0.12%)</title><rect x="88.4935%" y="789" width="0.1186%" height="15" fill="rgb(249,103,42)" fg:x="1492" fg:w="2"/><text x="88.7435%" y="799.50"></text></g><g><title>0x110010b90 (1 samples, 0.06%)</title><rect x="88.6121%" y="789" width="0.0593%" height="15" fill="rgb(246,81,33)" fg:x="1494" fg:w="1"/><text x="88.8621%" y="799.50"></text></g><g><title>0x110010ba8 (1 samples, 0.06%)</title><rect x="88.6714%" y="789" width="0.0593%" height="15" fill="rgb(252,33,42)" fg:x="1495" fg:w="1"/><text x="88.9214%" y="799.50"></text></g><g><title>0x110010bb0 (28 samples, 1.66%)</title><rect x="88.7307%" y="789" width="1.6607%" height="15" fill="rgb(209,212,41)" fg:x="1496" fg:w="28"/><text x="88.9807%" y="799.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (27 samples, 1.60%)</title><rect x="88.7900%" y="773" width="1.6014%" height="15" fill="rgb(207,154,6)" fg:x="1497" fg:w="27"/><text x="89.0400%" y="783.50"></text></g><g><title>deno`Builtins_CallApiCallback (7 samples, 0.42%)</title><rect x="90.3915%" y="789" width="0.4152%" height="15" fill="rgb(223,64,47)" fg:x="1524" fg:w="7"/><text x="90.6415%" y="799.50"></text></g><g><title>deno`Builtins_BaselineOutOfLinePrologue (1 samples, 0.06%)</title><rect x="90.8066%" y="773" width="0.0593%" height="15" fill="rgb(211,161,38)" fg:x="1531" fg:w="1"/><text x="91.0566%" y="783.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.12%)</title><rect x="90.8066%" y="789" width="0.1186%" height="15" fill="rgb(219,138,40)" fg:x="1531" fg:w="2"/><text x="91.0566%" y="799.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.06%)</title><rect x="90.8660%" y="773" width="0.0593%" height="15" fill="rgb(241,228,46)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="783.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.06%)</title><rect x="90.8660%" y="757" width="0.0593%" height="15" fill="rgb(223,209,38)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="767.50"></text></g><g><title>deno`Builtins_ReturnHandler (1 samples, 0.06%)</title><rect x="90.8660%" y="741" width="0.0593%" height="15" fill="rgb(236,164,45)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="751.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.06%)</title><rect x="90.8660%" y="725" width="0.0593%" height="15" fill="rgb(231,15,5)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="735.50"></text></g><g><title>deno`v8::internal::Runtime_BytecodeBudgetInterrupt_Ignition (1 samples, 0.06%)</title><rect x="90.8660%" y="709" width="0.0593%" height="15" fill="rgb(252,35,15)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="719.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::BytecodeBudgetInterrupt(v8::internal::Isolate*, v8::internal::Arguments&lt; (1 samples, 0.06%)</title><rect x="90.8660%" y="693" width="0.0593%" height="15" fill="rgb(248,181,18)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="703.50"></text></g><g><title>deno`v8::internal::TieringManager::OnInterruptTick(v8::internal::Handle (1 samples, 0.06%)</title><rect x="90.8660%" y="677" width="0.0593%" height="15" fill="rgb(233,39,42)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="687.50"></text></g><g><title>deno`v8::internal::baseline::BaselineBatchCompiler::CompileBatch(v8::internal::Handle (1 samples, 0.06%)</title><rect x="90.8660%" y="661" width="0.0593%" height="15" fill="rgb(238,110,33)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="671.50"></text></g><g><title>deno`v8::internal::Compiler::CompileBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="90.8660%" y="645" width="0.0593%" height="15" fill="rgb(233,195,10)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="655.50"></text></g><g><title>deno`v8::internal::Compiler::CompileSharedWithBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="90.8660%" y="629" width="0.0593%" height="15" fill="rgb(254,105,3)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="639.50"></text></g><g><title>deno`v8::internal::GenerateBaselineCode(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="90.8660%" y="613" width="0.0593%" height="15" fill="rgb(221,225,9)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="623.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::GenerateCode (1 samples, 0.06%)</title><rect x="90.8660%" y="597" width="0.0593%" height="15" fill="rgb(224,227,45)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="607.50"></text></g><g><title>deno`void v8::internal::baseline::BaselineCompiler::CallBuiltin&lt;(v8::internal::Builtin)80, v8::internal::Register, v8::internal::Register, v8::internal::Register, int, v8::internal::Register, v8::internal::Handle&lt;v8::internal::BytecodeArray&gt; &gt;(v8::internal::Register, v8::internal::Register, v8::internal::Register, int, v8::internal::Register, v8::internal::Handle (1 samples, 0.06%)</title><rect x="90.8660%" y="581" width="0.0593%" height="15" fill="rgb(229,198,43)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="591.50"></text></g><g><title>deno`v8::internal::TurboAssembler::Mov (1 samples, 0.06%)</title><rect x="90.8660%" y="565" width="0.0593%" height="15" fill="rgb(206,209,35)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="575.50"></text></g><g><title>deno`v8::internal::TurboAssembler::Mov (1 samples, 0.06%)</title><rect x="90.8660%" y="549" width="0.0593%" height="15" fill="rgb(245,195,53)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="559.50"></text></g><g><title>deno`v8::internal::TurboAssembler::TryOneInstrMoveImmediate (1 samples, 0.06%)</title><rect x="90.8660%" y="533" width="0.0593%" height="15" fill="rgb(240,92,26)" fg:x="1532" fg:w="1"/><text x="91.1160%" y="543.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_PolymorphicName (23 samples, 1.36%)</title><rect x="90.9253%" y="789" width="1.3642%" height="15" fill="rgb(207,40,23)" fg:x="1533" fg:w="23"/><text x="91.1753%" y="799.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (1,450 samples, 86.00%)</title><rect x="8.3037%" y="805" width="86.0024%" height="15" fill="rgb(223,111,35)" fg:x="140" fg:w="1450"/><text x="8.5537%" y="815.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_LoadIC (34 samples, 2.02%)</title><rect x="92.2894%" y="789" width="2.0166%" height="15" fill="rgb(229,147,28)" fg:x="1556" fg:w="34"/><text x="92.5394%" y="799.50">d..</text></g><g><title>deno`Builtins_EnqueueMicrotask (4 samples, 0.24%)</title><rect x="94.4840%" y="789" width="0.2372%" height="15" fill="rgb(211,29,28)" fg:x="1593" fg:w="4"/><text x="94.7340%" y="799.50"></text></g><g><title>deno`Builtins_ResolvePromise (42 samples, 2.49%)</title><rect x="94.3060%" y="805" width="2.4911%" height="15" fill="rgb(228,72,33)" fg:x="1590" fg:w="42"/><text x="94.5560%" y="815.50">de..</text></g><g><title>deno`Builtins_FulfillPromise (35 samples, 2.08%)</title><rect x="94.7212%" y="789" width="2.0759%" height="15" fill="rgb(205,214,31)" fg:x="1597" fg:w="35"/><text x="94.9712%" y="799.50">d..</text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (1,553 samples, 92.11%)</title><rect x="6.2871%" y="821" width="92.1115%" height="15" fill="rgb(224,111,15)" fg:x="106" fg:w="1553"/><text x="6.5371%" y="831.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (27 samples, 1.60%)</title><rect x="96.7972%" y="805" width="1.6014%" height="15" fill="rgb(253,21,26)" fg:x="1632" fg:w="27"/><text x="97.0472%" y="815.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,661 samples, 98.52%)</title><rect x="0.0000%" y="1029" width="98.5172%" height="15" fill="rgb(245,139,43)" fg:x="0" fg:w="1661"/><text x="0.2500%" y="1039.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,661 samples, 98.52%)</title><rect x="0.0000%" y="1013" width="98.5172%" height="15" fill="rgb(252,170,7)" fg:x="0" fg:w="1661"/><text x="0.2500%" y="1023.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,661 samples, 98.52%)</title><rect x="0.0000%" y="997" width="98.5172%" height="15" fill="rgb(231,118,14)" fg:x="0" fg:w="1661"/><text x="0.2500%" y="1007.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (1,660 samples, 98.46%)</title><rect x="0.0593%" y="981" width="98.4579%" height="15" fill="rgb(238,83,0)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="991.50">deno`deno_core::runtime::JsRuntime::mod_evaluate</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (1,660 samples, 98.46%)</title><rect x="0.0593%" y="965" width="98.4579%" height="15" fill="rgb(221,39,39)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="975.50">deno`v8::Module::Evaluate(v8::Local</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (1,660 samples, 98.46%)</title><rect x="0.0593%" y="949" width="98.4579%" height="15" fill="rgb(222,119,46)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="959.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (1,660 samples, 98.46%)</title><rect x="0.0593%" y="933" width="98.4579%" height="15" fill="rgb(222,165,49)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="943.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (1,660 samples, 98.46%)</title><rect x="0.0593%" y="917" width="98.4579%" height="15" fill="rgb(219,113,52)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="927.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (1,660 samples, 98.46%)</title><rect x="0.0593%" y="901" width="98.4579%" height="15" fill="rgb(214,7,15)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="911.50">deno`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (1,660 samples, 98.46%)</title><rect x="0.0593%" y="885" width="98.4579%" height="15" fill="rgb(235,32,4)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="895.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1,660 samples, 98.46%)</title><rect x="0.0593%" y="869" width="98.4579%" height="15" fill="rgb(238,90,54)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="879.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (1,660 samples, 98.46%)</title><rect x="0.0593%" y="853" width="98.4579%" height="15" fill="rgb(213,208,19)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="863.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (1,660 samples, 98.46%)</title><rect x="0.0593%" y="837" width="98.4579%" height="15" fill="rgb(233,156,4)" fg:x="1" fg:w="1660"/><text x="0.3093%" y="847.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.12%)</title><rect x="98.3986%" y="821" width="0.1186%" height="15" fill="rgb(207,194,5)" fg:x="1659" fg:w="2"/><text x="98.6486%" y="831.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="885" width="0.0593%" height="15" fill="rgb(206,111,30)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.06%)</title><rect x="98.5172%" y="869" width="0.0593%" height="15" fill="rgb(243,70,54)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="853" width="0.0593%" height="15" fill="rgb(242,28,8)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="837" width="0.0593%" height="15" fill="rgb(219,106,18)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="821" width="0.0593%" height="15" fill="rgb(244,222,10)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.06%)</title><rect x="98.5172%" y="805" width="0.0593%" height="15" fill="rgb(236,179,52)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="789" width="0.0593%" height="15" fill="rgb(213,23,39)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="773" width="0.0593%" height="15" fill="rgb(238,48,10)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="757" width="0.0593%" height="15" fill="rgb(251,196,23)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.06%)</title><rect x="98.5172%" y="741" width="0.0593%" height="15" fill="rgb(250,152,24)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="751.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="725" width="0.0593%" height="15" fill="rgb(209,150,17)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="735.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="709" width="0.0593%" height="15" fill="rgb(234,202,34)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="719.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="693" width="0.0593%" height="15" fill="rgb(253,148,53)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="703.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.06%)</title><rect x="98.5172%" y="677" width="0.0593%" height="15" fill="rgb(218,129,16)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="687.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="661" width="0.0593%" height="15" fill="rgb(216,85,19)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="671.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="645" width="0.0593%" height="15" fill="rgb(235,228,7)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="655.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="629" width="0.0593%" height="15" fill="rgb(245,175,0)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="639.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="613" width="0.0593%" height="15" fill="rgb(208,168,36)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="623.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="597" width="0.0593%" height="15" fill="rgb(246,171,24)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="607.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="581" width="0.0593%" height="15" fill="rgb(215,142,24)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="591.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="565" width="0.0593%" height="15" fill="rgb(250,187,7)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="575.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="549" width="0.0593%" height="15" fill="rgb(228,66,33)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="559.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="533" width="0.0593%" height="15" fill="rgb(234,215,21)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="543.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="517" width="0.0593%" height="15" fill="rgb(222,191,20)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="527.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="501" width="0.0593%" height="15" fill="rgb(245,79,54)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="511.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="485" width="0.0593%" height="15" fill="rgb(240,10,37)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="495.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="469" width="0.0593%" height="15" fill="rgb(214,192,32)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="479.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="453" width="0.0593%" height="15" fill="rgb(209,36,54)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="463.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="437" width="0.0593%" height="15" fill="rgb(220,10,11)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="447.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="421" width="0.0593%" height="15" fill="rgb(221,106,17)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="431.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="405" width="0.0593%" height="15" fill="rgb(251,142,44)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="415.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="389" width="0.0593%" height="15" fill="rgb(238,13,15)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="399.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="373" width="0.0593%" height="15" fill="rgb(208,107,27)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="383.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="357" width="0.0593%" height="15" fill="rgb(205,136,37)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="367.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="341" width="0.0593%" height="15" fill="rgb(250,205,27)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="351.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="325" width="0.0593%" height="15" fill="rgb(210,80,43)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="335.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="309" width="0.0593%" height="15" fill="rgb(247,160,36)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="319.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="293" width="0.0593%" height="15" fill="rgb(234,13,49)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="303.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="277" width="0.0593%" height="15" fill="rgb(234,122,0)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="287.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="261" width="0.0593%" height="15" fill="rgb(207,146,38)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="271.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="245" width="0.0593%" height="15" fill="rgb(207,177,25)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="255.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="229" width="0.0593%" height="15" fill="rgb(211,178,42)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="239.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="213" width="0.0593%" height="15" fill="rgb(230,69,54)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="223.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="197" width="0.0593%" height="15" fill="rgb(214,135,41)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="207.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="181" width="0.0593%" height="15" fill="rgb(237,67,25)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="191.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="165" width="0.0593%" height="15" fill="rgb(222,189,50)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="175.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="149" width="0.0593%" height="15" fill="rgb(245,148,34)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="159.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="133" width="0.0593%" height="15" fill="rgb(222,29,6)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="143.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="117" width="0.0593%" height="15" fill="rgb(221,189,43)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="127.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="101" width="0.0593%" height="15" fill="rgb(207,36,27)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="111.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="85" width="0.0593%" height="15" fill="rgb(217,90,24)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="95.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.5172%" y="69" width="0.0593%" height="15" fill="rgb(224,66,35)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="79.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.5172%" y="53" width="0.0593%" height="15" fill="rgb(221,13,50)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="63.50"></text></g><g><title>deno`v8::internal::Heap::AllocateRawOrFail (1 samples, 0.06%)</title><rect x="98.5172%" y="37" width="0.0593%" height="15" fill="rgb(236,68,49)" fg:x="1661" fg:w="1"/><text x="98.7672%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.12%)</title><rect x="98.5172%" y="997" width="0.1186%" height="15" fill="rgb(229,146,28)" fg:x="1661" fg:w="2"/><text x="98.7672%" y="1007.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.12%)</title><rect x="98.5172%" y="981" width="0.1186%" height="15" fill="rgb(225,31,38)" fg:x="1661" fg:w="2"/><text x="98.7672%" y="991.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.12%)</title><rect x="98.5172%" y="965" width="0.1186%" height="15" fill="rgb(250,208,3)" fg:x="1661" fg:w="2"/><text x="98.7672%" y="975.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.12%)</title><rect x="98.5172%" y="949" width="0.1186%" height="15" fill="rgb(246,54,23)" fg:x="1661" fg:w="2"/><text x="98.7672%" y="959.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.12%)</title><rect x="98.5172%" y="933" width="0.1186%" height="15" fill="rgb(243,76,11)" fg:x="1661" fg:w="2"/><text x="98.7672%" y="943.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.12%)</title><rect x="98.5172%" y="917" width="0.1186%" height="15" fill="rgb(245,21,50)" fg:x="1661" fg:w="2"/><text x="98.7672%" y="927.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.12%)</title><rect x="98.5172%" y="901" width="0.1186%" height="15" fill="rgb(228,9,43)" fg:x="1661" fg:w="2"/><text x="98.7672%" y="911.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.06%)</title><rect x="98.5765%" y="885" width="0.0593%" height="15" fill="rgb(208,100,47)" fg:x="1662" fg:w="1"/><text x="98.8265%" y="895.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.06%)</title><rect x="98.5765%" y="869" width="0.0593%" height="15" fill="rgb(232,26,8)" fg:x="1662" fg:w="1"/><text x="98.8265%" y="879.50"></text></g><g><title>deno`v8::internal::HashTable&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Rehash (1 samples, 0.06%)</title><rect x="98.5765%" y="853" width="0.0593%" height="15" fill="rgb(216,166,38)" fg:x="1662" fg:w="1"/><text x="98.8265%" y="863.50"></text></g><g><title>deno`v8::internal::Checksum(v8::base::Vector (6 samples, 0.36%)</title><rect x="98.6358%" y="965" width="0.3559%" height="15" fill="rgb(251,202,51)" fg:x="1663" fg:w="6"/><text x="98.8858%" y="975.50"></text></g><g><title>deno`v8::internal::ReadOnlyHeap::SetUp (1 samples, 0.06%)</title><rect x="98.9917%" y="917" width="0.0593%" height="15" fill="rgb(254,216,34)" fg:x="1669" fg:w="1"/><text x="99.2417%" y="927.50"></text></g><g><title>deno`v8::internal::ReadOnlyDeserializer::DeserializeIntoIsolate (1 samples, 0.06%)</title><rect x="98.9917%" y="901" width="0.0593%" height="15" fill="rgb(251,32,27)" fg:x="1669" fg:w="1"/><text x="99.2417%" y="911.50"></text></g><g><title>deno`v8::internal::ReadOnlyRoots::Iterate (1 samples, 0.06%)</title><rect x="98.9917%" y="885" width="0.0593%" height="15" fill="rgb(208,127,28)" fg:x="1669" fg:w="1"/><text x="99.2417%" y="895.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.06%)</title><rect x="98.9917%" y="869" width="0.0593%" height="15" fill="rgb(224,137,22)" fg:x="1669" fg:w="1"/><text x="99.2417%" y="879.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.06%)</title><rect x="98.9917%" y="853" width="0.0593%" height="15" fill="rgb(254,70,32)" fg:x="1669" fg:w="1"/><text x="99.2417%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.9917%" y="837" width="0.0593%" height="15" fill="rgb(229,75,37)" fg:x="1669" fg:w="1"/><text x="99.2417%" y="847.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.06%)</title><rect x="98.9917%" y="821" width="0.0593%" height="15" fill="rgb(252,64,23)" fg:x="1669" fg:w="1"/><text x="99.2417%" y="831.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadMetaMap (1 samples, 0.06%)</title><rect x="98.9917%" y="805" width="0.0593%" height="15" fill="rgb(232,162,48)" fg:x="1669" fg:w="1"/><text x="99.2417%" y="815.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (1 samples, 0.06%)</title><rect x="98.9917%" y="789" width="0.0593%" height="15" fill="rgb(246,160,12)" fg:x="1669" fg:w="1"/><text x="99.2417%" y="799.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (10 samples, 0.59%)</title><rect x="98.5172%" y="1013" width="0.5931%" height="15" fill="rgb(247,166,0)" fg:x="1661" fg:w="10"/><text x="98.7672%" y="1023.50"></text></g><g><title>deno`v8::Isolate::New (8 samples, 0.47%)</title><rect x="98.6358%" y="997" width="0.4745%" height="15" fill="rgb(249,219,21)" fg:x="1663" fg:w="8"/><text x="98.8858%" y="1007.50"></text></g><g><title>deno`v8::Isolate::Initialize (8 samples, 0.47%)</title><rect x="98.6358%" y="981" width="0.4745%" height="15" fill="rgb(205,209,3)" fg:x="1663" fg:w="8"/><text x="98.8858%" y="991.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.12%)</title><rect x="98.9917%" y="965" width="0.1186%" height="15" fill="rgb(243,44,1)" fg:x="1669" fg:w="2"/><text x="99.2417%" y="975.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.12%)</title><rect x="98.9917%" y="949" width="0.1186%" height="15" fill="rgb(206,159,16)" fg:x="1669" fg:w="2"/><text x="99.2417%" y="959.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.12%)</title><rect x="98.9917%" y="933" width="0.1186%" height="15" fill="rgb(244,77,30)" fg:x="1669" fg:w="2"/><text x="99.2417%" y="943.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.06%)</title><rect x="99.0510%" y="917" width="0.0593%" height="15" fill="rgb(218,69,12)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="927.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.06%)</title><rect x="99.0510%" y="901" width="0.0593%" height="15" fill="rgb(212,87,7)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="911.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.06%)</title><rect x="99.0510%" y="885" width="0.0593%" height="15" fill="rgb(245,114,25)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.06%)</title><rect x="99.0510%" y="869" width="0.0593%" height="15" fill="rgb(210,61,42)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="99.0510%" y="853" width="0.0593%" height="15" fill="rgb(211,52,33)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="99.0510%" y="837" width="0.0593%" height="15" fill="rgb(234,58,33)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="99.0510%" y="821" width="0.0593%" height="15" fill="rgb(220,115,36)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="99.0510%" y="805" width="0.0593%" height="15" fill="rgb(243,153,54)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="99.0510%" y="789" width="0.0593%" height="15" fill="rgb(251,47,18)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="99.0510%" y="773" width="0.0593%" height="15" fill="rgb(242,102,42)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="99.0510%" y="757" width="0.0593%" height="15" fill="rgb(234,31,38)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="99.0510%" y="741" width="0.0593%" height="15" fill="rgb(221,117,51)" fg:x="1670" fg:w="1"/><text x="99.3010%" y="751.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.06%)</title><rect x="99.1103%" y="1013" width="0.0593%" height="15" fill="rgb(212,20,18)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="1023.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.06%)</title><rect x="99.1103%" y="997" width="0.0593%" height="15" fill="rgb(245,133,36)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="1007.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.06%)</title><rect x="99.1103%" y="981" width="0.0593%" height="15" fill="rgb(212,6,19)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="991.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.06%)</title><rect x="99.1103%" y="965" width="0.0593%" height="15" fill="rgb(218,1,36)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="975.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.1103%" y="949" width="0.0593%" height="15" fill="rgb(246,84,54)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="959.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.06%)</title><rect x="99.1103%" y="933" width="0.0593%" height="15" fill="rgb(242,110,6)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="943.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.06%)</title><rect x="99.1103%" y="917" width="0.0593%" height="15" fill="rgb(214,47,5)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="927.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.06%)</title><rect x="99.1103%" y="901" width="0.0593%" height="15" fill="rgb(218,159,25)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="911.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.06%)</title><rect x="99.1103%" y="885" width="0.0593%" height="15" fill="rgb(215,211,28)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="895.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.06%)</title><rect x="99.1103%" y="869" width="0.0593%" height="15" fill="rgb(238,59,32)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.06%)</title><rect x="99.1103%" y="853" width="0.0593%" height="15" fill="rgb(226,82,3)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.06%)</title><rect x="99.1103%" y="837" width="0.0593%" height="15" fill="rgb(240,164,32)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="847.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.06%)</title><rect x="99.1103%" y="821" width="0.0593%" height="15" fill="rgb(232,46,7)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="831.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.06%)</title><rect x="99.1103%" y="805" width="0.0593%" height="15" fill="rgb(229,129,53)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="815.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.06%)</title><rect x="99.1103%" y="789" width="0.0593%" height="15" fill="rgb(234,188,29)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="799.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.06%)</title><rect x="99.1103%" y="773" width="0.0593%" height="15" fill="rgb(246,141,4)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="783.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.1103%" y="757" width="0.0593%" height="15" fill="rgb(229,23,39)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="767.50"></text></g><g><title>deno`v8::internal::baseline::BaselineBatchCompiler::CompileBatch(v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.1103%" y="741" width="0.0593%" height="15" fill="rgb(206,12,3)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="751.50"></text></g><g><title>deno`v8::internal::Compiler::CompileBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.1103%" y="725" width="0.0593%" height="15" fill="rgb(252,226,20)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="735.50"></text></g><g><title>deno`v8::internal::Compiler::CompileSharedWithBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.1103%" y="709" width="0.0593%" height="15" fill="rgb(216,123,35)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="719.50"></text></g><g><title>deno`v8::internal::GenerateBaselineCode(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.1103%" y="693" width="0.0593%" height="15" fill="rgb(212,68,40)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="703.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::VisitStar (1 samples, 0.06%)</title><rect x="99.1103%" y="677" width="0.0593%" height="15" fill="rgb(254,125,32)" fg:x="1671" fg:w="1"/><text x="99.3603%" y="687.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,673 samples, 99.23%)</title><rect x="0.0000%" y="1077" width="99.2289%" height="15" fill="rgb(253,97,22)" fg:x="0" fg:w="1673"/><text x="0.2500%" y="1087.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (1,673 samples, 99.23%)</title><rect x="0.0000%" y="1061" width="99.2289%" height="15" fill="rgb(241,101,14)" fg:x="0" fg:w="1673"/><text x="0.2500%" y="1071.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,673 samples, 99.23%)</title><rect x="0.0000%" y="1045" width="99.2289%" height="15" fill="rgb(238,103,29)" fg:x="0" fg:w="1673"/><text x="0.2500%" y="1055.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (12 samples, 0.71%)</title><rect x="98.5172%" y="1029" width="0.7117%" height="15" fill="rgb(233,195,47)" fg:x="1661" fg:w="12"/><text x="98.7672%" y="1039.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.06%)</title><rect x="99.1696%" y="1013" width="0.0593%" height="15" fill="rgb(246,218,30)" fg:x="1672" fg:w="1"/><text x="99.4196%" y="1023.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.06%)</title><rect x="99.1696%" y="997" width="0.0593%" height="15" fill="rgb(219,145,47)" fg:x="1672" fg:w="1"/><text x="99.4196%" y="1007.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.06%)</title><rect x="99.1696%" y="981" width="0.0593%" height="15" fill="rgb(243,12,26)" fg:x="1672" fg:w="1"/><text x="99.4196%" y="991.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.06%)</title><rect x="99.1696%" y="965" width="0.0593%" height="15" fill="rgb(214,87,16)" fg:x="1672" fg:w="1"/><text x="99.4196%" y="975.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.06%)</title><rect x="99.1696%" y="949" width="0.0593%" height="15" fill="rgb(208,99,42)" fg:x="1672" fg:w="1"/><text x="99.4196%" y="959.50"></text></g><g><title>dyld`start (1,674 samples, 99.29%)</title><rect x="0.0000%" y="1189" width="99.2883%" height="15" fill="rgb(253,99,2)" fg:x="0" fg:w="1674"/><text x="0.2500%" y="1199.50">dyld`start</text></g><g><title>deno`main (1,674 samples, 99.29%)</title><rect x="0.0000%" y="1173" width="99.2883%" height="15" fill="rgb(220,168,23)" fg:x="0" fg:w="1674"/><text x="0.2500%" y="1183.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (1,674 samples, 99.29%)</title><rect x="0.0000%" y="1157" width="99.2883%" height="15" fill="rgb(242,38,24)" fg:x="0" fg:w="1674"/><text x="0.2500%" y="1167.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (1,674 samples, 99.29%)</title><rect x="0.0000%" y="1141" width="99.2883%" height="15" fill="rgb(225,182,9)" fg:x="0" fg:w="1674"/><text x="0.2500%" y="1151.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (1,674 samples, 99.29%)</title><rect x="0.0000%" y="1125" width="99.2883%" height="15" fill="rgb(243,178,37)" fg:x="0" fg:w="1674"/><text x="0.2500%" y="1135.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,674 samples, 99.29%)</title><rect x="0.0000%" y="1109" width="99.2883%" height="15" fill="rgb(232,139,19)" fg:x="0" fg:w="1674"/><text x="0.2500%" y="1119.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::main::_{{closure}} (1,674 samples, 99.29%)</title><rect x="0.0000%" y="1093" width="99.2883%" height="15" fill="rgb(225,201,24)" fg:x="0" fg:w="1674"/><text x="0.2500%" y="1103.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`deno::args::flags::flags_from_vec (1 samples, 0.06%)</title><rect x="99.2289%" y="1077" width="0.0593%" height="15" fill="rgb(221,47,46)" fg:x="1673" fg:w="1"/><text x="99.4789%" y="1087.50"></text></g><g><title>deno`deno::version::deno (1 samples, 0.06%)</title><rect x="99.2289%" y="1061" width="0.0593%" height="15" fill="rgb(249,23,13)" fg:x="1673" fg:w="1"/><text x="99.4789%" y="1071.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="99.2289%" y="1045" width="0.0593%" height="15" fill="rgb(219,9,5)" fg:x="1673" fg:w="1"/><text x="99.4789%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AssembleCode (1 samples, 0.06%)</title><rect x="99.2883%" y="1061" width="0.0593%" height="15" fill="rgb(254,171,16)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleCode (1 samples, 0.06%)</title><rect x="99.2883%" y="1045" width="0.0593%" height="15" fill="rgb(230,171,20)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleInstruction (1 samples, 0.06%)</title><rect x="99.2883%" y="1029" width="0.0593%" height="15" fill="rgb(210,71,41)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::GapResolver::Resolve (1 samples, 0.06%)</title><rect x="99.2883%" y="1013" width="0.0593%" height="15" fill="rgb(206,173,20)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove (1 samples, 0.06%)</title><rect x="99.2883%" y="997" width="0.0593%" height="15" fill="rgb(233,88,34)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove(v8::internal::compiler::InstructionOperand*, v8::internal::compiler::InstructionOperand*)::$_0::operator() (1 samples, 0.06%)</title><rect x="99.2883%" y="981" width="0.0593%" height="15" fill="rgb(223,209,46)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="991.50"></text></g><g><title>deno`v8::internal::TurboAssembler::Mov (1 samples, 0.06%)</title><rect x="99.2883%" y="965" width="0.0593%" height="15" fill="rgb(250,43,18)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="975.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.06%)</title><rect x="99.2883%" y="949" width="0.0593%" height="15" fill="rgb(208,13,10)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="959.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.06%)</title><rect x="99.2883%" y="933" width="0.0593%" height="15" fill="rgb(212,200,36)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="943.50"></text></g><g><title>deno`v8::internal::Assembler::RecordRelocInfo (1 samples, 0.06%)</title><rect x="99.2883%" y="917" width="0.0593%" height="15" fill="rgb(225,90,30)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="927.50"></text></g><g><title>deno`v8::internal::ConstantPool::RecordEntry (1 samples, 0.06%)</title><rect x="99.2883%" y="901" width="0.0593%" height="15" fill="rgb(236,182,39)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="911.50"></text></g><g><title>deno`v8::internal::ConstantPool::RecordKey (1 samples, 0.06%)</title><rect x="99.2883%" y="885" width="0.0593%" height="15" fill="rgb(212,144,35)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="895.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.06%)</title><rect x="99.2883%" y="869" width="0.0593%" height="15" fill="rgb(228,63,44)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="99.2883%" y="853" width="0.0593%" height="15" fill="rgb(228,109,6)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="99.2883%" y="837" width="0.0593%" height="15" fill="rgb(238,117,24)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.06%)</title><rect x="99.2883%" y="821" width="0.0593%" height="15" fill="rgb(242,26,26)" fg:x="1674" fg:w="1"/><text x="99.5383%" y="831.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (1 samples, 0.06%)</title><rect x="99.3476%" y="1061" width="0.0593%" height="15" fill="rgb(221,92,48)" fg:x="1675" fg:w="1"/><text x="99.5976%" y="1071.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (1 samples, 0.06%)</title><rect x="99.3476%" y="1045" width="0.0593%" height="15" fill="rgb(209,209,32)" fg:x="1675" fg:w="1"/><text x="99.5976%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::GraphBuilderPhase::Run (1 samples, 0.06%)</title><rect x="99.3476%" y="1029" width="0.0593%" height="15" fill="rgb(221,70,22)" fg:x="1675" fg:w="1"/><text x="99.5976%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (1 samples, 0.06%)</title><rect x="99.3476%" y="1013" width="0.0593%" height="15" fill="rgb(248,145,5)" fg:x="1675" fg:w="1"/><text x="99.5976%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::StateValuesCache::StateValuesCache (1 samples, 0.06%)</title><rect x="99.3476%" y="997" width="0.0593%" height="15" fill="rgb(226,116,26)" fg:x="1675" fg:w="1"/><text x="99.5976%" y="1007.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::BranchConditionDuplicationPhase&gt; (1 samples, 0.06%)</title><rect x="99.4069%" y="1045" width="0.0593%" height="15" fill="rgb(244,5,17)" fg:x="1676" fg:w="1"/><text x="99.6569%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::BranchConditionDuplicationPhase::Run (1 samples, 0.06%)</title><rect x="99.4069%" y="1029" width="0.0593%" height="15" fill="rgb(252,159,33)" fg:x="1676" fg:w="1"/><text x="99.6569%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::BranchConditionDuplicator::ProcessGraph (1 samples, 0.06%)</title><rect x="99.4069%" y="1013" width="0.0593%" height="15" fill="rgb(206,71,0)" fg:x="1676" fg:w="1"/><text x="99.6569%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::BranchConditionDuplicator::VisitNode (1 samples, 0.06%)</title><rect x="99.4069%" y="997" width="0.0593%" height="15" fill="rgb(233,118,54)" fg:x="1676" fg:w="1"/><text x="99.6569%" y="1007.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (1 samples, 0.06%)</title><rect x="99.4662%" y="1045" width="0.0593%" height="15" fill="rgb(234,83,48)" fg:x="1677" fg:w="1"/><text x="99.7162%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (1 samples, 0.06%)</title><rect x="99.4662%" y="1029" width="0.0593%" height="15" fill="rgb(228,3,54)" fg:x="1677" fg:w="1"/><text x="99.7162%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (1 samples, 0.06%)</title><rect x="99.4662%" y="1013" width="0.0593%" height="15" fill="rgb(226,155,13)" fg:x="1677" fg:w="1"/><text x="99.7162%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (1 samples, 0.06%)</title><rect x="99.4662%" y="997" width="0.0593%" height="15" fill="rgb(241,28,37)" fg:x="1677" fg:w="1"/><text x="99.7162%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::UpdatePlacement (1 samples, 0.06%)</title><rect x="99.4662%" y="981" width="0.0593%" height="15" fill="rgb(233,93,10)" fg:x="1677" fg:w="1"/><text x="99.7162%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::DecrementUnscheduledUseCount (1 samples, 0.06%)</title><rect x="99.4662%" y="965" width="0.0593%" height="15" fill="rgb(225,113,19)" fg:x="1677" fg:w="1"/><text x="99.7162%" y="975.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyGraphTrimmingPhase&gt; (1 samples, 0.06%)</title><rect x="99.5255%" y="1045" width="0.0593%" height="15" fill="rgb(241,2,18)" fg:x="1678" fg:w="1"/><text x="99.7755%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::EarlyGraphTrimmingPhase::Run (1 samples, 0.06%)</title><rect x="99.5255%" y="1029" width="0.0593%" height="15" fill="rgb(228,207,21)" fg:x="1678" fg:w="1"/><text x="99.7755%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (1 samples, 0.06%)</title><rect x="99.5255%" y="1013" width="0.0593%" height="15" fill="rgb(213,211,35)" fg:x="1678" fg:w="1"/><text x="99.7755%" y="1023.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (1 samples, 0.06%)</title><rect x="99.5848%" y="1045" width="0.0593%" height="15" fill="rgb(209,83,10)" fg:x="1679" fg:w="1"/><text x="99.8348%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (1 samples, 0.06%)</title><rect x="99.5848%" y="1029" width="0.0593%" height="15" fill="rgb(209,164,1)" fg:x="1679" fg:w="1"/><text x="99.8348%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (1 samples, 0.06%)</title><rect x="99.5848%" y="1013" width="0.0593%" height="15" fill="rgb(213,184,43)" fg:x="1679" fg:w="1"/><text x="99.8348%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (1 samples, 0.06%)</title><rect x="99.5848%" y="997" width="0.0593%" height="15" fill="rgb(231,61,34)" fg:x="1679" fg:w="1"/><text x="99.8348%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (1 samples, 0.06%)</title><rect x="99.5848%" y="981" width="0.0593%" height="15" fill="rgb(235,75,3)" fg:x="1679" fg:w="1"/><text x="99.8348%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (1 samples, 0.06%)</title><rect x="99.5848%" y="965" width="0.0593%" height="15" fill="rgb(220,106,47)" fg:x="1679" fg:w="1"/><text x="99.8348%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::GetCommonDominator (1 samples, 0.06%)</title><rect x="99.5848%" y="949" width="0.0593%" height="15" fill="rgb(210,196,33)" fg:x="1679" fg:w="1"/><text x="99.8348%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::GenerateTraversal (1 samples, 0.06%)</title><rect x="99.6441%" y="997" width="0.0593%" height="15" fill="rgb(229,154,42)" fg:x="1680" fg:w="1"/><text x="99.8941%" y="1007.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (2 samples, 0.12%)</title><rect x="99.6441%" y="1045" width="0.1186%" height="15" fill="rgb(228,114,26)" fg:x="1680" fg:w="2"/><text x="99.8941%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLoweringPhase::Run (2 samples, 0.12%)</title><rect x="99.6441%" y="1029" width="0.1186%" height="15" fill="rgb(208,144,1)" fg:x="1680" fg:w="2"/><text x="99.8941%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (2 samples, 0.12%)</title><rect x="99.6441%" y="1013" width="0.1186%" height="15" fill="rgb(239,112,37)" fg:x="1680" fg:w="2"/><text x="99.8941%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunLowerPhase (1 samples, 0.06%)</title><rect x="99.7034%" y="997" width="0.0593%" height="15" fill="rgb(210,96,50)" fg:x="1681" fg:w="1"/><text x="99.9534%" y="1007.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::VisitNode&lt;(v8::internal::compiler::Phase)2&gt; (1 samples, 0.06%)</title><rect x="99.7034%" y="981" width="0.0593%" height="15" fill="rgb(222,178,2)" fg:x="1681" fg:w="1"/><text x="99.9534%" y="991.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TyperPhase, v8::internal::compiler::Typer*&gt; (1 samples, 0.06%)</title><rect x="99.7628%" y="1045" width="0.0593%" height="15" fill="rgb(226,74,18)" fg:x="1682" fg:w="1"/><text x="100.0128%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::TyperPhase::Run (1 samples, 0.06%)</title><rect x="99.7628%" y="1029" width="0.0593%" height="15" fill="rgb(225,67,54)" fg:x="1682" fg:w="1"/><text x="100.0128%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Run(v8::internal::ZoneVector (1 samples, 0.06%)</title><rect x="99.7628%" y="1013" width="0.0593%" height="15" fill="rgb(251,92,32)" fg:x="1682" fg:w="1"/><text x="100.0128%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.06%)</title><rect x="99.7628%" y="997" width="0.0593%" height="15" fill="rgb(228,149,22)" fg:x="1682" fg:w="1"/><text x="100.0128%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.06%)</title><rect x="99.7628%" y="981" width="0.0593%" height="15" fill="rgb(243,54,13)" fg:x="1682" fg:w="1"/><text x="100.0128%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.06%)</title><rect x="99.7628%" y="965" width="0.0593%" height="15" fill="rgb(243,180,28)" fg:x="1682" fg:w="1"/><text x="100.0128%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::Type::Constant(v8::internal::compiler::JSHeapBroker*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.7628%" y="949" width="0.0593%" height="15" fill="rgb(208,167,24)" fg:x="1682" fg:w="1"/><text x="100.0128%" y="959.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateFPRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (1 samples, 0.06%)</title><rect x="99.8221%" y="1013" width="0.0593%" height="15" fill="rgb(245,73,45)" fg:x="1683" fg:w="1"/><text x="100.0721%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (1 samples, 0.06%)</title><rect x="99.8221%" y="997" width="0.0593%" height="15" fill="rgb(237,203,48)" fg:x="1683" fg:w="1"/><text x="100.0721%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges (1 samples, 0.06%)</title><rect x="99.8221%" y="981" width="0.0593%" height="15" fill="rgb(211,197,16)" fg:x="1683" fg:w="1"/><text x="100.0721%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator() (1 samples, 0.06%)</title><rect x="99.8221%" y="965" width="0.0593%" height="15" fill="rgb(243,99,51)" fg:x="1683" fg:w="1"/><text x="100.0721%" y="975.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (1 samples, 0.06%)</title><rect x="99.8814%" y="1013" width="0.0593%" height="15" fill="rgb(215,123,29)" fg:x="1684" fg:w="1"/><text x="100.1314%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (1 samples, 0.06%)</title><rect x="99.8814%" y="997" width="0.0593%" height="15" fill="rgb(239,186,37)" fg:x="1684" fg:w="1"/><text x="100.1314%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ReloadLiveRanges(v8::internal::ZoneUnorderedSet (1 samples, 0.06%)</title><rect x="99.8814%" y="981" width="0.0593%" height="15" fill="rgb(252,136,39)" fg:x="1684" fg:w="1"/><text x="100.1314%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AssignRegisterOnReload (1 samples, 0.06%)</title><rect x="99.8814%" y="965" width="0.0593%" height="15" fill="rgb(223,213,32)" fg:x="1684" fg:w="1"/><text x="100.1314%" y="975.50"></text></g><g><title>all (1,686 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(233,115,5)" fg:x="0" fg:w="1686"/><text x="0.2500%" y="1215.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (12 samples, 0.71%)</title><rect x="99.2883%" y="1189" width="0.7117%" height="15" fill="rgb(207,226,44)" fg:x="1674" fg:w="12"/><text x="99.5383%" y="1199.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (12 samples, 0.71%)</title><rect x="99.2883%" y="1173" width="0.7117%" height="15" fill="rgb(208,126,0)" fg:x="1674" fg:w="12"/><text x="99.5383%" y="1183.50"></text></g><g><title>deno`v8::base::ThreadEntry (12 samples, 0.71%)</title><rect x="99.2883%" y="1157" width="0.7117%" height="15" fill="rgb(244,66,21)" fg:x="1674" fg:w="12"/><text x="99.5383%" y="1167.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (12 samples, 0.71%)</title><rect x="99.2883%" y="1141" width="0.7117%" height="15" fill="rgb(222,97,12)" fg:x="1674" fg:w="12"/><text x="99.5383%" y="1151.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (12 samples, 0.71%)</title><rect x="99.2883%" y="1125" width="0.7117%" height="15" fill="rgb(219,213,19)" fg:x="1674" fg:w="12"/><text x="99.5383%" y="1135.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (12 samples, 0.71%)</title><rect x="99.2883%" y="1109" width="0.7117%" height="15" fill="rgb(252,169,30)" fg:x="1674" fg:w="12"/><text x="99.5383%" y="1119.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (12 samples, 0.71%)</title><rect x="99.2883%" y="1093" width="0.7117%" height="15" fill="rgb(206,32,51)" fg:x="1674" fg:w="12"/><text x="99.5383%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (12 samples, 0.71%)</title><rect x="99.2883%" y="1077" width="0.7117%" height="15" fill="rgb(250,172,42)" fg:x="1674" fg:w="12"/><text x="99.5383%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (10 samples, 0.59%)</title><rect x="99.4069%" y="1061" width="0.5931%" height="15" fill="rgb(209,34,43)" fg:x="1676" fg:w="10"/><text x="99.6569%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (3 samples, 0.18%)</title><rect x="99.8221%" y="1045" width="0.1779%" height="15" fill="rgb(223,11,35)" fg:x="1683" fg:w="3"/><text x="100.0721%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (3 samples, 0.18%)</title><rect x="99.8221%" y="1029" width="0.1779%" height="15" fill="rgb(251,219,26)" fg:x="1683" fg:w="3"/><text x="100.0721%" y="1039.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::BuildLiveRangesPhase&gt; (1 samples, 0.06%)</title><rect x="99.9407%" y="1013" width="0.0593%" height="15" fill="rgb(231,119,3)" fg:x="1685" fg:w="1"/><text x="100.1907%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeBuilder::BuildLiveRanges (1 samples, 0.06%)</title><rect x="99.9407%" y="997" width="0.0593%" height="15" fill="rgb(216,97,11)" fg:x="1685" fg:w="1"/><text x="100.1907%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeBuilder::ProcessInstructions (1 samples, 0.06%)</title><rect x="99.9407%" y="981" width="0.0593%" height="15" fill="rgb(223,59,9)" fg:x="1685" fg:w="1"/><text x="100.1907%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::TopLevelLiveRange::AddUseInterval (1 samples, 0.06%)</title><rect x="99.9407%" y="965" width="0.0593%" height="15" fill="rgb(233,93,31)" fg:x="1685" fg:w="1"/><text x="100.1907%" y="975.50"></text></g></svg></svg>