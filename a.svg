<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1414" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1397.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1397.00"> </text><svg id="frames" x="10" width="1180" total_samples="5434"><g><title>deno`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (166 samples, 3.05%)</title><rect x="0.0000%" y="949" width="3.0548%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="166"/><text x="0.2500%" y="959.50">den..</text></g><g><title>libsystem_malloc.dylib`nanov2_free (1 samples, 0.02%)</title><rect x="12.9923%" y="837" width="0.0184%" height="15" fill="rgb(217,0,24)" fg:x="706" fg:w="1"/><text x="13.2423%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.06%)</title><rect x="12.9739%" y="853" width="0.0552%" height="15" fill="rgb(221,193,54)" fg:x="705" fg:w="3"/><text x="13.2239%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="13.0107%" y="837" width="0.0184%" height="15" fill="rgb(248,212,6)" fg:x="707" fg:w="1"/><text x="13.2607%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="13.0291%" y="837" width="0.0184%" height="15" fill="rgb(208,68,35)" fg:x="708" fg:w="1"/><text x="13.2791%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="13.0475%" y="837" width="0.0184%" height="15" fill="rgb(232,128,0)" fg:x="709" fg:w="1"/><text x="13.2975%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="13.0475%" y="821" width="0.0184%" height="15" fill="rgb(207,160,47)" fg:x="709" fg:w="1"/><text x="13.2975%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.02%)</title><rect x="13.0659%" y="837" width="0.0184%" height="15" fill="rgb(228,23,34)" fg:x="710" fg:w="1"/><text x="13.3159%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.07%)</title><rect x="13.0291%" y="853" width="0.0736%" height="15" fill="rgb(218,30,26)" fg:x="708" fg:w="4"/><text x="13.2791%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.0843%" y="837" width="0.0184%" height="15" fill="rgb(220,122,19)" fg:x="711" fg:w="1"/><text x="13.3343%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.02%)</title><rect x="13.0843%" y="821" width="0.0184%" height="15" fill="rgb(250,228,42)" fg:x="711" fg:w="1"/><text x="13.3343%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (1 samples, 0.02%)</title><rect x="13.0843%" y="805" width="0.0184%" height="15" fill="rgb(240,193,28)" fg:x="711" fg:w="1"/><text x="13.3343%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (1 samples, 0.02%)</title><rect x="13.0843%" y="789" width="0.0184%" height="15" fill="rgb(216,20,37)" fg:x="711" fg:w="1"/><text x="13.3343%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.44%)</title><rect x="12.9739%" y="869" width="0.4417%" height="15" fill="rgb(206,188,39)" fg:x="705" fg:w="24"/><text x="13.2239%" y="879.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.31%)</title><rect x="13.1027%" y="853" width="0.3128%" height="15" fill="rgb(217,207,13)" fg:x="712" fg:w="17"/><text x="13.3527%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="13.4155%" y="869" width="0.0184%" height="15" fill="rgb(231,73,38)" fg:x="729" fg:w="1"/><text x="13.6655%" y="879.50"></text></g><g><title>deno`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (213 samples, 3.92%)</title><rect x="9.5326%" y="933" width="3.9198%" height="15" fill="rgb(225,20,46)" fg:x="518" fg:w="213"/><text x="9.7826%" y="943.50">deno..</text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.52%)</title><rect x="12.9371%" y="917" width="0.5153%" height="15" fill="rgb(210,31,41)" fg:x="703" fg:w="28"/><text x="13.1871%" y="927.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (27 samples, 0.50%)</title><rect x="12.9555%" y="901" width="0.4969%" height="15" fill="rgb(221,200,47)" fg:x="704" fg:w="27"/><text x="13.2055%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`realloc (27 samples, 0.50%)</title><rect x="12.9555%" y="885" width="0.4969%" height="15" fill="rgb(226,26,5)" fg:x="704" fg:w="27"/><text x="13.2055%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="13.4339%" y="869" width="0.0184%" height="15" fill="rgb(249,33,26)" fg:x="730" fg:w="1"/><text x="13.6839%" y="879.50"></text></g><g><title>deno`v8::internal::GCTracer::StartInSafepoint (1 samples, 0.02%)</title><rect x="13.4891%" y="757" width="0.0184%" height="15" fill="rgb(235,183,28)" fg:x="733" fg:w="1"/><text x="13.7391%" y="767.50"></text></g><g><title>deno`v8::internal::Heap::NewSpaceAllocationCounter (1 samples, 0.02%)</title><rect x="13.4891%" y="741" width="0.0184%" height="15" fill="rgb(221,5,38)" fg:x="733" fg:w="1"/><text x="13.7391%" y="751.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::AllocatedSinceLastGC (1 samples, 0.02%)</title><rect x="13.4891%" y="725" width="0.0184%" height="15" fill="rgb(247,18,42)" fg:x="733" fg:w="1"/><text x="13.7391%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.02%)</title><rect x="13.5075%" y="725" width="0.0184%" height="15" fill="rgb(241,131,45)" fg:x="734" fg:w="1"/><text x="13.7575%" y="735.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (1 samples, 0.02%)</title><rect x="13.5075%" y="709" width="0.0184%" height="15" fill="rgb(249,31,29)" fg:x="734" fg:w="1"/><text x="13.7575%" y="719.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (1 samples, 0.02%)</title><rect x="13.5259%" y="725" width="0.0184%" height="15" fill="rgb(225,111,53)" fg:x="735" fg:w="1"/><text x="13.7759%" y="735.50"></text></g><g><title>deno`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, v8::internal::Object::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt; &gt; &gt;::__rehash (1 samples, 0.02%)</title><rect x="13.5259%" y="709" width="0.0184%" height="15" fill="rgb(238,160,17)" fg:x="735" fg:w="1"/><text x="13.7759%" y="719.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (4 samples, 0.07%)</title><rect x="13.4891%" y="821" width="0.0736%" height="15" fill="rgb(214,148,48)" fg:x="733" fg:w="4"/><text x="13.7391%" y="831.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (4 samples, 0.07%)</title><rect x="13.4891%" y="805" width="0.0736%" height="15" fill="rgb(232,36,49)" fg:x="733" fg:w="4"/><text x="13.7391%" y="815.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (4 samples, 0.07%)</title><rect x="13.4891%" y="789" width="0.0736%" height="15" fill="rgb(209,103,24)" fg:x="733" fg:w="4"/><text x="13.7391%" y="799.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (4 samples, 0.07%)</title><rect x="13.4891%" y="773" width="0.0736%" height="15" fill="rgb(229,88,8)" fg:x="733" fg:w="4"/><text x="13.7391%" y="783.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (3 samples, 0.06%)</title><rect x="13.5075%" y="757" width="0.0552%" height="15" fill="rgb(213,181,19)" fg:x="734" fg:w="3"/><text x="13.7575%" y="767.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.06%)</title><rect x="13.5075%" y="741" width="0.0552%" height="15" fill="rgb(254,191,54)" fg:x="734" fg:w="3"/><text x="13.7575%" y="751.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.02%)</title><rect x="13.5444%" y="725" width="0.0184%" height="15" fill="rgb(241,83,37)" fg:x="736" fg:w="1"/><text x="13.7944%" y="735.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (1 samples, 0.02%)</title><rect x="13.5444%" y="709" width="0.0184%" height="15" fill="rgb(233,36,39)" fg:x="736" fg:w="1"/><text x="13.7944%" y="719.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (1 samples, 0.02%)</title><rect x="13.5444%" y="693" width="0.0184%" height="15" fill="rgb(226,3,54)" fg:x="736" fg:w="1"/><text x="13.7944%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.02%)</title><rect x="13.5444%" y="677" width="0.0184%" height="15" fill="rgb(245,192,40)" fg:x="736" fg:w="1"/><text x="13.7944%" y="687.50"></text></g><g><title>deno`v8::internal::LargePage::LargePage (1 samples, 0.02%)</title><rect x="13.5628%" y="789" width="0.0184%" height="15" fill="rgb(238,167,29)" fg:x="737" fg:w="1"/><text x="13.8128%" y="799.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (1 samples, 0.02%)</title><rect x="13.5628%" y="773" width="0.0184%" height="15" fill="rgb(232,182,51)" fg:x="737" fg:w="1"/><text x="13.8128%" y="783.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="13.5628%" y="757" width="0.0184%" height="15" fill="rgb(231,60,39)" fg:x="737" fg:w="1"/><text x="13.8128%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="13.5628%" y="741" width="0.0184%" height="15" fill="rgb(208,69,12)" fg:x="737" fg:w="1"/><text x="13.8128%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="13.5628%" y="725" width="0.0184%" height="15" fill="rgb(235,93,37)" fg:x="737" fg:w="1"/><text x="13.8128%" y="735.50"></text></g><g><title>deno`v8::internal::VirtualMemory::VirtualMemory (1 samples, 0.02%)</title><rect x="13.5812%" y="757" width="0.0184%" height="15" fill="rgb(213,116,39)" fg:x="738" fg:w="1"/><text x="13.8312%" y="767.50"></text></g><g><title>deno`v8::base::BoundedPageAllocator::AllocatePages (1 samples, 0.02%)</title><rect x="13.5812%" y="741" width="0.0184%" height="15" fill="rgb(222,207,29)" fg:x="738" fg:w="1"/><text x="13.8312%" y="751.50"></text></g><g><title>deno`v8::base::RegionAllocator::AllocateRegion (1 samples, 0.02%)</title><rect x="13.5812%" y="725" width="0.0184%" height="15" fill="rgb(206,96,30)" fg:x="738" fg:w="1"/><text x="13.8312%" y="735.50"></text></g><g><title>deno`void std::__1::__tree_balance_after_insert&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (1 samples, 0.02%)</title><rect x="13.5812%" y="709" width="0.0184%" height="15" fill="rgb(218,138,4)" fg:x="738" fg:w="1"/><text x="13.8312%" y="719.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.02%)</title><rect x="13.5996%" y="757" width="0.0184%" height="15" fill="rgb(250,191,14)" fg:x="739" fg:w="1"/><text x="13.8496%" y="767.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (3 samples, 0.06%)</title><rect x="13.5812%" y="789" width="0.0552%" height="15" fill="rgb(239,60,40)" fg:x="738" fg:w="3"/><text x="13.8312%" y="799.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (3 samples, 0.06%)</title><rect x="13.5812%" y="773" width="0.0552%" height="15" fill="rgb(206,27,48)" fg:x="738" fg:w="3"/><text x="13.8312%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="13.6180%" y="757" width="0.0184%" height="15" fill="rgb(225,35,8)" fg:x="740" fg:w="1"/><text x="13.8680%" y="767.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (10 samples, 0.18%)</title><rect x="13.4707%" y="853" width="0.1840%" height="15" fill="rgb(250,213,24)" fg:x="732" fg:w="10"/><text x="13.7207%" y="863.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (10 samples, 0.18%)</title><rect x="13.4707%" y="837" width="0.1840%" height="15" fill="rgb(247,123,22)" fg:x="732" fg:w="10"/><text x="13.7207%" y="847.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::AllocateRaw (5 samples, 0.09%)</title><rect x="13.5628%" y="821" width="0.0920%" height="15" fill="rgb(231,138,38)" fg:x="737" fg:w="5"/><text x="13.8128%" y="831.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (5 samples, 0.09%)</title><rect x="13.5628%" y="805" width="0.0920%" height="15" fill="rgb(231,145,46)" fg:x="737" fg:w="5"/><text x="13.8128%" y="815.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::RecordLargePageCreated (1 samples, 0.02%)</title><rect x="13.6364%" y="789" width="0.0184%" height="15" fill="rgb(251,118,11)" fg:x="741" fg:w="1"/><text x="13.8864%" y="799.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="13.6364%" y="773" width="0.0184%" height="15" fill="rgb(217,147,25)" fg:x="741" fg:w="1"/><text x="13.8864%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="13.6364%" y="757" width="0.0184%" height="15" fill="rgb(247,81,37)" fg:x="741" fg:w="1"/><text x="13.8864%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="13.6364%" y="741" width="0.0184%" height="15" fill="rgb(209,12,38)" fg:x="741" fg:w="1"/><text x="13.8864%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="13.6364%" y="725" width="0.0184%" height="15" fill="rgb(227,1,9)" fg:x="741" fg:w="1"/><text x="13.8864%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (35 samples, 0.64%)</title><rect x="13.4523%" y="869" width="0.6441%" height="15" fill="rgb(248,47,43)" fg:x="731" fg:w="35"/><text x="13.7023%" y="879.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.44%)</title><rect x="13.6548%" y="853" width="0.4417%" height="15" fill="rgb(221,10,30)" fg:x="742" fg:w="24"/><text x="13.9048%" y="863.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_str (65 samples, 1.20%)</title><rect x="13.4523%" y="933" width="1.1962%" height="15" fill="rgb(210,229,1)" fg:x="731" fg:w="65"/><text x="13.7023%" y="943.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::new_from_utf8 (65 samples, 1.20%)</title><rect x="13.4523%" y="917" width="1.1962%" height="15" fill="rgb(222,148,37)" fg:x="731" fg:w="65"/><text x="13.7023%" y="927.50"></text></g><g><title>deno`v8::String::NewFromUtf8 (65 samples, 1.20%)</title><rect x="13.4523%" y="901" width="1.1962%" height="15" fill="rgb(234,67,33)" fg:x="731" fg:w="65"/><text x="13.7023%" y="911.50"></text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (65 samples, 1.20%)</title><rect x="13.4523%" y="885" width="1.1962%" height="15" fill="rgb(247,98,35)" fg:x="731" fg:w="65"/><text x="13.7023%" y="895.50"></text></g><g><title>deno`v8::internal::Utf8DecoderBase&lt;v8::internal::Utf8Decoder&gt;::Utf8DecoderBase(v8::base::Vector (30 samples, 0.55%)</title><rect x="14.0964%" y="869" width="0.5521%" height="15" fill="rgb(247,138,52)" fg:x="766" fg:w="30"/><text x="14.3464%" y="879.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (86 samples, 1.58%)</title><rect x="14.6485%" y="933" width="1.5826%" height="15" fill="rgb(213,79,30)" fg:x="796" fg:w="86"/><text x="14.8985%" y="943.50"></text></g><g><title>deno`v8::String::WriteUtf8 (4 samples, 0.07%)</title><rect x="16.2311%" y="901" width="0.0736%" height="15" fill="rgb(246,177,23)" fg:x="882" fg:w="4"/><text x="16.4811%" y="911.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (9 samples, 0.17%)</title><rect x="16.2311%" y="933" width="0.1656%" height="15" fill="rgb(230,62,27)" fg:x="882" fg:w="9"/><text x="16.4811%" y="943.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8 (9 samples, 0.17%)</title><rect x="16.2311%" y="917" width="0.1656%" height="15" fill="rgb(216,154,8)" fg:x="882" fg:w="9"/><text x="16.4811%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.09%)</title><rect x="16.3047%" y="901" width="0.0920%" height="15" fill="rgb(244,35,45)" fg:x="886" fg:w="5"/><text x="16.5547%" y="911.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1349" width="24.8068%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1359.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1333" width="24.8068%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1343.50">deno`&lt;core::future::from_generator::GenF..</text></g><g><title>deno`deno::main::_{{closure}} (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1317" width="24.8068%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1327.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1301" width="24.8068%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1311.50">deno`&lt;core::future::from_generator::GenF..</text></g><g><title>deno`deno::run_command::_{{closure}} (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1285" width="24.8068%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1295.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1269" width="24.8068%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1279.50">deno`&lt;core::future::from_generator::GenF..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1253" width="24.8068%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1263.50">deno`&lt;core::future::from_generator::GenF..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1237" width="24.8068%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1247.50">deno`&lt;core::future::from_generator::GenF..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1221" width="24.8068%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1231.50">deno`&lt;core::future::from_generator::GenF..</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1205" width="24.8068%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1215.50">deno`deno_core::runtime::JsRuntime::mod_..</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1189" width="24.8068%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1199.50">deno`v8::Module::Evaluate(v8::Local</text></g><g><title>deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1173" width="24.8068%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1183.50">deno`v8::internal::Module::Evaluate(v8::..</text></g><g><title>deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1157" width="24.8068%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1167.50">deno`v8::internal::SourceTextModule::Eva..</text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1141" width="24.8068%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1151.50">deno`v8::internal::SourceTextModule::Inn..</text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1125" width="24.8068%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1135.50">deno`v8::internal::SourceTextModule::Exe..</text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1109" width="24.8068%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1119.50">deno`v8::internal::Execution::TryCall(v8..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1093" width="24.8068%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1103.50">deno`v8::internal::(anonymous namespace)..</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1077" width="24.8068%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1087.50">deno`v8::internal::(anonymous namespace)..</text></g><g><title>deno`Builtins_JSEntry (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1061" width="24.8068%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1071.50">deno`Builtins_JSEntry</text></g><g><title>deno`Builtins_JSEntryTrampoline (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1045" width="24.8068%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1055.50">deno`Builtins_JSEntryTrampoline</text></g><g><title>deno`Builtins_GeneratorPrototypeNext (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1029" width="24.8068%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1039.50">deno`Builtins_GeneratorPrototypeNext</text></g><g><title>0x11004b408 (1,348 samples, 24.81%)</title><rect x="0.0000%" y="1013" width="24.8068%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1023.50">0x11004b408</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1,348 samples, 24.81%)</title><rect x="0.0000%" y="997" width="24.8068%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="1007.50">deno`Builtins_CEntry_Return1_DontSaveFPR..</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1,348 samples, 24.81%)</title><rect x="0.0000%" y="981" width="24.8068%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="991.50">deno`v8::internal::Builtin_HandleApiCall</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1,348 samples, 24.81%)</title><rect x="0.0000%" y="965" width="24.8068%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="1348"/><text x="0.2500%" y="975.50">deno`v8::internal::MaybeHandle&lt;v8::inter..</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1,182 samples, 21.75%)</title><rect x="3.0548%" y="949" width="21.7519%" height="15" fill="rgb(236,97,10)" fg:x="166" fg:w="1182"/><text x="3.3048%" y="959.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (457 samples, 8.41%)</title><rect x="16.3968%" y="933" width="8.4100%" height="15" fill="rgb(233,208,19)" fg:x="891" fg:w="457"/><text x="16.6468%" y="943.50">libsystem_pl..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="24.8068%" y="1141" width="0.0184%" height="15" fill="rgb(216,164,2)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1151.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="24.8068%" y="1125" width="0.0184%" height="15" fill="rgb(220,129,5)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1135.50"></text></g><g><title>deno`deno::proc_state::ProcState::prepare_module_load::_{{closure}} (1 samples, 0.02%)</title><rect x="24.8068%" y="1109" width="0.0184%" height="15" fill="rgb(242,17,10)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1119.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="24.8068%" y="1093" width="0.0184%" height="15" fill="rgb(242,107,0)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1103.50"></text></g><g><title>deno`deno_graph::graph::parse_module (1 samples, 0.02%)</title><rect x="24.8068%" y="1077" width="0.0184%" height="15" fill="rgb(251,28,31)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1087.50"></text></g><g><title>deno`&lt;deno::cache::parsed_source::ParsedSourceCacheModuleAnalyzer as deno_graph::analyzer::ModuleAnalyzer&gt;::analyze (1 samples, 0.02%)</title><rect x="24.8068%" y="1061" width="0.0184%" height="15" fill="rgb(233,223,10)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1071.50"></text></g><g><title>deno`rusqlite::cache::StatementCache::get (1 samples, 0.02%)</title><rect x="24.8068%" y="1045" width="0.0184%" height="15" fill="rgb(215,21,27)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1055.50"></text></g><g><title>deno`rusqlite::Connection::prepare (1 samples, 0.02%)</title><rect x="24.8068%" y="1029" width="0.0184%" height="15" fill="rgb(232,23,21)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1039.50"></text></g><g><title>deno`rusqlite::inner_connection::InnerConnection::prepare (1 samples, 0.02%)</title><rect x="24.8068%" y="1013" width="0.0184%" height="15" fill="rgb(244,5,23)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1023.50"></text></g><g><title>deno`sqlite3LockAndPrepare (1 samples, 0.02%)</title><rect x="24.8068%" y="997" width="0.0184%" height="15" fill="rgb(226,81,46)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="1007.50"></text></g><g><title>deno`sqlite3Prepare (1 samples, 0.02%)</title><rect x="24.8068%" y="981" width="0.0184%" height="15" fill="rgb(247,70,30)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="991.50"></text></g><g><title>deno`sqlite3RunParser (1 samples, 0.02%)</title><rect x="24.8068%" y="965" width="0.0184%" height="15" fill="rgb(212,68,19)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="975.50"></text></g><g><title>deno`yy_reduce (1 samples, 0.02%)</title><rect x="24.8068%" y="949" width="0.0184%" height="15" fill="rgb(240,187,13)" fg:x="1348" fg:w="1"/><text x="25.0568%" y="959.50"></text></g><g><title>deno`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="24.8252%" y="917" width="0.0184%" height="15" fill="rgb(223,113,26)" fg:x="1349" fg:w="1"/><text x="25.0752%" y="927.50"></text></g><g><title>deno`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.04%)</title><rect x="24.8620%" y="901" width="0.0368%" height="15" fill="rgb(206,192,2)" fg:x="1351" fg:w="2"/><text x="25.1120%" y="911.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (1 samples, 0.02%)</title><rect x="24.8988%" y="901" width="0.0184%" height="15" fill="rgb(241,108,4)" fg:x="1353" fg:w="1"/><text x="25.1488%" y="911.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8 (1 samples, 0.02%)</title><rect x="24.8988%" y="885" width="0.0184%" height="15" fill="rgb(247,173,49)" fg:x="1353" fg:w="1"/><text x="25.1488%" y="895.50"></text></g><g><title>deno`v8::String::WriteUtf8 (1 samples, 0.02%)</title><rect x="24.8988%" y="869" width="0.0184%" height="15" fill="rgb(224,114,35)" fg:x="1353" fg:w="1"/><text x="25.1488%" y="879.50"></text></g><g><title>deno`v8::internal::String::SlowFlatten(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.02%)</title><rect x="24.8988%" y="853" width="0.0184%" height="15" fill="rgb(245,159,27)" fg:x="1353" fg:w="1"/><text x="25.1488%" y="863.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (1 samples, 0.02%)</title><rect x="24.8988%" y="837" width="0.0184%" height="15" fill="rgb(245,172,44)" fg:x="1353" fg:w="1"/><text x="25.1488%" y="847.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (1 samples, 0.02%)</title><rect x="24.8988%" y="821" width="0.0184%" height="15" fill="rgb(236,23,11)" fg:x="1353" fg:w="1"/><text x="25.1488%" y="831.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (1 samples, 0.02%)</title><rect x="24.8988%" y="805" width="0.0184%" height="15" fill="rgb(205,117,38)" fg:x="1353" fg:w="1"/><text x="25.1488%" y="815.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (1 samples, 0.02%)</title><rect x="24.8988%" y="789" width="0.0184%" height="15" fill="rgb(237,72,25)" fg:x="1353" fg:w="1"/><text x="25.1488%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="24.8988%" y="773" width="0.0184%" height="15" fill="rgb(244,70,9)" fg:x="1353" fg:w="1"/><text x="25.1488%" y="783.50"></text></g><g><title>0x110039b98 (8 samples, 0.15%)</title><rect x="24.8252%" y="949" width="0.1472%" height="15" fill="rgb(217,125,39)" fg:x="1349" fg:w="8"/><text x="25.0752%" y="959.50"></text></g><g><title>deno`Builtins_CallApiCallback (8 samples, 0.15%)</title><rect x="24.8252%" y="933" width="0.1472%" height="15" fill="rgb(235,36,10)" fg:x="1349" fg:w="8"/><text x="25.0752%" y="943.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (7 samples, 0.13%)</title><rect x="24.8436%" y="917" width="0.1288%" height="15" fill="rgb(251,123,47)" fg:x="1350" fg:w="7"/><text x="25.0936%" y="927.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.06%)</title><rect x="24.9172%" y="901" width="0.0552%" height="15" fill="rgb(221,13,13)" fg:x="1354" fg:w="3"/><text x="25.1672%" y="911.50"></text></g><g><title>deno`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (123 samples, 2.26%)</title><rect x="24.9724%" y="917" width="2.2635%" height="15" fill="rgb(238,131,9)" fg:x="1357" fg:w="123"/><text x="25.2224%" y="927.50">d..</text></g><g><title>deno`__rust_realloc (1 samples, 0.02%)</title><rect x="35.2411%" y="869" width="0.0184%" height="15" fill="rgb(211,50,8)" fg:x="1915" fg:w="1"/><text x="35.4911%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.17%)</title><rect x="35.2595%" y="837" width="0.1656%" height="15" fill="rgb(245,182,24)" fg:x="1916" fg:w="9"/><text x="35.5095%" y="847.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.17%)</title><rect x="35.2595%" y="821" width="0.1656%" height="15" fill="rgb(242,14,37)" fg:x="1916" fg:w="9"/><text x="35.5095%" y="831.50"></text></g><g><title>deno`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (192 samples, 3.53%)</title><rect x="31.9102%" y="901" width="3.5333%" height="15" fill="rgb(246,228,12)" fg:x="1734" fg:w="192"/><text x="32.1602%" y="911.50">den..</text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.22%)</title><rect x="35.2227%" y="885" width="0.2208%" height="15" fill="rgb(213,55,15)" fg:x="1914" fg:w="12"/><text x="35.4727%" y="895.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (10 samples, 0.18%)</title><rect x="35.2595%" y="869" width="0.1840%" height="15" fill="rgb(209,9,3)" fg:x="1916" fg:w="10"/><text x="35.5095%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.18%)</title><rect x="35.2595%" y="853" width="0.1840%" height="15" fill="rgb(230,59,30)" fg:x="1916" fg:w="10"/><text x="35.5095%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="35.4251%" y="837" width="0.0184%" height="15" fill="rgb(209,121,21)" fg:x="1925" fg:w="1"/><text x="35.6751%" y="847.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionEpilogueInSafepoint (1 samples, 0.02%)</title><rect x="35.4435%" y="725" width="0.0184%" height="15" fill="rgb(220,109,13)" fg:x="1926" fg:w="1"/><text x="35.6935%" y="735.50"></text></g><g><title>deno`v8::platform::DefaultJobState::NotifyConcurrencyIncrease (1 samples, 0.02%)</title><rect x="35.4435%" y="709" width="0.0184%" height="15" fill="rgb(232,18,1)" fg:x="1926" fg:w="1"/><text x="35.6935%" y="719.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::PostTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (1 samples, 0.02%)</title><rect x="35.4435%" y="693" width="0.0184%" height="15" fill="rgb(215,41,42)" fg:x="1926" fg:w="1"/><text x="35.6935%" y="703.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.02%)</title><rect x="35.4435%" y="677" width="0.0184%" height="15" fill="rgb(224,123,36)" fg:x="1926" fg:w="1"/><text x="35.6935%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.02%)</title><rect x="35.4435%" y="661" width="0.0184%" height="15" fill="rgb(240,125,3)" fg:x="1926" fg:w="1"/><text x="35.6935%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.04%)</title><rect x="35.4435%" y="757" width="0.0368%" height="15" fill="rgb(205,98,50)" fg:x="1926" fg:w="2"/><text x="35.6935%" y="767.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.04%)</title><rect x="35.4435%" y="741" width="0.0368%" height="15" fill="rgb(205,185,37)" fg:x="1926" fg:w="2"/><text x="35.6935%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.02%)</title><rect x="35.4619%" y="725" width="0.0184%" height="15" fill="rgb(238,207,15)" fg:x="1927" fg:w="1"/><text x="35.7119%" y="735.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.02%)</title><rect x="35.4619%" y="709" width="0.0184%" height="15" fill="rgb(213,199,42)" fg:x="1927" fg:w="1"/><text x="35.7119%" y="719.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::FreeDeadObjects(std::__1::function&lt;bool (1 samples, 0.02%)</title><rect x="35.4619%" y="693" width="0.0184%" height="15" fill="rgb(235,201,11)" fg:x="1927" fg:w="1"/><text x="35.7119%" y="703.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (3 samples, 0.06%)</title><rect x="35.4435%" y="789" width="0.0552%" height="15" fill="rgb(207,46,11)" fg:x="1926" fg:w="3"/><text x="35.6935%" y="799.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (3 samples, 0.06%)</title><rect x="35.4435%" y="773" width="0.0552%" height="15" fill="rgb(241,35,35)" fg:x="1926" fg:w="3"/><text x="35.6935%" y="783.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::AllocateRaw (1 samples, 0.02%)</title><rect x="35.4803%" y="757" width="0.0184%" height="15" fill="rgb(243,32,47)" fg:x="1928" fg:w="1"/><text x="35.7303%" y="767.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (1 samples, 0.02%)</title><rect x="35.4803%" y="741" width="0.0184%" height="15" fill="rgb(247,202,23)" fg:x="1928" fg:w="1"/><text x="35.7303%" y="751.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (1 samples, 0.02%)</title><rect x="35.4803%" y="725" width="0.0184%" height="15" fill="rgb(219,102,11)" fg:x="1928" fg:w="1"/><text x="35.7303%" y="735.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (1 samples, 0.02%)</title><rect x="35.4803%" y="709" width="0.0184%" height="15" fill="rgb(243,110,44)" fg:x="1928" fg:w="1"/><text x="35.7303%" y="719.50"></text></g><g><title>deno`v8::internal::VirtualMemory::VirtualMemory (1 samples, 0.02%)</title><rect x="35.4803%" y="693" width="0.0184%" height="15" fill="rgb(222,74,54)" fg:x="1928" fg:w="1"/><text x="35.7303%" y="703.50"></text></g><g><title>deno`v8::base::BoundedPageAllocator::AllocatePages (1 samples, 0.02%)</title><rect x="35.4803%" y="677" width="0.0184%" height="15" fill="rgb(216,99,12)" fg:x="1928" fg:w="1"/><text x="35.7303%" y="687.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.02%)</title><rect x="35.4803%" y="661" width="0.0184%" height="15" fill="rgb(226,22,26)" fg:x="1928" fg:w="1"/><text x="35.7303%" y="671.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.02%)</title><rect x="35.4803%" y="645" width="0.0184%" height="15" fill="rgb(217,163,10)" fg:x="1928" fg:w="1"/><text x="35.7303%" y="655.50"></text></g><g><title>deno`v8::internal::LargePage::LargePage (1 samples, 0.02%)</title><rect x="35.4987%" y="757" width="0.0184%" height="15" fill="rgb(213,25,53)" fg:x="1929" fg:w="1"/><text x="35.7487%" y="767.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (1 samples, 0.02%)</title><rect x="35.4987%" y="741" width="0.0184%" height="15" fill="rgb(252,105,26)" fg:x="1929" fg:w="1"/><text x="35.7487%" y="751.50"></text></g><g><title>deno`v8::internal::BasicMemoryChunk::BasicMemoryChunk (1 samples, 0.02%)</title><rect x="35.4987%" y="725" width="0.0184%" height="15" fill="rgb(220,39,43)" fg:x="1929" fg:w="1"/><text x="35.7487%" y="735.50"></text></g><g><title>deno`v8::internal::VirtualMemory::VirtualMemory (1 samples, 0.02%)</title><rect x="35.5171%" y="725" width="0.0184%" height="15" fill="rgb(229,68,48)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="735.50"></text></g><g><title>deno`v8::base::BoundedPageAllocator::AllocatePages (1 samples, 0.02%)</title><rect x="35.5171%" y="709" width="0.0184%" height="15" fill="rgb(252,8,32)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="719.50"></text></g><g><title>deno`v8::base::RegionAllocator::AllocateRegion (1 samples, 0.02%)</title><rect x="35.5171%" y="693" width="0.0184%" height="15" fill="rgb(223,20,43)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="703.50"></text></g><g><title>deno`v8::base::RegionAllocator::Split (1 samples, 0.02%)</title><rect x="35.5171%" y="677" width="0.0184%" height="15" fill="rgb(229,81,49)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="687.50"></text></g><g><title>deno`v8::base::RegionAllocator::FreeListAddRegion (1 samples, 0.02%)</title><rect x="35.5171%" y="661" width="0.0184%" height="15" fill="rgb(236,28,36)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="671.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="35.5171%" y="645" width="0.0184%" height="15" fill="rgb(249,185,26)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="35.5171%" y="629" width="0.0184%" height="15" fill="rgb(249,174,33)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="35.5171%" y="613" width="0.0184%" height="15" fill="rgb(233,201,37)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="35.5171%" y="597" width="0.0184%" height="15" fill="rgb(221,78,26)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="35.5171%" y="581" width="0.0184%" height="15" fill="rgb(250,127,30)" fg:x="1930" fg:w="1"/><text x="35.7671%" y="591.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::AllocateRaw (5 samples, 0.09%)</title><rect x="35.4987%" y="789" width="0.0920%" height="15" fill="rgb(230,49,44)" fg:x="1929" fg:w="5"/><text x="35.7487%" y="799.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (5 samples, 0.09%)</title><rect x="35.4987%" y="773" width="0.0920%" height="15" fill="rgb(229,67,23)" fg:x="1929" fg:w="5"/><text x="35.7487%" y="783.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (4 samples, 0.07%)</title><rect x="35.5171%" y="757" width="0.0736%" height="15" fill="rgb(249,83,47)" fg:x="1930" fg:w="4"/><text x="35.7671%" y="767.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (4 samples, 0.07%)</title><rect x="35.5171%" y="741" width="0.0736%" height="15" fill="rgb(215,43,3)" fg:x="1930" fg:w="4"/><text x="35.7671%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (3 samples, 0.06%)</title><rect x="35.5355%" y="725" width="0.0552%" height="15" fill="rgb(238,154,13)" fg:x="1931" fg:w="3"/><text x="35.7855%" y="735.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (9 samples, 0.17%)</title><rect x="35.4435%" y="821" width="0.1656%" height="15" fill="rgb(219,56,2)" fg:x="1926" fg:w="9"/><text x="35.6935%" y="831.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (9 samples, 0.17%)</title><rect x="35.4435%" y="805" width="0.1656%" height="15" fill="rgb(233,0,4)" fg:x="1926" fg:w="9"/><text x="35.6935%" y="815.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_unlock_init_slow (1 samples, 0.02%)</title><rect x="35.5907%" y="789" width="0.0184%" height="15" fill="rgb(235,30,7)" fg:x="1934" fg:w="1"/><text x="35.8407%" y="799.50"></text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (30 samples, 0.55%)</title><rect x="35.4435%" y="837" width="0.5521%" height="15" fill="rgb(250,79,13)" fg:x="1926" fg:w="30"/><text x="35.6935%" y="847.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.39%)</title><rect x="35.6091%" y="821" width="0.3865%" height="15" fill="rgb(211,146,34)" fg:x="1935" fg:w="21"/><text x="35.8591%" y="831.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_str (54 samples, 0.99%)</title><rect x="35.4435%" y="901" width="0.9937%" height="15" fill="rgb(228,22,38)" fg:x="1926" fg:w="54"/><text x="35.6935%" y="911.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::new_from_utf8 (54 samples, 0.99%)</title><rect x="35.4435%" y="885" width="0.9937%" height="15" fill="rgb(235,168,5)" fg:x="1926" fg:w="54"/><text x="35.6935%" y="895.50"></text></g><g><title>deno`v8::String::NewFromUtf8 (54 samples, 0.99%)</title><rect x="35.4435%" y="869" width="0.9937%" height="15" fill="rgb(221,155,16)" fg:x="1926" fg:w="54"/><text x="35.6935%" y="879.50"></text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (54 samples, 0.99%)</title><rect x="35.4435%" y="853" width="0.9937%" height="15" fill="rgb(215,215,53)" fg:x="1926" fg:w="54"/><text x="35.6935%" y="863.50"></text></g><g><title>deno`v8::internal::Utf8DecoderBase&lt;v8::internal::Utf8Decoder&gt;::Utf8DecoderBase(v8::base::Vector (24 samples, 0.44%)</title><rect x="35.9956%" y="837" width="0.4417%" height="15" fill="rgb(223,4,10)" fg:x="1956" fg:w="24"/><text x="36.2456%" y="847.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (55 samples, 1.01%)</title><rect x="36.4372%" y="901" width="1.0121%" height="15" fill="rgb(234,103,6)" fg:x="1980" fg:w="55"/><text x="36.6872%" y="911.50"></text></g><g><title>deno`v8::String::WriteUtf8 (5 samples, 0.09%)</title><rect x="37.4494%" y="869" width="0.0920%" height="15" fill="rgb(227,97,0)" fg:x="2035" fg:w="5"/><text x="37.6994%" y="879.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (6 samples, 0.11%)</title><rect x="37.4494%" y="901" width="0.1104%" height="15" fill="rgb(234,150,53)" fg:x="2035" fg:w="6"/><text x="37.6994%" y="911.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8 (6 samples, 0.11%)</title><rect x="37.4494%" y="885" width="0.1104%" height="15" fill="rgb(228,201,54)" fg:x="2035" fg:w="6"/><text x="37.6994%" y="895.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="37.5414%" y="869" width="0.0184%" height="15" fill="rgb(222,22,37)" fg:x="2040" fg:w="1"/><text x="37.7914%" y="879.50"></text></g><g><title>0x110039c34 (1,006 samples, 18.51%)</title><rect x="24.9724%" y="949" width="18.5131%" height="15" fill="rgb(237,53,32)" fg:x="1357" fg:w="1006"/><text x="25.2224%" y="959.50">0x110039c34</text></g><g><title>deno`Builtins_CallApiCallback (1,006 samples, 18.51%)</title><rect x="24.9724%" y="933" width="18.5131%" height="15" fill="rgb(233,25,53)" fg:x="1357" fg:w="1006"/><text x="25.2224%" y="943.50">deno`Builtins_CallApiCallback</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (883 samples, 16.25%)</title><rect x="27.2359%" y="917" width="16.2495%" height="15" fill="rgb(210,40,34)" fg:x="1480" fg:w="883"/><text x="27.4859%" y="927.50">deno`&lt;extern &quot;C&quot; fn(A0) ...</text></g><g><title>libsystem_platform.dylib`_platform_memmove (322 samples, 5.93%)</title><rect x="37.5598%" y="901" width="5.9257%" height="15" fill="rgb(241,220,44)" fg:x="2041" fg:w="322"/><text x="37.8098%" y="911.50">libsyste..</text></g><g><title>0x11004b2e0 (1 samples, 0.02%)</title><rect x="43.4855%" y="949" width="0.0184%" height="15" fill="rgb(235,28,35)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="959.50"></text></g><g><title>deno`Builtins_StringPrototypeRepeat (1 samples, 0.02%)</title><rect x="43.4855%" y="933" width="0.0184%" height="15" fill="rgb(210,56,17)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="943.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.02%)</title><rect x="43.4855%" y="917" width="0.0184%" height="15" fill="rgb(224,130,29)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="927.50"></text></g><g><title>deno`v8::internal::Runtime_StackGuard (1 samples, 0.02%)</title><rect x="43.4855%" y="901" width="0.0184%" height="15" fill="rgb(235,212,8)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="911.50"></text></g><g><title>deno`v8::internal::StackGuard::HandleInterrupts (1 samples, 0.02%)</title><rect x="43.4855%" y="885" width="0.0184%" height="15" fill="rgb(223,33,50)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="895.50"></text></g><g><title>deno`v8::internal::Heap::HandleGCRequest (1 samples, 0.02%)</title><rect x="43.4855%" y="869" width="0.0184%" height="15" fill="rgb(219,149,13)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="879.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.02%)</title><rect x="43.4855%" y="853" width="0.0184%" height="15" fill="rgb(250,156,29)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="863.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.02%)</title><rect x="43.4855%" y="837" width="0.0184%" height="15" fill="rgb(216,193,19)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="847.50"></text></g><g><title>deno`v8::internal::Heap::MarkCompact (1 samples, 0.02%)</title><rect x="43.4855%" y="821" width="0.0184%" height="15" fill="rgb(216,135,14)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="831.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::CollectGarbage (1 samples, 0.02%)</title><rect x="43.4855%" y="805" width="0.0184%" height="15" fill="rgb(241,47,5)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="815.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::MarkLiveObjects (1 samples, 0.02%)</title><rect x="43.4855%" y="789" width="0.0184%" height="15" fill="rgb(233,42,35)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="799.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::MarkTransitiveClosureUntilFixpoint (1 samples, 0.02%)</title><rect x="43.4855%" y="773" width="0.0184%" height="15" fill="rgb(231,13,6)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.02%)</title><rect x="43.4855%" y="757" width="0.0184%" height="15" fill="rgb(207,181,40)" fg:x="2363" fg:w="1"/><text x="43.7355%" y="767.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::FunctionCallbackArguments (1 samples, 0.02%)</title><rect x="43.5039%" y="901" width="0.0184%" height="15" fill="rgb(254,173,49)" fg:x="2364" fg:w="1"/><text x="43.7539%" y="911.50"></text></g><g><title>deno`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (352 samples, 6.48%)</title><rect x="43.5407%" y="885" width="6.4777%" height="15" fill="rgb(221,1,38)" fg:x="2366" fg:w="352"/><text x="43.7907%" y="895.50">deno`&lt;al..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.04%)</title><rect x="72.4512%" y="789" width="0.0368%" height="15" fill="rgb(206,124,46)" fg:x="3937" fg:w="2"/><text x="72.7012%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="72.4880%" y="789" width="0.0184%" height="15" fill="rgb(249,21,11)" fg:x="3939" fg:w="1"/><text x="72.7380%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.04%)</title><rect x="72.5064%" y="789" width="0.0368%" height="15" fill="rgb(222,201,40)" fg:x="3940" fg:w="2"/><text x="72.7564%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="72.5064%" y="773" width="0.0368%" height="15" fill="rgb(235,61,29)" fg:x="3940" fg:w="2"/><text x="72.7564%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.04%)</title><rect x="72.5064%" y="757" width="0.0368%" height="15" fill="rgb(219,207,3)" fg:x="3940" fg:w="2"/><text x="72.7564%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (36 samples, 0.66%)</title><rect x="72.4512%" y="805" width="0.6625%" height="15" fill="rgb(222,56,46)" fg:x="3937" fg:w="36"/><text x="72.7012%" y="815.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.57%)</title><rect x="72.5432%" y="789" width="0.5705%" height="15" fill="rgb(239,76,54)" fg:x="3942" fg:w="31"/><text x="72.7932%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="73.1137%" y="805" width="0.0184%" height="15" fill="rgb(231,124,27)" fg:x="3973" fg:w="1"/><text x="73.3637%" y="815.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (39 samples, 0.72%)</title><rect x="72.4328%" y="853" width="0.7177%" height="15" fill="rgb(249,195,6)" fg:x="3936" fg:w="39"/><text x="72.6828%" y="863.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (38 samples, 0.70%)</title><rect x="72.4512%" y="837" width="0.6993%" height="15" fill="rgb(237,174,47)" fg:x="3937" fg:w="38"/><text x="72.7012%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`realloc (38 samples, 0.70%)</title><rect x="72.4512%" y="821" width="0.6993%" height="15" fill="rgb(206,201,31)" fg:x="3937" fg:w="38"/><text x="72.7012%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="73.1321%" y="805" width="0.0184%" height="15" fill="rgb(231,57,52)" fg:x="3974" fg:w="1"/><text x="73.3821%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="73.1321%" y="789" width="0.0184%" height="15" fill="rgb(248,177,22)" fg:x="3974" fg:w="1"/><text x="73.3821%" y="799.50"></text></g><g><title>deno`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (478 samples, 8.80%)</title><rect x="64.3725%" y="869" width="8.7965%" height="15" fill="rgb(215,211,37)" fg:x="3498" fg:w="478"/><text x="64.6225%" y="879.50">deno`&lt;alloc:..</text></g><g><title>deno`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="73.1505%" y="853" width="0.0184%" height="15" fill="rgb(241,128,51)" fg:x="3975" fg:w="1"/><text x="73.4005%" y="863.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (8 samples, 0.15%)</title><rect x="73.1873%" y="645" width="0.1472%" height="15" fill="rgb(227,165,31)" fg:x="3977" fg:w="8"/><text x="73.4373%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (9 samples, 0.17%)</title><rect x="73.1873%" y="661" width="0.1656%" height="15" fill="rgb(228,167,24)" fg:x="3977" fg:w="9"/><text x="73.4373%" y="671.50"></text></g><g><title>deno`v8::internal::Isolate::Iterate (1 samples, 0.02%)</title><rect x="73.3346%" y="645" width="0.0184%" height="15" fill="rgb(228,143,12)" fg:x="3985" fg:w="1"/><text x="73.5846%" y="655.50"></text></g><g><title>deno`v8::internal::JavaScriptFrame::Iterate (1 samples, 0.02%)</title><rect x="73.3346%" y="629" width="0.0184%" height="15" fill="rgb(249,149,8)" fg:x="3985" fg:w="1"/><text x="73.5846%" y="639.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointers (1 samples, 0.02%)</title><rect x="73.3346%" y="613" width="0.0184%" height="15" fill="rgb(243,35,44)" fg:x="3985" fg:w="1"/><text x="73.5846%" y="623.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::FullHeapObjectSlot&gt; (1 samples, 0.02%)</title><rect x="73.3346%" y="597" width="0.0184%" height="15" fill="rgb(246,89,9)" fg:x="3985" fg:w="1"/><text x="73.5846%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="73.3346%" y="581" width="0.0184%" height="15" fill="rgb(233,213,13)" fg:x="3985" fg:w="1"/><text x="73.5846%" y="591.50"></text></g><g><title>deno`v8::internal::Scavenger::Finalize (1 samples, 0.02%)</title><rect x="73.3530%" y="661" width="0.0184%" height="15" fill="rgb(233,141,41)" fg:x="3986" fg:w="1"/><text x="73.6030%" y="671.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::FreeLinearAllocationArea (1 samples, 0.02%)</title><rect x="73.3530%" y="645" width="0.0184%" height="15" fill="rgb(239,167,4)" fg:x="3986" fg:w="1"/><text x="73.6030%" y="655.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (12 samples, 0.22%)</title><rect x="73.1689%" y="677" width="0.2208%" height="15" fill="rgb(209,217,16)" fg:x="3976" fg:w="12"/><text x="73.4189%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.02%)</title><rect x="73.3714%" y="661" width="0.0184%" height="15" fill="rgb(219,88,35)" fg:x="3987" fg:w="1"/><text x="73.6214%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (14 samples, 0.26%)</title><rect x="73.1689%" y="725" width="0.2576%" height="15" fill="rgb(220,193,23)" fg:x="3976" fg:w="14"/><text x="73.4189%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (14 samples, 0.26%)</title><rect x="73.1689%" y="709" width="0.2576%" height="15" fill="rgb(230,90,52)" fg:x="3976" fg:w="14"/><text x="73.4189%" y="719.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (14 samples, 0.26%)</title><rect x="73.1689%" y="693" width="0.2576%" height="15" fill="rgb(252,106,19)" fg:x="3976" fg:w="14"/><text x="73.4189%" y="703.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="73.3898%" y="677" width="0.0368%" height="15" fill="rgb(206,74,20)" fg:x="3988" fg:w="2"/><text x="73.6398%" y="687.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (15 samples, 0.28%)</title><rect x="73.1689%" y="757" width="0.2760%" height="15" fill="rgb(230,138,44)" fg:x="3976" fg:w="15"/><text x="73.4189%" y="767.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (15 samples, 0.28%)</title><rect x="73.1689%" y="741" width="0.2760%" height="15" fill="rgb(235,182,43)" fg:x="3976" fg:w="15"/><text x="73.4189%" y="751.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::AllocateRaw (1 samples, 0.02%)</title><rect x="73.4266%" y="725" width="0.0184%" height="15" fill="rgb(242,16,51)" fg:x="3990" fg:w="1"/><text x="73.6766%" y="735.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (1 samples, 0.02%)</title><rect x="73.4266%" y="709" width="0.0184%" height="15" fill="rgb(248,9,4)" fg:x="3990" fg:w="1"/><text x="73.6766%" y="719.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (1 samples, 0.02%)</title><rect x="73.4266%" y="693" width="0.0184%" height="15" fill="rgb(210,31,22)" fg:x="3990" fg:w="1"/><text x="73.6766%" y="703.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (1 samples, 0.02%)</title><rect x="73.4266%" y="677" width="0.0184%" height="15" fill="rgb(239,54,39)" fg:x="3990" fg:w="1"/><text x="73.6766%" y="687.50"></text></g><g><title>deno`v8::internal::VirtualMemory::VirtualMemory (1 samples, 0.02%)</title><rect x="73.4266%" y="661" width="0.0184%" height="15" fill="rgb(230,99,41)" fg:x="3990" fg:w="1"/><text x="73.6766%" y="671.50"></text></g><g><title>deno`v8::base::BoundedPageAllocator::AllocatePages (1 samples, 0.02%)</title><rect x="73.4266%" y="645" width="0.0184%" height="15" fill="rgb(253,106,12)" fg:x="3990" fg:w="1"/><text x="73.6766%" y="655.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.02%)</title><rect x="73.4266%" y="629" width="0.0184%" height="15" fill="rgb(213,46,41)" fg:x="3990" fg:w="1"/><text x="73.6766%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.02%)</title><rect x="73.4266%" y="613" width="0.0184%" height="15" fill="rgb(215,133,35)" fg:x="3990" fg:w="1"/><text x="73.6766%" y="623.50"></text></g><g><title>deno`v8::internal::LargePage::LargePage (6 samples, 0.11%)</title><rect x="73.4450%" y="725" width="0.1104%" height="15" fill="rgb(213,28,5)" fg:x="3991" fg:w="6"/><text x="73.6950%" y="735.50"></text></g><g><title>deno`v8::internal::MemoryChunk::MemoryChunk (6 samples, 0.11%)</title><rect x="73.4450%" y="709" width="0.1104%" height="15" fill="rgb(215,77,49)" fg:x="3991" fg:w="6"/><text x="73.6950%" y="719.50"></text></g><g><title>deno`v8::internal::BasicMemoryChunk::BasicMemoryChunk (6 samples, 0.11%)</title><rect x="73.4450%" y="693" width="0.1104%" height="15" fill="rgb(248,100,22)" fg:x="3991" fg:w="6"/><text x="73.6950%" y="703.50"></text></g><g><title>deno`v8::base::RegionAllocator::Split (1 samples, 0.02%)</title><rect x="73.5922%" y="645" width="0.0184%" height="15" fill="rgb(208,67,9)" fg:x="3999" fg:w="1"/><text x="73.8422%" y="655.50"></text></g><g><title>deno`v8::base::RegionAllocator::FreeListAddRegion (1 samples, 0.02%)</title><rect x="73.5922%" y="629" width="0.0184%" height="15" fill="rgb(219,133,21)" fg:x="3999" fg:w="1"/><text x="73.8422%" y="639.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="73.5922%" y="613" width="0.0184%" height="15" fill="rgb(246,46,29)" fg:x="3999" fg:w="1"/><text x="73.8422%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="73.5922%" y="597" width="0.0184%" height="15" fill="rgb(246,185,52)" fg:x="3999" fg:w="1"/><text x="73.8422%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="73.5922%" y="581" width="0.0184%" height="15" fill="rgb(252,136,11)" fg:x="3999" fg:w="1"/><text x="73.8422%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="73.5922%" y="565" width="0.0184%" height="15" fill="rgb(219,138,53)" fg:x="3999" fg:w="1"/><text x="73.8422%" y="575.50"></text></g><g><title>deno`v8::base::RegionAllocator::AllocateRegion (4 samples, 0.07%)</title><rect x="73.5554%" y="661" width="0.0736%" height="15" fill="rgb(211,51,23)" fg:x="3997" fg:w="4"/><text x="73.8054%" y="671.50"></text></g><g><title>deno`void std::__1::__tree_remove&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (1 samples, 0.02%)</title><rect x="73.6106%" y="645" width="0.0184%" height="15" fill="rgb(247,221,28)" fg:x="4000" fg:w="1"/><text x="73.8606%" y="655.50"></text></g><g><title>deno`v8::internal::VirtualMemory::VirtualMemory (5 samples, 0.09%)</title><rect x="73.5554%" y="693" width="0.0920%" height="15" fill="rgb(251,222,45)" fg:x="3997" fg:w="5"/><text x="73.8054%" y="703.50"></text></g><g><title>deno`v8::base::BoundedPageAllocator::AllocatePages (5 samples, 0.09%)</title><rect x="73.5554%" y="677" width="0.0920%" height="15" fill="rgb(217,162,53)" fg:x="3997" fg:w="5"/><text x="73.8054%" y="687.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.02%)</title><rect x="73.6290%" y="661" width="0.0184%" height="15" fill="rgb(229,93,14)" fg:x="4001" fg:w="1"/><text x="73.8790%" y="671.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.02%)</title><rect x="73.6290%" y="645" width="0.0184%" height="15" fill="rgb(209,67,49)" fg:x="4001" fg:w="1"/><text x="73.8790%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (18 samples, 0.33%)</title><rect x="73.6474%" y="693" width="0.3312%" height="15" fill="rgb(213,87,29)" fg:x="4002" fg:w="18"/><text x="73.8974%" y="703.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (24 samples, 0.44%)</title><rect x="73.5554%" y="709" width="0.4417%" height="15" fill="rgb(205,151,52)" fg:x="3997" fg:w="24"/><text x="73.8054%" y="719.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="73.9787%" y="693" width="0.0184%" height="15" fill="rgb(253,215,39)" fg:x="4020" fg:w="1"/><text x="74.2287%" y="703.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (25 samples, 0.46%)</title><rect x="73.5554%" y="725" width="0.4601%" height="15" fill="rgb(221,220,41)" fg:x="3997" fg:w="25"/><text x="73.8054%" y="735.50"></text></g><g><title>deno`v8::internal::VirtualMemory::~VirtualMemory (1 samples, 0.02%)</title><rect x="73.9971%" y="709" width="0.0184%" height="15" fill="rgb(218,133,21)" fg:x="4021" fg:w="1"/><text x="74.2471%" y="719.50"></text></g><g><title>deno`v8::internal::VirtualMemory::Reset (1 samples, 0.02%)</title><rect x="74.0155%" y="725" width="0.0184%" height="15" fill="rgb(221,193,43)" fg:x="4022" fg:w="1"/><text x="74.2655%" y="735.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::SeqOneByteString&gt; v8::internal::FactoryBase&lt;v8::internal::Factory&gt;::NewRawStringWithMap&lt;v8::internal::SeqOneByteString&gt; (48 samples, 0.88%)</title><rect x="73.1689%" y="789" width="0.8833%" height="15" fill="rgb(240,128,52)" fg:x="3976" fg:w="48"/><text x="73.4189%" y="799.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRaw (48 samples, 0.88%)</title><rect x="73.1689%" y="773" width="0.8833%" height="15" fill="rgb(253,114,12)" fg:x="3976" fg:w="48"/><text x="73.4189%" y="783.50"></text></g><g><title>deno`v8::internal::NewLargeObjectSpace::AllocateRaw (33 samples, 0.61%)</title><rect x="73.4450%" y="757" width="0.6073%" height="15" fill="rgb(215,223,47)" fg:x="3991" fg:w="33"/><text x="73.6950%" y="767.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateLargePage (33 samples, 0.61%)</title><rect x="73.4450%" y="741" width="0.6073%" height="15" fill="rgb(248,225,23)" fg:x="3991" fg:w="33"/><text x="73.6950%" y="751.50"></text></g><g><title>deno`void std::__1::__tree_balance_after_insert&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (1 samples, 0.02%)</title><rect x="74.0339%" y="725" width="0.0184%" height="15" fill="rgb(250,108,0)" fg:x="4023" fg:w="1"/><text x="74.2839%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (120 samples, 2.21%)</title><rect x="73.1689%" y="805" width="2.2083%" height="15" fill="rgb(228,208,7)" fg:x="3976" fg:w="120"/><text x="73.4189%" y="815.50">d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (72 samples, 1.32%)</title><rect x="74.0523%" y="789" width="1.3250%" height="15" fill="rgb(244,45,10)" fg:x="4024" fg:w="72"/><text x="74.3023%" y="799.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_str (201 samples, 3.70%)</title><rect x="73.1689%" y="869" width="3.6989%" height="15" fill="rgb(207,125,25)" fg:x="3976" fg:w="201"/><text x="73.4189%" y="879.50">deno..</text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::new_from_utf8 (201 samples, 3.70%)</title><rect x="73.1689%" y="853" width="3.6989%" height="15" fill="rgb(210,195,18)" fg:x="3976" fg:w="201"/><text x="73.4189%" y="863.50">deno..</text></g><g><title>deno`v8::String::NewFromUtf8 (201 samples, 3.70%)</title><rect x="73.1689%" y="837" width="3.6989%" height="15" fill="rgb(249,80,12)" fg:x="3976" fg:w="201"/><text x="73.4189%" y="847.50">deno..</text></g><g><title>deno`v8::internal::Factory::NewStringFromUtf8(v8::base::Vector (201 samples, 3.70%)</title><rect x="73.1689%" y="821" width="3.6989%" height="15" fill="rgb(221,65,9)" fg:x="3976" fg:w="201"/><text x="73.4189%" y="831.50">deno..</text></g><g><title>deno`v8::internal::Utf8DecoderBase&lt;v8::internal::Utf8Decoder&gt;::Utf8DecoderBase(v8::base::Vector (81 samples, 1.49%)</title><rect x="75.3773%" y="805" width="1.4906%" height="15" fill="rgb(235,49,36)" fg:x="4096" fg:w="81"/><text x="75.6273%" y="815.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (151 samples, 2.78%)</title><rect x="76.8679%" y="869" width="2.7788%" height="15" fill="rgb(225,32,20)" fg:x="4177" fg:w="151"/><text x="77.1179%" y="879.50">de..</text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="79.6467%" y="869" width="0.0184%" height="15" fill="rgb(215,141,46)" fg:x="4328" fg:w="1"/><text x="79.8967%" y="879.50"></text></g><g><title>deno`v8::String::WriteUtf8 (9 samples, 0.17%)</title><rect x="79.6651%" y="837" width="0.1656%" height="15" fill="rgb(250,160,47)" fg:x="4329" fg:w="9"/><text x="79.9151%" y="847.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (23 samples, 0.42%)</title><rect x="79.6651%" y="869" width="0.4233%" height="15" fill="rgb(216,222,40)" fg:x="4329" fg:w="23"/><text x="79.9151%" y="879.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8 (23 samples, 0.42%)</title><rect x="79.6651%" y="853" width="0.4233%" height="15" fill="rgb(234,217,39)" fg:x="4329" fg:w="23"/><text x="79.9151%" y="863.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.26%)</title><rect x="79.8307%" y="837" width="0.2576%" height="15" fill="rgb(207,178,40)" fg:x="4338" fg:w="14"/><text x="80.0807%" y="847.50"></text></g><g><title>0x11004b408 (2,918 samples, 53.70%)</title><rect x="43.5039%" y="949" width="53.6989%" height="15" fill="rgb(221,136,13)" fg:x="2364" fg:w="2918"/><text x="43.7539%" y="959.50">0x11004b408</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2,918 samples, 53.70%)</title><rect x="43.5039%" y="933" width="53.6989%" height="15" fill="rgb(249,199,10)" fg:x="2364" fg:w="2918"/><text x="43.7539%" y="943.50">deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit</text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (2,918 samples, 53.70%)</title><rect x="43.5039%" y="917" width="53.6989%" height="15" fill="rgb(249,222,13)" fg:x="2364" fg:w="2918"/><text x="43.7539%" y="927.50">deno`v8::internal::Builtin_HandleApiCall</text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2,917 samples, 53.68%)</title><rect x="43.5223%" y="901" width="53.6805%" height="15" fill="rgb(244,185,38)" fg:x="2365" fg:w="2917"/><text x="43.7723%" y="911.50">deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)..</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2,564 samples, 47.18%)</title><rect x="50.0184%" y="885" width="47.1844%" height="15" fill="rgb(236,202,9)" fg:x="2718" fg:w="2564"/><text x="50.2684%" y="895.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn</text></g><g><title>libsystem_platform.dylib`_platform_memmove (930 samples, 17.11%)</title><rect x="80.0883%" y="869" width="17.1145%" height="15" fill="rgb(250,229,37)" fg:x="4352" fg:w="930"/><text x="80.3383%" y="879.50">libsystem_platform.dylib`_p..</text></g><g><title>deno`Builtins_Call_ReceiverIsNotNullOrUndefined_Baseline_Compact (1 samples, 0.02%)</title><rect x="97.2028%" y="949" width="0.0184%" height="15" fill="rgb(206,174,23)" fg:x="5282" fg:w="1"/><text x="97.4528%" y="959.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,936 samples, 72.43%)</title><rect x="24.8068%" y="1189" width="72.4328%" height="15" fill="rgb(211,33,43)" fg:x="1348" fg:w="3936"/><text x="25.0568%" y="1199.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,936 samples, 72.43%)</title><rect x="24.8068%" y="1173" width="72.4328%" height="15" fill="rgb(245,58,50)" fg:x="1348" fg:w="3936"/><text x="25.0568%" y="1183.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,936 samples, 72.43%)</title><rect x="24.8068%" y="1157" width="72.4328%" height="15" fill="rgb(244,68,36)" fg:x="1348" fg:w="3936"/><text x="25.0568%" y="1167.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (3,935 samples, 72.41%)</title><rect x="24.8252%" y="1141" width="72.4144%" height="15" fill="rgb(232,229,15)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1151.50">deno`deno_core::runtime::JsRuntime::mod_evaluate</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (3,935 samples, 72.41%)</title><rect x="24.8252%" y="1125" width="72.4144%" height="15" fill="rgb(254,30,23)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1135.50">deno`v8::Module::Evaluate(v8::Local</text></g><g><title>deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle (3,935 samples, 72.41%)</title><rect x="24.8252%" y="1109" width="72.4144%" height="15" fill="rgb(235,160,14)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1119.50">deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle</text></g><g><title>deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle (3,935 samples, 72.41%)</title><rect x="24.8252%" y="1093" width="72.4144%" height="15" fill="rgb(212,155,44)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1103.50">deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle</text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (3,935 samples, 72.41%)</title><rect x="24.8252%" y="1077" width="72.4144%" height="15" fill="rgb(226,2,50)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1087.50">deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::So..</text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (3,935 samples, 72.41%)</title><rect x="24.8252%" y="1061" width="72.4144%" height="15" fill="rgb(234,177,6)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1071.50">deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle</text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (3,935 samples, 72.41%)</title><rect x="24.8252%" y="1045" width="72.4144%" height="15" fill="rgb(217,24,9)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1055.50">deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (3,935 samples, 72.41%)</title><rect x="24.8252%" y="1029" width="72.4144%" height="15" fill="rgb(220,13,46)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1039.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (3,935 samples, 72.41%)</title><rect x="24.8252%" y="1013" width="72.4144%" height="15" fill="rgb(239,221,27)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1023.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`Builtins_JSEntry (3,935 samples, 72.41%)</title><rect x="24.8252%" y="997" width="72.4144%" height="15" fill="rgb(222,198,25)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="1007.50">deno`Builtins_JSEntry</text></g><g><title>deno`Builtins_JSEntryTrampoline (3,935 samples, 72.41%)</title><rect x="24.8252%" y="981" width="72.4144%" height="15" fill="rgb(211,99,13)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="991.50">deno`Builtins_JSEntryTrampoline</text></g><g><title>deno`Builtins_GeneratorPrototypeNext (3,935 samples, 72.41%)</title><rect x="24.8252%" y="965" width="72.4144%" height="15" fill="rgb(232,111,31)" fg:x="1349" fg:w="3935"/><text x="25.0752%" y="975.50">deno`Builtins_GeneratorPrototypeNext</text></g><g><title>deno`Builtins_LoadIC (1 samples, 0.02%)</title><rect x="97.2212%" y="949" width="0.0184%" height="15" fill="rgb(245,82,37)" fg:x="5283" fg:w="1"/><text x="97.4712%" y="959.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="1045" width="0.0184%" height="15" fill="rgb(227,149,46)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="1055.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="97.2396%" y="1029" width="0.0184%" height="15" fill="rgb(218,36,50)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="1039.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="1013" width="0.0184%" height="15" fill="rgb(226,80,48)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="1023.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="997" width="0.0184%" height="15" fill="rgb(238,224,15)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="1007.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="981" width="0.0184%" height="15" fill="rgb(241,136,10)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="991.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="97.2396%" y="965" width="0.0184%" height="15" fill="rgb(208,32,45)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="975.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="949" width="0.0184%" height="15" fill="rgb(207,135,9)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="959.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="933" width="0.0184%" height="15" fill="rgb(206,86,44)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="943.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="917" width="0.0184%" height="15" fill="rgb(245,177,15)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="927.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="97.2396%" y="901" width="0.0184%" height="15" fill="rgb(206,64,50)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="911.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="885" width="0.0184%" height="15" fill="rgb(234,36,40)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="869" width="0.0184%" height="15" fill="rgb(213,64,8)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="853" width="0.0184%" height="15" fill="rgb(210,75,36)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="97.2396%" y="837" width="0.0184%" height="15" fill="rgb(229,88,21)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="821" width="0.0184%" height="15" fill="rgb(252,204,47)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="805" width="0.0184%" height="15" fill="rgb(208,77,27)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="789" width="0.0184%" height="15" fill="rgb(221,76,26)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="773" width="0.0184%" height="15" fill="rgb(225,139,18)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="757" width="0.0184%" height="15" fill="rgb(230,137,11)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="741" width="0.0184%" height="15" fill="rgb(212,28,1)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="751.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="725" width="0.0184%" height="15" fill="rgb(248,164,17)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="735.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="709" width="0.0184%" height="15" fill="rgb(222,171,42)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="719.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="693" width="0.0184%" height="15" fill="rgb(243,84,45)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="703.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="677" width="0.0184%" height="15" fill="rgb(252,49,23)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="687.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="661" width="0.0184%" height="15" fill="rgb(215,19,7)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="671.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="645" width="0.0184%" height="15" fill="rgb(238,81,41)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="655.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="629" width="0.0184%" height="15" fill="rgb(210,199,37)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="639.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="613" width="0.0184%" height="15" fill="rgb(244,192,49)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="623.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="597" width="0.0184%" height="15" fill="rgb(226,211,11)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="607.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="581" width="0.0184%" height="15" fill="rgb(236,162,54)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="591.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="565" width="0.0184%" height="15" fill="rgb(220,229,9)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="575.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="549" width="0.0184%" height="15" fill="rgb(250,87,22)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="559.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="533" width="0.0184%" height="15" fill="rgb(239,43,17)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="543.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="517" width="0.0184%" height="15" fill="rgb(231,177,25)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="527.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="501" width="0.0184%" height="15" fill="rgb(219,179,1)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="511.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="485" width="0.0184%" height="15" fill="rgb(238,219,53)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="495.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="469" width="0.0184%" height="15" fill="rgb(232,167,36)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="479.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="453" width="0.0184%" height="15" fill="rgb(244,19,51)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="463.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="437" width="0.0184%" height="15" fill="rgb(224,6,22)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="447.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="421" width="0.0184%" height="15" fill="rgb(224,145,5)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="431.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="405" width="0.0184%" height="15" fill="rgb(234,130,49)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="415.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="389" width="0.0184%" height="15" fill="rgb(254,6,2)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="399.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="373" width="0.0184%" height="15" fill="rgb(208,96,46)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="383.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="357" width="0.0184%" height="15" fill="rgb(239,3,39)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="367.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="341" width="0.0184%" height="15" fill="rgb(233,210,1)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="351.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="325" width="0.0184%" height="15" fill="rgb(244,137,37)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="335.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="309" width="0.0184%" height="15" fill="rgb(240,136,2)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="319.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="293" width="0.0184%" height="15" fill="rgb(239,18,37)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="303.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="277" width="0.0184%" height="15" fill="rgb(218,185,22)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="287.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.02%)</title><rect x="97.2396%" y="261" width="0.0184%" height="15" fill="rgb(225,218,4)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="271.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="245" width="0.0184%" height="15" fill="rgb(230,182,32)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="255.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="229" width="0.0184%" height="15" fill="rgb(242,56,43)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="239.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="213" width="0.0184%" height="15" fill="rgb(233,99,24)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="223.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="197" width="0.0184%" height="15" fill="rgb(234,209,42)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="207.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="181" width="0.0184%" height="15" fill="rgb(227,7,12)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="191.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="165" width="0.0184%" height="15" fill="rgb(245,203,43)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="175.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="149" width="0.0184%" height="15" fill="rgb(238,205,33)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="159.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="133" width="0.0184%" height="15" fill="rgb(231,56,7)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="143.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="117" width="0.0184%" height="15" fill="rgb(244,186,29)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="127.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="101" width="0.0184%" height="15" fill="rgb(234,111,31)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="111.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="85" width="0.0184%" height="15" fill="rgb(241,149,10)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="95.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="69" width="0.0184%" height="15" fill="rgb(249,206,44)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="79.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2396%" y="53" width="0.0184%" height="15" fill="rgb(251,153,30)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="63.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2396%" y="37" width="0.0184%" height="15" fill="rgb(239,152,38)" fg:x="5284" fg:w="1"/><text x="97.4896%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.04%)</title><rect x="97.2396%" y="1157" width="0.0368%" height="15" fill="rgb(249,139,47)" fg:x="5284" fg:w="2"/><text x="97.4896%" y="1167.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.04%)</title><rect x="97.2396%" y="1141" width="0.0368%" height="15" fill="rgb(244,64,35)" fg:x="5284" fg:w="2"/><text x="97.4896%" y="1151.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.04%)</title><rect x="97.2396%" y="1125" width="0.0368%" height="15" fill="rgb(216,46,15)" fg:x="5284" fg:w="2"/><text x="97.4896%" y="1135.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.04%)</title><rect x="97.2396%" y="1109" width="0.0368%" height="15" fill="rgb(250,74,19)" fg:x="5284" fg:w="2"/><text x="97.4896%" y="1119.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.04%)</title><rect x="97.2396%" y="1093" width="0.0368%" height="15" fill="rgb(249,42,33)" fg:x="5284" fg:w="2"/><text x="97.4896%" y="1103.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.04%)</title><rect x="97.2396%" y="1077" width="0.0368%" height="15" fill="rgb(242,149,17)" fg:x="5284" fg:w="2"/><text x="97.4896%" y="1087.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.04%)</title><rect x="97.2396%" y="1061" width="0.0368%" height="15" fill="rgb(244,29,21)" fg:x="5284" fg:w="2"/><text x="97.4896%" y="1071.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.02%)</title><rect x="97.2580%" y="1045" width="0.0184%" height="15" fill="rgb(220,130,37)" fg:x="5285" fg:w="1"/><text x="97.5080%" y="1055.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.02%)</title><rect x="97.2580%" y="1029" width="0.0184%" height="15" fill="rgb(211,67,2)" fg:x="5285" fg:w="1"/><text x="97.5080%" y="1039.50"></text></g><g><title>deno`v8::internal::HashTable&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Rehash (1 samples, 0.02%)</title><rect x="97.2580%" y="1013" width="0.0184%" height="15" fill="rgb(235,68,52)" fg:x="5285" fg:w="1"/><text x="97.5080%" y="1023.50"></text></g><g><title>deno`v8::internal::Heap::SetUp (1 samples, 0.02%)</title><rect x="97.2764%" y="1077" width="0.0184%" height="15" fill="rgb(246,142,3)" fg:x="5286" fg:w="1"/><text x="97.5264%" y="1087.50"></text></g><g><title>deno`v8::internal::CodeRange::EnsureProcessWideCodeRange (1 samples, 0.02%)</title><rect x="97.2764%" y="1061" width="0.0184%" height="15" fill="rgb(241,25,7)" fg:x="5286" fg:w="1"/><text x="97.5264%" y="1071.50"></text></g><g><title>deno`v8::internal::CodeRange::InitReservation (1 samples, 0.02%)</title><rect x="97.2764%" y="1045" width="0.0184%" height="15" fill="rgb(242,119,39)" fg:x="5286" fg:w="1"/><text x="97.5264%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="97.2764%" y="1029" width="0.0184%" height="15" fill="rgb(241,98,45)" fg:x="5286" fg:w="1"/><text x="97.5264%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.07%)</title><rect x="97.2396%" y="1173" width="0.0736%" height="15" fill="rgb(254,28,30)" fg:x="5284" fg:w="4"/><text x="97.4896%" y="1183.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.04%)</title><rect x="97.2764%" y="1157" width="0.0368%" height="15" fill="rgb(241,142,54)" fg:x="5286" fg:w="2"/><text x="97.5264%" y="1167.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.04%)</title><rect x="97.2764%" y="1141" width="0.0368%" height="15" fill="rgb(222,85,15)" fg:x="5286" fg:w="2"/><text x="97.5264%" y="1151.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.04%)</title><rect x="97.2764%" y="1125" width="0.0368%" height="15" fill="rgb(210,85,47)" fg:x="5286" fg:w="2"/><text x="97.5264%" y="1135.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.04%)</title><rect x="97.2764%" y="1109" width="0.0368%" height="15" fill="rgb(224,206,25)" fg:x="5286" fg:w="2"/><text x="97.5264%" y="1119.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.04%)</title><rect x="97.2764%" y="1093" width="0.0368%" height="15" fill="rgb(243,201,19)" fg:x="5286" fg:w="2"/><text x="97.5264%" y="1103.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.02%)</title><rect x="97.2948%" y="1077" width="0.0184%" height="15" fill="rgb(236,59,4)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="1087.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.02%)</title><rect x="97.2948%" y="1061" width="0.0184%" height="15" fill="rgb(254,179,45)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="1071.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.02%)</title><rect x="97.2948%" y="1045" width="0.0184%" height="15" fill="rgb(226,14,10)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="1055.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.02%)</title><rect x="97.2948%" y="1029" width="0.0184%" height="15" fill="rgb(244,27,41)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="1039.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2948%" y="1013" width="0.0184%" height="15" fill="rgb(235,35,32)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="1023.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2948%" y="997" width="0.0184%" height="15" fill="rgb(218,68,31)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="1007.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2948%" y="981" width="0.0184%" height="15" fill="rgb(207,120,37)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="991.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2948%" y="965" width="0.0184%" height="15" fill="rgb(227,98,0)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="975.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2948%" y="949" width="0.0184%" height="15" fill="rgb(207,7,3)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="959.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2948%" y="933" width="0.0184%" height="15" fill="rgb(206,98,19)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="943.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2948%" y="917" width="0.0184%" height="15" fill="rgb(217,5,26)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="927.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2948%" y="901" width="0.0184%" height="15" fill="rgb(235,190,38)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="911.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2948%" y="885" width="0.0184%" height="15" fill="rgb(247,86,24)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="895.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2948%" y="869" width="0.0184%" height="15" fill="rgb(205,101,16)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2948%" y="853" width="0.0184%" height="15" fill="rgb(246,168,33)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.02%)</title><rect x="97.2948%" y="837" width="0.0184%" height="15" fill="rgb(231,114,1)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.02%)</title><rect x="97.2948%" y="821" width="0.0184%" height="15" fill="rgb(207,184,53)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="831.50"></text></g><g><title>deno`v8::internal::SnapshotByteSource::GetInt (1 samples, 0.02%)</title><rect x="97.2948%" y="805" width="0.0184%" height="15" fill="rgb(224,95,51)" fg:x="5287" fg:w="1"/><text x="97.5448%" y="815.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.02%)</title><rect x="97.3132%" y="1173" width="0.0184%" height="15" fill="rgb(212,188,45)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1183.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.02%)</title><rect x="97.3132%" y="1157" width="0.0184%" height="15" fill="rgb(223,154,38)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1167.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.02%)</title><rect x="97.3132%" y="1141" width="0.0184%" height="15" fill="rgb(251,22,52)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1151.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.02%)</title><rect x="97.3132%" y="1125" width="0.0184%" height="15" fill="rgb(229,209,22)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1135.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.02%)</title><rect x="97.3132%" y="1109" width="0.0184%" height="15" fill="rgb(234,138,34)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1119.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.02%)</title><rect x="97.3132%" y="1093" width="0.0184%" height="15" fill="rgb(212,95,11)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1103.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.02%)</title><rect x="97.3132%" y="1077" width="0.0184%" height="15" fill="rgb(240,179,47)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1087.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.02%)</title><rect x="97.3132%" y="1061" width="0.0184%" height="15" fill="rgb(240,163,11)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1071.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="97.3132%" y="1045" width="0.0184%" height="15" fill="rgb(236,37,12)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1055.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="97.3132%" y="1029" width="0.0184%" height="15" fill="rgb(232,164,16)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1039.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.02%)</title><rect x="97.3132%" y="1013" width="0.0184%" height="15" fill="rgb(244,205,15)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1023.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.02%)</title><rect x="97.3132%" y="997" width="0.0184%" height="15" fill="rgb(223,117,47)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="1007.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.02%)</title><rect x="97.3132%" y="981" width="0.0184%" height="15" fill="rgb(244,107,35)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="991.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.02%)</title><rect x="97.3132%" y="965" width="0.0184%" height="15" fill="rgb(205,140,8)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="975.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.02%)</title><rect x="97.3132%" y="949" width="0.0184%" height="15" fill="rgb(228,84,46)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="959.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.02%)</title><rect x="97.3132%" y="933" width="0.0184%" height="15" fill="rgb(254,188,9)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="943.50"></text></g><g><title>deno`v8::internal::parsing::ParseFunction(v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.02%)</title><rect x="97.3132%" y="917" width="0.0184%" height="15" fill="rgb(206,112,54)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="927.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::Isolate*, v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.02%)</title><rect x="97.3132%" y="901" width="0.0184%" height="15" fill="rgb(216,84,49)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="911.50"></text></g><g><title>deno`v8::internal::Parser::DoParseFunction (1 samples, 0.02%)</title><rect x="97.3132%" y="885" width="0.0184%" height="15" fill="rgb(214,194,35)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="895.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunctionLiteral(v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::FunctionNameValidity, v8::internal::FunctionKind, int, v8::internal::FunctionSyntaxKind, v8::internal::LanguageMode, v8::internal::ZoneList (1 samples, 0.02%)</title><rect x="97.3132%" y="869" width="0.0184%" height="15" fill="rgb(249,28,3)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="879.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::ScopedList&lt;v8::internal::Statement*, void*&gt;*, v8::internal::AstRawString const*, int, v8::internal::FunctionKind, v8::internal::FunctionSyntaxKind, v8::internal::DeclarationScope*, int*, int*, bool*, int*, int*, v8::internal::ZoneList (1 samples, 0.02%)</title><rect x="97.3132%" y="853" width="0.0184%" height="15" fill="rgb(222,56,52)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="863.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseFunctionBody(v8::internal::ScopedList&lt;v8::internal::Statement*, void*&gt;*, v8::internal::AstRawString const*, int, v8::internal::ParserFormalParameters const&amp;, v8::internal::FunctionKind, v8::internal::FunctionSyntaxKind, v8::internal::ParserBase (1 samples, 0.02%)</title><rect x="97.3132%" y="837" width="0.0184%" height="15" fill="rgb(245,217,50)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="847.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseIfStatement(v8::internal::ZoneList (1 samples, 0.02%)</title><rect x="97.3132%" y="821" width="0.0184%" height="15" fill="rgb(213,201,24)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="831.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseBlock(v8::internal::ZoneList (1 samples, 0.02%)</title><rect x="97.3132%" y="805" width="0.0184%" height="15" fill="rgb(248,116,28)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="815.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseThrowStatement (1 samples, 0.02%)</title><rect x="97.3132%" y="789" width="0.0184%" height="15" fill="rgb(219,72,43)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="799.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseExpressionCoverGrammar (1 samples, 0.02%)</title><rect x="97.3132%" y="773" width="0.0184%" height="15" fill="rgb(209,138,14)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="783.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseAssignmentExpressionCoverGrammar (1 samples, 0.02%)</title><rect x="97.3132%" y="757" width="0.0184%" height="15" fill="rgb(222,18,33)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="767.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseLogicalExpression (1 samples, 0.02%)</title><rect x="97.3132%" y="741" width="0.0184%" height="15" fill="rgb(213,199,7)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="751.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseMemberWithPresentNewPrefixesExpression (1 samples, 0.02%)</title><rect x="97.3132%" y="725" width="0.0184%" height="15" fill="rgb(250,110,10)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="735.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseArguments(v8::internal::ScopedList (1 samples, 0.02%)</title><rect x="97.3132%" y="709" width="0.0184%" height="15" fill="rgb(248,123,6)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="719.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseAssignmentExpressionCoverGrammar (1 samples, 0.02%)</title><rect x="97.3132%" y="693" width="0.0184%" height="15" fill="rgb(206,91,31)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="703.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseLogicalExpression (1 samples, 0.02%)</title><rect x="97.3132%" y="677" width="0.0184%" height="15" fill="rgb(211,154,13)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="687.50"></text></g><g><title>deno`v8::internal::Parser::ExpressionFromLiteral (1 samples, 0.02%)</title><rect x="97.3132%" y="661" width="0.0184%" height="15" fill="rgb(225,148,7)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="671.50"></text></g><g><title>deno`v8::internal::AstValueFactory::GetString(unsigned int, bool, v8::base::Vector (1 samples, 0.02%)</title><rect x="97.3132%" y="645" width="0.0184%" height="15" fill="rgb(220,160,43)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="655.50"></text></g><g><title>deno`v8::base::TemplateHashMapEntry&lt;v8::internal::AstRawString const*, v8::base::NoHashMapValue&gt;* v8::base::TemplateHashMapImpl&lt;v8::internal::AstRawString const*, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy&gt;::Probe&lt;v8::internal::AstRawString*&gt; (1 samples, 0.02%)</title><rect x="97.3132%" y="629" width="0.0184%" height="15" fill="rgb(213,52,39)" fg:x="5288" fg:w="1"/><text x="97.5632%" y="639.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,942 samples, 72.54%)</title><rect x="24.8068%" y="1205" width="72.5432%" height="15" fill="rgb(243,137,7)" fg:x="1348" fg:w="3942"/><text x="25.0568%" y="1215.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (6 samples, 0.11%)</title><rect x="97.2396%" y="1189" width="0.1104%" height="15" fill="rgb(230,79,13)" fg:x="5284" fg:w="6"/><text x="97.4896%" y="1199.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.02%)</title><rect x="97.3316%" y="1173" width="0.0184%" height="15" fill="rgb(247,105,23)" fg:x="5289" fg:w="1"/><text x="97.5816%" y="1183.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.02%)</title><rect x="97.3316%" y="1157" width="0.0184%" height="15" fill="rgb(223,179,41)" fg:x="5289" fg:w="1"/><text x="97.5816%" y="1167.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.02%)</title><rect x="97.3316%" y="1141" width="0.0184%" height="15" fill="rgb(218,9,34)" fg:x="5289" fg:w="1"/><text x="97.5816%" y="1151.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.02%)</title><rect x="97.3316%" y="1125" width="0.0184%" height="15" fill="rgb(222,106,8)" fg:x="5289" fg:w="1"/><text x="97.5816%" y="1135.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.02%)</title><rect x="97.3316%" y="1109" width="0.0184%" height="15" fill="rgb(211,220,0)" fg:x="5289" fg:w="1"/><text x="97.5816%" y="1119.50"></text></g><g><title>deno`&lt;v8::isolate::OwnedIsolate as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="97.3500%" y="1157" width="0.0184%" height="15" fill="rgb(229,52,16)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1167.50"></text></g><g><title>deno`v8::Isolate::LowMemoryNotification (1 samples, 0.02%)</title><rect x="97.3500%" y="1141" width="0.0184%" height="15" fill="rgb(212,155,18)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1151.50"></text></g><g><title>deno`v8::internal::Heap::CollectAllAvailableGarbage (1 samples, 0.02%)</title><rect x="97.3500%" y="1125" width="0.0184%" height="15" fill="rgb(242,21,14)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1135.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.02%)</title><rect x="97.3500%" y="1109" width="0.0184%" height="15" fill="rgb(222,19,48)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1119.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.02%)</title><rect x="97.3500%" y="1093" width="0.0184%" height="15" fill="rgb(232,45,27)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1103.50"></text></g><g><title>deno`v8::internal::Heap::MarkCompact (1 samples, 0.02%)</title><rect x="97.3500%" y="1077" width="0.0184%" height="15" fill="rgb(249,103,42)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1087.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::CollectGarbage (1 samples, 0.02%)</title><rect x="97.3500%" y="1061" width="0.0184%" height="15" fill="rgb(246,81,33)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1071.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::MarkLiveObjects (1 samples, 0.02%)</title><rect x="97.3500%" y="1045" width="0.0184%" height="15" fill="rgb(252,33,42)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1055.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::MarkTransitiveClosureUntilFixpoint (1 samples, 0.02%)</title><rect x="97.3500%" y="1029" width="0.0184%" height="15" fill="rgb(209,212,41)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1039.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::ProcessEphemerons (1 samples, 0.02%)</title><rect x="97.3500%" y="1013" width="0.0184%" height="15" fill="rgb(207,154,6)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1023.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::ProcessMarkingWorklist (1 samples, 0.02%)</title><rect x="97.3500%" y="997" width="0.0184%" height="15" fill="rgb(223,64,47)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="1007.50"></text></g><g><title>deno`v8::internal::MarkingWorklists::Local::Pop (1 samples, 0.02%)</title><rect x="97.3500%" y="981" width="0.0184%" height="15" fill="rgb(211,161,38)" fg:x="5290" fg:w="1"/><text x="97.6000%" y="991.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,944 samples, 72.58%)</title><rect x="24.8068%" y="1237" width="72.5801%" height="15" fill="rgb(219,138,40)" fg:x="1348" fg:w="3944"/><text x="25.0568%" y="1247.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (3,944 samples, 72.58%)</title><rect x="24.8068%" y="1221" width="72.5801%" height="15" fill="rgb(241,228,46)" fg:x="1348" fg:w="3944"/><text x="25.0568%" y="1231.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`core::ptr::drop_in_place&lt;deno::worker::CliMainWorker&gt; (2 samples, 0.04%)</title><rect x="97.3500%" y="1205" width="0.0368%" height="15" fill="rgb(223,209,38)" fg:x="5290" fg:w="2"/><text x="97.6000%" y="1215.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_runtime::worker::MainWorker&gt; (2 samples, 0.04%)</title><rect x="97.3500%" y="1189" width="0.0368%" height="15" fill="rgb(236,164,45)" fg:x="5290" fg:w="2"/><text x="97.6000%" y="1199.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::runtime::JsRuntime&gt; (2 samples, 0.04%)</title><rect x="97.3500%" y="1173" width="0.0368%" height="15" fill="rgb(231,15,5)" fg:x="5290" fg:w="2"/><text x="97.6000%" y="1183.50"></text></g><g><title>deno`v8::internal::Isolate::Delete (1 samples, 0.02%)</title><rect x="97.3684%" y="1157" width="0.0184%" height="15" fill="rgb(252,35,15)" fg:x="5291" fg:w="1"/><text x="97.6184%" y="1167.50"></text></g><g><title>deno`v8::internal::Isolate::Deinit (1 samples, 0.02%)</title><rect x="97.3684%" y="1141" width="0.0184%" height="15" fill="rgb(248,181,18)" fg:x="5291" fg:w="1"/><text x="97.6184%" y="1151.50"></text></g><g><title>deno`v8::internal::Heap::TearDown (1 samples, 0.02%)</title><rect x="97.3684%" y="1125" width="0.0184%" height="15" fill="rgb(233,39,42)" fg:x="5291" fg:w="1"/><text x="97.6184%" y="1135.50"></text></g><g><title>deno`v8::internal::OldSpace::~OldSpace (1 samples, 0.02%)</title><rect x="97.3684%" y="1109" width="0.0184%" height="15" fill="rgb(238,110,33)" fg:x="5291" fg:w="1"/><text x="97.6184%" y="1119.50"></text></g><g><title>deno`v8::internal::PagedSpace::~PagedSpace (1 samples, 0.02%)</title><rect x="97.3684%" y="1093" width="0.0184%" height="15" fill="rgb(233,195,10)" fg:x="5291" fg:w="1"/><text x="97.6184%" y="1103.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::TearDown (1 samples, 0.02%)</title><rect x="97.3684%" y="1077" width="0.0184%" height="15" fill="rgb(254,105,3)" fg:x="5291" fg:w="1"/><text x="97.6184%" y="1087.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::Free (1 samples, 0.02%)</title><rect x="97.3684%" y="1061" width="0.0184%" height="15" fill="rgb(221,225,9)" fg:x="5291" fg:w="1"/><text x="97.6184%" y="1071.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::PerformFreeMemory (1 samples, 0.02%)</title><rect x="97.3684%" y="1045" width="0.0184%" height="15" fill="rgb(224,227,45)" fg:x="5291" fg:w="1"/><text x="97.6184%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="97.3684%" y="1029" width="0.0184%" height="15" fill="rgb(229,198,43)" fg:x="5291" fg:w="1"/><text x="97.6184%" y="1039.50"></text></g><g><title>dyld`start (3,945 samples, 72.60%)</title><rect x="24.8068%" y="1349" width="72.5985%" height="15" fill="rgb(206,209,35)" fg:x="1348" fg:w="3945"/><text x="25.0568%" y="1359.50">dyld`start</text></g><g><title>deno`main (3,945 samples, 72.60%)</title><rect x="24.8068%" y="1333" width="72.5985%" height="15" fill="rgb(245,195,53)" fg:x="1348" fg:w="3945"/><text x="25.0568%" y="1343.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (3,945 samples, 72.60%)</title><rect x="24.8068%" y="1317" width="72.5985%" height="15" fill="rgb(240,92,26)" fg:x="1348" fg:w="3945"/><text x="25.0568%" y="1327.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (3,945 samples, 72.60%)</title><rect x="24.8068%" y="1301" width="72.5985%" height="15" fill="rgb(207,40,23)" fg:x="1348" fg:w="3945"/><text x="25.0568%" y="1311.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (3,945 samples, 72.60%)</title><rect x="24.8068%" y="1285" width="72.5985%" height="15" fill="rgb(223,111,35)" fg:x="1348" fg:w="3945"/><text x="25.0568%" y="1295.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,945 samples, 72.60%)</title><rect x="24.8068%" y="1269" width="72.5985%" height="15" fill="rgb(229,147,28)" fg:x="1348" fg:w="3945"/><text x="25.0568%" y="1279.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::main::_{{closure}} (3,945 samples, 72.60%)</title><rect x="24.8068%" y="1253" width="72.5985%" height="15" fill="rgb(211,29,28)" fg:x="1348" fg:w="3945"/><text x="25.0568%" y="1263.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`deno::args::flags::flags_from_vec (1 samples, 0.02%)</title><rect x="97.3868%" y="1237" width="0.0184%" height="15" fill="rgb(228,72,33)" fg:x="5292" fg:w="1"/><text x="97.6368%" y="1247.50"></text></g><g><title>deno`deno::version::deno (1 samples, 0.02%)</title><rect x="97.3868%" y="1221" width="0.0184%" height="15" fill="rgb(205,214,31)" fg:x="5292" fg:w="1"/><text x="97.6368%" y="1231.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.3868%" y="1205" width="0.0184%" height="15" fill="rgb(224,111,15)" fg:x="5292" fg:w="1"/><text x="97.6368%" y="1215.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="97.4052%" y="1349" width="0.0184%" height="15" fill="rgb(253,21,26)" fg:x="5293" fg:w="1"/><text x="97.6552%" y="1359.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::JobTask::GetMaxConcurrency (1 samples, 0.02%)</title><rect x="97.4236%" y="1285" width="0.0184%" height="15" fill="rgb(245,139,43)" fg:x="5294" fg:w="1"/><text x="97.6736%" y="1295.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (1 samples, 0.02%)</title><rect x="97.4420%" y="1221" width="0.0184%" height="15" fill="rgb(252,170,7)" fg:x="5295" fg:w="1"/><text x="97.6920%" y="1231.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (1 samples, 0.02%)</title><rect x="97.4420%" y="1205" width="0.0184%" height="15" fill="rgb(231,118,14)" fg:x="5295" fg:w="1"/><text x="97.6920%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (1 samples, 0.02%)</title><rect x="97.4420%" y="1189" width="0.0184%" height="15" fill="rgb(238,83,0)" fg:x="5295" fg:w="1"/><text x="97.6920%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.02%)</title><rect x="97.4420%" y="1173" width="0.0184%" height="15" fill="rgb(221,39,39)" fg:x="5295" fg:w="1"/><text x="97.6920%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.02%)</title><rect x="97.4420%" y="1157" width="0.0184%" height="15" fill="rgb(222,119,46)" fg:x="5295" fg:w="1"/><text x="97.6920%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.02%)</title><rect x="97.4420%" y="1141" width="0.0184%" height="15" fill="rgb(222,165,49)" fg:x="5295" fg:w="1"/><text x="97.6920%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReduceJSLoadProperty (1 samples, 0.02%)</title><rect x="97.4420%" y="1125" width="0.0184%" height="15" fill="rgb(219,113,52)" fg:x="5295" fg:w="1"/><text x="97.6920%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReducePropertyAccess(v8::internal::compiler::Node*, v8::internal::compiler::Node*, v8::base::Optional (1 samples, 0.02%)</title><rect x="97.4420%" y="1109" width="0.0184%" height="15" fill="rgb(214,7,15)" fg:x="5295" fg:w="1"/><text x="97.6920%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReduceElementAccess (1 samples, 0.02%)</title><rect x="97.4420%" y="1093" width="0.0184%" height="15" fill="rgb(235,32,4)" fg:x="5295" fg:w="1"/><text x="97.6920%" y="1103.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (2 samples, 0.04%)</title><rect x="97.4420%" y="1285" width="0.0368%" height="15" fill="rgb(238,90,54)" fg:x="5295" fg:w="2"/><text x="97.6920%" y="1295.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (2 samples, 0.04%)</title><rect x="97.4420%" y="1269" width="0.0368%" height="15" fill="rgb(213,208,19)" fg:x="5295" fg:w="2"/><text x="97.6920%" y="1279.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (2 samples, 0.04%)</title><rect x="97.4420%" y="1253" width="0.0368%" height="15" fill="rgb(233,156,4)" fg:x="5295" fg:w="2"/><text x="97.6920%" y="1263.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (2 samples, 0.04%)</title><rect x="97.4420%" y="1237" width="0.0368%" height="15" fill="rgb(207,194,5)" fg:x="5295" fg:w="2"/><text x="97.6920%" y="1247.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (1 samples, 0.02%)</title><rect x="97.4604%" y="1221" width="0.0184%" height="15" fill="rgb(206,111,30)" fg:x="5296" fg:w="1"/><text x="97.7104%" y="1231.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (1 samples, 0.02%)</title><rect x="97.4604%" y="1205" width="0.0184%" height="15" fill="rgb(243,70,54)" fg:x="5296" fg:w="1"/><text x="97.7104%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (1 samples, 0.02%)</title><rect x="97.4604%" y="1189" width="0.0184%" height="15" fill="rgb(242,28,8)" fg:x="5296" fg:w="1"/><text x="97.7104%" y="1199.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MeetRegisterConstraintsPhase&gt; (1 samples, 0.02%)</title><rect x="97.4604%" y="1173" width="0.0184%" height="15" fill="rgb(219,106,18)" fg:x="5296" fg:w="1"/><text x="97.7104%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::ConstraintBuilder::MeetRegisterConstraints (1 samples, 0.02%)</title><rect x="97.4604%" y="1157" width="0.0184%" height="15" fill="rgb(244,222,10)" fg:x="5296" fg:w="1"/><text x="97.7104%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::ConstraintBuilder::MeetConstraintsBefore (1 samples, 0.02%)</title><rect x="97.4604%" y="1141" width="0.0184%" height="15" fill="rgb(236,179,52)" fg:x="5296" fg:w="1"/><text x="97.7104%" y="1151.50"></text></g><g><title>deno`v8::internal::ConcurrentMarkingVisitor::ShouldVisit (6 samples, 0.11%)</title><rect x="97.4788%" y="1221" width="0.1104%" height="15" fill="rgb(213,23,39)" fg:x="5297" fg:w="6"/><text x="97.7288%" y="1231.50"></text></g><g><title>deno`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, v8::internal::BasicMemoryChunk::Hasher, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, v8::internal::BasicMemoryChunk::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt; &gt; &gt;::__emplace_unique_key_args&lt;v8::internal::MemoryChunk*, std::__1::piecewise_construct_t const&amp;, std::__1::tuple (2 samples, 0.04%)</title><rect x="97.5524%" y="1205" width="0.0368%" height="15" fill="rgb(238,48,10)" fg:x="5301" fg:w="2"/><text x="97.8024%" y="1215.50"></text></g><g><title>deno`v8::internal::ConcurrentMarkingVisitor::VisitSeqOneByteString (7 samples, 0.13%)</title><rect x="97.4788%" y="1237" width="0.1288%" height="15" fill="rgb(251,196,23)" fg:x="5297" fg:w="7"/><text x="97.7288%" y="1247.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedObjectSlot&gt; (1 samples, 0.02%)</title><rect x="97.5893%" y="1221" width="0.0184%" height="15" fill="rgb(250,152,24)" fg:x="5303" fg:w="1"/><text x="97.8393%" y="1231.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::Run(v8::JobDelegate*, v8::base::EnumSet (8 samples, 0.15%)</title><rect x="97.4788%" y="1253" width="0.1472%" height="15" fill="rgb(209,150,17)" fg:x="5297" fg:w="8"/><text x="97.7288%" y="1263.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.02%)</title><rect x="97.6077%" y="1237" width="0.0184%" height="15" fill="rgb(234,202,34)" fg:x="5304" fg:w="1"/><text x="97.8577%" y="1247.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.02%)</title><rect x="97.6077%" y="1221" width="0.0184%" height="15" fill="rgb(253,148,53)" fg:x="5304" fg:w="1"/><text x="97.8577%" y="1231.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::JobTask::Run (9 samples, 0.17%)</title><rect x="97.4788%" y="1269" width="0.1656%" height="15" fill="rgb(218,129,16)" fg:x="5297" fg:w="9"/><text x="97.7288%" y="1279.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="97.6261%" y="1253" width="0.0184%" height="15" fill="rgb(216,85,19)" fg:x="5305" fg:w="1"/><text x="97.8761%" y="1263.50"></text></g><g><title>deno`v8::internal::MemoryChunk::ReleaseAllocatedMemoryNeededForWritableChunk (1 samples, 0.02%)</title><rect x="97.6445%" y="1221" width="0.0184%" height="15" fill="rgb(235,228,7)" fg:x="5306" fg:w="1"/><text x="97.8945%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="97.6445%" y="1205" width="0.0184%" height="15" fill="rgb(245,175,0)" fg:x="5306" fg:w="1"/><text x="97.8945%" y="1215.50"></text></g><g><title>deno`DYLD-STUB$$mprotect (1 samples, 0.02%)</title><rect x="97.6629%" y="1189" width="0.0184%" height="15" fill="rgb(208,168,36)" fg:x="5307" fg:w="1"/><text x="97.9129%" y="1199.50"></text></g><g><title>deno`v8::base::RegionAllocator::FreeListRemoveRegion (1 samples, 0.02%)</title><rect x="97.7365%" y="1173" width="0.0184%" height="15" fill="rgb(246,171,24)" fg:x="5311" fg:w="1"/><text x="97.9865%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="97.7549%" y="1173" width="0.0184%" height="15" fill="rgb(215,142,24)" fg:x="5312" fg:w="1"/><text x="98.0049%" y="1183.50"></text></g><g><title>deno`v8::base::RegionAllocator::TrimRegion (6 samples, 0.11%)</title><rect x="97.6813%" y="1189" width="0.1104%" height="15" fill="rgb(250,187,7)" fg:x="5308" fg:w="6"/><text x="97.9313%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="97.7733%" y="1173" width="0.0184%" height="15" fill="rgb(228,66,33)" fg:x="5313" fg:w="1"/><text x="98.0233%" y="1183.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (33 samples, 0.61%)</title><rect x="97.7917%" y="1189" width="0.6073%" height="15" fill="rgb(234,215,21)" fg:x="5314" fg:w="33"/><text x="98.0417%" y="1199.50"></text></g><g><title>libsystem_kernel.dylib`madvise (26 samples, 0.48%)</title><rect x="98.3990%" y="1189" width="0.4785%" height="15" fill="rgb(222,191,20)" fg:x="5347" fg:w="26"/><text x="98.6490%" y="1199.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (36 samples, 0.66%)</title><rect x="98.8774%" y="1189" width="0.6625%" height="15" fill="rgb(245,79,54)" fg:x="5373" fg:w="36"/><text x="99.1274%" y="1199.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (36 samples, 0.66%)</title><rect x="98.8774%" y="1173" width="0.6625%" height="15" fill="rgb(240,10,37)" fg:x="5373" fg:w="36"/><text x="99.1274%" y="1183.50"></text></g><g><title>deno`v8::internal::VirtualMemory::Free (116 samples, 2.13%)</title><rect x="97.6629%" y="1221" width="2.1347%" height="15" fill="rgb(214,192,32)" fg:x="5307" fg:w="116"/><text x="97.9129%" y="1231.50">d..</text></g><g><title>deno`v8::base::BoundedPageAllocator::FreePages (116 samples, 2.13%)</title><rect x="97.6629%" y="1205" width="2.1347%" height="15" fill="rgb(209,36,54)" fg:x="5307" fg:w="116"/><text x="97.9129%" y="1215.50">d..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (14 samples, 0.26%)</title><rect x="99.5399%" y="1189" width="0.2576%" height="15" fill="rgb(220,10,11)" fg:x="5409" fg:w="14"/><text x="99.7899%" y="1199.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (14 samples, 0.26%)</title><rect x="99.5399%" y="1173" width="0.2576%" height="15" fill="rgb(221,106,17)" fg:x="5409" fg:w="14"/><text x="99.7899%" y="1183.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.02%)</title><rect x="99.7976%" y="1221" width="0.0184%" height="15" fill="rgb(251,142,44)" fg:x="5423" fg:w="1"/><text x="100.0476%" y="1231.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::PerformFreeMemory (119 samples, 2.19%)</title><rect x="97.6445%" y="1237" width="2.1899%" height="15" fill="rgb(238,13,15)" fg:x="5306" fg:w="119"/><text x="97.8945%" y="1247.50">d..</text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="99.8160%" y="1221" width="0.0184%" height="15" fill="rgb(208,107,27)" fg:x="5424" fg:w="1"/><text x="100.0660%" y="1231.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::Unmapper::UnmapFreeMemoryJob::Run (120 samples, 2.21%)</title><rect x="97.6445%" y="1269" width="2.2083%" height="15" fill="rgb(205,136,37)" fg:x="5306" fg:w="120"/><text x="97.8945%" y="1279.50">d..</text></g><g><title>deno`v8::internal::MemoryAllocator::Unmapper::PerformFreeMemoryOnQueuedChunks (120 samples, 2.21%)</title><rect x="97.6445%" y="1253" width="2.2083%" height="15" fill="rgb(250,205,27)" fg:x="5306" fg:w="120"/><text x="97.8945%" y="1263.50">d..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="99.8344%" y="1237" width="0.0184%" height="15" fill="rgb(210,80,43)" fg:x="5425" fg:w="1"/><text x="100.0844%" y="1247.50"></text></g><g><title>deno`v8::internal::Sweeper::RawSweep(v8::internal::Page*, v8::internal::FreeSpaceTreatmentMode, v8::internal::Sweeper::SweepingMode, v8::base::LockGuard&lt;v8::base::Mutex, (1 samples, 0.02%)</title><rect x="99.8528%" y="1221" width="0.0184%" height="15" fill="rgb(247,160,36)" fg:x="5426" fg:w="1"/><text x="100.1028%" y="1231.50"></text></g><g><title>deno`v8::platform::DefaultJobWorker::Run (131 samples, 2.41%)</title><rect x="97.4788%" y="1285" width="2.4107%" height="15" fill="rgb(234,13,49)" fg:x="5297" fg:w="131"/><text x="97.7288%" y="1295.50">de..</text></g><g><title>deno`v8::internal::Sweeper::SweeperJob::Run (2 samples, 0.04%)</title><rect x="99.8528%" y="1269" width="0.0368%" height="15" fill="rgb(234,122,0)" fg:x="5426" fg:w="2"/><text x="100.1028%" y="1279.50"></text></g><g><title>deno`v8::internal::Sweeper::SweeperJob::RunImpl (2 samples, 0.04%)</title><rect x="99.8528%" y="1253" width="0.0368%" height="15" fill="rgb(207,146,38)" fg:x="5426" fg:w="2"/><text x="100.1028%" y="1263.50"></text></g><g><title>deno`v8::internal::Sweeper::ParallelSweepPage (2 samples, 0.04%)</title><rect x="99.8528%" y="1237" width="0.0368%" height="15" fill="rgb(207,177,25)" fg:x="5426" fg:w="2"/><text x="100.1028%" y="1247.50"></text></g><g><title>deno`v8::internal::Sweeper::RawSweep(v8::internal::Page*, v8::internal::FreeSpaceTreatmentMode, v8::internal::Sweeper::SweepingMode, v8::base::LockGuard&lt;v8::base::Mutex,  (1 samples, 0.02%)</title><rect x="99.8712%" y="1221" width="0.0184%" height="15" fill="rgb(211,178,42)" fg:x="5427" fg:w="1"/><text x="100.1212%" y="1231.50"></text></g><g><title>deno`v8::internal::LiveObjectRange&lt;(v8::internal::LiveObjectIterationMode)0&gt;::iterator::AdvanceToNextValidObject (1 samples, 0.02%)</title><rect x="99.8712%" y="1205" width="0.0184%" height="15" fill="rgb(230,69,54)" fg:x="5427" fg:w="1"/><text x="100.1212%" y="1215.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.02%)</title><rect x="99.8712%" y="1189" width="0.0184%" height="15" fill="rgb(214,135,41)" fg:x="5427" fg:w="1"/><text x="100.1212%" y="1199.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (4 samples, 0.07%)</title><rect x="99.8896%" y="1269" width="0.0736%" height="15" fill="rgb(237,67,25)" fg:x="5428" fg:w="4"/><text x="100.1396%" y="1279.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.02%)</title><rect x="99.9632%" y="1269" width="0.0184%" height="15" fill="rgb(222,189,50)" fg:x="5432" fg:w="1"/><text x="100.2132%" y="1279.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.02%)</title><rect x="99.9632%" y="1253" width="0.0184%" height="15" fill="rgb(245,148,34)" fg:x="5432" fg:w="1"/><text x="100.2132%" y="1263.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.02%)</title><rect x="99.9632%" y="1237" width="0.0184%" height="15" fill="rgb(222,29,6)" fg:x="5432" fg:w="1"/><text x="100.2132%" y="1247.50"></text></g><g><title>all (5,434 samples, 100%)</title><rect x="0.0000%" y="1365" width="100.0000%" height="15" fill="rgb(221,189,43)" fg:x="0" fg:w="5434"/><text x="0.2500%" y="1375.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (140 samples, 2.58%)</title><rect x="97.4236%" y="1349" width="2.5764%" height="15" fill="rgb(207,36,27)" fg:x="5294" fg:w="140"/><text x="97.6736%" y="1359.50">li..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (140 samples, 2.58%)</title><rect x="97.4236%" y="1333" width="2.5764%" height="15" fill="rgb(217,90,24)" fg:x="5294" fg:w="140"/><text x="97.6736%" y="1343.50">li..</text></g><g><title>deno`v8::base::ThreadEntry (140 samples, 2.58%)</title><rect x="97.4236%" y="1317" width="2.5764%" height="15" fill="rgb(224,66,35)" fg:x="5294" fg:w="140"/><text x="97.6736%" y="1327.50">de..</text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (140 samples, 2.58%)</title><rect x="97.4236%" y="1301" width="2.5764%" height="15" fill="rgb(221,13,50)" fg:x="5294" fg:w="140"/><text x="97.6736%" y="1311.50">de..</text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (6 samples, 0.11%)</title><rect x="99.8896%" y="1285" width="0.1104%" height="15" fill="rgb(236,68,49)" fg:x="5428" fg:w="6"/><text x="100.1396%" y="1295.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.02%)</title><rect x="99.9816%" y="1269" width="0.0184%" height="15" fill="rgb(229,146,28)" fg:x="5433" fg:w="1"/><text x="100.2316%" y="1279.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.02%)</title><rect x="99.9816%" y="1253" width="0.0184%" height="15" fill="rgb(225,31,38)" fg:x="5433" fg:w="1"/><text x="100.2316%" y="1263.50"></text></g></svg></svg>