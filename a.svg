<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1205.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="1314"><g><title>0x11000d0a8 (3 samples, 0.23%)</title><rect x="1.9026%" y="917" width="0.2283%" height="15" fill="rgb(227,0,7)" fg:x="25" fg:w="3"/><text x="2.1526%" y="927.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (1 samples, 0.08%)</title><rect x="2.1309%" y="917" width="0.0761%" height="15" fill="rgb(217,0,24)" fg:x="28" fg:w="1"/><text x="2.3809%" y="927.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (7 samples, 0.53%)</title><rect x="2.2070%" y="917" width="0.5327%" height="15" fill="rgb(221,193,54)" fg:x="29" fg:w="7"/><text x="2.4570%" y="927.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNullOrUndefined (3 samples, 0.23%)</title><rect x="2.7397%" y="917" width="0.2283%" height="15" fill="rgb(248,212,6)" fg:x="36" fg:w="3"/><text x="2.9897%" y="927.50"></text></g><g><title>0x11000d0cc (2 samples, 0.15%)</title><rect x="3.7291%" y="901" width="0.1522%" height="15" fill="rgb(208,68,35)" fg:x="49" fg:w="2"/><text x="3.9791%" y="911.50"></text></g><g><title>0x11000d0f0 (1 samples, 0.08%)</title><rect x="3.8813%" y="901" width="0.0761%" height="15" fill="rgb(232,128,0)" fg:x="51" fg:w="1"/><text x="4.1313%" y="911.50"></text></g><g><title>0x11000d1e8 (1 samples, 0.08%)</title><rect x="3.9574%" y="901" width="0.0761%" height="15" fill="rgb(207,160,47)" fg:x="52" fg:w="1"/><text x="4.2074%" y="911.50"></text></g><g><title>0x11000d210 (1 samples, 0.08%)</title><rect x="4.2618%" y="885" width="0.0761%" height="15" fill="rgb(228,23,34)" fg:x="56" fg:w="1"/><text x="4.5118%" y="895.50"></text></g><g><title>0x11000d468 (2 samples, 0.15%)</title><rect x="4.3379%" y="885" width="0.1522%" height="15" fill="rgb(218,30,26)" fg:x="57" fg:w="2"/><text x="4.5879%" y="895.50"></text></g><g><title>0x11000d470 (1 samples, 0.08%)</title><rect x="4.4901%" y="885" width="0.0761%" height="15" fill="rgb(220,122,19)" fg:x="59" fg:w="1"/><text x="4.7401%" y="895.50"></text></g><g><title>0x11000d480 (2 samples, 0.15%)</title><rect x="4.5662%" y="885" width="0.1522%" height="15" fill="rgb(250,228,42)" fg:x="60" fg:w="2"/><text x="4.8162%" y="895.50"></text></g><g><title>0x11000d4a4 (1 samples, 0.08%)</title><rect x="4.7184%" y="885" width="0.0761%" height="15" fill="rgb(240,193,28)" fg:x="62" fg:w="1"/><text x="4.9684%" y="895.50"></text></g><g><title>0x11000d4c4 (1 samples, 0.08%)</title><rect x="4.7945%" y="885" width="0.0761%" height="15" fill="rgb(216,20,37)" fg:x="63" fg:w="1"/><text x="5.0445%" y="895.50"></text></g><g><title>0x11000d4cc (4 samples, 0.30%)</title><rect x="4.8706%" y="885" width="0.3044%" height="15" fill="rgb(206,188,39)" fg:x="64" fg:w="4"/><text x="5.1206%" y="895.50"></text></g><g><title>0x11000d4f4 (1 samples, 0.08%)</title><rect x="5.1750%" y="885" width="0.0761%" height="15" fill="rgb(217,207,13)" fg:x="68" fg:w="1"/><text x="5.4250%" y="895.50"></text></g><g><title>0x11000d560 (2 samples, 0.15%)</title><rect x="5.2511%" y="885" width="0.1522%" height="15" fill="rgb(231,73,38)" fg:x="69" fg:w="2"/><text x="5.5011%" y="895.50"></text></g><g><title>0x11000d578 (1 samples, 0.08%)</title><rect x="5.4033%" y="885" width="0.0761%" height="15" fill="rgb(225,20,46)" fg:x="71" fg:w="1"/><text x="5.6533%" y="895.50"></text></g><g><title>0x11000d57c (2 samples, 0.15%)</title><rect x="5.4795%" y="885" width="0.1522%" height="15" fill="rgb(210,31,41)" fg:x="72" fg:w="2"/><text x="5.7295%" y="895.50"></text></g><g><title>0x11000d8a0 (1 samples, 0.08%)</title><rect x="5.6317%" y="885" width="0.0761%" height="15" fill="rgb(221,200,47)" fg:x="74" fg:w="1"/><text x="5.8817%" y="895.50"></text></g><g><title>0x11000d9bc (1 samples, 0.08%)</title><rect x="5.7078%" y="885" width="0.0761%" height="15" fill="rgb(226,26,5)" fg:x="75" fg:w="1"/><text x="5.9578%" y="895.50"></text></g><g><title>0x11000d9dc (2 samples, 0.15%)</title><rect x="5.7839%" y="885" width="0.1522%" height="15" fill="rgb(249,33,26)" fg:x="76" fg:w="2"/><text x="6.0339%" y="895.50"></text></g><g><title>0x11000d9fc (2 samples, 0.15%)</title><rect x="5.9361%" y="885" width="0.1522%" height="15" fill="rgb(235,183,28)" fg:x="78" fg:w="2"/><text x="6.1861%" y="895.50"></text></g><g><title>0x11000da38 (3 samples, 0.23%)</title><rect x="6.0883%" y="885" width="0.2283%" height="15" fill="rgb(221,5,38)" fg:x="80" fg:w="3"/><text x="6.3383%" y="895.50"></text></g><g><title>0x11000da48 (2 samples, 0.15%)</title><rect x="6.3166%" y="885" width="0.1522%" height="15" fill="rgb(247,18,42)" fg:x="83" fg:w="2"/><text x="6.5666%" y="895.50"></text></g><g><title>0x11000da60 (2 samples, 0.15%)</title><rect x="6.4688%" y="885" width="0.1522%" height="15" fill="rgb(241,131,45)" fg:x="85" fg:w="2"/><text x="6.7188%" y="895.50"></text></g><g><title>0x11000da70 (3 samples, 0.23%)</title><rect x="6.6210%" y="885" width="0.2283%" height="15" fill="rgb(249,31,29)" fg:x="87" fg:w="3"/><text x="6.8710%" y="895.50"></text></g><g><title>0x11000dabc (1 samples, 0.08%)</title><rect x="6.8493%" y="885" width="0.0761%" height="15" fill="rgb(225,111,53)" fg:x="90" fg:w="1"/><text x="7.0993%" y="895.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (1 samples, 0.08%)</title><rect x="6.8493%" y="869" width="0.0761%" height="15" fill="rgb(238,160,17)" fg:x="90" fg:w="1"/><text x="7.0993%" y="879.50"></text></g><g><title>0x11000daf8 (1 samples, 0.08%)</title><rect x="6.9254%" y="885" width="0.0761%" height="15" fill="rgb(214,148,48)" fg:x="91" fg:w="1"/><text x="7.1754%" y="895.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.23%)</title><rect x="7.0015%" y="869" width="0.2283%" height="15" fill="rgb(232,36,49)" fg:x="92" fg:w="3"/><text x="7.2515%" y="879.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.23%)</title><rect x="7.5342%" y="853" width="0.2283%" height="15" fill="rgb(209,103,24)" fg:x="99" fg:w="3"/><text x="7.7842%" y="863.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.15%)</title><rect x="11.7199%" y="837" width="0.1522%" height="15" fill="rgb(229,88,8)" fg:x="154" fg:w="2"/><text x="11.9699%" y="847.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (1 samples, 0.08%)</title><rect x="11.8721%" y="837" width="0.0761%" height="15" fill="rgb(213,181,19)" fg:x="156" fg:w="1"/><text x="12.1221%" y="847.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.15%)</title><rect x="11.9482%" y="837" width="0.1522%" height="15" fill="rgb(254,191,54)" fg:x="157" fg:w="2"/><text x="12.1982%" y="847.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (1 samples, 0.08%)</title><rect x="12.1005%" y="837" width="0.0761%" height="15" fill="rgb(241,83,37)" fg:x="159" fg:w="1"/><text x="12.3505%" y="847.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (1 samples, 0.08%)</title><rect x="12.1766%" y="837" width="0.0761%" height="15" fill="rgb(233,36,39)" fg:x="160" fg:w="1"/><text x="12.4266%" y="847.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (6 samples, 0.46%)</title><rect x="12.2527%" y="837" width="0.4566%" height="15" fill="rgb(226,3,54)" fg:x="161" fg:w="6"/><text x="12.5027%" y="847.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (3 samples, 0.23%)</title><rect x="12.4810%" y="821" width="0.2283%" height="15" fill="rgb(245,192,40)" fg:x="164" fg:w="3"/><text x="12.7310%" y="831.50"></text></g><g><title>deno`v8::CallDepthScope&lt;false&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (1 samples, 0.08%)</title><rect x="12.7093%" y="837" width="0.0761%" height="15" fill="rgb(238,167,29)" fg:x="167" fg:w="1"/><text x="12.9593%" y="847.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (1 samples, 0.08%)</title><rect x="12.7854%" y="837" width="0.0761%" height="15" fill="rgb(232,182,51)" fg:x="168" fg:w="1"/><text x="13.0354%" y="847.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (4 samples, 0.30%)</title><rect x="12.8615%" y="837" width="0.3044%" height="15" fill="rgb(231,60,39)" fg:x="169" fg:w="4"/><text x="13.1115%" y="847.50"></text></g><g><title>deno`v8::CallDepthScope&lt;false&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (4 samples, 0.30%)</title><rect x="14.0791%" y="821" width="0.3044%" height="15" fill="rgb(208,69,12)" fg:x="185" fg:w="4"/><text x="14.3291%" y="831.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.08%)</title><rect x="14.3075%" y="805" width="0.0761%" height="15" fill="rgb(235,93,37)" fg:x="188" fg:w="1"/><text x="14.5575%" y="815.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (1 samples, 0.08%)</title><rect x="14.3836%" y="821" width="0.0761%" height="15" fill="rgb(213,116,39)" fg:x="189" fg:w="1"/><text x="14.6336%" y="831.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObject(v8::internal::Handle (3 samples, 0.23%)</title><rect x="14.5358%" y="805" width="0.2283%" height="15" fill="rgb(222,207,29)" fg:x="191" fg:w="3"/><text x="14.7858%" y="815.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (4 samples, 0.30%)</title><rect x="16.8189%" y="789" width="0.3044%" height="15" fill="rgb(206,96,30)" fg:x="221" fg:w="4"/><text x="17.0689%" y="799.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (2 samples, 0.15%)</title><rect x="17.1233%" y="789" width="0.1522%" height="15" fill="rgb(218,138,4)" fg:x="225" fg:w="2"/><text x="17.3733%" y="799.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (8 samples, 0.61%)</title><rect x="17.8082%" y="773" width="0.6088%" height="15" fill="rgb(250,191,14)" fg:x="234" fg:w="8"/><text x="18.0582%" y="783.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (9 samples, 0.68%)</title><rect x="18.7215%" y="757" width="0.6849%" height="15" fill="rgb(239,60,40)" fg:x="246" fg:w="9"/><text x="18.9715%" y="767.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (16 samples, 1.22%)</title><rect x="18.4170%" y="773" width="1.2177%" height="15" fill="rgb(206,27,48)" fg:x="242" fg:w="16"/><text x="18.6670%" y="783.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (3 samples, 0.23%)</title><rect x="19.4064%" y="757" width="0.2283%" height="15" fill="rgb(225,35,8)" fg:x="255" fg:w="3"/><text x="19.6564%" y="767.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (6 samples, 0.46%)</title><rect x="19.6347%" y="773" width="0.4566%" height="15" fill="rgb(250,213,24)" fg:x="258" fg:w="6"/><text x="19.8847%" y="783.50"></text></g><g><title>deno`v8::internal::JSFunction::EnsureHasInitialMap(v8::internal::Handle (5 samples, 0.38%)</title><rect x="20.0913%" y="773" width="0.3805%" height="15" fill="rgb(247,123,22)" fg:x="264" fg:w="5"/><text x="20.3413%" y="783.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObject(v8::internal::Handle (45 samples, 3.42%)</title><rect x="17.2755%" y="789" width="3.4247%" height="15" fill="rgb(231,138,38)" fg:x="227" fg:w="45"/><text x="17.5255%" y="799.50">den..</text></g><g><title>deno`v8::internal::JSObject::InitializeBody (3 samples, 0.23%)</title><rect x="20.4718%" y="773" width="0.2283%" height="15" fill="rgb(231,145,46)" fg:x="269" fg:w="3"/><text x="20.7218%" y="783.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromiseWithoutHook (81 samples, 6.16%)</title><rect x="14.7641%" y="805" width="6.1644%" height="15" fill="rgb(251,118,11)" fg:x="194" fg:w="81"/><text x="15.0141%" y="815.50">deno`v8:..</text></g><g><title>deno`v8::internal::JSFunction::EnsureHasInitialMap(v8::internal::Handle (3 samples, 0.23%)</title><rect x="20.7002%" y="789" width="0.2283%" height="15" fill="rgb(217,147,25)" fg:x="272" fg:w="3"/><text x="20.9502%" y="799.50"></text></g><g><title>deno`v8::internal::Isolate::RunAllPromiseHooks(v8::PromiseHookType, v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="20.9285%" y="805" width="0.0761%" height="15" fill="rgb(247,81,37)" fg:x="275" fg:w="1"/><text x="21.1785%" y="815.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromise (97 samples, 7.38%)</title><rect x="14.4597%" y="821" width="7.3820%" height="15" fill="rgb(209,12,38)" fg:x="190" fg:w="97"/><text x="14.7097%" y="831.50">deno`v8::i..</text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (11 samples, 0.84%)</title><rect x="21.0046%" y="805" width="0.8371%" height="15" fill="rgb(227,1,9)" fg:x="276" fg:w="11"/><text x="21.2546%" y="815.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromiseWithoutHook (1 samples, 0.08%)</title><rect x="21.8417%" y="821" width="0.0761%" height="15" fill="rgb(248,47,43)" fg:x="287" fg:w="1"/><text x="22.0917%" y="831.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (3 samples, 0.23%)</title><rect x="21.9178%" y="821" width="0.2283%" height="15" fill="rgb(221,10,30)" fg:x="288" fg:w="3"/><text x="22.1678%" y="831.50"></text></g><g><title>deno`v8::Promise::Resolver::New(v8::Local (119 samples, 9.06%)</title><rect x="13.1659%" y="837" width="9.0563%" height="15" fill="rgb(210,229,1)" fg:x="173" fg:w="119"/><text x="13.4159%" y="847.50">deno`v8::Prom..</text></g><g><title>deno`v8::internal::Isolate::RunAllPromiseHooks(v8::PromiseHookType, v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="22.1461%" y="821" width="0.0761%" height="15" fill="rgb(222,148,37)" fg:x="291" fg:w="1"/><text x="22.3961%" y="831.50"></text></g><g><title>deno`v8::Promise::Resolver::Resolve(v8::Local&lt;v8::Context&gt;, v8::Local (2 samples, 0.15%)</title><rect x="22.2222%" y="837" width="0.1522%" height="15" fill="rgb(234,67,33)" fg:x="292" fg:w="2"/><text x="22.4722%" y="847.50"></text></g><g><title>deno`v8::Value::IsInt32 (2 samples, 0.15%)</title><rect x="22.3744%" y="837" width="0.1522%" height="15" fill="rgb(247,98,35)" fg:x="294" fg:w="2"/><text x="22.6244%" y="847.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="22.5266%" y="837" width="0.0761%" height="15" fill="rgb(247,138,52)" fg:x="296" fg:w="1"/><text x="22.7766%" y="847.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromise (4 samples, 0.30%)</title><rect x="22.6027%" y="837" width="0.3044%" height="15" fill="rgb(213,79,30)" fg:x="297" fg:w="4"/><text x="22.8527%" y="847.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (22 samples, 1.67%)</title><rect x="22.9072%" y="837" width="1.6743%" height="15" fill="rgb(246,177,23)" fg:x="301" fg:w="22"/><text x="23.1572%" y="847.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (6 samples, 0.46%)</title><rect x="24.5814%" y="837" width="0.4566%" height="15" fill="rgb(230,62,27)" fg:x="323" fg:w="6"/><text x="24.8314%" y="847.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (3 samples, 0.23%)</title><rect x="25.0381%" y="837" width="0.2283%" height="15" fill="rgb(216,154,8)" fg:x="329" fg:w="3"/><text x="25.2881%" y="847.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (2 samples, 0.15%)</title><rect x="25.2664%" y="837" width="0.1522%" height="15" fill="rgb(244,35,45)" fg:x="332" fg:w="2"/><text x="25.5164%" y="847.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (7 samples, 0.53%)</title><rect x="25.4186%" y="837" width="0.5327%" height="15" fill="rgb(251,115,12)" fg:x="334" fg:w="7"/><text x="25.6686%" y="847.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (2 samples, 0.15%)</title><rect x="25.7991%" y="821" width="0.1522%" height="15" fill="rgb(240,54,50)" fg:x="339" fg:w="2"/><text x="26.0491%" y="831.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (1 samples, 0.08%)</title><rect x="25.9513%" y="837" width="0.0761%" height="15" fill="rgb(233,84,52)" fg:x="341" fg:w="1"/><text x="26.2013%" y="847.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (9 samples, 0.68%)</title><rect x="26.0274%" y="837" width="0.6849%" height="15" fill="rgb(207,117,47)" fg:x="342" fg:w="9"/><text x="26.2774%" y="847.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.23%)</title><rect x="26.4840%" y="821" width="0.2283%" height="15" fill="rgb(249,43,39)" fg:x="348" fg:w="3"/><text x="26.7340%" y="831.50"></text></g><g><title>deno`v8__Global__New (13 samples, 0.99%)</title><rect x="26.7123%" y="837" width="0.9893%" height="15" fill="rgb(209,38,44)" fg:x="351" fg:w="13"/><text x="26.9623%" y="847.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (12 samples, 0.91%)</title><rect x="26.7884%" y="821" width="0.9132%" height="15" fill="rgb(236,212,23)" fg:x="352" fg:w="12"/><text x="27.0384%" y="831.50"></text></g><g><title>deno`v8__Isolate__GetData (4 samples, 0.30%)</title><rect x="27.7017%" y="837" width="0.3044%" height="15" fill="rgb(242,79,21)" fg:x="364" fg:w="4"/><text x="27.9517%" y="847.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (3 samples, 0.23%)</title><rect x="28.0822%" y="821" width="0.2283%" height="15" fill="rgb(211,96,35)" fg:x="369" fg:w="3"/><text x="28.3322%" y="831.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (11 samples, 0.84%)</title><rect x="28.7671%" y="805" width="0.8371%" height="15" fill="rgb(253,215,40)" fg:x="378" fg:w="11"/><text x="29.0171%" y="815.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.08%)</title><rect x="29.5282%" y="789" width="0.0761%" height="15" fill="rgb(211,81,21)" fg:x="388" fg:w="1"/><text x="29.7782%" y="799.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.08%)</title><rect x="29.6043%" y="805" width="0.0761%" height="15" fill="rgb(208,190,38)" fg:x="389" fg:w="1"/><text x="29.8543%" y="815.50"></text></g><g><title>deno`v8::internal::JSPromise::Fulfill(v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (2 samples, 0.15%)</title><rect x="29.6804%" y="805" width="0.1522%" height="15" fill="rgb(235,213,38)" fg:x="390" fg:w="2"/><text x="29.9304%" y="815.50"></text></g><g><title>deno`v8__Promise__Resolver__Resolve (40 samples, 3.04%)</title><rect x="28.0061%" y="837" width="3.0441%" height="15" fill="rgb(237,122,38)" fg:x="368" fg:w="40"/><text x="28.2561%" y="847.50">den..</text></g><g><title>deno`v8::Promise::Resolver::Resolve(v8::Local&lt;v8::Context&gt;, v8::Local (36 samples, 2.74%)</title><rect x="28.3105%" y="821" width="2.7397%" height="15" fill="rgb(244,218,35)" fg:x="372" fg:w="36"/><text x="28.5605%" y="831.50">de..</text></g><g><title>deno`v8::internal::JSPromise::Resolve(v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (16 samples, 1.22%)</title><rect x="29.8326%" y="805" width="1.2177%" height="15" fill="rgb(240,68,47)" fg:x="392" fg:w="16"/><text x="30.0826%" y="815.50"></text></g><g><title>deno`v8::internal::JSPromise::Fulfill(v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (5 samples, 0.38%)</title><rect x="30.6697%" y="789" width="0.3805%" height="15" fill="rgb(210,16,53)" fg:x="403" fg:w="5"/><text x="30.9197%" y="799.50"></text></g><g><title>deno`v8::internal::JSPromise::TriggerPromiseReactions(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="30.9741%" y="773" width="0.0761%" height="15" fill="rgb(235,124,12)" fg:x="407" fg:w="1"/><text x="31.2241%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.76%)</title><rect x="32.1157%" y="805" width="0.7610%" height="15" fill="rgb(224,169,11)" fg:x="422" fg:w="10"/><text x="32.3657%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.38%)</title><rect x="32.4962%" y="789" width="0.3805%" height="15" fill="rgb(250,166,2)" fg:x="427" fg:w="5"/><text x="32.7462%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 1.90%)</title><rect x="31.0502%" y="837" width="1.9026%" height="15" fill="rgb(242,216,29)" fg:x="408" fg:w="25"/><text x="31.3002%" y="847.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 1.29%)</title><rect x="31.6591%" y="821" width="1.2938%" height="15" fill="rgb(230,116,27)" fg:x="416" fg:w="17"/><text x="31.9091%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.08%)</title><rect x="32.8767%" y="805" width="0.0761%" height="15" fill="rgb(228,99,48)" fg:x="432" fg:w="1"/><text x="33.1267%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.23%)</title><rect x="32.9528%" y="837" width="0.2283%" height="15" fill="rgb(253,11,6)" fg:x="433" fg:w="3"/><text x="33.2028%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 1.83%)</title><rect x="33.1811%" y="837" width="1.8265%" height="15" fill="rgb(247,143,39)" fg:x="436" fg:w="24"/><text x="33.4311%" y="847.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.91%)</title><rect x="34.0944%" y="821" width="0.9132%" height="15" fill="rgb(236,97,10)" fg:x="448" fg:w="12"/><text x="34.3444%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.08%)</title><rect x="35.0076%" y="837" width="0.0761%" height="15" fill="rgb(233,208,19)" fg:x="460" fg:w="1"/><text x="35.2576%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.53%)</title><rect x="35.0837%" y="837" width="0.5327%" height="15" fill="rgb(216,164,2)" fg:x="461" fg:w="7"/><text x="35.3337%" y="847.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (373 samples, 28.39%)</title><rect x="7.7626%" y="853" width="28.3866%" height="15" fill="rgb(220,129,5)" fg:x="102" fg:w="373"/><text x="8.0126%" y="863.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::C..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.53%)</title><rect x="35.6164%" y="837" width="0.5327%" height="15" fill="rgb(242,17,10)" fg:x="468" fg:w="7"/><text x="35.8664%" y="847.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.23%)</title><rect x="36.1492%" y="853" width="0.2283%" height="15" fill="rgb(242,107,0)" fg:x="475" fg:w="3"/><text x="36.3992%" y="863.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.08%)</title><rect x="36.3775%" y="853" width="0.0761%" height="15" fill="rgb(251,28,31)" fg:x="478" fg:w="1"/><text x="36.6275%" y="863.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.08%)</title><rect x="36.4536%" y="853" width="0.0761%" height="15" fill="rgb(233,223,10)" fg:x="479" fg:w="1"/><text x="36.7036%" y="863.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (3 samples, 0.23%)</title><rect x="36.5297%" y="853" width="0.2283%" height="15" fill="rgb(215,21,27)" fg:x="480" fg:w="3"/><text x="36.7797%" y="863.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (12 samples, 0.91%)</title><rect x="36.7580%" y="853" width="0.9132%" height="15" fill="rgb(232,23,21)" fg:x="483" fg:w="12"/><text x="37.0080%" y="863.50"></text></g><g><title>deno`v8::External::Value (1 samples, 0.08%)</title><rect x="37.6712%" y="853" width="0.0761%" height="15" fill="rgb(244,5,23)" fg:x="495" fg:w="1"/><text x="37.9212%" y="863.50"></text></g><g><title>deno`v8::Integer::Value (3 samples, 0.23%)</title><rect x="37.7473%" y="853" width="0.2283%" height="15" fill="rgb(226,81,46)" fg:x="496" fg:w="3"/><text x="37.9973%" y="863.50"></text></g><g><title>deno`v8::Promise::Resolver::GetPromise (2 samples, 0.15%)</title><rect x="37.9756%" y="853" width="0.1522%" height="15" fill="rgb(247,70,30)" fg:x="499" fg:w="2"/><text x="38.2256%" y="863.50"></text></g><g><title>deno`v8::Promise::Resolver::New(v8::Local (3 samples, 0.23%)</title><rect x="38.1279%" y="853" width="0.2283%" height="15" fill="rgb(212,68,19)" fg:x="501" fg:w="3"/><text x="38.3779%" y="863.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (2 samples, 0.15%)</title><rect x="38.3562%" y="853" width="0.1522%" height="15" fill="rgb(240,187,13)" fg:x="504" fg:w="2"/><text x="38.6062%" y="863.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (5 samples, 0.38%)</title><rect x="38.5084%" y="853" width="0.3805%" height="15" fill="rgb(223,113,26)" fg:x="506" fg:w="5"/><text x="38.7584%" y="863.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (3 samples, 0.23%)</title><rect x="38.8889%" y="853" width="0.2283%" height="15" fill="rgb(206,192,2)" fg:x="511" fg:w="3"/><text x="39.1389%" y="863.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (3 samples, 0.23%)</title><rect x="39.1172%" y="853" width="0.2283%" height="15" fill="rgb(241,108,4)" fg:x="514" fg:w="3"/><text x="39.3672%" y="863.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (1 samples, 0.08%)</title><rect x="39.3455%" y="853" width="0.0761%" height="15" fill="rgb(247,173,49)" fg:x="517" fg:w="1"/><text x="39.5955%" y="863.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (1 samples, 0.08%)</title><rect x="39.4216%" y="853" width="0.0761%" height="15" fill="rgb(224,114,35)" fg:x="518" fg:w="1"/><text x="39.6716%" y="863.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__Data (1 samples, 0.08%)</title><rect x="39.4977%" y="853" width="0.0761%" height="15" fill="rgb(245,159,27)" fg:x="519" fg:w="1"/><text x="39.7477%" y="863.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetReturnValue (2 samples, 0.15%)</title><rect x="39.5738%" y="853" width="0.1522%" height="15" fill="rgb(245,172,44)" fg:x="520" fg:w="2"/><text x="39.8238%" y="863.50"></text></g><g><title>deno`v8__Global__New (2 samples, 0.15%)</title><rect x="39.7260%" y="853" width="0.1522%" height="15" fill="rgb(236,23,11)" fg:x="522" fg:w="2"/><text x="39.9760%" y="863.50"></text></g><g><title>deno`v8__Promise__Resolver__Resolve (1 samples, 0.08%)</title><rect x="39.8782%" y="853" width="0.0761%" height="15" fill="rgb(205,117,38)" fg:x="524" fg:w="1"/><text x="40.1282%" y="863.50"></text></g><g><title>deno`v8__ReturnValue__Set (2 samples, 0.15%)</title><rect x="39.9543%" y="853" width="0.1522%" height="15" fill="rgb(237,72,25)" fg:x="525" fg:w="2"/><text x="40.2043%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="40.1065%" y="853" width="0.0761%" height="15" fill="rgb(244,70,9)" fg:x="527" fg:w="1"/><text x="40.3565%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.08%)</title><rect x="40.1826%" y="853" width="0.0761%" height="15" fill="rgb(217,125,39)" fg:x="528" fg:w="1"/><text x="40.4326%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.08%)</title><rect x="40.2588%" y="853" width="0.0761%" height="15" fill="rgb(235,36,10)" fg:x="529" fg:w="1"/><text x="40.5088%" y="863.50"></text></g><g><title>0x11000db00 (440 samples, 33.49%)</title><rect x="7.0015%" y="885" width="33.4855%" height="15" fill="rgb(251,123,47)" fg:x="92" fg:w="440"/><text x="7.2515%" y="895.50">0x11000db00</text></g><g><title>deno`Builtins_CallApiCallback (437 samples, 33.26%)</title><rect x="7.2298%" y="869" width="33.2572%" height="15" fill="rgb(221,13,13)" fg:x="95" fg:w="437"/><text x="7.4798%" y="879.50">deno`Builtins_CallApiCallback</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.15%)</title><rect x="40.3349%" y="853" width="0.1522%" height="15" fill="rgb(238,131,9)" fg:x="530" fg:w="2"/><text x="40.5849%" y="863.50"></text></g><g><title>0x11000db30 (1 samples, 0.08%)</title><rect x="40.4871%" y="885" width="0.0761%" height="15" fill="rgb(211,50,8)" fg:x="532" fg:w="1"/><text x="40.7371%" y="895.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (4 samples, 0.30%)</title><rect x="40.5632%" y="869" width="0.3044%" height="15" fill="rgb(245,182,24)" fg:x="533" fg:w="4"/><text x="40.8132%" y="879.50"></text></g><g><title>0x11000db38 (24 samples, 1.83%)</title><rect x="40.5632%" y="885" width="1.8265%" height="15" fill="rgb(242,14,37)" fg:x="533" fg:w="24"/><text x="40.8132%" y="895.50">0..</text></g><g><title>deno`Builtins_PromisePrototypeThen (20 samples, 1.52%)</title><rect x="40.8676%" y="869" width="1.5221%" height="15" fill="rgb(246,228,12)" fg:x="537" fg:w="20"/><text x="41.1176%" y="879.50"></text></g><g><title>0x11000db44 (1 samples, 0.08%)</title><rect x="42.3896%" y="885" width="0.0761%" height="15" fill="rgb(213,55,15)" fg:x="557" fg:w="1"/><text x="42.6396%" y="895.50"></text></g><g><title>0x11000db54 (1 samples, 0.08%)</title><rect x="42.4658%" y="885" width="0.0761%" height="15" fill="rgb(209,9,3)" fg:x="558" fg:w="1"/><text x="42.7158%" y="895.50"></text></g><g><title>0x11000dbbc (1 samples, 0.08%)</title><rect x="42.5419%" y="885" width="0.0761%" height="15" fill="rgb(230,59,30)" fg:x="559" fg:w="1"/><text x="42.7919%" y="895.50"></text></g><g><title>0x11000dbdc (1 samples, 0.08%)</title><rect x="42.6180%" y="885" width="0.0761%" height="15" fill="rgb(209,121,21)" fg:x="560" fg:w="1"/><text x="42.8680%" y="895.50"></text></g><g><title>0x11000dc54 (3 samples, 0.23%)</title><rect x="42.6941%" y="885" width="0.2283%" height="15" fill="rgb(220,109,13)" fg:x="561" fg:w="3"/><text x="42.9441%" y="895.50"></text></g><g><title>0x11000dc5c (25 samples, 1.90%)</title><rect x="42.9224%" y="885" width="1.9026%" height="15" fill="rgb(232,18,1)" fg:x="564" fg:w="25"/><text x="43.1724%" y="895.50">0..</text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (25 samples, 1.90%)</title><rect x="42.9224%" y="869" width="1.9026%" height="15" fill="rgb(215,41,42)" fg:x="564" fg:w="25"/><text x="43.1724%" y="879.50">d..</text></g><g><title>deno`Builtins_PerformPromiseThen (6 samples, 0.46%)</title><rect x="44.3683%" y="853" width="0.4566%" height="15" fill="rgb(224,123,36)" fg:x="583" fg:w="6"/><text x="44.6183%" y="863.50"></text></g><g><title>0x11000dc78 (1 samples, 0.08%)</title><rect x="44.8250%" y="885" width="0.0761%" height="15" fill="rgb(240,125,3)" fg:x="589" fg:w="1"/><text x="45.0750%" y="895.50"></text></g><g><title>0x11000dc80 (1 samples, 0.08%)</title><rect x="44.9011%" y="885" width="0.0761%" height="15" fill="rgb(205,98,50)" fg:x="590" fg:w="1"/><text x="45.1511%" y="895.50"></text></g><g><title>0x11000dca4 (1 samples, 0.08%)</title><rect x="44.9772%" y="885" width="0.0761%" height="15" fill="rgb(205,185,37)" fg:x="591" fg:w="1"/><text x="45.2272%" y="895.50"></text></g><g><title>0x11000dcb0 (1 samples, 0.08%)</title><rect x="45.0533%" y="885" width="0.0761%" height="15" fill="rgb(238,207,15)" fg:x="592" fg:w="1"/><text x="45.3033%" y="895.50"></text></g><g><title>0x11000dce8 (1 samples, 0.08%)</title><rect x="45.1294%" y="885" width="0.0761%" height="15" fill="rgb(213,199,42)" fg:x="593" fg:w="1"/><text x="45.3794%" y="895.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (1 samples, 0.08%)</title><rect x="45.2055%" y="773" width="0.0761%" height="15" fill="rgb(235,201,11)" fg:x="594" fg:w="1"/><text x="45.4555%" y="783.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (1 samples, 0.08%)</title><rect x="45.2055%" y="757" width="0.0761%" height="15" fill="rgb(207,46,11)" fg:x="594" fg:w="1"/><text x="45.4555%" y="767.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (1 samples, 0.08%)</title><rect x="45.2055%" y="741" width="0.0761%" height="15" fill="rgb(241,35,35)" fg:x="594" fg:w="1"/><text x="45.4555%" y="751.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (1 samples, 0.08%)</title><rect x="45.2055%" y="725" width="0.0761%" height="15" fill="rgb(243,32,47)" fg:x="594" fg:w="1"/><text x="45.4555%" y="735.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.08%)</title><rect x="45.2055%" y="709" width="0.0761%" height="15" fill="rgb(247,202,23)" fg:x="594" fg:w="1"/><text x="45.4555%" y="719.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.08%)</title><rect x="45.2055%" y="693" width="0.0761%" height="15" fill="rgb(219,102,11)" fg:x="594" fg:w="1"/><text x="45.4555%" y="703.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (7 samples, 0.53%)</title><rect x="45.2816%" y="709" width="0.5327%" height="15" fill="rgb(243,110,44)" fg:x="595" fg:w="7"/><text x="45.5316%" y="719.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (12 samples, 0.91%)</title><rect x="45.2816%" y="725" width="0.9132%" height="15" fill="rgb(222,74,54)" fg:x="595" fg:w="12"/><text x="45.5316%" y="735.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (5 samples, 0.38%)</title><rect x="45.8143%" y="709" width="0.3805%" height="15" fill="rgb(216,99,12)" fg:x="602" fg:w="5"/><text x="46.0643%" y="719.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (1 samples, 0.08%)</title><rect x="46.1948%" y="709" width="0.0761%" height="15" fill="rgb(226,22,26)" fg:x="607" fg:w="1"/><text x="46.4448%" y="719.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::Run (1 samples, 0.08%)</title><rect x="46.1948%" y="693" width="0.0761%" height="15" fill="rgb(217,163,10)" fg:x="607" fg:w="1"/><text x="46.4448%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.15%)</title><rect x="46.2709%" y="677" width="0.1522%" height="15" fill="rgb(213,25,53)" fg:x="608" fg:w="2"/><text x="46.5209%" y="687.50"></text></g><g><title>0x11000e000 (17 samples, 1.29%)</title><rect x="45.2055%" y="885" width="1.2938%" height="15" fill="rgb(252,105,26)" fg:x="594" fg:w="17"/><text x="45.4555%" y="895.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (17 samples, 1.29%)</title><rect x="45.2055%" y="869" width="1.2938%" height="15" fill="rgb(220,39,43)" fg:x="594" fg:w="17"/><text x="45.4555%" y="879.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (17 samples, 1.29%)</title><rect x="45.2055%" y="853" width="1.2938%" height="15" fill="rgb(229,68,48)" fg:x="594" fg:w="17"/><text x="45.4555%" y="863.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (17 samples, 1.29%)</title><rect x="45.2055%" y="837" width="1.2938%" height="15" fill="rgb(252,8,32)" fg:x="594" fg:w="17"/><text x="45.4555%" y="847.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (17 samples, 1.29%)</title><rect x="45.2055%" y="821" width="1.2938%" height="15" fill="rgb(223,20,43)" fg:x="594" fg:w="17"/><text x="45.4555%" y="831.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (17 samples, 1.29%)</title><rect x="45.2055%" y="805" width="1.2938%" height="15" fill="rgb(229,81,49)" fg:x="594" fg:w="17"/><text x="45.4555%" y="815.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (17 samples, 1.29%)</title><rect x="45.2055%" y="789" width="1.2938%" height="15" fill="rgb(236,28,36)" fg:x="594" fg:w="17"/><text x="45.4555%" y="799.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (16 samples, 1.22%)</title><rect x="45.2816%" y="773" width="1.2177%" height="15" fill="rgb(249,185,26)" fg:x="595" fg:w="16"/><text x="45.5316%" y="783.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (16 samples, 1.22%)</title><rect x="45.2816%" y="757" width="1.2177%" height="15" fill="rgb(249,174,33)" fg:x="595" fg:w="16"/><text x="45.5316%" y="767.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (16 samples, 1.22%)</title><rect x="45.2816%" y="741" width="1.2177%" height="15" fill="rgb(233,201,37)" fg:x="595" fg:w="16"/><text x="45.5316%" y="751.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (4 samples, 0.30%)</title><rect x="46.1948%" y="725" width="0.3044%" height="15" fill="rgb(221,78,26)" fg:x="607" fg:w="4"/><text x="46.4448%" y="735.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (3 samples, 0.23%)</title><rect x="46.2709%" y="709" width="0.2283%" height="15" fill="rgb(250,127,30)" fg:x="608" fg:w="3"/><text x="46.5209%" y="719.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (3 samples, 0.23%)</title><rect x="46.2709%" y="693" width="0.2283%" height="15" fill="rgb(230,49,44)" fg:x="608" fg:w="3"/><text x="46.5209%" y="703.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.08%)</title><rect x="46.4231%" y="677" width="0.0761%" height="15" fill="rgb(229,67,23)" fg:x="610" fg:w="1"/><text x="46.6731%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.08%)</title><rect x="46.4231%" y="661" width="0.0761%" height="15" fill="rgb(249,83,47)" fg:x="610" fg:w="1"/><text x="46.6731%" y="671.50"></text></g><g><title>0x11000e1e0 (1 samples, 0.08%)</title><rect x="46.4992%" y="885" width="0.0761%" height="15" fill="rgb(215,43,3)" fg:x="611" fg:w="1"/><text x="46.7492%" y="895.50"></text></g><g><title>deno`Builtins_CallApiCallback (2 samples, 0.15%)</title><rect x="46.5753%" y="885" width="0.1522%" height="15" fill="rgb(238,154,13)" fg:x="612" fg:w="2"/><text x="46.8253%" y="895.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (6 samples, 0.46%)</title><rect x="46.7275%" y="885" width="0.4566%" height="15" fill="rgb(219,56,2)" fg:x="614" fg:w="6"/><text x="46.9775%" y="895.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_PolymorphicName (8 samples, 0.61%)</title><rect x="47.1842%" y="885" width="0.6088%" height="15" fill="rgb(233,0,4)" fg:x="620" fg:w="8"/><text x="47.4342%" y="895.50"></text></g><g><title>deno`Builtins_LoadIC (19 samples, 1.45%)</title><rect x="47.7930%" y="885" width="1.4460%" height="15" fill="rgb(235,30,7)" fg:x="628" fg:w="19"/><text x="48.0430%" y="895.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (595 samples, 45.28%)</title><rect x="4.0335%" y="901" width="45.2816%" height="15" fill="rgb(250,79,13)" fg:x="53" fg:w="595"/><text x="4.2835%" y="911.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_PromisePrototypeThen (1 samples, 0.08%)</title><rect x="49.2390%" y="885" width="0.0761%" height="15" fill="rgb(211,146,34)" fg:x="647" fg:w="1"/><text x="49.4890%" y="895.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (1 samples, 0.08%)</title><rect x="49.7717%" y="885" width="0.0761%" height="15" fill="rgb(228,22,38)" fg:x="654" fg:w="1"/><text x="50.0217%" y="895.50"></text></g><g><title>deno`Builtins_ResolvePromise (22 samples, 1.67%)</title><rect x="49.3151%" y="901" width="1.6743%" height="15" fill="rgb(235,168,5)" fg:x="648" fg:w="22"/><text x="49.5651%" y="911.50"></text></g><g><title>deno`Builtins_FulfillPromise (15 samples, 1.14%)</title><rect x="49.8478%" y="885" width="1.1416%" height="15" fill="rgb(221,155,16)" fg:x="655" fg:w="15"/><text x="50.0978%" y="895.50"></text></g><g><title>deno`deno::run_command::_{{closure}} (681 samples, 51.83%)</title><rect x="0.0000%" y="1157" width="51.8265%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1167.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (681 samples, 51.83%)</title><rect x="0.0000%" y="1141" width="51.8265%" height="15" fill="rgb(223,4,10)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1151.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::po..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (681 samples, 51.83%)</title><rect x="0.0000%" y="1125" width="51.8265%" height="15" fill="rgb(234,103,6)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1135.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::po..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (681 samples, 51.83%)</title><rect x="0.0000%" y="1109" width="51.8265%" height="15" fill="rgb(227,97,0)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1119.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::po..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (681 samples, 51.83%)</title><rect x="0.0000%" y="1093" width="51.8265%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1103.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::po..</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (681 samples, 51.83%)</title><rect x="0.0000%" y="1077" width="51.8265%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1087.50">deno`deno_core::runtime::JsRuntime::mod_evaluate</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (681 samples, 51.83%)</title><rect x="0.0000%" y="1061" width="51.8265%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1071.50">deno`v8::Module::Evaluate(v8::Local</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (681 samples, 51.83%)</title><rect x="0.0000%" y="1045" width="51.8265%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1055.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (681 samples, 51.83%)</title><rect x="0.0000%" y="1029" width="51.8265%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1039.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (681 samples, 51.83%)</title><rect x="0.0000%" y="1013" width="51.8265%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1023.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (681 samples, 51.83%)</title><rect x="0.0000%" y="997" width="51.8265%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="681"/><text x="0.2500%" y="1007.50">deno`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (681 samples, 51.83%)</title><rect x="0.0000%" y="981" width="51.8265%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="681"/><text x="0.2500%" y="991.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, ..</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (681 samples, 51.83%)</title><rect x="0.0000%" y="965" width="51.8265%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="681"/><text x="0.2500%" y="975.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal..</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (681 samples, 51.83%)</title><rect x="0.0000%" y="949" width="51.8265%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="681"/><text x="0.2500%" y="959.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (681 samples, 51.83%)</title><rect x="0.0000%" y="933" width="51.8265%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="681"/><text x="0.2500%" y="943.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (642 samples, 48.86%)</title><rect x="2.9680%" y="917" width="48.8584%" height="15" fill="rgb(223,33,50)" fg:x="39" fg:w="642"/><text x="3.2180%" y="927.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (11 samples, 0.84%)</title><rect x="50.9893%" y="901" width="0.8371%" height="15" fill="rgb(219,149,13)" fg:x="670" fg:w="11"/><text x="51.2393%" y="911.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromiseWithoutHook (1 samples, 0.08%)</title><rect x="52.5875%" y="741" width="0.0761%" height="15" fill="rgb(250,156,29)" fg:x="691" fg:w="1"/><text x="52.8375%" y="751.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObject(v8::internal::Handle (1 samples, 0.08%)</title><rect x="52.5875%" y="725" width="0.0761%" height="15" fill="rgb(216,193,19)" fg:x="691" fg:w="1"/><text x="52.8375%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (1 samples, 0.08%)</title><rect x="52.5875%" y="709" width="0.0761%" height="15" fill="rgb(216,135,14)" fg:x="691" fg:w="1"/><text x="52.8375%" y="719.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (1 samples, 0.08%)</title><rect x="52.5875%" y="693" width="0.0761%" height="15" fill="rgb(241,47,5)" fg:x="691" fg:w="1"/><text x="52.8375%" y="703.50"></text></g><g><title>deno`v8::Promise::Resolver::New(v8::Local (2 samples, 0.15%)</title><rect x="52.5875%" y="773" width="0.1522%" height="15" fill="rgb(233,42,35)" fg:x="691" fg:w="2"/><text x="52.8375%" y="783.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromise (2 samples, 0.15%)</title><rect x="52.5875%" y="757" width="0.1522%" height="15" fill="rgb(231,13,6)" fg:x="691" fg:w="2"/><text x="52.8375%" y="767.50"></text></g><g><title>deno`v8::internal::Isolate::RunAllPromiseHooks(v8::PromiseHookType, v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="52.6636%" y="741" width="0.0761%" height="15" fill="rgb(207,181,40)" fg:x="692" fg:w="1"/><text x="52.9136%" y="751.50"></text></g><g><title>deno`v8__Promise__Resolver__Resolve (1 samples, 0.08%)</title><rect x="52.7397%" y="773" width="0.0761%" height="15" fill="rgb(254,173,49)" fg:x="693" fg:w="1"/><text x="52.9897%" y="783.50"></text></g><g><title>deno`v8::Promise::Resolver::Resolve(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.08%)</title><rect x="52.7397%" y="757" width="0.0761%" height="15" fill="rgb(221,1,38)" fg:x="693" fg:w="1"/><text x="52.9897%" y="767.50"></text></g><g><title>deno`v8::internal::JSPromise::Resolve(v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="52.7397%" y="741" width="0.0761%" height="15" fill="rgb(206,124,46)" fg:x="693" fg:w="1"/><text x="52.9897%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="52.8158%" y="773" width="0.0761%" height="15" fill="rgb(249,21,11)" fg:x="694" fg:w="1"/><text x="53.0658%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="52.8158%" y="757" width="0.0761%" height="15" fill="rgb(222,201,40)" fg:x="694" fg:w="1"/><text x="53.0658%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.08%)</title><rect x="52.8158%" y="741" width="0.0761%" height="15" fill="rgb(235,61,29)" fg:x="694" fg:w="1"/><text x="53.0658%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.08%)</title><rect x="52.8158%" y="725" width="0.0761%" height="15" fill="rgb(219,207,3)" fg:x="694" fg:w="1"/><text x="53.0658%" y="735.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (10 samples, 0.76%)</title><rect x="52.2070%" y="789" width="0.7610%" height="15" fill="rgb(222,56,46)" fg:x="686" fg:w="10"/><text x="52.4570%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="52.8919%" y="773" width="0.0761%" height="15" fill="rgb(239,76,54)" fg:x="695" fg:w="1"/><text x="53.1419%" y="783.50"></text></g><g><title>0x11000c5c0 (12 samples, 0.91%)</title><rect x="52.1309%" y="821" width="0.9132%" height="15" fill="rgb(231,124,27)" fg:x="685" fg:w="12"/><text x="52.3809%" y="831.50"></text></g><g><title>deno`Builtins_CallApiCallback (12 samples, 0.91%)</title><rect x="52.1309%" y="805" width="0.9132%" height="15" fill="rgb(249,195,6)" fg:x="685" fg:w="12"/><text x="52.3809%" y="815.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (1 samples, 0.08%)</title><rect x="52.9680%" y="789" width="0.0761%" height="15" fill="rgb(237,174,47)" fg:x="696" fg:w="1"/><text x="53.2180%" y="799.50"></text></g><g><title>0x11000c5f8 (1 samples, 0.08%)</title><rect x="53.0441%" y="821" width="0.0761%" height="15" fill="rgb(206,201,31)" fg:x="697" fg:w="1"/><text x="53.2941%" y="831.50"></text></g><g><title>deno`Builtins_PromisePrototypeThen (1 samples, 0.08%)</title><rect x="53.0441%" y="805" width="0.0761%" height="15" fill="rgb(231,57,52)" fg:x="697" fg:w="1"/><text x="53.2941%" y="815.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.08%)</title><rect x="53.1963%" y="789" width="0.0761%" height="15" fill="rgb(248,177,22)" fg:x="699" fg:w="1"/><text x="53.4463%" y="799.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.08%)</title><rect x="53.1963%" y="773" width="0.0761%" height="15" fill="rgb(215,211,37)" fg:x="699" fg:w="1"/><text x="53.4463%" y="783.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.08%)</title><rect x="53.1963%" y="757" width="0.0761%" height="15" fill="rgb(241,128,51)" fg:x="699" fg:w="1"/><text x="53.4463%" y="767.50"></text></g><g><title>deno`v8::internal::AllocationCounter::InvokeAllocationObservers (1 samples, 0.08%)</title><rect x="53.1963%" y="741" width="0.0761%" height="15" fill="rgb(227,165,31)" fg:x="699" fg:w="1"/><text x="53.4463%" y="751.50"></text></g><g><title>0x11000c71c (3 samples, 0.23%)</title><rect x="53.1202%" y="821" width="0.2283%" height="15" fill="rgb(228,167,24)" fg:x="698" fg:w="3"/><text x="53.3702%" y="831.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (3 samples, 0.23%)</title><rect x="53.1202%" y="805" width="0.2283%" height="15" fill="rgb(228,143,12)" fg:x="698" fg:w="3"/><text x="53.3702%" y="815.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (1 samples, 0.08%)</title><rect x="53.2725%" y="789" width="0.0761%" height="15" fill="rgb(249,149,8)" fg:x="700" fg:w="1"/><text x="53.5225%" y="799.50"></text></g><g><title>0x11000cacc (1 samples, 0.08%)</title><rect x="53.3486%" y="821" width="0.0761%" height="15" fill="rgb(243,35,44)" fg:x="701" fg:w="1"/><text x="53.5986%" y="831.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.08%)</title><rect x="53.3486%" y="805" width="0.0761%" height="15" fill="rgb(246,89,9)" fg:x="701" fg:w="1"/><text x="53.5986%" y="815.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.08%)</title><rect x="53.3486%" y="789" width="0.0761%" height="15" fill="rgb(233,213,13)" fg:x="701" fg:w="1"/><text x="53.5986%" y="799.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.08%)</title><rect x="53.3486%" y="773" width="0.0761%" height="15" fill="rgb(233,141,41)" fg:x="701" fg:w="1"/><text x="53.5986%" y="783.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.08%)</title><rect x="53.3486%" y="757" width="0.0761%" height="15" fill="rgb(239,167,4)" fg:x="701" fg:w="1"/><text x="53.5986%" y="767.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.08%)</title><rect x="53.3486%" y="741" width="0.0761%" height="15" fill="rgb(209,217,16)" fg:x="701" fg:w="1"/><text x="53.5986%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.08%)</title><rect x="53.3486%" y="725" width="0.0761%" height="15" fill="rgb(219,88,35)" fg:x="701" fg:w="1"/><text x="53.5986%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.08%)</title><rect x="53.3486%" y="709" width="0.0761%" height="15" fill="rgb(220,193,23)" fg:x="701" fg:w="1"/><text x="53.5986%" y="719.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.08%)</title><rect x="53.3486%" y="693" width="0.0761%" height="15" fill="rgb(230,90,52)" fg:x="701" fg:w="1"/><text x="53.5986%" y="703.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.08%)</title><rect x="53.3486%" y="677" width="0.0761%" height="15" fill="rgb(252,106,19)" fg:x="701" fg:w="1"/><text x="53.5986%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.08%)</title><rect x="53.3486%" y="661" width="0.0761%" height="15" fill="rgb(206,74,20)" fg:x="701" fg:w="1"/><text x="53.5986%" y="671.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (1 samples, 0.08%)</title><rect x="53.3486%" y="645" width="0.0761%" height="15" fill="rgb(230,138,44)" fg:x="701" fg:w="1"/><text x="53.5986%" y="655.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (19 samples, 1.45%)</title><rect x="52.0548%" y="837" width="1.4460%" height="15" fill="rgb(235,182,43)" fg:x="684" fg:w="19"/><text x="52.3048%" y="847.50"></text></g><g><title>0x11000cc9c (1 samples, 0.08%)</title><rect x="53.4247%" y="821" width="0.0761%" height="15" fill="rgb(242,16,51)" fg:x="702" fg:w="1"/><text x="53.6747%" y="831.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (23 samples, 1.75%)</title><rect x="51.8265%" y="1157" width="1.7504%" height="15" fill="rgb(248,9,4)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1167.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 1.75%)</title><rect x="51.8265%" y="1141" width="1.7504%" height="15" fill="rgb(210,31,22)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1151.50"></text></g><g><title>deno`deno::main::_{{closure}} (23 samples, 1.75%)</title><rect x="51.8265%" y="1125" width="1.7504%" height="15" fill="rgb(239,54,39)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1135.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 1.75%)</title><rect x="51.8265%" y="1109" width="1.7504%" height="15" fill="rgb(230,99,41)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1119.50"></text></g><g><title>deno`deno::run_command::_{{closure}} (23 samples, 1.75%)</title><rect x="51.8265%" y="1093" width="1.7504%" height="15" fill="rgb(253,106,12)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1103.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 1.75%)</title><rect x="51.8265%" y="1077" width="1.7504%" height="15" fill="rgb(213,46,41)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1087.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 1.75%)</title><rect x="51.8265%" y="1061" width="1.7504%" height="15" fill="rgb(215,133,35)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1071.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 1.75%)</title><rect x="51.8265%" y="1045" width="1.7504%" height="15" fill="rgb(213,28,5)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1055.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 1.75%)</title><rect x="51.8265%" y="1029" width="1.7504%" height="15" fill="rgb(215,77,49)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (23 samples, 1.75%)</title><rect x="51.8265%" y="1013" width="1.7504%" height="15" fill="rgb(248,100,22)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1023.50"></text></g><g><title>deno`v8::Module::Evaluate(v8::Local (23 samples, 1.75%)</title><rect x="51.8265%" y="997" width="1.7504%" height="15" fill="rgb(208,67,9)" fg:x="681" fg:w="23"/><text x="52.0765%" y="1007.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (23 samples, 1.75%)</title><rect x="51.8265%" y="981" width="1.7504%" height="15" fill="rgb(219,133,21)" fg:x="681" fg:w="23"/><text x="52.0765%" y="991.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (23 samples, 1.75%)</title><rect x="51.8265%" y="965" width="1.7504%" height="15" fill="rgb(246,46,29)" fg:x="681" fg:w="23"/><text x="52.0765%" y="975.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (23 samples, 1.75%)</title><rect x="51.8265%" y="949" width="1.7504%" height="15" fill="rgb(246,185,52)" fg:x="681" fg:w="23"/><text x="52.0765%" y="959.50"></text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (23 samples, 1.75%)</title><rect x="51.8265%" y="933" width="1.7504%" height="15" fill="rgb(252,136,11)" fg:x="681" fg:w="23"/><text x="52.0765%" y="943.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (23 samples, 1.75%)</title><rect x="51.8265%" y="917" width="1.7504%" height="15" fill="rgb(219,138,53)" fg:x="681" fg:w="23"/><text x="52.0765%" y="927.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (23 samples, 1.75%)</title><rect x="51.8265%" y="901" width="1.7504%" height="15" fill="rgb(211,51,23)" fg:x="681" fg:w="23"/><text x="52.0765%" y="911.50"></text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (23 samples, 1.75%)</title><rect x="51.8265%" y="885" width="1.7504%" height="15" fill="rgb(247,221,28)" fg:x="681" fg:w="23"/><text x="52.0765%" y="895.50"></text></g><g><title>deno`Builtins_RunMicrotasks (23 samples, 1.75%)</title><rect x="51.8265%" y="869" width="1.7504%" height="15" fill="rgb(251,222,45)" fg:x="681" fg:w="23"/><text x="52.0765%" y="879.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (22 samples, 1.67%)</title><rect x="51.9026%" y="853" width="1.6743%" height="15" fill="rgb(217,162,53)" fg:x="682" fg:w="22"/><text x="52.1526%" y="863.50"></text></g><g><title>deno`Builtins_ResolvePromise (1 samples, 0.08%)</title><rect x="53.5008%" y="837" width="0.0761%" height="15" fill="rgb(229,93,14)" fg:x="703" fg:w="1"/><text x="53.7508%" y="847.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="53.5769%" y="949" width="0.0761%" height="15" fill="rgb(209,67,49)" fg:x="704" fg:w="1"/><text x="53.8269%" y="959.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="53.5769%" y="933" width="0.0761%" height="15" fill="rgb(213,87,29)" fg:x="704" fg:w="1"/><text x="53.8269%" y="943.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="53.5769%" y="917" width="0.0761%" height="15" fill="rgb(205,151,52)" fg:x="704" fg:w="1"/><text x="53.8269%" y="927.50"></text></g><g><title>deno`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="53.5769%" y="901" width="0.0761%" height="15" fill="rgb(253,215,39)" fg:x="704" fg:w="1"/><text x="53.8269%" y="911.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="53.5769%" y="885" width="0.0761%" height="15" fill="rgb(221,220,41)" fg:x="704" fg:w="1"/><text x="53.8269%" y="895.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="53.5769%" y="869" width="0.0761%" height="15" fill="rgb(218,133,21)" fg:x="704" fg:w="1"/><text x="53.8269%" y="879.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="53.5769%" y="853" width="0.0761%" height="15" fill="rgb(221,193,43)" fg:x="704" fg:w="1"/><text x="53.8269%" y="863.50"></text></g><g><title>deno`deno::file_fetcher::fetch_local (1 samples, 0.08%)</title><rect x="53.5769%" y="837" width="0.0761%" height="15" fill="rgb(240,128,52)" fg:x="704" fg:w="1"/><text x="53.8269%" y="847.50"></text></g><g><title>deno`deno::file_fetcher::get_source_from_bytes (1 samples, 0.08%)</title><rect x="53.5769%" y="821" width="0.0761%" height="15" fill="rgb(253,114,12)" fg:x="704" fg:w="1"/><text x="53.8269%" y="831.50"></text></g><g><title>deno`encoding_rs::Encoding::for_label (1 samples, 0.08%)</title><rect x="53.5769%" y="805" width="0.0761%" height="15" fill="rgb(215,223,47)" fg:x="704" fg:w="1"/><text x="53.8269%" y="815.50"></text></g><g><title>0x11000d110 (1 samples, 0.08%)</title><rect x="56.3166%" y="789" width="0.0761%" height="15" fill="rgb(248,225,23)" fg:x="740" fg:w="1"/><text x="56.5666%" y="799.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (7 samples, 0.53%)</title><rect x="56.3927%" y="789" width="0.5327%" height="15" fill="rgb(250,108,0)" fg:x="741" fg:w="7"/><text x="56.6427%" y="799.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNullOrUndefined (5 samples, 0.38%)</title><rect x="56.9254%" y="789" width="0.3805%" height="15" fill="rgb(228,208,7)" fg:x="748" fg:w="5"/><text x="57.1754%" y="799.50"></text></g><g><title>0x11000d0cc (2 samples, 0.15%)</title><rect x="58.5997%" y="773" width="0.1522%" height="15" fill="rgb(244,45,10)" fg:x="770" fg:w="2"/><text x="58.8497%" y="783.50"></text></g><g><title>0x11000d1e8 (1 samples, 0.08%)</title><rect x="58.7519%" y="773" width="0.0761%" height="15" fill="rgb(207,125,25)" fg:x="772" fg:w="1"/><text x="59.0019%" y="783.50"></text></g><g><title>0x11000ac24 (1 samples, 0.08%)</title><rect x="59.0563%" y="741" width="0.0761%" height="15" fill="rgb(210,195,18)" fg:x="776" fg:w="1"/><text x="59.3063%" y="751.50"></text></g><g><title>0x11000af44 (1 samples, 0.08%)</title><rect x="59.0563%" y="725" width="0.0761%" height="15" fill="rgb(249,80,12)" fg:x="776" fg:w="1"/><text x="59.3063%" y="735.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.08%)</title><rect x="59.0563%" y="709" width="0.0761%" height="15" fill="rgb(221,65,9)" fg:x="776" fg:w="1"/><text x="59.3063%" y="719.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.08%)</title><rect x="59.0563%" y="693" width="0.0761%" height="15" fill="rgb(235,49,36)" fg:x="776" fg:w="1"/><text x="59.3063%" y="703.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="59.0563%" y="677" width="0.0761%" height="15" fill="rgb(225,32,20)" fg:x="776" fg:w="1"/><text x="59.3063%" y="687.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.08%)</title><rect x="59.0563%" y="661" width="0.0761%" height="15" fill="rgb(215,141,46)" fg:x="776" fg:w="1"/><text x="59.3063%" y="671.50"></text></g><g><title>deno`v8::Promise::Resolver::Resolve(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.08%)</title><rect x="59.0563%" y="645" width="0.0761%" height="15" fill="rgb(250,160,47)" fg:x="776" fg:w="1"/><text x="59.3063%" y="655.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="59.1324%" y="709" width="0.0761%" height="15" fill="rgb(216,222,40)" fg:x="777" fg:w="1"/><text x="59.3824%" y="719.50"></text></g><g><title>0x110009e28 (4 samples, 0.30%)</title><rect x="59.0563%" y="757" width="0.3044%" height="15" fill="rgb(234,217,39)" fg:x="776" fg:w="4"/><text x="59.3063%" y="767.50"></text></g><g><title>0x11000bc38 (3 samples, 0.23%)</title><rect x="59.1324%" y="741" width="0.2283%" height="15" fill="rgb(207,178,40)" fg:x="777" fg:w="3"/><text x="59.3824%" y="751.50"></text></g><g><title>deno`Builtins_CallApiCallback (3 samples, 0.23%)</title><rect x="59.1324%" y="725" width="0.2283%" height="15" fill="rgb(221,136,13)" fg:x="777" fg:w="3"/><text x="59.3824%" y="735.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.15%)</title><rect x="59.2085%" y="709" width="0.1522%" height="15" fill="rgb(249,199,10)" fg:x="778" fg:w="2"/><text x="59.4585%" y="719.50"></text></g><g><title>deno`v8::Promise::Resolver::New(v8::Local (1 samples, 0.08%)</title><rect x="59.2846%" y="693" width="0.0761%" height="15" fill="rgb(249,222,13)" fg:x="779" fg:w="1"/><text x="59.5346%" y="703.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromise (1 samples, 0.08%)</title><rect x="59.2846%" y="677" width="0.0761%" height="15" fill="rgb(244,185,38)" fg:x="779" fg:w="1"/><text x="59.5346%" y="687.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromiseWithoutHook (1 samples, 0.08%)</title><rect x="59.2846%" y="661" width="0.0761%" height="15" fill="rgb(236,202,9)" fg:x="779" fg:w="1"/><text x="59.5346%" y="671.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObject(v8::internal::Handle (1 samples, 0.08%)</title><rect x="59.2846%" y="645" width="0.0761%" height="15" fill="rgb(250,229,37)" fg:x="779" fg:w="1"/><text x="59.5346%" y="655.50"></text></g><g><title>deno`v8::internal::JSFunction::EnsureHasInitialMap(v8::internal::Handle (1 samples, 0.08%)</title><rect x="59.2846%" y="629" width="0.0761%" height="15" fill="rgb(206,174,23)" fg:x="779" fg:w="1"/><text x="59.5346%" y="639.50"></text></g><g><title>0x11000c320 (1 samples, 0.08%)</title><rect x="59.3607%" y="757" width="0.0761%" height="15" fill="rgb(211,33,43)" fg:x="780" fg:w="1"/><text x="59.6107%" y="767.50"></text></g><g><title>0x11000c330 (2 samples, 0.15%)</title><rect x="59.4368%" y="757" width="0.1522%" height="15" fill="rgb(245,58,50)" fg:x="781" fg:w="2"/><text x="59.6868%" y="767.50"></text></g><g><title>0x11000c350 (1 samples, 0.08%)</title><rect x="59.5890%" y="757" width="0.0761%" height="15" fill="rgb(244,68,36)" fg:x="783" fg:w="1"/><text x="59.8390%" y="767.50"></text></g><g><title>0x11000c354 (1 samples, 0.08%)</title><rect x="59.6651%" y="757" width="0.0761%" height="15" fill="rgb(232,229,15)" fg:x="784" fg:w="1"/><text x="59.9151%" y="767.50"></text></g><g><title>0x11000c378 (1 samples, 0.08%)</title><rect x="59.7412%" y="757" width="0.0761%" height="15" fill="rgb(254,30,23)" fg:x="785" fg:w="1"/><text x="59.9912%" y="767.50"></text></g><g><title>0x11000c410 (1 samples, 0.08%)</title><rect x="59.8174%" y="757" width="0.0761%" height="15" fill="rgb(235,160,14)" fg:x="786" fg:w="1"/><text x="60.0674%" y="767.50"></text></g><g><title>0x11000c490 (1 samples, 0.08%)</title><rect x="59.8935%" y="757" width="0.0761%" height="15" fill="rgb(212,155,44)" fg:x="787" fg:w="1"/><text x="60.1435%" y="767.50"></text></g><g><title>0x11000c49c (1 samples, 0.08%)</title><rect x="59.9696%" y="757" width="0.0761%" height="15" fill="rgb(226,2,50)" fg:x="788" fg:w="1"/><text x="60.2196%" y="767.50"></text></g><g><title>0x11000c54c (1 samples, 0.08%)</title><rect x="60.0457%" y="757" width="0.0761%" height="15" fill="rgb(234,177,6)" fg:x="789" fg:w="1"/><text x="60.2957%" y="767.50"></text></g><g><title>0x11000c57c (2 samples, 0.15%)</title><rect x="60.1218%" y="757" width="0.1522%" height="15" fill="rgb(217,24,9)" fg:x="790" fg:w="2"/><text x="60.3718%" y="767.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (2 samples, 0.15%)</title><rect x="60.1218%" y="741" width="0.1522%" height="15" fill="rgb(220,13,46)" fg:x="790" fg:w="2"/><text x="60.3718%" y="751.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="61.7199%" y="709" width="0.0761%" height="15" fill="rgb(239,221,27)" fg:x="811" fg:w="1"/><text x="61.9699%" y="719.50"></text></g><g><title>deno`v8::CallDepthScope&lt;false&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (2 samples, 0.15%)</title><rect x="61.7960%" y="709" width="0.1522%" height="15" fill="rgb(222,198,25)" fg:x="812" fg:w="2"/><text x="62.0460%" y="719.50"></text></g><g><title>deno`v8::CallDepthScope&lt;false&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (3 samples, 0.23%)</title><rect x="62.1766%" y="693" width="0.2283%" height="15" fill="rgb(211,99,13)" fg:x="817" fg:w="3"/><text x="62.4266%" y="703.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.15%)</title><rect x="62.2527%" y="677" width="0.1522%" height="15" fill="rgb(232,111,31)" fg:x="818" fg:w="2"/><text x="62.5027%" y="687.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.15%)</title><rect x="62.4049%" y="693" width="0.1522%" height="15" fill="rgb(245,82,37)" fg:x="820" fg:w="2"/><text x="62.6549%" y="703.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (1 samples, 0.08%)</title><rect x="63.3942%" y="661" width="0.0761%" height="15" fill="rgb(227,149,46)" fg:x="833" fg:w="1"/><text x="63.6442%" y="671.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (2 samples, 0.15%)</title><rect x="63.4703%" y="661" width="0.1522%" height="15" fill="rgb(218,36,50)" fg:x="834" fg:w="2"/><text x="63.7203%" y="671.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (3 samples, 0.23%)</title><rect x="63.9269%" y="645" width="0.2283%" height="15" fill="rgb(226,80,48)" fg:x="840" fg:w="3"/><text x="64.1769%" y="655.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (1 samples, 0.08%)</title><rect x="64.1553%" y="645" width="0.0761%" height="15" fill="rgb(238,224,15)" fg:x="843" fg:w="1"/><text x="64.4053%" y="655.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (1 samples, 0.08%)</title><rect x="64.1553%" y="629" width="0.0761%" height="15" fill="rgb(241,136,10)" fg:x="843" fg:w="1"/><text x="64.4053%" y="639.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (3 samples, 0.23%)</title><rect x="64.2314%" y="645" width="0.2283%" height="15" fill="rgb(208,32,45)" fg:x="844" fg:w="3"/><text x="64.4814%" y="655.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromiseWithoutHook (25 samples, 1.90%)</title><rect x="62.6332%" y="677" width="1.9026%" height="15" fill="rgb(207,135,9)" fg:x="823" fg:w="25"/><text x="62.8832%" y="687.50">d..</text></g><g><title>deno`v8::internal::Factory::NewJSObject(v8::internal::Handle (12 samples, 0.91%)</title><rect x="63.6225%" y="661" width="0.9132%" height="15" fill="rgb(206,86,44)" fg:x="836" fg:w="12"/><text x="63.8725%" y="671.50"></text></g><g><title>deno`v8::internal::JSFunction::EnsureHasInitialMap(v8::internal::Handle (1 samples, 0.08%)</title><rect x="64.4597%" y="645" width="0.0761%" height="15" fill="rgb(245,177,15)" fg:x="847" fg:w="1"/><text x="64.7097%" y="655.50"></text></g><g><title>deno`v8::internal::Isolate::RunAllPromiseHooks(v8::PromiseHookType, v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="64.5358%" y="677" width="0.0761%" height="15" fill="rgb(206,64,50)" fg:x="848" fg:w="1"/><text x="64.7858%" y="687.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromise (30 samples, 2.28%)</title><rect x="62.5571%" y="693" width="2.2831%" height="15" fill="rgb(234,36,40)" fg:x="822" fg:w="30"/><text x="62.8071%" y="703.50">d..</text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (3 samples, 0.23%)</title><rect x="64.6119%" y="677" width="0.2283%" height="15" fill="rgb(213,64,8)" fg:x="849" fg:w="3"/><text x="64.8619%" y="687.50"></text></g><g><title>deno`v8::Promise::Resolver::New(v8::Local (39 samples, 2.97%)</title><rect x="61.9482%" y="709" width="2.9680%" height="15" fill="rgb(210,75,36)" fg:x="814" fg:w="39"/><text x="62.1982%" y="719.50">den..</text></g><g><title>deno`v8::internal::Isolate::RunAllPromiseHooks(v8::PromiseHookType, v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="64.8402%" y="693" width="0.0761%" height="15" fill="rgb(229,88,21)" fg:x="852" fg:w="1"/><text x="65.0902%" y="703.50"></text></g><g><title>deno`v8::Value::IsInt32 (1 samples, 0.08%)</title><rect x="64.9163%" y="709" width="0.0761%" height="15" fill="rgb(252,204,47)" fg:x="853" fg:w="1"/><text x="65.1663%" y="719.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromise (1 samples, 0.08%)</title><rect x="64.9924%" y="709" width="0.0761%" height="15" fill="rgb(208,77,27)" fg:x="854" fg:w="1"/><text x="65.2424%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (4 samples, 0.30%)</title><rect x="65.0685%" y="709" width="0.3044%" height="15" fill="rgb(221,76,26)" fg:x="855" fg:w="4"/><text x="65.3185%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (1 samples, 0.08%)</title><rect x="65.3729%" y="709" width="0.0761%" height="15" fill="rgb(225,139,18)" fg:x="859" fg:w="1"/><text x="65.6229%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (1 samples, 0.08%)</title><rect x="65.4490%" y="709" width="0.0761%" height="15" fill="rgb(230,137,11)" fg:x="860" fg:w="1"/><text x="65.6990%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (2 samples, 0.15%)</title><rect x="65.5251%" y="709" width="0.1522%" height="15" fill="rgb(212,28,1)" fg:x="861" fg:w="2"/><text x="65.7751%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (1 samples, 0.08%)</title><rect x="65.6773%" y="709" width="0.0761%" height="15" fill="rgb(248,164,17)" fg:x="863" fg:w="1"/><text x="65.9273%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (1 samples, 0.08%)</title><rect x="65.7534%" y="709" width="0.0761%" height="15" fill="rgb(222,171,42)" fg:x="864" fg:w="1"/><text x="66.0034%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (2 samples, 0.15%)</title><rect x="65.8295%" y="709" width="0.1522%" height="15" fill="rgb(243,84,45)" fg:x="865" fg:w="2"/><text x="66.0795%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.15%)</title><rect x="65.8295%" y="693" width="0.1522%" height="15" fill="rgb(252,49,23)" fg:x="865" fg:w="2"/><text x="66.0795%" y="703.50"></text></g><g><title>deno`v8__Global__New (4 samples, 0.30%)</title><rect x="65.9817%" y="709" width="0.3044%" height="15" fill="rgb(215,19,7)" fg:x="867" fg:w="4"/><text x="66.2317%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (4 samples, 0.30%)</title><rect x="65.9817%" y="693" width="0.3044%" height="15" fill="rgb(238,81,41)" fg:x="867" fg:w="4"/><text x="66.2317%" y="703.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (1 samples, 0.08%)</title><rect x="66.3623%" y="693" width="0.0761%" height="15" fill="rgb(210,199,37)" fg:x="872" fg:w="1"/><text x="66.6123%" y="703.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (6 samples, 0.46%)</title><rect x="66.5145%" y="677" width="0.4566%" height="15" fill="rgb(244,192,49)" fg:x="874" fg:w="6"/><text x="66.7645%" y="687.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.08%)</title><rect x="66.8950%" y="661" width="0.0761%" height="15" fill="rgb(226,211,11)" fg:x="879" fg:w="1"/><text x="67.1450%" y="671.50"></text></g><g><title>deno`v8__Promise__Resolver__Resolve (12 samples, 0.91%)</title><rect x="66.2861%" y="709" width="0.9132%" height="15" fill="rgb(236,162,54)" fg:x="871" fg:w="12"/><text x="66.5361%" y="719.50"></text></g><g><title>deno`v8::Promise::Resolver::Resolve(v8::Local&lt;v8::Context&gt;, v8::Local (10 samples, 0.76%)</title><rect x="66.4384%" y="693" width="0.7610%" height="15" fill="rgb(220,229,9)" fg:x="873" fg:w="10"/><text x="66.6884%" y="703.50"></text></g><g><title>deno`v8::internal::JSPromise::Resolve(v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (3 samples, 0.23%)</title><rect x="66.9711%" y="677" width="0.2283%" height="15" fill="rgb(250,87,22)" fg:x="880" fg:w="3"/><text x="67.2211%" y="687.50"></text></g><g><title>deno`v8::internal::JSPromise::Fulfill(v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (2 samples, 0.15%)</title><rect x="67.0472%" y="661" width="0.1522%" height="15" fill="rgb(239,43,17)" fg:x="881" fg:w="2"/><text x="67.2972%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.08%)</title><rect x="67.4277%" y="693" width="0.0761%" height="15" fill="rgb(231,177,25)" fg:x="886" fg:w="1"/><text x="67.6777%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.53%)</title><rect x="67.5038%" y="677" width="0.5327%" height="15" fill="rgb(219,179,1)" fg:x="887" fg:w="7"/><text x="67.7538%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.23%)</title><rect x="67.8082%" y="661" width="0.2283%" height="15" fill="rgb(238,219,53)" fg:x="891" fg:w="3"/><text x="68.0582%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.91%)</title><rect x="67.1994%" y="709" width="0.9132%" height="15" fill="rgb(232,167,36)" fg:x="883" fg:w="12"/><text x="67.4494%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.61%)</title><rect x="67.5038%" y="693" width="0.6088%" height="15" fill="rgb(244,19,51)" fg:x="887" fg:w="8"/><text x="67.7538%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.08%)</title><rect x="68.0365%" y="677" width="0.0761%" height="15" fill="rgb(224,6,22)" fg:x="894" fg:w="1"/><text x="68.2865%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.76%)</title><rect x="68.1126%" y="709" width="0.7610%" height="15" fill="rgb(224,145,5)" fg:x="895" fg:w="10"/><text x="68.3626%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.46%)</title><rect x="68.4170%" y="693" width="0.4566%" height="15" fill="rgb(234,130,49)" fg:x="899" fg:w="6"/><text x="68.6670%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.08%)</title><rect x="68.8737%" y="709" width="0.0761%" height="15" fill="rgb(254,6,2)" fg:x="905" fg:w="1"/><text x="69.1237%" y="719.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (112 samples, 8.52%)</title><rect x="60.5023%" y="725" width="8.5236%" height="15" fill="rgb(208,96,46)" fg:x="795" fg:w="112"/><text x="60.7523%" y="735.50">deno`&lt;extern..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="68.9498%" y="709" width="0.0761%" height="15" fill="rgb(239,3,39)" fg:x="906" fg:w="1"/><text x="69.1998%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.08%)</title><rect x="69.0259%" y="725" width="0.0761%" height="15" fill="rgb(233,210,1)" fg:x="907" fg:w="1"/><text x="69.2759%" y="735.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.08%)</title><rect x="69.1020%" y="725" width="0.0761%" height="15" fill="rgb(244,137,37)" fg:x="908" fg:w="1"/><text x="69.3520%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="69.1781%" y="725" width="0.0761%" height="15" fill="rgb(240,136,2)" fg:x="909" fg:w="1"/><text x="69.4281%" y="735.50"></text></g><g><title>deno`v8::Integer::Value (1 samples, 0.08%)</title><rect x="69.2542%" y="725" width="0.0761%" height="15" fill="rgb(239,18,37)" fg:x="910" fg:w="1"/><text x="69.5042%" y="735.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (1 samples, 0.08%)</title><rect x="69.3303%" y="725" width="0.0761%" height="15" fill="rgb(218,185,22)" fg:x="911" fg:w="1"/><text x="69.5803%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (1 samples, 0.08%)</title><rect x="69.4064%" y="725" width="0.0761%" height="15" fill="rgb(225,218,4)" fg:x="912" fg:w="1"/><text x="69.6564%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (1 samples, 0.08%)</title><rect x="69.4825%" y="725" width="0.0761%" height="15" fill="rgb(230,182,32)" fg:x="913" fg:w="1"/><text x="69.7325%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (1 samples, 0.08%)</title><rect x="69.5586%" y="725" width="0.0761%" height="15" fill="rgb(242,56,43)" fg:x="914" fg:w="1"/><text x="69.8086%" y="735.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.08%)</title><rect x="69.6347%" y="725" width="0.0761%" height="15" fill="rgb(233,99,24)" fg:x="915" fg:w="1"/><text x="69.8847%" y="735.50"></text></g><g><title>0x11000c5c0 (125 samples, 9.51%)</title><rect x="60.2740%" y="757" width="9.5129%" height="15" fill="rgb(234,209,42)" fg:x="792" fg:w="125"/><text x="60.5240%" y="767.50">0x11000c5c0</text></g><g><title>deno`Builtins_CallApiCallback (125 samples, 9.51%)</title><rect x="60.2740%" y="741" width="9.5129%" height="15" fill="rgb(227,7,12)" fg:x="792" fg:w="125"/><text x="60.5240%" y="751.50">deno`Builtins_..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.08%)</title><rect x="69.7108%" y="725" width="0.0761%" height="15" fill="rgb(245,203,43)" fg:x="916" fg:w="1"/><text x="69.9608%" y="735.50"></text></g><g><title>0x11000c5f8 (8 samples, 0.61%)</title><rect x="69.7869%" y="757" width="0.6088%" height="15" fill="rgb(238,205,33)" fg:x="917" fg:w="8"/><text x="70.0369%" y="767.50"></text></g><g><title>deno`Builtins_PromisePrototypeThen (8 samples, 0.61%)</title><rect x="69.7869%" y="741" width="0.6088%" height="15" fill="rgb(231,56,7)" fg:x="917" fg:w="8"/><text x="70.0369%" y="751.50"></text></g><g><title>0x11000c6e8 (1 samples, 0.08%)</title><rect x="70.3957%" y="757" width="0.0761%" height="15" fill="rgb(244,186,29)" fg:x="925" fg:w="1"/><text x="70.6457%" y="767.50"></text></g><g><title>0x11000c6f0 (1 samples, 0.08%)</title><rect x="70.4718%" y="757" width="0.0761%" height="15" fill="rgb(234,111,31)" fg:x="926" fg:w="1"/><text x="70.7218%" y="767.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.08%)</title><rect x="70.9285%" y="725" width="0.0761%" height="15" fill="rgb(241,149,10)" fg:x="932" fg:w="1"/><text x="71.1785%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.08%)</title><rect x="70.9285%" y="709" width="0.0761%" height="15" fill="rgb(249,206,44)" fg:x="932" fg:w="1"/><text x="71.1785%" y="719.50"></text></g><g><title>0x11000c71c (7 samples, 0.53%)</title><rect x="70.5479%" y="757" width="0.5327%" height="15" fill="rgb(251,153,30)" fg:x="927" fg:w="7"/><text x="70.7979%" y="767.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (7 samples, 0.53%)</title><rect x="70.5479%" y="741" width="0.5327%" height="15" fill="rgb(239,152,38)" fg:x="927" fg:w="7"/><text x="70.7979%" y="751.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (1 samples, 0.08%)</title><rect x="71.0046%" y="725" width="0.0761%" height="15" fill="rgb(249,139,47)" fg:x="933" fg:w="1"/><text x="71.2546%" y="735.50"></text></g><g><title>0x11000c7a8 (1 samples, 0.08%)</title><rect x="71.0807%" y="757" width="0.0761%" height="15" fill="rgb(244,64,35)" fg:x="934" fg:w="1"/><text x="71.3307%" y="767.50"></text></g><g><title>0x11000c9d8 (1 samples, 0.08%)</title><rect x="71.1568%" y="757" width="0.0761%" height="15" fill="rgb(216,46,15)" fg:x="935" fg:w="1"/><text x="71.4068%" y="767.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (5 samples, 0.38%)</title><rect x="71.2329%" y="581" width="0.3805%" height="15" fill="rgb(250,74,19)" fg:x="936" fg:w="5"/><text x="71.4829%" y="591.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (7 samples, 0.53%)</title><rect x="71.2329%" y="597" width="0.5327%" height="15" fill="rgb(249,42,33)" fg:x="936" fg:w="7"/><text x="71.4829%" y="607.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (2 samples, 0.15%)</title><rect x="71.6134%" y="581" width="0.1522%" height="15" fill="rgb(242,149,17)" fg:x="941" fg:w="2"/><text x="71.8634%" y="591.50"></text></g><g><title>deno`v8::internal::NewSpace::MaybeFreeUnusedLab (1 samples, 0.08%)</title><rect x="71.7656%" y="597" width="0.0761%" height="15" fill="rgb(244,29,21)" fg:x="943" fg:w="1"/><text x="72.0156%" y="607.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (1 samples, 0.08%)</title><rect x="71.8417%" y="597" width="0.0761%" height="15" fill="rgb(220,130,37)" fg:x="944" fg:w="1"/><text x="72.0917%" y="607.50"></text></g><g><title>deno`v8::internal::CompactionSpaceCollection::CompactionSpaceCollection (1 samples, 0.08%)</title><rect x="71.8417%" y="581" width="0.0761%" height="15" fill="rgb(211,67,2)" fg:x="944" fg:w="1"/><text x="72.0917%" y="591.50"></text></g><g><title>deno`v8::internal::FreeList::CreateFreeList (1 samples, 0.08%)</title><rect x="71.8417%" y="565" width="0.0761%" height="15" fill="rgb(235,68,52)" fg:x="944" fg:w="1"/><text x="72.0917%" y="575.50"></text></g><g><title>deno`v8::internal::FreeListManyCached::FreeListManyCached (1 samples, 0.08%)</title><rect x="71.8417%" y="549" width="0.0761%" height="15" fill="rgb(246,142,3)" fg:x="944" fg:w="1"/><text x="72.0917%" y="559.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.08%)</title><rect x="71.8417%" y="533" width="0.0761%" height="15" fill="rgb(241,25,7)" fg:x="944" fg:w="1"/><text x="72.0917%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="71.8417%" y="517" width="0.0761%" height="15" fill="rgb(242,119,39)" fg:x="944" fg:w="1"/><text x="72.0917%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="71.8417%" y="501" width="0.0761%" height="15" fill="rgb(241,98,45)" fg:x="944" fg:w="1"/><text x="72.0917%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.08%)</title><rect x="71.8417%" y="485" width="0.0761%" height="15" fill="rgb(254,28,30)" fg:x="944" fg:w="1"/><text x="72.0917%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.08%)</title><rect x="71.8417%" y="469" width="0.0761%" height="15" fill="rgb(241,142,54)" fg:x="944" fg:w="1"/><text x="72.0917%" y="479.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (10 samples, 0.76%)</title><rect x="71.2329%" y="613" width="0.7610%" height="15" fill="rgb(222,85,15)" fg:x="936" fg:w="10"/><text x="71.4829%" y="623.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.08%)</title><rect x="71.9178%" y="597" width="0.0761%" height="15" fill="rgb(210,85,47)" fg:x="945" fg:w="1"/><text x="72.1678%" y="607.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (1 samples, 0.08%)</title><rect x="71.9178%" y="581" width="0.0761%" height="15" fill="rgb(224,206,25)" fg:x="945" fg:w="1"/><text x="72.1678%" y="591.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (1 samples, 0.08%)</title><rect x="71.9178%" y="565" width="0.0761%" height="15" fill="rgb(243,201,19)" fg:x="945" fg:w="1"/><text x="72.1678%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.08%)</title><rect x="71.9178%" y="549" width="0.0761%" height="15" fill="rgb(236,59,4)" fg:x="945" fg:w="1"/><text x="72.1678%" y="559.50"></text></g><g><title>0x11000cacc (11 samples, 0.84%)</title><rect x="71.2329%" y="757" width="0.8371%" height="15" fill="rgb(254,179,45)" fg:x="936" fg:w="11"/><text x="71.4829%" y="767.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (11 samples, 0.84%)</title><rect x="71.2329%" y="741" width="0.8371%" height="15" fill="rgb(226,14,10)" fg:x="936" fg:w="11"/><text x="71.4829%" y="751.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (11 samples, 0.84%)</title><rect x="71.2329%" y="725" width="0.8371%" height="15" fill="rgb(244,27,41)" fg:x="936" fg:w="11"/><text x="71.4829%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (11 samples, 0.84%)</title><rect x="71.2329%" y="709" width="0.8371%" height="15" fill="rgb(235,35,32)" fg:x="936" fg:w="11"/><text x="71.4829%" y="719.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (11 samples, 0.84%)</title><rect x="71.2329%" y="693" width="0.8371%" height="15" fill="rgb(218,68,31)" fg:x="936" fg:w="11"/><text x="71.4829%" y="703.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (11 samples, 0.84%)</title><rect x="71.2329%" y="677" width="0.8371%" height="15" fill="rgb(207,120,37)" fg:x="936" fg:w="11"/><text x="71.4829%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (11 samples, 0.84%)</title><rect x="71.2329%" y="661" width="0.8371%" height="15" fill="rgb(227,98,0)" fg:x="936" fg:w="11"/><text x="71.4829%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (11 samples, 0.84%)</title><rect x="71.2329%" y="645" width="0.8371%" height="15" fill="rgb(207,7,3)" fg:x="936" fg:w="11"/><text x="71.4829%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (11 samples, 0.84%)</title><rect x="71.2329%" y="629" width="0.8371%" height="15" fill="rgb(206,98,19)" fg:x="936" fg:w="11"/><text x="71.4829%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.08%)</title><rect x="71.9939%" y="613" width="0.0761%" height="15" fill="rgb(217,5,26)" fg:x="946" fg:w="1"/><text x="72.2439%" y="623.50"></text></g><g><title>0x11000d238 (1 samples, 0.08%)</title><rect x="72.0700%" y="757" width="0.0761%" height="15" fill="rgb(235,190,38)" fg:x="947" fg:w="1"/><text x="72.3200%" y="767.50"></text></g><g><title>0x11000d470 (1 samples, 0.08%)</title><rect x="72.1461%" y="757" width="0.0761%" height="15" fill="rgb(247,86,24)" fg:x="948" fg:w="1"/><text x="72.3961%" y="767.50"></text></g><g><title>0x11000d4cc (1 samples, 0.08%)</title><rect x="72.2222%" y="757" width="0.0761%" height="15" fill="rgb(205,101,16)" fg:x="949" fg:w="1"/><text x="72.4722%" y="767.50"></text></g><g><title>0x11000da48 (1 samples, 0.08%)</title><rect x="72.2983%" y="757" width="0.0761%" height="15" fill="rgb(246,168,33)" fg:x="950" fg:w="1"/><text x="72.5483%" y="767.50"></text></g><g><title>0x11000da60 (2 samples, 0.15%)</title><rect x="72.3744%" y="757" width="0.1522%" height="15" fill="rgb(231,114,1)" fg:x="951" fg:w="2"/><text x="72.6244%" y="767.50"></text></g><g><title>0x11000da8c (1 samples, 0.08%)</title><rect x="72.5266%" y="757" width="0.0761%" height="15" fill="rgb(207,184,53)" fg:x="953" fg:w="1"/><text x="72.7766%" y="767.50"></text></g><g><title>0x11000dabc (1 samples, 0.08%)</title><rect x="72.6027%" y="757" width="0.0761%" height="15" fill="rgb(224,95,51)" fg:x="954" fg:w="1"/><text x="72.8527%" y="767.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (1 samples, 0.08%)</title><rect x="72.6027%" y="741" width="0.0761%" height="15" fill="rgb(212,188,45)" fg:x="954" fg:w="1"/><text x="72.8527%" y="751.50"></text></g><g><title>0x11000daf8 (1 samples, 0.08%)</title><rect x="72.6788%" y="757" width="0.0761%" height="15" fill="rgb(223,154,38)" fg:x="955" fg:w="1"/><text x="72.9288%" y="767.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.08%)</title><rect x="72.7549%" y="741" width="0.0761%" height="15" fill="rgb(251,22,52)" fg:x="956" fg:w="1"/><text x="73.0049%" y="751.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="75.2664%" y="709" width="0.0761%" height="15" fill="rgb(229,209,22)" fg:x="989" fg:w="1"/><text x="75.5164%" y="719.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (1 samples, 0.08%)</title><rect x="75.3425%" y="709" width="0.0761%" height="15" fill="rgb(234,138,34)" fg:x="990" fg:w="1"/><text x="75.5925%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="75.4186%" y="709" width="0.0761%" height="15" fill="rgb(212,95,11)" fg:x="991" fg:w="1"/><text x="75.6686%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (1 samples, 0.08%)</title><rect x="75.4947%" y="709" width="0.0761%" height="15" fill="rgb(240,179,47)" fg:x="992" fg:w="1"/><text x="75.7447%" y="719.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (8 samples, 0.61%)</title><rect x="75.5708%" y="709" width="0.6088%" height="15" fill="rgb(240,163,11)" fg:x="993" fg:w="8"/><text x="75.8208%" y="719.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (5 samples, 0.38%)</title><rect x="75.7991%" y="693" width="0.3805%" height="15" fill="rgb(236,37,12)" fg:x="996" fg:w="5"/><text x="76.0491%" y="703.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.15%)</title><rect x="76.1796%" y="709" width="0.1522%" height="15" fill="rgb(232,164,16)" fg:x="1001" fg:w="2"/><text x="76.4296%" y="719.50"></text></g><g><title>deno`v8::CallDepthScope&lt;false&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (1 samples, 0.08%)</title><rect x="76.7884%" y="693" width="0.0761%" height="15" fill="rgb(244,205,15)" fg:x="1009" fg:w="1"/><text x="77.0384%" y="703.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (4 samples, 0.30%)</title><rect x="76.8645%" y="693" width="0.3044%" height="15" fill="rgb(223,117,47)" fg:x="1010" fg:w="4"/><text x="77.1145%" y="703.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (1 samples, 0.08%)</title><rect x="77.9300%" y="661" width="0.0761%" height="15" fill="rgb(244,107,35)" fg:x="1024" fg:w="1"/><text x="78.1800%" y="671.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (2 samples, 0.15%)</title><rect x="78.0061%" y="661" width="0.1522%" height="15" fill="rgb(205,140,8)" fg:x="1025" fg:w="2"/><text x="78.2561%" y="671.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (2 samples, 0.15%)</title><rect x="78.3866%" y="645" width="0.1522%" height="15" fill="rgb(228,84,46)" fg:x="1030" fg:w="2"/><text x="78.6366%" y="655.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (9 samples, 0.68%)</title><rect x="78.9954%" y="629" width="0.6849%" height="15" fill="rgb(254,188,9)" fg:x="1038" fg:w="9"/><text x="79.2454%" y="639.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (17 samples, 1.29%)</title><rect x="78.5388%" y="645" width="1.2938%" height="15" fill="rgb(206,112,54)" fg:x="1032" fg:w="17"/><text x="78.7888%" y="655.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (2 samples, 0.15%)</title><rect x="79.6804%" y="629" width="0.1522%" height="15" fill="rgb(216,84,49)" fg:x="1047" fg:w="2"/><text x="79.9304%" y="639.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (4 samples, 0.30%)</title><rect x="79.8326%" y="645" width="0.3044%" height="15" fill="rgb(214,194,35)" fg:x="1049" fg:w="4"/><text x="80.0826%" y="655.50"></text></g><g><title>deno`v8::internal::JSFunction::EnsureHasInitialMap(v8::internal::Handle (1 samples, 0.08%)</title><rect x="80.1370%" y="645" width="0.0761%" height="15" fill="rgb(249,28,3)" fg:x="1053" fg:w="1"/><text x="80.3870%" y="655.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (1 samples, 0.08%)</title><rect x="80.2131%" y="645" width="0.0761%" height="15" fill="rgb(222,56,52)" fg:x="1054" fg:w="1"/><text x="80.4631%" y="655.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObject(v8::internal::Handle (29 samples, 2.21%)</title><rect x="78.1583%" y="661" width="2.2070%" height="15" fill="rgb(245,217,50)" fg:x="1027" fg:w="29"/><text x="78.4083%" y="671.50">d..</text></g><g><title>deno`v8::internal::ReadOnlyRoots::one_pointer_filler_map_word (1 samples, 0.08%)</title><rect x="80.2892%" y="645" width="0.0761%" height="15" fill="rgb(213,201,24)" fg:x="1055" fg:w="1"/><text x="80.5392%" y="655.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromiseWithoutHook (42 samples, 3.20%)</title><rect x="77.3212%" y="677" width="3.1963%" height="15" fill="rgb(248,116,28)" fg:x="1016" fg:w="42"/><text x="77.5712%" y="687.50">den..</text></g><g><title>deno`v8::internal::JSFunction::EnsureHasInitialMap(v8::internal::Handle (2 samples, 0.15%)</title><rect x="80.3653%" y="661" width="0.1522%" height="15" fill="rgb(219,72,43)" fg:x="1056" fg:w="2"/><text x="80.6153%" y="671.50"></text></g><g><title>deno`v8::internal::Isolate::RunAllPromiseHooks(v8::PromiseHookType, v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="80.5175%" y="677" width="0.0761%" height="15" fill="rgb(209,138,14)" fg:x="1058" fg:w="1"/><text x="80.7675%" y="687.50"></text></g><g><title>deno`v8::Promise::Resolver::New(v8::Local (59 samples, 4.49%)</title><rect x="76.3318%" y="709" width="4.4901%" height="15" fill="rgb(222,18,33)" fg:x="1003" fg:w="59"/><text x="76.5818%" y="719.50">deno`..</text></g><g><title>deno`v8::internal::Factory::NewJSPromise (48 samples, 3.65%)</title><rect x="77.1689%" y="693" width="3.6530%" height="15" fill="rgb(213,199,7)" fg:x="1014" fg:w="48"/><text x="77.4189%" y="703.50">deno..</text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (3 samples, 0.23%)</title><rect x="80.5936%" y="677" width="0.2283%" height="15" fill="rgb(250,110,10)" fg:x="1059" fg:w="3"/><text x="80.8436%" y="687.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="80.8219%" y="709" width="0.0761%" height="15" fill="rgb(248,123,6)" fg:x="1062" fg:w="1"/><text x="81.0719%" y="719.50"></text></g><g><title>deno`v8::internal::Factory::NewJSPromise (2 samples, 0.15%)</title><rect x="80.8980%" y="709" width="0.1522%" height="15" fill="rgb(206,91,31)" fg:x="1063" fg:w="2"/><text x="81.1480%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (10 samples, 0.76%)</title><rect x="81.0502%" y="709" width="0.7610%" height="15" fill="rgb(211,154,13)" fg:x="1065" fg:w="10"/><text x="81.3002%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (4 samples, 0.30%)</title><rect x="81.8113%" y="709" width="0.3044%" height="15" fill="rgb(225,148,7)" fg:x="1075" fg:w="4"/><text x="82.0613%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (2 samples, 0.15%)</title><rect x="82.1157%" y="709" width="0.1522%" height="15" fill="rgb(220,160,43)" fg:x="1079" fg:w="2"/><text x="82.3657%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (2 samples, 0.15%)</title><rect x="82.2679%" y="709" width="0.1522%" height="15" fill="rgb(213,52,39)" fg:x="1081" fg:w="2"/><text x="82.5179%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (1 samples, 0.08%)</title><rect x="82.4201%" y="709" width="0.0761%" height="15" fill="rgb(243,137,7)" fg:x="1083" fg:w="1"/><text x="82.6701%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (1 samples, 0.08%)</title><rect x="82.4962%" y="709" width="0.0761%" height="15" fill="rgb(230,79,13)" fg:x="1084" fg:w="1"/><text x="82.7462%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (2 samples, 0.15%)</title><rect x="82.5723%" y="709" width="0.1522%" height="15" fill="rgb(247,105,23)" fg:x="1085" fg:w="2"/><text x="82.8223%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.15%)</title><rect x="82.5723%" y="693" width="0.1522%" height="15" fill="rgb(223,179,41)" fg:x="1085" fg:w="2"/><text x="82.8223%" y="703.50"></text></g><g><title>deno`v8__Global__New (13 samples, 0.99%)</title><rect x="82.7245%" y="709" width="0.9893%" height="15" fill="rgb(218,9,34)" fg:x="1087" fg:w="13"/><text x="82.9745%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (7 samples, 0.53%)</title><rect x="83.1811%" y="693" width="0.5327%" height="15" fill="rgb(222,106,8)" fg:x="1093" fg:w="7"/><text x="83.4311%" y="703.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (7 samples, 0.53%)</title><rect x="84.3227%" y="677" width="0.5327%" height="15" fill="rgb(211,220,0)" fg:x="1108" fg:w="7"/><text x="84.5727%" y="687.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.08%)</title><rect x="84.7793%" y="661" width="0.0761%" height="15" fill="rgb(229,52,16)" fg:x="1114" fg:w="1"/><text x="85.0293%" y="671.50"></text></g><g><title>deno`v8::internal::Isolate::RunPromiseHook(v8::PromiseHookType, v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="84.8554%" y="677" width="0.0761%" height="15" fill="rgb(212,155,18)" fg:x="1115" fg:w="1"/><text x="85.1054%" y="687.50"></text></g><g><title>deno`v8::internal::JSPromise::Fulfill(v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="84.9315%" y="677" width="0.0761%" height="15" fill="rgb(242,21,14)" fg:x="1116" fg:w="1"/><text x="85.1815%" y="687.50"></text></g><g><title>deno`v8__Promise__Resolver__Resolve (28 samples, 2.13%)</title><rect x="83.7139%" y="709" width="2.1309%" height="15" fill="rgb(222,19,48)" fg:x="1100" fg:w="28"/><text x="83.9639%" y="719.50">d..</text></g><g><title>deno`v8::Promise::Resolver::Resolve(v8::Local&lt;v8::Context&gt;, v8::Local (27 samples, 2.05%)</title><rect x="83.7900%" y="693" width="2.0548%" height="15" fill="rgb(232,45,27)" fg:x="1101" fg:w="27"/><text x="84.0400%" y="703.50">d..</text></g><g><title>deno`v8::internal::JSPromise::Resolve(v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (11 samples, 0.84%)</title><rect x="85.0076%" y="677" width="0.8371%" height="15" fill="rgb(249,103,42)" fg:x="1117" fg:w="11"/><text x="85.2576%" y="687.50"></text></g><g><title>deno`v8::internal::JSPromise::Fulfill(v8::internal::Handle&lt;v8::internal::JSPromise&gt;, v8::internal::Handle (3 samples, 0.23%)</title><rect x="85.6164%" y="661" width="0.2283%" height="15" fill="rgb(246,81,33)" fg:x="1125" fg:w="3"/><text x="85.8664%" y="671.50"></text></g><g><title>deno`v8::internal::JSPromise::TriggerPromiseReactions(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="85.7686%" y="645" width="0.0761%" height="15" fill="rgb(252,33,42)" fg:x="1127" fg:w="1"/><text x="86.0186%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.38%)</title><rect x="86.3014%" y="677" width="0.3805%" height="15" fill="rgb(209,212,41)" fg:x="1134" fg:w="5"/><text x="86.5514%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.99%)</title><rect x="85.8447%" y="709" width="0.9893%" height="15" fill="rgb(207,154,6)" fg:x="1128" fg:w="13"/><text x="86.0947%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.76%)</title><rect x="86.0731%" y="693" width="0.7610%" height="15" fill="rgb(223,64,47)" fg:x="1131" fg:w="10"/><text x="86.3231%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.15%)</title><rect x="86.6819%" y="677" width="0.1522%" height="15" fill="rgb(211,161,38)" fg:x="1139" fg:w="2"/><text x="86.9319%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.08%)</title><rect x="86.8341%" y="709" width="0.0761%" height="15" fill="rgb(219,138,40)" fg:x="1141" fg:w="1"/><text x="87.0841%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.68%)</title><rect x="86.9102%" y="709" width="0.6849%" height="15" fill="rgb(241,228,46)" fg:x="1142" fg:w="9"/><text x="87.1602%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.15%)</title><rect x="87.4429%" y="693" width="0.1522%" height="15" fill="rgb(223,209,38)" fg:x="1149" fg:w="2"/><text x="87.6929%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.23%)</title><rect x="87.5951%" y="709" width="0.2283%" height="15" fill="rgb(236,164,45)" fg:x="1151" fg:w="3"/><text x="87.8451%" y="719.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (191 samples, 14.54%)</title><rect x="73.3638%" y="725" width="14.5358%" height="15" fill="rgb(231,15,5)" fg:x="964" fg:w="191"/><text x="73.6138%" y="735.50">deno`&lt;extern &quot;C&quot; fn(A0..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="87.8234%" y="709" width="0.0761%" height="15" fill="rgb(252,35,15)" fg:x="1154" fg:w="1"/><text x="88.0734%" y="719.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.08%)</title><rect x="87.8995%" y="725" width="0.0761%" height="15" fill="rgb(248,181,18)" fg:x="1155" fg:w="1"/><text x="88.1495%" y="735.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (3 samples, 0.23%)</title><rect x="87.9756%" y="725" width="0.2283%" height="15" fill="rgb(233,39,42)" fg:x="1156" fg:w="3"/><text x="88.2256%" y="735.50"></text></g><g><title>deno`v8::External::Value (2 samples, 0.15%)</title><rect x="88.2040%" y="725" width="0.1522%" height="15" fill="rgb(238,110,33)" fg:x="1159" fg:w="2"/><text x="88.4540%" y="735.50"></text></g><g><title>deno`v8::Promise::Resolver::New(v8::Local (5 samples, 0.38%)</title><rect x="88.3562%" y="725" width="0.3805%" height="15" fill="rgb(233,195,10)" fg:x="1161" fg:w="5"/><text x="88.6062%" y="735.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (2 samples, 0.15%)</title><rect x="88.7367%" y="725" width="0.1522%" height="15" fill="rgb(254,105,3)" fg:x="1166" fg:w="2"/><text x="88.9867%" y="735.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (6 samples, 0.46%)</title><rect x="88.8889%" y="725" width="0.4566%" height="15" fill="rgb(221,225,9)" fg:x="1168" fg:w="6"/><text x="89.1389%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (2 samples, 0.15%)</title><rect x="89.3455%" y="725" width="0.1522%" height="15" fill="rgb(224,227,45)" fg:x="1174" fg:w="2"/><text x="89.5955%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (1 samples, 0.08%)</title><rect x="89.4977%" y="725" width="0.0761%" height="15" fill="rgb(229,198,43)" fg:x="1176" fg:w="1"/><text x="89.7477%" y="735.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetIsolate (1 samples, 0.08%)</title><rect x="89.5738%" y="725" width="0.0761%" height="15" fill="rgb(206,209,35)" fg:x="1177" fg:w="1"/><text x="89.8238%" y="735.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetReturnValue (1 samples, 0.08%)</title><rect x="89.6499%" y="725" width="0.0761%" height="15" fill="rgb(245,195,53)" fg:x="1178" fg:w="1"/><text x="89.8999%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.08%)</title><rect x="89.7260%" y="725" width="0.0761%" height="15" fill="rgb(240,92,26)" fg:x="1179" fg:w="1"/><text x="89.9760%" y="735.50"></text></g><g><title>0x11000db00 (227 samples, 17.28%)</title><rect x="72.7549%" y="757" width="17.2755%" height="15" fill="rgb(207,40,23)" fg:x="956" fg:w="227"/><text x="73.0049%" y="767.50">0x11000db00</text></g><g><title>deno`Builtins_CallApiCallback (226 samples, 17.20%)</title><rect x="72.8311%" y="741" width="17.1994%" height="15" fill="rgb(223,111,35)" fg:x="957" fg:w="226"/><text x="73.0811%" y="751.50">deno`Builtins_CallApiCallba..</text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.23%)</title><rect x="89.8021%" y="725" width="0.2283%" height="15" fill="rgb(229,147,28)" fg:x="1180" fg:w="3"/><text x="90.0521%" y="735.50"></text></g><g><title>0x11000db30 (2 samples, 0.15%)</title><rect x="90.0304%" y="757" width="0.1522%" height="15" fill="rgb(211,29,28)" fg:x="1183" fg:w="2"/><text x="90.2804%" y="767.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (1 samples, 0.08%)</title><rect x="90.1826%" y="741" width="0.0761%" height="15" fill="rgb(228,72,33)" fg:x="1185" fg:w="1"/><text x="90.4326%" y="751.50"></text></g><g><title>0x11000db38 (16 samples, 1.22%)</title><rect x="90.1826%" y="757" width="1.2177%" height="15" fill="rgb(205,214,31)" fg:x="1185" fg:w="16"/><text x="90.4326%" y="767.50"></text></g><g><title>deno`Builtins_PromisePrototypeThen (15 samples, 1.14%)</title><rect x="90.2588%" y="741" width="1.1416%" height="15" fill="rgb(224,111,15)" fg:x="1186" fg:w="15"/><text x="90.5088%" y="751.50"></text></g><g><title>0x11000dc30 (1 samples, 0.08%)</title><rect x="91.4003%" y="757" width="0.0761%" height="15" fill="rgb(253,21,26)" fg:x="1201" fg:w="1"/><text x="91.6503%" y="767.50"></text></g><g><title>0x11000dc40 (1 samples, 0.08%)</title><rect x="91.4764%" y="757" width="0.0761%" height="15" fill="rgb(245,139,43)" fg:x="1202" fg:w="1"/><text x="91.7264%" y="767.50"></text></g><g><title>0x11000dc54 (1 samples, 0.08%)</title><rect x="91.5525%" y="757" width="0.0761%" height="15" fill="rgb(252,170,7)" fg:x="1203" fg:w="1"/><text x="91.8025%" y="767.50"></text></g><g><title>0x11000dc5c (13 samples, 0.99%)</title><rect x="91.6286%" y="757" width="0.9893%" height="15" fill="rgb(231,118,14)" fg:x="1204" fg:w="13"/><text x="91.8786%" y="767.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (13 samples, 0.99%)</title><rect x="91.6286%" y="741" width="0.9893%" height="15" fill="rgb(238,83,0)" fg:x="1204" fg:w="13"/><text x="91.8786%" y="751.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (4 samples, 0.30%)</title><rect x="92.3135%" y="725" width="0.3044%" height="15" fill="rgb(221,39,39)" fg:x="1213" fg:w="4"/><text x="92.5635%" y="735.50"></text></g><g><title>0x11000dc78 (2 samples, 0.15%)</title><rect x="92.6180%" y="757" width="0.1522%" height="15" fill="rgb(222,119,46)" fg:x="1217" fg:w="2"/><text x="92.8680%" y="767.50"></text></g><g><title>0x11000dc80 (1 samples, 0.08%)</title><rect x="92.7702%" y="757" width="0.0761%" height="15" fill="rgb(222,165,49)" fg:x="1219" fg:w="1"/><text x="93.0202%" y="767.50"></text></g><g><title>0x11000dc8c (1 samples, 0.08%)</title><rect x="92.8463%" y="757" width="0.0761%" height="15" fill="rgb(219,113,52)" fg:x="1220" fg:w="1"/><text x="93.0963%" y="767.50"></text></g><g><title>0x11000dca4 (1 samples, 0.08%)</title><rect x="92.9224%" y="757" width="0.0761%" height="15" fill="rgb(214,7,15)" fg:x="1221" fg:w="1"/><text x="93.1724%" y="767.50"></text></g><g><title>0x11000dcb0 (1 samples, 0.08%)</title><rect x="92.9985%" y="757" width="0.0761%" height="15" fill="rgb(235,32,4)" fg:x="1222" fg:w="1"/><text x="93.2485%" y="767.50"></text></g><g><title>0x11000dce8 (1 samples, 0.08%)</title><rect x="93.0746%" y="757" width="0.0761%" height="15" fill="rgb(238,90,54)" fg:x="1223" fg:w="1"/><text x="93.3246%" y="767.50"></text></g><g><title>libsystem_c.dylib`__dtoa (1 samples, 0.08%)</title><rect x="93.1507%" y="565" width="0.0761%" height="15" fill="rgb(213,208,19)" fg:x="1224" fg:w="1"/><text x="93.4007%" y="575.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (2 samples, 0.15%)</title><rect x="93.1507%" y="645" width="0.1522%" height="15" fill="rgb(233,156,4)" fg:x="1224" fg:w="2"/><text x="93.4007%" y="655.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (2 samples, 0.15%)</title><rect x="93.1507%" y="629" width="0.1522%" height="15" fill="rgb(207,194,5)" fg:x="1224" fg:w="2"/><text x="93.4007%" y="639.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (2 samples, 0.15%)</title><rect x="93.1507%" y="613" width="0.1522%" height="15" fill="rgb(206,111,30)" fg:x="1224" fg:w="2"/><text x="93.4007%" y="623.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (2 samples, 0.15%)</title><rect x="93.1507%" y="597" width="0.1522%" height="15" fill="rgb(243,70,54)" fg:x="1224" fg:w="2"/><text x="93.4007%" y="607.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (2 samples, 0.15%)</title><rect x="93.1507%" y="581" width="0.1522%" height="15" fill="rgb(242,28,8)" fg:x="1224" fg:w="2"/><text x="93.4007%" y="591.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.08%)</title><rect x="93.2268%" y="565" width="0.0761%" height="15" fill="rgb(219,106,18)" fg:x="1225" fg:w="1"/><text x="93.4768%" y="575.50"></text></g><g><title>libsystem_c.dylib`__sfvwrite (1 samples, 0.08%)</title><rect x="93.2268%" y="549" width="0.0761%" height="15" fill="rgb(244,222,10)" fg:x="1225" fg:w="1"/><text x="93.4768%" y="559.50"></text></g><g><title>deno`v8::internal::Scavenger::Finalize (1 samples, 0.08%)</title><rect x="93.3029%" y="613" width="0.0761%" height="15" fill="rgb(236,179,52)" fg:x="1226" fg:w="1"/><text x="93.5529%" y="623.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (3 samples, 0.23%)</title><rect x="93.3790%" y="581" width="0.2283%" height="15" fill="rgb(213,23,39)" fg:x="1227" fg:w="3"/><text x="93.6290%" y="591.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (4 samples, 0.30%)</title><rect x="93.3790%" y="597" width="0.3044%" height="15" fill="rgb(238,48,10)" fg:x="1227" fg:w="4"/><text x="93.6290%" y="607.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (1 samples, 0.08%)</title><rect x="93.6073%" y="581" width="0.0761%" height="15" fill="rgb(251,196,23)" fg:x="1230" fg:w="1"/><text x="93.8573%" y="591.50"></text></g><g><title>0x11000e000 (8 samples, 0.61%)</title><rect x="93.1507%" y="757" width="0.6088%" height="15" fill="rgb(250,152,24)" fg:x="1224" fg:w="8"/><text x="93.4007%" y="767.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (8 samples, 0.61%)</title><rect x="93.1507%" y="741" width="0.6088%" height="15" fill="rgb(209,150,17)" fg:x="1224" fg:w="8"/><text x="93.4007%" y="751.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (8 samples, 0.61%)</title><rect x="93.1507%" y="725" width="0.6088%" height="15" fill="rgb(234,202,34)" fg:x="1224" fg:w="8"/><text x="93.4007%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (8 samples, 0.61%)</title><rect x="93.1507%" y="709" width="0.6088%" height="15" fill="rgb(253,148,53)" fg:x="1224" fg:w="8"/><text x="93.4007%" y="719.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (8 samples, 0.61%)</title><rect x="93.1507%" y="693" width="0.6088%" height="15" fill="rgb(218,129,16)" fg:x="1224" fg:w="8"/><text x="93.4007%" y="703.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (8 samples, 0.61%)</title><rect x="93.1507%" y="677" width="0.6088%" height="15" fill="rgb(216,85,19)" fg:x="1224" fg:w="8"/><text x="93.4007%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (8 samples, 0.61%)</title><rect x="93.1507%" y="661" width="0.6088%" height="15" fill="rgb(235,228,7)" fg:x="1224" fg:w="8"/><text x="93.4007%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (6 samples, 0.46%)</title><rect x="93.3029%" y="645" width="0.4566%" height="15" fill="rgb(245,175,0)" fg:x="1226" fg:w="6"/><text x="93.5529%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (6 samples, 0.46%)</title><rect x="93.3029%" y="629" width="0.4566%" height="15" fill="rgb(208,168,36)" fg:x="1226" fg:w="6"/><text x="93.5529%" y="639.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (5 samples, 0.38%)</title><rect x="93.3790%" y="613" width="0.3805%" height="15" fill="rgb(246,171,24)" fg:x="1227" fg:w="5"/><text x="93.6290%" y="623.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.08%)</title><rect x="93.6834%" y="597" width="0.0761%" height="15" fill="rgb(215,142,24)" fg:x="1231" fg:w="1"/><text x="93.9334%" y="607.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (1 samples, 0.08%)</title><rect x="93.6834%" y="581" width="0.0761%" height="15" fill="rgb(250,187,7)" fg:x="1231" fg:w="1"/><text x="93.9334%" y="591.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (1 samples, 0.08%)</title><rect x="93.6834%" y="565" width="0.0761%" height="15" fill="rgb(228,66,33)" fg:x="1231" fg:w="1"/><text x="93.9334%" y="575.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (1 samples, 0.08%)</title><rect x="93.6834%" y="549" width="0.0761%" height="15" fill="rgb(234,215,21)" fg:x="1231" fg:w="1"/><text x="93.9334%" y="559.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (1 samples, 0.08%)</title><rect x="93.6834%" y="533" width="0.0761%" height="15" fill="rgb(222,191,20)" fg:x="1231" fg:w="1"/><text x="93.9334%" y="543.50"></text></g><g><title>deno`Builtins_CallApiCallback (6 samples, 0.46%)</title><rect x="93.7595%" y="757" width="0.4566%" height="15" fill="rgb(245,79,54)" fg:x="1232" fg:w="6"/><text x="94.0095%" y="767.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.08%)</title><rect x="94.2161%" y="757" width="0.0761%" height="15" fill="rgb(240,10,37)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="767.50"></text></g><g><title>deno`Builtins_SuspendGeneratorHandler (1 samples, 0.08%)</title><rect x="94.2161%" y="741" width="0.0761%" height="15" fill="rgb(214,192,32)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="751.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.08%)</title><rect x="94.2161%" y="725" width="0.0761%" height="15" fill="rgb(209,36,54)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="735.50"></text></g><g><title>deno`v8::internal::Runtime_BytecodeBudgetInterrupt_Ignition (1 samples, 0.08%)</title><rect x="94.2161%" y="709" width="0.0761%" height="15" fill="rgb(220,10,11)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="719.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::BytecodeBudgetInterrupt(v8::internal::Isolate*, v8::internal::Arguments&lt; (1 samples, 0.08%)</title><rect x="94.2161%" y="693" width="0.0761%" height="15" fill="rgb(221,106,17)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="703.50"></text></g><g><title>deno`v8::internal::TieringManager::OnInterruptTick(v8::internal::Handle (1 samples, 0.08%)</title><rect x="94.2161%" y="677" width="0.0761%" height="15" fill="rgb(251,142,44)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="687.50"></text></g><g><title>deno`v8::internal::baseline::BaselineBatchCompiler::CompileBatch(v8::internal::Handle (1 samples, 0.08%)</title><rect x="94.2161%" y="661" width="0.0761%" height="15" fill="rgb(238,13,15)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="671.50"></text></g><g><title>deno`v8::internal::Compiler::CompileBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.08%)</title><rect x="94.2161%" y="645" width="0.0761%" height="15" fill="rgb(208,107,27)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="655.50"></text></g><g><title>deno`v8::internal::Compiler::CompileSharedWithBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.08%)</title><rect x="94.2161%" y="629" width="0.0761%" height="15" fill="rgb(205,136,37)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="639.50"></text></g><g><title>deno`v8::internal::GenerateBaselineCode(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.08%)</title><rect x="94.2161%" y="613" width="0.0761%" height="15" fill="rgb(250,205,27)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="623.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::GenerateCode (1 samples, 0.08%)</title><rect x="94.2161%" y="597" width="0.0761%" height="15" fill="rgb(210,80,43)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="607.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::PrologueFillFrame (1 samples, 0.08%)</title><rect x="94.2161%" y="581" width="0.0761%" height="15" fill="rgb(247,160,36)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="591.50"></text></g><g><title>deno`v8::internal::TurboAssembler::PushHelper (1 samples, 0.08%)</title><rect x="94.2161%" y="565" width="0.0761%" height="15" fill="rgb(234,13,49)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="575.50"></text></g><g><title>deno`v8::internal::CalcLSPairDataSize (1 samples, 0.08%)</title><rect x="94.2161%" y="549" width="0.0761%" height="15" fill="rgb(234,122,0)" fg:x="1238" fg:w="1"/><text x="94.4661%" y="559.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (1 samples, 0.08%)</title><rect x="94.2922%" y="757" width="0.0761%" height="15" fill="rgb(207,146,38)" fg:x="1239" fg:w="1"/><text x="94.5422%" y="767.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_PolymorphicName (4 samples, 0.30%)</title><rect x="94.3683%" y="757" width="0.3044%" height="15" fill="rgb(207,177,25)" fg:x="1240" fg:w="4"/><text x="94.6183%" y="767.50"></text></g><g><title>deno`Builtins_LoadIC (17 samples, 1.29%)</title><rect x="94.6728%" y="757" width="1.2938%" height="15" fill="rgb(211,178,42)" fg:x="1244" fg:w="17"/><text x="94.9228%" y="767.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (489 samples, 37.21%)</title><rect x="58.8280%" y="773" width="37.2146%" height="15" fill="rgb(230,69,54)" fg:x="773" fg:w="489"/><text x="59.0780%" y="783.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_PromisePrototypeThen (1 samples, 0.08%)</title><rect x="95.9665%" y="757" width="0.0761%" height="15" fill="rgb(214,135,41)" fg:x="1261" fg:w="1"/><text x="96.2165%" y="767.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (1 samples, 0.08%)</title><rect x="96.3470%" y="757" width="0.0761%" height="15" fill="rgb(237,67,25)" fg:x="1266" fg:w="1"/><text x="96.5970%" y="767.50"></text></g><g><title>deno`Builtins_ResolvePromise (20 samples, 1.52%)</title><rect x="96.0426%" y="773" width="1.5221%" height="15" fill="rgb(222,189,50)" fg:x="1262" fg:w="20"/><text x="96.2926%" y="783.50"></text></g><g><title>deno`Builtins_FulfillPromise (15 samples, 1.14%)</title><rect x="96.4231%" y="757" width="1.1416%" height="15" fill="rgb(245,148,34)" fg:x="1267" fg:w="15"/><text x="96.6731%" y="767.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (589 samples, 44.82%)</title><rect x="53.5769%" y="997" width="44.8250%" height="15" fill="rgb(222,29,6)" fg:x="704" fg:w="589"/><text x="53.8269%" y="1007.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future:..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (589 samples, 44.82%)</title><rect x="53.5769%" y="981" width="44.8250%" height="15" fill="rgb(221,189,43)" fg:x="704" fg:w="589"/><text x="53.8269%" y="991.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future:..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (589 samples, 44.82%)</title><rect x="53.5769%" y="965" width="44.8250%" height="15" fill="rgb(207,36,27)" fg:x="704" fg:w="589"/><text x="53.8269%" y="975.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future:..</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (588 samples, 44.75%)</title><rect x="53.6530%" y="949" width="44.7489%" height="15" fill="rgb(217,90,24)" fg:x="705" fg:w="588"/><text x="53.9030%" y="959.50">deno`deno_core::runtime::JsRuntime::mod_evaluate</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (588 samples, 44.75%)</title><rect x="53.6530%" y="933" width="44.7489%" height="15" fill="rgb(224,66,35)" fg:x="705" fg:w="588"/><text x="53.9030%" y="943.50">deno`v8::Module::Evaluate(v8::Local</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (588 samples, 44.75%)</title><rect x="53.6530%" y="917" width="44.7489%" height="15" fill="rgb(221,13,50)" fg:x="705" fg:w="588"/><text x="53.9030%" y="927.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (588 samples, 44.75%)</title><rect x="53.6530%" y="901" width="44.7489%" height="15" fill="rgb(236,68,49)" fg:x="705" fg:w="588"/><text x="53.9030%" y="911.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (588 samples, 44.75%)</title><rect x="53.6530%" y="885" width="44.7489%" height="15" fill="rgb(229,146,28)" fg:x="705" fg:w="588"/><text x="53.9030%" y="895.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (588 samples, 44.75%)</title><rect x="53.6530%" y="869" width="44.7489%" height="15" fill="rgb(225,31,38)" fg:x="705" fg:w="588"/><text x="53.9030%" y="879.50">deno`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (588 samples, 44.75%)</title><rect x="53.6530%" y="853" width="44.7489%" height="15" fill="rgb(250,208,3)" fg:x="705" fg:w="588"/><text x="53.9030%" y="863.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal..</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (588 samples, 44.75%)</title><rect x="53.6530%" y="837" width="44.7489%" height="15" fill="rgb(246,54,23)" fg:x="705" fg:w="588"/><text x="53.9030%" y="847.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, ..</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (588 samples, 44.75%)</title><rect x="53.6530%" y="821" width="44.7489%" height="15" fill="rgb(243,76,11)" fg:x="705" fg:w="588"/><text x="53.9030%" y="831.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (588 samples, 44.75%)</title><rect x="53.6530%" y="805" width="44.7489%" height="15" fill="rgb(245,21,50)" fg:x="705" fg:w="588"/><text x="53.9030%" y="815.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (540 samples, 41.10%)</title><rect x="57.3059%" y="789" width="41.0959%" height="15" fill="rgb(228,9,43)" fg:x="753" fg:w="540"/><text x="57.5559%" y="799.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (11 samples, 0.84%)</title><rect x="97.5647%" y="773" width="0.8371%" height="15" fill="rgb(208,100,47)" fg:x="1282" fg:w="11"/><text x="97.8147%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="853" width="0.0761%" height="15" fill="rgb(232,26,8)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.08%)</title><rect x="98.4018%" y="837" width="0.0761%" height="15" fill="rgb(216,166,38)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="821" width="0.0761%" height="15" fill="rgb(251,202,51)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="805" width="0.0761%" height="15" fill="rgb(254,216,34)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="789" width="0.0761%" height="15" fill="rgb(251,32,27)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.08%)</title><rect x="98.4018%" y="773" width="0.0761%" height="15" fill="rgb(208,127,28)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="757" width="0.0761%" height="15" fill="rgb(224,137,22)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="741" width="0.0761%" height="15" fill="rgb(254,70,32)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="751.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="725" width="0.0761%" height="15" fill="rgb(229,75,37)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="735.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.08%)</title><rect x="98.4018%" y="709" width="0.0761%" height="15" fill="rgb(252,64,23)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="719.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="693" width="0.0761%" height="15" fill="rgb(232,162,48)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="703.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="677" width="0.0761%" height="15" fill="rgb(246,160,12)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="687.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="661" width="0.0761%" height="15" fill="rgb(247,166,0)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="671.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.08%)</title><rect x="98.4018%" y="645" width="0.0761%" height="15" fill="rgb(249,219,21)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="655.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="629" width="0.0761%" height="15" fill="rgb(205,209,3)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="639.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="613" width="0.0761%" height="15" fill="rgb(243,44,1)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="623.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="597" width="0.0761%" height="15" fill="rgb(206,159,16)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="607.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="581" width="0.0761%" height="15" fill="rgb(244,77,30)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="591.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="565" width="0.0761%" height="15" fill="rgb(218,69,12)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="575.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="549" width="0.0761%" height="15" fill="rgb(212,87,7)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="559.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="533" width="0.0761%" height="15" fill="rgb(245,114,25)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="543.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="517" width="0.0761%" height="15" fill="rgb(210,61,42)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="527.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="501" width="0.0761%" height="15" fill="rgb(211,52,33)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="511.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="485" width="0.0761%" height="15" fill="rgb(234,58,33)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="495.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="469" width="0.0761%" height="15" fill="rgb(220,115,36)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="479.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="453" width="0.0761%" height="15" fill="rgb(243,153,54)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="463.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="437" width="0.0761%" height="15" fill="rgb(251,47,18)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="447.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="421" width="0.0761%" height="15" fill="rgb(242,102,42)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="431.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="405" width="0.0761%" height="15" fill="rgb(234,31,38)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="415.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="389" width="0.0761%" height="15" fill="rgb(221,117,51)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="399.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="373" width="0.0761%" height="15" fill="rgb(212,20,18)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="383.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="357" width="0.0761%" height="15" fill="rgb(245,133,36)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="367.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="341" width="0.0761%" height="15" fill="rgb(212,6,19)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="351.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="325" width="0.0761%" height="15" fill="rgb(218,1,36)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="335.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="309" width="0.0761%" height="15" fill="rgb(246,84,54)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="319.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="293" width="0.0761%" height="15" fill="rgb(242,110,6)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="303.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="277" width="0.0761%" height="15" fill="rgb(214,47,5)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="287.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="261" width="0.0761%" height="15" fill="rgb(218,159,25)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="271.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="245" width="0.0761%" height="15" fill="rgb(215,211,28)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="255.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="229" width="0.0761%" height="15" fill="rgb(238,59,32)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="239.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="213" width="0.0761%" height="15" fill="rgb(226,82,3)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="223.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="197" width="0.0761%" height="15" fill="rgb(240,164,32)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="207.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="181" width="0.0761%" height="15" fill="rgb(232,46,7)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="191.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="165" width="0.0761%" height="15" fill="rgb(229,129,53)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="175.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="149" width="0.0761%" height="15" fill="rgb(234,188,29)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="159.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="133" width="0.0761%" height="15" fill="rgb(246,141,4)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="143.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="117" width="0.0761%" height="15" fill="rgb(229,23,39)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="127.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="101" width="0.0761%" height="15" fill="rgb(206,12,3)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="111.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="85" width="0.0761%" height="15" fill="rgb(252,226,20)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="95.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="69" width="0.0761%" height="15" fill="rgb(216,123,35)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="79.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="98.4018%" y="53" width="0.0761%" height="15" fill="rgb(212,68,40)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="63.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="98.4018%" y="37" width="0.0761%" height="15" fill="rgb(254,125,32)" fg:x="1293" fg:w="1"/><text x="98.6518%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.15%)</title><rect x="98.4018%" y="965" width="0.1522%" height="15" fill="rgb(253,97,22)" fg:x="1293" fg:w="2"/><text x="98.6518%" y="975.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.15%)</title><rect x="98.4018%" y="949" width="0.1522%" height="15" fill="rgb(241,101,14)" fg:x="1293" fg:w="2"/><text x="98.6518%" y="959.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.15%)</title><rect x="98.4018%" y="933" width="0.1522%" height="15" fill="rgb(238,103,29)" fg:x="1293" fg:w="2"/><text x="98.6518%" y="943.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.15%)</title><rect x="98.4018%" y="917" width="0.1522%" height="15" fill="rgb(233,195,47)" fg:x="1293" fg:w="2"/><text x="98.6518%" y="927.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.15%)</title><rect x="98.4018%" y="901" width="0.1522%" height="15" fill="rgb(246,218,30)" fg:x="1293" fg:w="2"/><text x="98.6518%" y="911.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.15%)</title><rect x="98.4018%" y="885" width="0.1522%" height="15" fill="rgb(219,145,47)" fg:x="1293" fg:w="2"/><text x="98.6518%" y="895.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.15%)</title><rect x="98.4018%" y="869" width="0.1522%" height="15" fill="rgb(243,12,26)" fg:x="1293" fg:w="2"/><text x="98.6518%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.08%)</title><rect x="98.4779%" y="853" width="0.0761%" height="15" fill="rgb(214,87,16)" fg:x="1294" fg:w="1"/><text x="98.7279%" y="863.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.08%)</title><rect x="98.4779%" y="837" width="0.0761%" height="15" fill="rgb(208,99,42)" fg:x="1294" fg:w="1"/><text x="98.7279%" y="847.50"></text></g><g><title>deno`v8::internal::HashTable&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Rehash (1 samples, 0.08%)</title><rect x="98.4779%" y="821" width="0.0761%" height="15" fill="rgb(253,99,2)" fg:x="1294" fg:w="1"/><text x="98.7279%" y="831.50"></text></g><g><title>deno`v8::internal::Checksum(v8::base::Vector (6 samples, 0.46%)</title><rect x="98.5540%" y="933" width="0.4566%" height="15" fill="rgb(220,168,23)" fg:x="1295" fg:w="6"/><text x="98.8040%" y="943.50"></text></g><g><title>deno`v8::internal::Heap::SetUp (1 samples, 0.08%)</title><rect x="99.0107%" y="885" width="0.0761%" height="15" fill="rgb(242,38,24)" fg:x="1301" fg:w="1"/><text x="99.2607%" y="895.50"></text></g><g><title>deno`v8::internal::CodeRange::EnsureProcessWideCodeRange (1 samples, 0.08%)</title><rect x="99.0107%" y="869" width="0.0761%" height="15" fill="rgb(225,182,9)" fg:x="1301" fg:w="1"/><text x="99.2607%" y="879.50"></text></g><g><title>deno`v8::internal::CodeRange::InitReservation (1 samples, 0.08%)</title><rect x="99.0107%" y="853" width="0.0761%" height="15" fill="rgb(243,178,37)" fg:x="1301" fg:w="1"/><text x="99.2607%" y="863.50"></text></g><g><title>deno`v8::internal::VirtualMemoryCage::InitReservation (1 samples, 0.08%)</title><rect x="99.0107%" y="837" width="0.0761%" height="15" fill="rgb(232,139,19)" fg:x="1301" fg:w="1"/><text x="99.2607%" y="847.50"></text></g><g><title>deno`v8::internal::VirtualMemory::VirtualMemory (1 samples, 0.08%)</title><rect x="99.0107%" y="821" width="0.0761%" height="15" fill="rgb(225,201,24)" fg:x="1301" fg:w="1"/><text x="99.2607%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.08%)</title><rect x="99.0107%" y="805" width="0.0761%" height="15" fill="rgb(221,47,46)" fg:x="1301" fg:w="1"/><text x="99.2607%" y="815.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (10 samples, 0.76%)</title><rect x="98.4018%" y="981" width="0.7610%" height="15" fill="rgb(249,23,13)" fg:x="1293" fg:w="10"/><text x="98.6518%" y="991.50"></text></g><g><title>deno`v8::Isolate::New (8 samples, 0.61%)</title><rect x="98.5540%" y="965" width="0.6088%" height="15" fill="rgb(219,9,5)" fg:x="1295" fg:w="8"/><text x="98.8040%" y="975.50"></text></g><g><title>deno`v8::Isolate::Initialize (8 samples, 0.61%)</title><rect x="98.5540%" y="949" width="0.6088%" height="15" fill="rgb(254,171,16)" fg:x="1295" fg:w="8"/><text x="98.8040%" y="959.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.15%)</title><rect x="99.0107%" y="933" width="0.1522%" height="15" fill="rgb(230,171,20)" fg:x="1301" fg:w="2"/><text x="99.2607%" y="943.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.15%)</title><rect x="99.0107%" y="917" width="0.1522%" height="15" fill="rgb(210,71,41)" fg:x="1301" fg:w="2"/><text x="99.2607%" y="927.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.15%)</title><rect x="99.0107%" y="901" width="0.1522%" height="15" fill="rgb(206,173,20)" fg:x="1301" fg:w="2"/><text x="99.2607%" y="911.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.08%)</title><rect x="99.0868%" y="885" width="0.0761%" height="15" fill="rgb(233,88,34)" fg:x="1302" fg:w="1"/><text x="99.3368%" y="895.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.08%)</title><rect x="99.0868%" y="869" width="0.0761%" height="15" fill="rgb(223,209,46)" fg:x="1302" fg:w="1"/><text x="99.3368%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.08%)</title><rect x="99.0868%" y="853" width="0.0761%" height="15" fill="rgb(250,43,18)" fg:x="1302" fg:w="1"/><text x="99.3368%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.08%)</title><rect x="99.0868%" y="837" width="0.0761%" height="15" fill="rgb(208,13,10)" fg:x="1302" fg:w="1"/><text x="99.3368%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="99.0868%" y="821" width="0.0761%" height="15" fill="rgb(212,200,36)" fg:x="1302" fg:w="1"/><text x="99.3368%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="99.0868%" y="805" width="0.0761%" height="15" fill="rgb(225,90,30)" fg:x="1302" fg:w="1"/><text x="99.3368%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.08%)</title><rect x="99.0868%" y="789" width="0.0761%" height="15" fill="rgb(236,182,39)" fg:x="1302" fg:w="1"/><text x="99.3368%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.08%)</title><rect x="99.0868%" y="773" width="0.0761%" height="15" fill="rgb(212,144,35)" fg:x="1302" fg:w="1"/><text x="99.3368%" y="783.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.08%)</title><rect x="99.0868%" y="757" width="0.0761%" height="15" fill="rgb(228,63,44)" fg:x="1302" fg:w="1"/><text x="99.3368%" y="767.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.08%)</title><rect x="99.1629%" y="981" width="0.0761%" height="15" fill="rgb(228,109,6)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="991.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.08%)</title><rect x="99.1629%" y="965" width="0.0761%" height="15" fill="rgb(238,117,24)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="975.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.08%)</title><rect x="99.1629%" y="949" width="0.0761%" height="15" fill="rgb(242,26,26)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="959.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.08%)</title><rect x="99.1629%" y="933" width="0.0761%" height="15" fill="rgb(221,92,48)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="943.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.08%)</title><rect x="99.1629%" y="917" width="0.0761%" height="15" fill="rgb(209,209,32)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="927.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.08%)</title><rect x="99.1629%" y="901" width="0.0761%" height="15" fill="rgb(221,70,22)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="911.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.08%)</title><rect x="99.1629%" y="885" width="0.0761%" height="15" fill="rgb(248,145,5)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="895.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.08%)</title><rect x="99.1629%" y="869" width="0.0761%" height="15" fill="rgb(226,116,26)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.08%)</title><rect x="99.1629%" y="853" width="0.0761%" height="15" fill="rgb(244,5,17)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.08%)</title><rect x="99.1629%" y="837" width="0.0761%" height="15" fill="rgb(252,159,33)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="847.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.08%)</title><rect x="99.1629%" y="821" width="0.0761%" height="15" fill="rgb(206,71,0)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="831.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.08%)</title><rect x="99.1629%" y="805" width="0.0761%" height="15" fill="rgb(233,118,54)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="815.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.08%)</title><rect x="99.1629%" y="789" width="0.0761%" height="15" fill="rgb(234,83,48)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="799.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.08%)</title><rect x="99.1629%" y="773" width="0.0761%" height="15" fill="rgb(228,3,54)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="783.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.08%)</title><rect x="99.1629%" y="757" width="0.0761%" height="15" fill="rgb(226,155,13)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="767.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.08%)</title><rect x="99.1629%" y="741" width="0.0761%" height="15" fill="rgb(241,28,37)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="751.50"></text></g><g><title>deno`v8::internal::parsing::ParseFunction(v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.08%)</title><rect x="99.1629%" y="725" width="0.0761%" height="15" fill="rgb(233,93,10)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="735.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::Isolate*, v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.08%)</title><rect x="99.1629%" y="709" width="0.0761%" height="15" fill="rgb(225,113,19)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="719.50"></text></g><g><title>deno`v8::internal::Parser::DoParseFunction (1 samples, 0.08%)</title><rect x="99.1629%" y="693" width="0.0761%" height="15" fill="rgb(241,2,18)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="703.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunctionLiteral(v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::FunctionNameValidity, v8::internal::FunctionKind, int, v8::internal::FunctionSyntaxKind, v8::internal::LanguageMode, v8::internal::ZoneList (1 samples, 0.08%)</title><rect x="99.1629%" y="677" width="0.0761%" height="15" fill="rgb(228,207,21)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="687.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::ScopedList&lt;v8::internal::Statement*, void*&gt;*, v8::internal::AstRawString const*, int, v8::internal::FunctionKind, v8::internal::FunctionSyntaxKind, v8::internal::DeclarationScope*, int*, int*, bool*, int*, int*, v8::internal::ZoneList (1 samples, 0.08%)</title><rect x="99.1629%" y="661" width="0.0761%" height="15" fill="rgb(213,211,35)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="671.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseFunctionBody(v8::internal::ScopedList&lt;v8::internal::Statement*, void*&gt;*, v8::internal::AstRawString const*, int, v8::internal::ParserFormalParameters const&amp;, v8::internal::FunctionKind, v8::internal::FunctionSyntaxKind, v8::internal::ParserBase (1 samples, 0.08%)</title><rect x="99.1629%" y="645" width="0.0761%" height="15" fill="rgb(209,83,10)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="655.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseIfStatement(v8::internal::ZoneList (1 samples, 0.08%)</title><rect x="99.1629%" y="629" width="0.0761%" height="15" fill="rgb(209,164,1)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="639.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseExpressionCoverGrammar (1 samples, 0.08%)</title><rect x="99.1629%" y="613" width="0.0761%" height="15" fill="rgb(213,184,43)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="623.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseAssignmentExpressionCoverGrammar (1 samples, 0.08%)</title><rect x="99.1629%" y="597" width="0.0761%" height="15" fill="rgb(231,61,34)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="607.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseBinaryContinuation (1 samples, 0.08%)</title><rect x="99.1629%" y="581" width="0.0761%" height="15" fill="rgb(235,75,3)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="591.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::DoParseMemberExpressionContinuation (1 samples, 0.08%)</title><rect x="99.1629%" y="565" width="0.0761%" height="15" fill="rgb(220,106,47)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="575.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseExpressionCoverGrammar (1 samples, 0.08%)</title><rect x="99.1629%" y="549" width="0.0761%" height="15" fill="rgb(210,196,33)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="559.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseAssignmentExpressionCoverGrammar (1 samples, 0.08%)</title><rect x="99.1629%" y="533" width="0.0761%" height="15" fill="rgb(229,154,42)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="543.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseLogicalExpression (1 samples, 0.08%)</title><rect x="99.1629%" y="517" width="0.0761%" height="15" fill="rgb(228,114,26)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="527.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParsePrimaryExpression (1 samples, 0.08%)</title><rect x="99.1629%" y="501" width="0.0761%" height="15" fill="rgb(208,144,1)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="511.50"></text></g><g><title>deno`v8::internal::FuncNameInferrer::PushVariableName (1 samples, 0.08%)</title><rect x="99.1629%" y="485" width="0.0761%" height="15" fill="rgb(239,112,37)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="495.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.08%)</title><rect x="99.1629%" y="469" width="0.0761%" height="15" fill="rgb(210,96,50)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="99.1629%" y="453" width="0.0761%" height="15" fill="rgb(222,178,2)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="99.1629%" y="437" width="0.0761%" height="15" fill="rgb(226,74,18)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.08%)</title><rect x="99.1629%" y="421" width="0.0761%" height="15" fill="rgb(225,67,54)" fg:x="1303" fg:w="1"/><text x="99.4129%" y="431.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (601 samples, 45.74%)</title><rect x="53.5769%" y="1045" width="45.7382%" height="15" fill="rgb(251,92,32)" fg:x="704" fg:w="601"/><text x="53.8269%" y="1055.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::F..</text></g><g><title>deno`deno::run_command::_{{closure}} (601 samples, 45.74%)</title><rect x="53.5769%" y="1029" width="45.7382%" height="15" fill="rgb(228,149,22)" fg:x="704" fg:w="601"/><text x="53.8269%" y="1039.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (601 samples, 45.74%)</title><rect x="53.5769%" y="1013" width="45.7382%" height="15" fill="rgb(243,54,13)" fg:x="704" fg:w="601"/><text x="53.8269%" y="1023.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::F..</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (12 samples, 0.91%)</title><rect x="98.4018%" y="997" width="0.9132%" height="15" fill="rgb(243,180,28)" fg:x="1293" fg:w="12"/><text x="98.6518%" y="1007.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.08%)</title><rect x="99.2390%" y="981" width="0.0761%" height="15" fill="rgb(208,167,24)" fg:x="1304" fg:w="1"/><text x="99.4890%" y="991.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.08%)</title><rect x="99.2390%" y="965" width="0.0761%" height="15" fill="rgb(245,73,45)" fg:x="1304" fg:w="1"/><text x="99.4890%" y="975.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.08%)</title><rect x="99.2390%" y="949" width="0.0761%" height="15" fill="rgb(237,203,48)" fg:x="1304" fg:w="1"/><text x="99.4890%" y="959.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.08%)</title><rect x="99.2390%" y="933" width="0.0761%" height="15" fill="rgb(211,197,16)" fg:x="1304" fg:w="1"/><text x="99.4890%" y="943.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.08%)</title><rect x="99.2390%" y="917" width="0.0761%" height="15" fill="rgb(243,99,51)" fg:x="1304" fg:w="1"/><text x="99.4890%" y="927.50"></text></g><g><title>dyld`start (602 samples, 45.81%)</title><rect x="53.5769%" y="1157" width="45.8143%" height="15" fill="rgb(215,123,29)" fg:x="704" fg:w="602"/><text x="53.8269%" y="1167.50">dyld`start</text></g><g><title>deno`main (602 samples, 45.81%)</title><rect x="53.5769%" y="1141" width="45.8143%" height="15" fill="rgb(239,186,37)" fg:x="704" fg:w="602"/><text x="53.8269%" y="1151.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (602 samples, 45.81%)</title><rect x="53.5769%" y="1125" width="45.8143%" height="15" fill="rgb(252,136,39)" fg:x="704" fg:w="602"/><text x="53.8269%" y="1135.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (602 samples, 45.81%)</title><rect x="53.5769%" y="1109" width="45.8143%" height="15" fill="rgb(223,213,32)" fg:x="704" fg:w="602"/><text x="53.8269%" y="1119.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (602 samples, 45.81%)</title><rect x="53.5769%" y="1093" width="45.8143%" height="15" fill="rgb(233,115,5)" fg:x="704" fg:w="602"/><text x="53.8269%" y="1103.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (602 samples, 45.81%)</title><rect x="53.5769%" y="1077" width="45.8143%" height="15" fill="rgb(207,226,44)" fg:x="704" fg:w="602"/><text x="53.8269%" y="1087.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::F..</text></g><g><title>deno`deno::main::_{{closure}} (602 samples, 45.81%)</title><rect x="53.5769%" y="1061" width="45.8143%" height="15" fill="rgb(208,126,0)" fg:x="704" fg:w="602"/><text x="53.8269%" y="1071.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`deno::standalone::extract_standalone::_{{closure}} (1 samples, 0.08%)</title><rect x="99.3151%" y="1045" width="0.0761%" height="15" fill="rgb(244,66,21)" fg:x="1305" fg:w="1"/><text x="99.5651%" y="1055.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.08%)</title><rect x="99.3151%" y="1029" width="0.0761%" height="15" fill="rgb(222,97,12)" fg:x="1305" fg:w="1"/><text x="99.5651%" y="1039.50"></text></g><g><title>deno`tokio::runtime::blocking::pool::Spawner::spawn (1 samples, 0.08%)</title><rect x="99.3151%" y="1013" width="0.0761%" height="15" fill="rgb(219,213,19)" fg:x="1305" fg:w="1"/><text x="99.5651%" y="1023.50"></text></g><g><title>deno`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.3151%" y="997" width="0.0761%" height="15" fill="rgb(252,169,30)" fg:x="1305" fg:w="1"/><text x="99.5651%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="99.3151%" y="981" width="0.0761%" height="15" fill="rgb(206,32,51)" fg:x="1305" fg:w="1"/><text x="99.5651%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="99.3151%" y="965" width="0.0761%" height="15" fill="rgb(250,172,42)" fg:x="1305" fg:w="1"/><text x="99.5651%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.08%)</title><rect x="99.3151%" y="949" width="0.0761%" height="15" fill="rgb(209,34,43)" fg:x="1305" fg:w="1"/><text x="99.5651%" y="959.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.08%)</title><rect x="99.3912%" y="1125" width="0.0761%" height="15" fill="rgb(223,11,35)" fg:x="1306" fg:w="1"/><text x="99.6412%" y="1135.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="99.3912%" y="1109" width="0.0761%" height="15" fill="rgb(251,219,26)" fg:x="1306" fg:w="1"/><text x="99.6412%" y="1119.50"></text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.08%)</title><rect x="99.3912%" y="1093" width="0.0761%" height="15" fill="rgb(231,119,3)" fg:x="1306" fg:w="1"/><text x="99.6412%" y="1103.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (1 samples, 0.08%)</title><rect x="99.3912%" y="1077" width="0.0761%" height="15" fill="rgb(216,97,11)" fg:x="1306" fg:w="1"/><text x="99.6412%" y="1087.50"></text></g><g><title>deno`std::fs::OpenOptions::_open (1 samples, 0.08%)</title><rect x="99.3912%" y="1061" width="0.0761%" height="15" fill="rgb(223,59,9)" fg:x="1306" fg:w="1"/><text x="99.6412%" y="1071.50"></text></g><g><title>deno`&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="99.3912%" y="1045" width="0.0761%" height="15" fill="rgb(233,93,31)" fg:x="1306" fg:w="1"/><text x="99.6412%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="99.3912%" y="1029" width="0.0761%" height="15" fill="rgb(239,81,33)" fg:x="1306" fg:w="1"/><text x="99.6412%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="99.3912%" y="1013" width="0.0761%" height="15" fill="rgb(213,120,34)" fg:x="1306" fg:w="1"/><text x="99.6412%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.08%)</title><rect x="99.3912%" y="997" width="0.0761%" height="15" fill="rgb(243,49,53)" fg:x="1306" fg:w="1"/><text x="99.6412%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (1 samples, 0.08%)</title><rect x="99.4673%" y="1029" width="0.0761%" height="15" fill="rgb(247,216,33)" fg:x="1307" fg:w="1"/><text x="99.7173%" y="1039.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::GraphBuilderPhase&gt; (1 samples, 0.08%)</title><rect x="99.4673%" y="1013" width="0.0761%" height="15" fill="rgb(226,26,14)" fg:x="1307" fg:w="1"/><text x="99.7173%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::GraphBuilderPhase::Run (1 samples, 0.08%)</title><rect x="99.4673%" y="997" width="0.0761%" height="15" fill="rgb(215,49,53)" fg:x="1307" fg:w="1"/><text x="99.7173%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (1 samples, 0.08%)</title><rect x="99.4673%" y="981" width="0.0761%" height="15" fill="rgb(245,162,40)" fg:x="1307" fg:w="1"/><text x="99.7173%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::CreateGraph (1 samples, 0.08%)</title><rect x="99.4673%" y="965" width="0.0761%" height="15" fill="rgb(229,68,17)" fg:x="1307" fg:w="1"/><text x="99.7173%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitBytecodes (1 samples, 0.08%)</title><rect x="99.4673%" y="949" width="0.0761%" height="15" fill="rgb(213,182,10)" fg:x="1307" fg:w="1"/><text x="99.7173%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitLdaCurrentContextSlot (1 samples, 0.08%)</title><rect x="99.4673%" y="933" width="0.0761%" height="15" fill="rgb(245,125,30)" fg:x="1307" fg:w="1"/><text x="99.7173%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::MakeNode (1 samples, 0.08%)</title><rect x="99.4673%" y="917" width="0.0761%" height="15" fill="rgb(232,202,2)" fg:x="1307" fg:w="1"/><text x="99.7173%" y="927.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (1 samples, 0.08%)</title><rect x="99.5434%" y="1013" width="0.0761%" height="15" fill="rgb(237,140,51)" fg:x="1308" fg:w="1"/><text x="99.7934%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::EarlyOptimizationPhase::Run (1 samples, 0.08%)</title><rect x="99.5434%" y="997" width="0.0761%" height="15" fill="rgb(236,157,25)" fg:x="1308" fg:w="1"/><text x="99.7934%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.08%)</title><rect x="99.5434%" y="981" width="0.0761%" height="15" fill="rgb(219,209,0)" fg:x="1308" fg:w="1"/><text x="99.7934%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.08%)</title><rect x="99.5434%" y="965" width="0.0761%" height="15" fill="rgb(240,116,54)" fg:x="1308" fg:w="1"/><text x="99.7934%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.08%)</title><rect x="99.5434%" y="949" width="0.0761%" height="15" fill="rgb(216,10,36)" fg:x="1308" fg:w="1"/><text x="99.7934%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::CommonOperatorReducer::Reduce (1 samples, 0.08%)</title><rect x="99.5434%" y="933" width="0.0761%" height="15" fill="rgb(222,72,44)" fg:x="1308" fg:w="1"/><text x="99.7934%" y="943.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (1 samples, 0.08%)</title><rect x="99.6195%" y="1013" width="0.0761%" height="15" fill="rgb(232,159,9)" fg:x="1309" fg:w="1"/><text x="99.8695%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (1 samples, 0.08%)</title><rect x="99.6195%" y="997" width="0.0761%" height="15" fill="rgb(210,39,32)" fg:x="1309" fg:w="1"/><text x="99.8695%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::EffectGraphReducer::ReduceFrom (1 samples, 0.08%)</title><rect x="99.6195%" y="981" width="0.0761%" height="15" fill="rgb(216,194,45)" fg:x="1309" fg:w="1"/><text x="99.8695%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasContextInput (1 samples, 0.08%)</title><rect x="99.6195%" y="965" width="0.0761%" height="15" fill="rgb(218,18,35)" fg:x="1309" fg:w="1"/><text x="99.8695%" y="975.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (1 samples, 0.08%)</title><rect x="99.6956%" y="1013" width="0.0761%" height="15" fill="rgb(207,83,51)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (1 samples, 0.08%)</title><rect x="99.6956%" y="997" width="0.0761%" height="15" fill="rgb(225,63,43)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.08%)</title><rect x="99.6956%" y="981" width="0.0761%" height="15" fill="rgb(207,57,36)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.08%)</title><rect x="99.6956%" y="965" width="0.0761%" height="15" fill="rgb(216,99,33)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.08%)</title><rect x="99.6956%" y="949" width="0.0761%" height="15" fill="rgb(225,42,16)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::BranchElimination::ReduceBranch (1 samples, 0.08%)</title><rect x="99.6956%" y="933" width="0.0761%" height="15" fill="rgb(220,201,45)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::AdvancedReducerWithControlPathState&lt;v8::internal::compiler::BranchCondition, (v8::internal::compiler::NodeUniqueness)0&gt;::TakeStatesFromFirstControl (1 samples, 0.08%)</title><rect x="99.6956%" y="917" width="0.0761%" height="15" fill="rgb(225,33,4)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::NodeAuxData&lt;v8::internal::compiler::ControlPathState&lt;v8::internal::compiler::BranchCondition, (v8::internal::compiler::NodeUniqueness)0&gt;, &amp;(v8::internal::compiler::ControlPathState&lt;v8::internal::compiler::BranchCondition, (v8::internal::compiler::NodeUniqueness)0&gt; v8::internal::compiler::ZoneConstruct&lt;v8::internal::compiler::ControlPathState&lt;v8::internal::compiler::BranchCondition, (v8::internal::compiler::NodeUniqueness)0&gt; &gt;(v8::internal::Zone*))&gt;::Set(unsigned int, v8::internal::compiler::ControlPathState&lt;v8::internal::compiler::BranchCondition,  (1 samples, 0.08%)</title><rect x="99.6956%" y="901" width="0.0761%" height="15" fill="rgb(224,33,50)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="911.50"></text></g><g><title>deno`std::__1::vector&lt;v8::internal::compiler::ControlPathState&lt;v8::internal::compiler::BranchCondition, (v8::internal::compiler::NodeUniqueness)0&gt;, v8::internal::ZoneAllocator&lt;v8::internal::compiler::ControlPathState&lt;v8::internal::compiler::BranchCondition, (v8::internal::compiler::NodeUniqueness)0&gt; &gt; &gt;::__append(unsigned long, v8::internal::compiler::ControlPathState&lt;v8::internal::compiler::BranchCondition,  (1 samples, 0.08%)</title><rect x="99.6956%" y="885" width="0.0761%" height="15" fill="rgb(246,198,51)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="895.50"></text></g><g><title>deno`v8::internal::Zone::NewExpand (1 samples, 0.08%)</title><rect x="99.6956%" y="869" width="0.0761%" height="15" fill="rgb(205,22,4)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="879.50"></text></g><g><title>deno`v8::internal::AccountingAllocator::AllocateSegment (1 samples, 0.08%)</title><rect x="99.6956%" y="853" width="0.0761%" height="15" fill="rgb(206,3,8)" fg:x="1310" fg:w="1"/><text x="99.9456%" y="863.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::StoreStoreEliminationPhase&gt; (1 samples, 0.08%)</title><rect x="99.7717%" y="1013" width="0.0761%" height="15" fill="rgb(251,23,15)" fg:x="1311" fg:w="1"/><text x="100.0217%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::StoreStoreEliminationPhase::Run (1 samples, 0.08%)</title><rect x="99.7717%" y="997" width="0.0761%" height="15" fill="rgb(252,88,28)" fg:x="1311" fg:w="1"/><text x="100.0217%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::StoreStoreElimination::Run (1 samples, 0.08%)</title><rect x="99.7717%" y="981" width="0.0761%" height="15" fill="rgb(212,127,14)" fg:x="1311" fg:w="1"/><text x="100.0217%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::(anonymous namespace)::UnobservablesSet::IsGCObservable (1 samples, 0.08%)</title><rect x="99.7717%" y="965" width="0.0761%" height="15" fill="rgb(247,145,37)" fg:x="1311" fg:w="1"/><text x="100.0217%" y="975.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InstructionSelectionPhase, v8::internal::compiler::Linkage*&amp;&gt; (1 samples, 0.08%)</title><rect x="99.8478%" y="997" width="0.0761%" height="15" fill="rgb(209,117,53)" fg:x="1312" fg:w="1"/><text x="100.0978%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelectionPhase::Run (1 samples, 0.08%)</title><rect x="99.8478%" y="981" width="0.0761%" height="15" fill="rgb(212,90,42)" fg:x="1312" fg:w="1"/><text x="100.0978%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::SelectInstructions (1 samples, 0.08%)</title><rect x="99.8478%" y="965" width="0.0761%" height="15" fill="rgb(218,164,37)" fg:x="1312" fg:w="1"/><text x="100.0978%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitBlock (1 samples, 0.08%)</title><rect x="99.8478%" y="949" width="0.0761%" height="15" fill="rgb(246,65,34)" fg:x="1312" fg:w="1"/><text x="100.0978%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitNode (1 samples, 0.08%)</title><rect x="99.8478%" y="933" width="0.0761%" height="15" fill="rgb(231,100,33)" fg:x="1312" fg:w="1"/><text x="100.0978%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::MarkAsTagged (1 samples, 0.08%)</title><rect x="99.8478%" y="917" width="0.0761%" height="15" fill="rgb(228,126,14)" fg:x="1312" fg:w="1"/><text x="100.0978%" y="927.50"></text></g><g><title>all (1,314 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(215,173,21)" fg:x="0" fg:w="1314"/><text x="0.2500%" y="1183.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (8 samples, 0.61%)</title><rect x="99.3912%" y="1157" width="0.6088%" height="15" fill="rgb(210,6,40)" fg:x="1306" fg:w="8"/><text x="99.6412%" y="1167.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (8 samples, 0.61%)</title><rect x="99.3912%" y="1141" width="0.6088%" height="15" fill="rgb(212,48,18)" fg:x="1306" fg:w="8"/><text x="99.6412%" y="1151.50"></text></g><g><title>deno`v8::base::ThreadEntry (7 samples, 0.53%)</title><rect x="99.4673%" y="1125" width="0.5327%" height="15" fill="rgb(230,214,11)" fg:x="1307" fg:w="7"/><text x="99.7173%" y="1135.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (7 samples, 0.53%)</title><rect x="99.4673%" y="1109" width="0.5327%" height="15" fill="rgb(254,105,39)" fg:x="1307" fg:w="7"/><text x="99.7173%" y="1119.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (7 samples, 0.53%)</title><rect x="99.4673%" y="1093" width="0.5327%" height="15" fill="rgb(245,158,5)" fg:x="1307" fg:w="7"/><text x="99.7173%" y="1103.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (7 samples, 0.53%)</title><rect x="99.4673%" y="1077" width="0.5327%" height="15" fill="rgb(249,208,11)" fg:x="1307" fg:w="7"/><text x="99.7173%" y="1087.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (7 samples, 0.53%)</title><rect x="99.4673%" y="1061" width="0.5327%" height="15" fill="rgb(210,39,28)" fg:x="1307" fg:w="7"/><text x="99.7173%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (7 samples, 0.53%)</title><rect x="99.4673%" y="1045" width="0.5327%" height="15" fill="rgb(211,56,53)" fg:x="1307" fg:w="7"/><text x="99.7173%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (6 samples, 0.46%)</title><rect x="99.5434%" y="1029" width="0.4566%" height="15" fill="rgb(226,201,30)" fg:x="1308" fg:w="6"/><text x="99.7934%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (2 samples, 0.15%)</title><rect x="99.8478%" y="1013" width="0.1522%" height="15" fill="rgb(239,101,34)" fg:x="1312" fg:w="2"/><text x="100.0978%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (1 samples, 0.08%)</title><rect x="99.9239%" y="997" width="0.0761%" height="15" fill="rgb(226,209,5)" fg:x="1313" fg:w="1"/><text x="100.1739%" y="1007.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ResolvePhisPhase&gt; (1 samples, 0.08%)</title><rect x="99.9239%" y="981" width="0.0761%" height="15" fill="rgb(250,105,47)" fg:x="1313" fg:w="1"/><text x="100.1739%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::ConstraintBuilder::ResolvePhis (1 samples, 0.08%)</title><rect x="99.9239%" y="965" width="0.0761%" height="15" fill="rgb(230,72,3)" fg:x="1313" fg:w="1"/><text x="100.1739%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::ConstraintBuilder::ResolvePhis (1 samples, 0.08%)</title><rect x="99.9239%" y="949" width="0.0761%" height="15" fill="rgb(232,218,39)" fg:x="1313" fg:w="1"/><text x="100.1739%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::TopTierRegisterAllocationData::InitializePhiMap (1 samples, 0.08%)</title><rect x="99.9239%" y="933" width="0.0761%" height="15" fill="rgb(248,166,6)" fg:x="1313" fg:w="1"/><text x="100.1739%" y="943.50"></text></g></svg></svg>