<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1270" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1253.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1253.00"> </text><svg id="frames" x="10" width="1180" total_samples="1432"><g><title>deno`OUTLINED_FUNCTION_11029 (3 samples, 0.21%)</title><rect x="0.0000%" y="1141" width="0.2095%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_12108 (2 samples, 0.14%)</title><rect x="0.2095%" y="1141" width="0.1397%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="2"/><text x="0.4595%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18714 (1 samples, 0.07%)</title><rect x="0.3492%" y="1141" width="0.0698%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.5992%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3854 (1 samples, 0.07%)</title><rect x="0.4190%" y="1141" width="0.0698%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.6690%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_8011 (1 samples, 0.07%)</title><rect x="0.4888%" y="1141" width="0.0698%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="1"/><text x="0.7388%" y="1151.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (1 samples, 0.07%)</title><rect x="0.5587%" y="1141" width="0.0698%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="1"/><text x="0.8087%" y="1151.50"></text></g><g><title>deno`OUTLINED_FUNCTION_16 (1 samples, 0.07%)</title><rect x="0.9777%" y="1109" width="0.0698%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="1"/><text x="1.2277%" y="1119.50"></text></g><g><title>deno`OUTLINED_FUNCTION_4285 (1 samples, 0.07%)</title><rect x="1.0475%" y="1109" width="0.0698%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="1"/><text x="1.2975%" y="1119.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;tokio::task::local::LocalSet::with::{{closure}}::Reset&gt; (1 samples, 0.07%)</title><rect x="1.1173%" y="1109" width="0.0698%" height="15" fill="rgb(218,30,26)" fg:x="16" fg:w="1"/><text x="1.3673%" y="1119.50"></text></g><g><title>deno`&lt;tokio::task::local::LocalSet::with::{{closure}}::Reset as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="1.1173%" y="1093" width="0.0698%" height="15" fill="rgb(220,122,19)" fg:x="16" fg:w="1"/><text x="1.3673%" y="1103.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="1.3268%" y="1077" width="0.0698%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="1"/><text x="1.5768%" y="1087.50"></text></g><g><title>deno`OUTLINED_FUNCTION_23882 (1 samples, 0.07%)</title><rect x="1.3966%" y="1077" width="0.0698%" height="15" fill="rgb(240,193,28)" fg:x="20" fg:w="1"/><text x="1.6466%" y="1087.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="2.1648%" y="1029" width="0.0698%" height="15" fill="rgb(216,20,37)" fg:x="31" fg:w="1"/><text x="2.4148%" y="1039.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="2.1648%" y="1013" width="0.0698%" height="15" fill="rgb(206,188,39)" fg:x="31" fg:w="1"/><text x="2.4148%" y="1023.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="2.1648%" y="997" width="0.0698%" height="15" fill="rgb(217,207,13)" fg:x="31" fg:w="1"/><text x="2.4148%" y="1007.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="2.1648%" y="981" width="0.0698%" height="15" fill="rgb(231,73,38)" fg:x="31" fg:w="1"/><text x="2.4148%" y="991.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="2.1648%" y="965" width="0.0698%" height="15" fill="rgb(225,20,46)" fg:x="31" fg:w="1"/><text x="2.4148%" y="975.50"></text></g><g><title>deno`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="2.1648%" y="949" width="0.0698%" height="15" fill="rgb(210,31,41)" fg:x="31" fg:w="1"/><text x="2.4148%" y="959.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="2.1648%" y="933" width="0.0698%" height="15" fill="rgb(221,200,47)" fg:x="31" fg:w="1"/><text x="2.4148%" y="943.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="2.1648%" y="917" width="0.0698%" height="15" fill="rgb(226,26,5)" fg:x="31" fg:w="1"/><text x="2.4148%" y="927.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="2.1648%" y="901" width="0.0698%" height="15" fill="rgb(249,33,26)" fg:x="31" fg:w="1"/><text x="2.4148%" y="911.50"></text></g><g><title>deno`deno::file_fetcher::fetch_local (1 samples, 0.07%)</title><rect x="2.1648%" y="885" width="0.0698%" height="15" fill="rgb(235,183,28)" fg:x="31" fg:w="1"/><text x="2.4148%" y="895.50"></text></g><g><title>deno`std::fs::read (1 samples, 0.07%)</title><rect x="2.1648%" y="869" width="0.0698%" height="15" fill="rgb(221,5,38)" fg:x="31" fg:w="1"/><text x="2.4148%" y="879.50"></text></g><g><title>deno`std::fs::read::inner (1 samples, 0.07%)</title><rect x="2.1648%" y="853" width="0.0698%" height="15" fill="rgb(247,18,42)" fg:x="31" fg:w="1"/><text x="2.4148%" y="863.50"></text></g><g><title>deno`std::fs::OpenOptions::_open (1 samples, 0.07%)</title><rect x="2.1648%" y="837" width="0.0698%" height="15" fill="rgb(241,131,45)" fg:x="31" fg:w="1"/><text x="2.4148%" y="847.50"></text></g><g><title>deno`std::sys::unix::fs::File::open_c (1 samples, 0.07%)</title><rect x="2.1648%" y="821" width="0.0698%" height="15" fill="rgb(249,31,29)" fg:x="31" fg:w="1"/><text x="2.4148%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.07%)</title><rect x="2.1648%" y="805" width="0.0698%" height="15" fill="rgb(225,111,53)" fg:x="31" fg:w="1"/><text x="2.4148%" y="815.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.07%)</title><rect x="2.2346%" y="1029" width="0.0698%" height="15" fill="rgb(238,160,17)" fg:x="32" fg:w="1"/><text x="2.4846%" y="1039.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[v8::handle::Global&lt;v8::data::Function&gt;]&gt; (2 samples, 0.14%)</title><rect x="2.3045%" y="1029" width="0.1397%" height="15" fill="rgb(214,148,48)" fg:x="33" fg:w="2"/><text x="2.5545%" y="1039.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (1 samples, 0.07%)</title><rect x="2.4441%" y="1029" width="0.0698%" height="15" fill="rgb(232,36,49)" fg:x="35" fg:w="1"/><text x="2.6941%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::check_promise_exceptions (1 samples, 0.07%)</title><rect x="2.5140%" y="1029" width="0.0698%" height="15" fill="rgb(209,103,24)" fg:x="36" fg:w="1"/><text x="2.7640%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (2 samples, 0.14%)</title><rect x="2.5838%" y="1029" width="0.1397%" height="15" fill="rgb(229,88,8)" fg:x="37" fg:w="2"/><text x="2.8338%" y="1039.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (1 samples, 0.07%)</title><rect x="4.7486%" y="997" width="0.0698%" height="15" fill="rgb(213,181,19)" fg:x="68" fg:w="1"/><text x="4.9986%" y="1007.50"></text></g><g><title>deno`v8__Global__New (3 samples, 0.21%)</title><rect x="4.8184%" y="997" width="0.2095%" height="15" fill="rgb(254,191,54)" fg:x="69" fg:w="3"/><text x="5.0684%" y="1007.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.14%)</title><rect x="4.8883%" y="981" width="0.1397%" height="15" fill="rgb(241,83,37)" fg:x="70" fg:w="2"/><text x="5.1383%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.35%)</title><rect x="5.0279%" y="997" width="0.3492%" height="15" fill="rgb(233,36,39)" fg:x="72" fg:w="5"/><text x="5.2779%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.35%)</title><rect x="5.0279%" y="981" width="0.3492%" height="15" fill="rgb(226,3,54)" fg:x="72" fg:w="5"/><text x="5.2779%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.28%)</title><rect x="5.0978%" y="965" width="0.2793%" height="15" fill="rgb(245,192,40)" fg:x="73" fg:w="4"/><text x="5.3478%" y="975.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.70%)</title><rect x="4.7486%" y="1013" width="0.6983%" height="15" fill="rgb(238,167,29)" fg:x="68" fg:w="10"/><text x="4.9986%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="5.3771%" y="997" width="0.0698%" height="15" fill="rgb(232,182,51)" fg:x="77" fg:w="1"/><text x="5.6271%" y="1007.50"></text></g><g><title>deno`tokio::runtime::task::harness::can_read_output (2 samples, 0.14%)</title><rect x="6.0056%" y="965" width="0.1397%" height="15" fill="rgb(231,60,39)" fg:x="86" fg:w="2"/><text x="6.2556%" y="975.50"></text></g><g><title>deno`tokio::runtime::task::state::State::ref_dec (1 samples, 0.07%)</title><rect x="6.2151%" y="949" width="0.0698%" height="15" fill="rgb(208,69,12)" fg:x="89" fg:w="1"/><text x="6.4651%" y="959.50"></text></g><g><title>deno`tokio::runtime::task::state::State::unset_join_interested (4 samples, 0.28%)</title><rect x="6.2849%" y="949" width="0.2793%" height="15" fill="rgb(235,93,37)" fg:x="90" fg:w="4"/><text x="6.5349%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="6.5642%" y="949" width="0.0698%" height="15" fill="rgb(213,116,39)" fg:x="94" fg:w="1"/><text x="6.8142%" y="959.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="6.5642%" y="933" width="0.0698%" height="15" fill="rgb(222,207,29)" fg:x="94" fg:w="1"/><text x="6.8142%" y="943.50"></text></g><g><title>deno`tokio::runtime::task::raw::drop_join_handle_slow (8 samples, 0.56%)</title><rect x="6.1453%" y="965" width="0.5587%" height="15" fill="rgb(206,96,30)" fg:x="88" fg:w="8"/><text x="6.3953%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="6.6341%" y="949" width="0.0698%" height="15" fill="rgb(218,138,4)" fg:x="95" fg:w="1"/><text x="6.8841%" y="959.50"></text></g><g><title>deno`futures_task::waker::clone_arc_raw (1 samples, 0.07%)</title><rect x="6.7737%" y="949" width="0.0698%" height="15" fill="rgb(250,191,14)" fg:x="97" fg:w="1"/><text x="7.0237%" y="959.50"></text></g><g><title>deno`tokio::runtime::task::raw::try_read_output (3 samples, 0.21%)</title><rect x="6.7039%" y="965" width="0.2095%" height="15" fill="rgb(239,60,40)" fg:x="96" fg:w="3"/><text x="6.9539%" y="975.50"></text></g><g><title>deno`tokio::runtime::task::harness::can_read_output (1 samples, 0.07%)</title><rect x="6.8436%" y="949" width="0.0698%" height="15" fill="rgb(206,27,48)" fg:x="98" fg:w="1"/><text x="7.0936%" y="959.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 1.26%)</title><rect x="5.7263%" y="981" width="1.2570%" height="15" fill="rgb(225,35,8)" fg:x="82" fg:w="18"/><text x="5.9763%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="6.9134%" y="965" width="0.0698%" height="15" fill="rgb(250,213,24)" fg:x="99" fg:w="1"/><text x="7.1634%" y="975.50"></text></g><g><title>libsystem_kernel.dylib`close (34 samples, 2.37%)</title><rect x="6.9832%" y="981" width="2.3743%" height="15" fill="rgb(247,123,22)" fg:x="100" fg:w="34"/><text x="7.2332%" y="991.50">li..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="9.3575%" y="981" width="0.0698%" height="15" fill="rgb(231,138,38)" fg:x="134" fg:w="1"/><text x="9.6075%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="9.3575%" y="965" width="0.0698%" height="15" fill="rgb(231,145,46)" fg:x="134" fg:w="1"/><text x="9.6075%" y="975.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 4.19%)</title><rect x="5.4469%" y="1013" width="4.1899%" height="15" fill="rgb(251,118,11)" fg:x="78" fg:w="60"/><text x="5.6969%" y="1023.50">deno`..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 4.19%)</title><rect x="5.4469%" y="997" width="4.1899%" height="15" fill="rgb(217,147,25)" fg:x="78" fg:w="60"/><text x="5.6969%" y="1007.50">deno`..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.21%)</title><rect x="9.4274%" y="981" width="0.2095%" height="15" fill="rgb(247,81,37)" fg:x="135" fg:w="3"/><text x="9.6774%" y="991.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.14%)</title><rect x="9.6369%" y="981" width="0.1397%" height="15" fill="rgb(209,12,38)" fg:x="138" fg:w="2"/><text x="9.8869%" y="991.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (2 samples, 0.14%)</title><rect x="9.6369%" y="965" width="0.1397%" height="15" fill="rgb(227,1,9)" fg:x="138" fg:w="2"/><text x="9.8869%" y="975.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (2 samples, 0.14%)</title><rect x="9.6369%" y="949" width="0.1397%" height="15" fill="rgb(248,47,43)" fg:x="138" fg:w="2"/><text x="9.8869%" y="959.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (3 samples, 0.21%)</title><rect x="9.6369%" y="1013" width="0.2095%" height="15" fill="rgb(221,10,30)" fg:x="138" fg:w="3"/><text x="9.8869%" y="1023.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (3 samples, 0.21%)</title><rect x="9.6369%" y="997" width="0.2095%" height="15" fill="rgb(210,229,1)" fg:x="138" fg:w="3"/><text x="9.8869%" y="1007.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (1 samples, 0.07%)</title><rect x="9.7765%" y="981" width="0.0698%" height="15" fill="rgb(222,148,37)" fg:x="140" fg:w="1"/><text x="10.0265%" y="991.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.07%)</title><rect x="9.8464%" y="1013" width="0.0698%" height="15" fill="rgb(234,67,33)" fg:x="141" fg:w="1"/><text x="10.0964%" y="1023.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.14%)</title><rect x="9.9162%" y="1013" width="0.1397%" height="15" fill="rgb(247,98,35)" fg:x="142" fg:w="2"/><text x="10.1662%" y="1023.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (4 samples, 0.28%)</title><rect x="10.0559%" y="1013" width="0.2793%" height="15" fill="rgb(247,138,52)" fg:x="144" fg:w="4"/><text x="10.3059%" y="1023.50"></text></g><g><title>deno`OUTLINED_FUNCTION_1421 (1 samples, 0.07%)</title><rect x="10.7542%" y="997" width="0.0698%" height="15" fill="rgb(213,79,30)" fg:x="154" fg:w="1"/><text x="11.0042%" y="1007.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (2 samples, 0.14%)</title><rect x="10.8240%" y="997" width="0.1397%" height="15" fill="rgb(246,177,23)" fg:x="155" fg:w="2"/><text x="11.0740%" y="1007.50"></text></g><g><title>deno`futures_task::waker::clone_arc_raw (3 samples, 0.21%)</title><rect x="10.9637%" y="997" width="0.2095%" height="15" fill="rgb(230,62,27)" fg:x="157" fg:w="3"/><text x="11.2137%" y="1007.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (14 samples, 0.98%)</title><rect x="10.3352%" y="1013" width="0.9777%" height="15" fill="rgb(216,154,8)" fg:x="148" fg:w="14"/><text x="10.5852%" y="1023.50"></text></g><g><title>deno`futures_task::waker::drop_arc_raw (2 samples, 0.14%)</title><rect x="11.1732%" y="997" width="0.1397%" height="15" fill="rgb(244,35,45)" fg:x="160" fg:w="2"/><text x="11.4232%" y="1007.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::evaluate_pending_module (1 samples, 0.07%)</title><rect x="11.3128%" y="1013" width="0.0698%" height="15" fill="rgb(251,115,12)" fg:x="162" fg:w="1"/><text x="11.5628%" y="1023.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (2 samples, 0.14%)</title><rect x="11.6620%" y="997" width="0.1397%" height="15" fill="rgb(240,54,50)" fg:x="167" fg:w="2"/><text x="11.9120%" y="1007.50"></text></g><g><title>deno`v8::base::Mutex::Lock (1 samples, 0.07%)</title><rect x="11.8017%" y="997" width="0.0698%" height="15" fill="rgb(233,84,52)" fg:x="169" fg:w="1"/><text x="12.0517%" y="1007.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.07%)</title><rect x="11.8715%" y="997" width="0.0698%" height="15" fill="rgb(207,117,47)" fg:x="170" fg:w="1"/><text x="12.1215%" y="1007.50"></text></g><g><title>deno`v8::internal::wasm::GetWasmEngine (2 samples, 0.14%)</title><rect x="11.9413%" y="997" width="0.1397%" height="15" fill="rgb(249,43,39)" fg:x="171" fg:w="2"/><text x="12.1913%" y="1007.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (1 samples, 0.07%)</title><rect x="12.0810%" y="997" width="0.0698%" height="15" fill="rgb(209,38,44)" fg:x="173" fg:w="1"/><text x="12.3310%" y="1007.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (12 samples, 0.84%)</title><rect x="11.3827%" y="1013" width="0.8380%" height="15" fill="rgb(236,212,23)" fg:x="163" fg:w="12"/><text x="11.6327%" y="1023.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.07%)</title><rect x="12.1508%" y="997" width="0.0698%" height="15" fill="rgb(242,79,21)" fg:x="174" fg:w="1"/><text x="12.4008%" y="1007.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (1 samples, 0.07%)</title><rect x="12.3603%" y="981" width="0.0698%" height="15" fill="rgb(211,96,35)" fg:x="177" fg:w="1"/><text x="12.6103%" y="991.50"></text></g><g><title>deno`v8::Context::Exit (1 samples, 0.07%)</title><rect x="12.5698%" y="949" width="0.0698%" height="15" fill="rgb(253,215,40)" fg:x="180" fg:w="1"/><text x="12.8198%" y="959.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (6 samples, 0.42%)</title><rect x="12.4302%" y="965" width="0.4190%" height="15" fill="rgb(211,81,21)" fg:x="178" fg:w="6"/><text x="12.6802%" y="975.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (3 samples, 0.21%)</title><rect x="12.6397%" y="949" width="0.2095%" height="15" fill="rgb(208,190,38)" fg:x="181" fg:w="3"/><text x="12.8897%" y="959.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (3 samples, 0.21%)</title><rect x="12.6397%" y="933" width="0.2095%" height="15" fill="rgb(235,213,38)" fg:x="181" fg:w="3"/><text x="12.8897%" y="943.50"></text></g><g><title>deno`v8::Context::Exit (1 samples, 0.07%)</title><rect x="12.8492%" y="965" width="0.0698%" height="15" fill="rgb(237,122,38)" fg:x="184" fg:w="1"/><text x="13.0992%" y="975.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (9 samples, 0.63%)</title><rect x="12.3603%" y="997" width="0.6285%" height="15" fill="rgb(244,218,35)" fg:x="177" fg:w="9"/><text x="12.6103%" y="1007.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (8 samples, 0.56%)</title><rect x="12.4302%" y="981" width="0.5587%" height="15" fill="rgb(240,68,47)" fg:x="178" fg:w="8"/><text x="12.6802%" y="991.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (1 samples, 0.07%)</title><rect x="12.9190%" y="965" width="0.0698%" height="15" fill="rgb(210,16,53)" fg:x="185" fg:w="1"/><text x="13.1690%" y="975.50"></text></g><g><title>deno`v8::api_internal::GlobalizeReference (1 samples, 0.07%)</title><rect x="13.1285%" y="981" width="0.0698%" height="15" fill="rgb(235,124,12)" fg:x="188" fg:w="1"/><text x="13.3785%" y="991.50"></text></g><g><title>deno`v8::handle::HandleHost::get_isolate (1 samples, 0.07%)</title><rect x="13.1983%" y="981" width="0.0698%" height="15" fill="rgb(224,169,11)" fg:x="189" fg:w="1"/><text x="13.4483%" y="991.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.07%)</title><rect x="13.2682%" y="981" width="0.0698%" height="15" fill="rgb(250,166,2)" fg:x="190" fg:w="1"/><text x="13.5182%" y="991.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (6 samples, 0.42%)</title><rect x="12.9888%" y="997" width="0.4190%" height="15" fill="rgb(242,216,29)" fg:x="186" fg:w="6"/><text x="13.2388%" y="1007.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.07%)</title><rect x="13.3380%" y="981" width="0.0698%" height="15" fill="rgb(230,116,27)" fg:x="191" fg:w="1"/><text x="13.5880%" y="991.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (2 samples, 0.14%)</title><rect x="13.4078%" y="997" width="0.1397%" height="15" fill="rgb(228,99,48)" fg:x="192" fg:w="2"/><text x="13.6578%" y="1007.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (1 samples, 0.07%)</title><rect x="13.5475%" y="997" width="0.0698%" height="15" fill="rgb(253,11,6)" fg:x="194" fg:w="1"/><text x="13.7975%" y="1007.50"></text></g><g><title>deno`v8::Context::Enter (3 samples, 0.21%)</title><rect x="13.7570%" y="981" width="0.2095%" height="15" fill="rgb(247,143,39)" fg:x="197" fg:w="3"/><text x="14.0070%" y="991.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (3 samples, 0.21%)</title><rect x="13.7570%" y="965" width="0.2095%" height="15" fill="rgb(236,97,10)" fg:x="197" fg:w="3"/><text x="14.0070%" y="975.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (4 samples, 0.28%)</title><rect x="13.9665%" y="981" width="0.2793%" height="15" fill="rgb(233,208,19)" fg:x="200" fg:w="4"/><text x="14.2165%" y="991.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (4 samples, 0.28%)</title><rect x="13.9665%" y="965" width="0.2793%" height="15" fill="rgb(216,164,2)" fg:x="200" fg:w="4"/><text x="14.2165%" y="975.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (10 samples, 0.70%)</title><rect x="13.6173%" y="997" width="0.6983%" height="15" fill="rgb(220,129,5)" fg:x="195" fg:w="10"/><text x="13.8673%" y="1007.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (1 samples, 0.07%)</title><rect x="14.2458%" y="981" width="0.0698%" height="15" fill="rgb(242,17,10)" fg:x="204" fg:w="1"/><text x="14.4958%" y="991.50"></text></g><g><title>deno`v8__Isolate__GetData (1 samples, 0.07%)</title><rect x="14.3156%" y="997" width="0.0698%" height="15" fill="rgb(242,107,0)" fg:x="205" fg:w="1"/><text x="14.5656%" y="1007.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (32 samples, 2.23%)</title><rect x="12.2207%" y="1013" width="2.2346%" height="15" fill="rgb(251,28,31)" fg:x="175" fg:w="32"/><text x="12.4707%" y="1023.50">d..</text></g><g><title>deno`v8__Local__New (1 samples, 0.07%)</title><rect x="14.3855%" y="997" width="0.0698%" height="15" fill="rgb(233,223,10)" fg:x="206" fg:w="1"/><text x="14.6355%" y="1007.50"></text></g><g><title>deno`&lt;T as core::any::Any&gt;::type_id (1 samples, 0.07%)</title><rect x="14.5950%" y="997" width="0.0698%" height="15" fill="rgb(215,21,27)" fg:x="209" fg:w="1"/><text x="14.8450%" y="1007.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (1 samples, 0.07%)</title><rect x="14.6648%" y="997" width="0.0698%" height="15" fill="rgb(232,23,21)" fg:x="210" fg:w="1"/><text x="14.9148%" y="1007.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (7 samples, 0.49%)</title><rect x="14.4553%" y="1013" width="0.4888%" height="15" fill="rgb(244,5,23)" fg:x="207" fg:w="7"/><text x="14.7053%" y="1023.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (3 samples, 0.21%)</title><rect x="14.7346%" y="997" width="0.2095%" height="15" fill="rgb(226,81,46)" fg:x="211" fg:w="3"/><text x="14.9846%" y="1007.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (6 samples, 0.42%)</title><rect x="15.2235%" y="997" width="0.4190%" height="15" fill="rgb(247,70,30)" fg:x="218" fg:w="6"/><text x="15.4735%" y="1007.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (3 samples, 0.21%)</title><rect x="15.6425%" y="997" width="0.2095%" height="15" fill="rgb(212,68,19)" fg:x="224" fg:w="3"/><text x="15.8925%" y="1007.50"></text></g><g><title>deno`deno_napi::init::_{{closure}} (17 samples, 1.19%)</title><rect x="14.9441%" y="1013" width="1.1872%" height="15" fill="rgb(240,187,13)" fg:x="214" fg:w="17"/><text x="15.1941%" y="1023.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (4 samples, 0.28%)</title><rect x="15.8520%" y="997" width="0.2793%" height="15" fill="rgb(223,113,26)" fg:x="227" fg:w="4"/><text x="16.1020%" y="1007.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (3 samples, 0.21%)</title><rect x="16.1313%" y="1013" width="0.2095%" height="15" fill="rgb(206,192,2)" fg:x="231" fg:w="3"/><text x="16.3813%" y="1023.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (6 samples, 0.42%)</title><rect x="16.3408%" y="1013" width="0.4190%" height="15" fill="rgb(241,108,4)" fg:x="234" fg:w="6"/><text x="16.5908%" y="1023.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (1 samples, 0.07%)</title><rect x="16.7598%" y="1013" width="0.0698%" height="15" fill="rgb(247,173,49)" fg:x="240" fg:w="1"/><text x="17.0098%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="16.7598%" y="997" width="0.0698%" height="15" fill="rgb(224,114,35)" fg:x="240" fg:w="1"/><text x="17.0098%" y="1007.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (3 samples, 0.21%)</title><rect x="16.8296%" y="1013" width="0.2095%" height="15" fill="rgb(245,159,27)" fg:x="241" fg:w="3"/><text x="17.0796%" y="1023.50"></text></g><g><title>deno`v8::Context::Enter (3 samples, 0.21%)</title><rect x="17.0391%" y="1013" width="0.2095%" height="15" fill="rgb(245,172,44)" fg:x="244" fg:w="3"/><text x="17.2891%" y="1023.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (6 samples, 0.42%)</title><rect x="17.8771%" y="997" width="0.4190%" height="15" fill="rgb(236,23,11)" fg:x="256" fg:w="6"/><text x="18.1271%" y="1007.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.07%)</title><rect x="18.2263%" y="981" width="0.0698%" height="15" fill="rgb(205,117,38)" fg:x="261" fg:w="1"/><text x="18.4763%" y="991.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.14%)</title><rect x="18.2961%" y="997" width="0.1397%" height="15" fill="rgb(237,72,25)" fg:x="262" fg:w="2"/><text x="18.5461%" y="1007.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.07%)</title><rect x="18.4358%" y="997" width="0.0698%" height="15" fill="rgb(244,70,9)" fg:x="264" fg:w="1"/><text x="18.6858%" y="1007.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.07%)</title><rect x="18.5056%" y="981" width="0.0698%" height="15" fill="rgb(217,125,39)" fg:x="265" fg:w="1"/><text x="18.7556%" y="991.50"></text></g><g><title>0x11000c240 (2 samples, 0.14%)</title><rect x="19.1341%" y="949" width="0.1397%" height="15" fill="rgb(235,36,10)" fg:x="274" fg:w="2"/><text x="19.3841%" y="959.50"></text></g><g><title>0x11000eea0 (1 samples, 0.07%)</title><rect x="19.2737%" y="949" width="0.0698%" height="15" fill="rgb(251,123,47)" fg:x="276" fg:w="1"/><text x="19.5237%" y="959.50"></text></g><g><title>0x11000eea8 (1 samples, 0.07%)</title><rect x="19.3436%" y="949" width="0.0698%" height="15" fill="rgb(221,13,13)" fg:x="277" fg:w="1"/><text x="19.5936%" y="959.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (2 samples, 0.14%)</title><rect x="19.4134%" y="949" width="0.1397%" height="15" fill="rgb(238,131,9)" fg:x="278" fg:w="2"/><text x="19.6634%" y="959.50"></text></g><g><title>0x11000bad0 (1 samples, 0.07%)</title><rect x="19.5531%" y="933" width="0.0698%" height="15" fill="rgb(211,50,8)" fg:x="280" fg:w="1"/><text x="19.8031%" y="943.50"></text></g><g><title>0x11000ed6c (1 samples, 0.07%)</title><rect x="19.6229%" y="933" width="0.0698%" height="15" fill="rgb(245,182,24)" fg:x="281" fg:w="1"/><text x="19.8729%" y="943.50"></text></g><g><title>0x11000eda0 (1 samples, 0.07%)</title><rect x="19.6927%" y="933" width="0.0698%" height="15" fill="rgb(242,14,37)" fg:x="282" fg:w="1"/><text x="19.9427%" y="943.50"></text></g><g><title>deno`Builtins_LoadIC (1 samples, 0.07%)</title><rect x="19.7626%" y="933" width="0.0698%" height="15" fill="rgb(246,228,12)" fg:x="283" fg:w="1"/><text x="20.0126%" y="943.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (5 samples, 0.35%)</title><rect x="19.5531%" y="949" width="0.3492%" height="15" fill="rgb(213,55,15)" fg:x="280" fg:w="5"/><text x="19.8031%" y="959.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (1 samples, 0.07%)</title><rect x="19.8324%" y="933" width="0.0698%" height="15" fill="rgb(209,9,3)" fg:x="284" fg:w="1"/><text x="20.0824%" y="943.50"></text></g><g><title>deno`Builtins_ResolvePromise (1 samples, 0.07%)</title><rect x="19.8324%" y="917" width="0.0698%" height="15" fill="rgb(230,59,30)" fg:x="284" fg:w="1"/><text x="20.0824%" y="927.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (1 samples, 0.07%)</title><rect x="19.8324%" y="901" width="0.0698%" height="15" fill="rgb(209,121,21)" fg:x="284" fg:w="1"/><text x="20.0824%" y="911.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (20 samples, 1.40%)</title><rect x="18.5754%" y="981" width="1.3966%" height="15" fill="rgb(220,109,13)" fg:x="266" fg:w="20"/><text x="18.8254%" y="991.50"></text></g><g><title>deno`Builtins_JSEntry (12 samples, 0.84%)</title><rect x="19.1341%" y="965" width="0.8380%" height="15" fill="rgb(232,18,1)" fg:x="274" fg:w="12"/><text x="19.3841%" y="975.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (1 samples, 0.07%)</title><rect x="19.9022%" y="949" width="0.0698%" height="15" fill="rgb(215,41,42)" fg:x="285" fg:w="1"/><text x="20.1522%" y="959.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (1 samples, 0.07%)</title><rect x="19.9721%" y="981" width="0.0698%" height="15" fill="rgb(224,123,36)" fg:x="286" fg:w="1"/><text x="20.2221%" y="991.50"></text></g><g><title>deno`v8::internal::DumpOnJavascriptExecution::IsAllowed (1 samples, 0.07%)</title><rect x="20.0419%" y="981" width="0.0698%" height="15" fill="rgb(240,125,3)" fg:x="287" fg:w="1"/><text x="20.2919%" y="991.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (24 samples, 1.68%)</title><rect x="18.5056%" y="997" width="1.6760%" height="15" fill="rgb(205,98,50)" fg:x="265" fg:w="24"/><text x="18.7556%" y="1007.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (1 samples, 0.07%)</title><rect x="20.1117%" y="981" width="0.0698%" height="15" fill="rgb(205,185,37)" fg:x="288" fg:w="1"/><text x="20.3617%" y="991.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.14%)</title><rect x="20.1816%" y="997" width="0.1397%" height="15" fill="rgb(238,207,15)" fg:x="289" fg:w="2"/><text x="20.4316%" y="1007.50"></text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (1 samples, 0.07%)</title><rect x="20.6006%" y="917" width="0.0698%" height="15" fill="rgb(213,199,42)" fg:x="295" fg:w="1"/><text x="20.8506%" y="927.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (1 samples, 0.07%)</title><rect x="21.1592%" y="869" width="0.0698%" height="15" fill="rgb(235,201,11)" fg:x="303" fg:w="1"/><text x="21.4092%" y="879.50"></text></g><g><title>0x11000f000 (1 samples, 0.07%)</title><rect x="21.2989%" y="853" width="0.0698%" height="15" fill="rgb(207,46,11)" fg:x="305" fg:w="1"/><text x="21.5489%" y="863.50"></text></g><g><title>0x11000f008 (1 samples, 0.07%)</title><rect x="21.3687%" y="853" width="0.0698%" height="15" fill="rgb(241,35,35)" fg:x="306" fg:w="1"/><text x="21.6187%" y="863.50"></text></g><g><title>0x11000f018 (1 samples, 0.07%)</title><rect x="21.4385%" y="853" width="0.0698%" height="15" fill="rgb(243,32,47)" fg:x="307" fg:w="1"/><text x="21.6885%" y="863.50"></text></g><g><title>0x11000b6a0 (1 samples, 0.07%)</title><rect x="21.5782%" y="821" width="0.0698%" height="15" fill="rgb(247,202,23)" fg:x="309" fg:w="1"/><text x="21.8282%" y="831.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.07%)</title><rect x="21.5782%" y="805" width="0.0698%" height="15" fill="rgb(219,102,11)" fg:x="309" fg:w="1"/><text x="21.8282%" y="815.50"></text></g><g><title>deno`Builtins_TypedArrayConstructor (1 samples, 0.07%)</title><rect x="21.5782%" y="789" width="0.0698%" height="15" fill="rgb(243,110,44)" fg:x="309" fg:w="1"/><text x="21.8282%" y="799.50"></text></g><g><title>deno`Builtins_CreateTypedArray (1 samples, 0.07%)</title><rect x="21.5782%" y="773" width="0.0698%" height="15" fill="rgb(222,74,54)" fg:x="309" fg:w="1"/><text x="21.8282%" y="783.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.07%)</title><rect x="21.5782%" y="757" width="0.0698%" height="15" fill="rgb(216,99,12)" fg:x="309" fg:w="1"/><text x="21.8282%" y="767.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.07%)</title><rect x="21.5782%" y="741" width="0.0698%" height="15" fill="rgb(226,22,26)" fg:x="309" fg:w="1"/><text x="21.8282%" y="751.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (1 samples, 0.07%)</title><rect x="21.5782%" y="725" width="0.0698%" height="15" fill="rgb(217,163,10)" fg:x="309" fg:w="1"/><text x="21.8282%" y="735.50"></text></g><g><title>0x11000b434 (1 samples, 0.07%)</title><rect x="21.6480%" y="789" width="0.0698%" height="15" fill="rgb(213,25,53)" fg:x="310" fg:w="1"/><text x="21.8980%" y="799.50"></text></g><g><title>0x11000b2f4 (1 samples, 0.07%)</title><rect x="21.7179%" y="773" width="0.0698%" height="15" fill="rgb(252,105,26)" fg:x="311" fg:w="1"/><text x="21.9679%" y="783.50"></text></g><g><title>deno`Builtins_FastNewClosure (1 samples, 0.07%)</title><rect x="21.7179%" y="757" width="0.0698%" height="15" fill="rgb(220,39,43)" fg:x="311" fg:w="1"/><text x="21.9679%" y="767.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.07%)</title><rect x="21.7179%" y="741" width="0.0698%" height="15" fill="rgb(229,68,48)" fg:x="311" fg:w="1"/><text x="21.9679%" y="751.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.07%)</title><rect x="21.7179%" y="725" width="0.0698%" height="15" fill="rgb(252,8,32)" fg:x="311" fg:w="1"/><text x="21.9679%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.07%)</title><rect x="21.7179%" y="709" width="0.0698%" height="15" fill="rgb(223,20,43)" fg:x="311" fg:w="1"/><text x="21.9679%" y="719.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.07%)</title><rect x="21.7179%" y="693" width="0.0698%" height="15" fill="rgb(229,81,49)" fg:x="311" fg:w="1"/><text x="21.9679%" y="703.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.07%)</title><rect x="21.7179%" y="677" width="0.0698%" height="15" fill="rgb(236,28,36)" fg:x="311" fg:w="1"/><text x="21.9679%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.07%)</title><rect x="21.7179%" y="661" width="0.0698%" height="15" fill="rgb(249,185,26)" fg:x="311" fg:w="1"/><text x="21.9679%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.07%)</title><rect x="21.7179%" y="645" width="0.0698%" height="15" fill="rgb(249,174,33)" fg:x="311" fg:w="1"/><text x="21.9679%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.07%)</title><rect x="21.7179%" y="629" width="0.0698%" height="15" fill="rgb(233,201,37)" fg:x="311" fg:w="1"/><text x="21.9679%" y="639.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.07%)</title><rect x="21.7179%" y="613" width="0.0698%" height="15" fill="rgb(221,78,26)" fg:x="311" fg:w="1"/><text x="21.9679%" y="623.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.07%)</title><rect x="21.7179%" y="597" width="0.0698%" height="15" fill="rgb(250,127,30)" fg:x="311" fg:w="1"/><text x="21.9679%" y="607.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (1 samples, 0.07%)</title><rect x="21.7179%" y="581" width="0.0698%" height="15" fill="rgb(230,49,44)" fg:x="311" fg:w="1"/><text x="21.9679%" y="591.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (1 samples, 0.07%)</title><rect x="21.7179%" y="565" width="0.0698%" height="15" fill="rgb(229,67,23)" fg:x="311" fg:w="1"/><text x="21.9679%" y="575.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (1 samples, 0.07%)</title><rect x="21.7179%" y="549" width="0.0698%" height="15" fill="rgb(249,83,47)" fg:x="311" fg:w="1"/><text x="21.9679%" y="559.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.07%)</title><rect x="21.7179%" y="533" width="0.0698%" height="15" fill="rgb(215,43,3)" fg:x="311" fg:w="1"/><text x="21.9679%" y="543.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.07%)</title><rect x="21.7179%" y="517" width="0.0698%" height="15" fill="rgb(238,154,13)" fg:x="311" fg:w="1"/><text x="21.9679%" y="527.50"></text></g><g><title>0x11000ad74 (1 samples, 0.07%)</title><rect x="21.7877%" y="741" width="0.0698%" height="15" fill="rgb(219,56,2)" fg:x="312" fg:w="1"/><text x="22.0377%" y="751.50"></text></g><g><title>deno`Builtins_FastNewFunctionContextFunction (1 samples, 0.07%)</title><rect x="21.7877%" y="725" width="0.0698%" height="15" fill="rgb(233,0,4)" fg:x="312" fg:w="1"/><text x="22.0377%" y="735.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.07%)</title><rect x="21.7877%" y="709" width="0.0698%" height="15" fill="rgb(235,30,7)" fg:x="312" fg:w="1"/><text x="22.0377%" y="719.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.07%)</title><rect x="21.7877%" y="693" width="0.0698%" height="15" fill="rgb(250,79,13)" fg:x="312" fg:w="1"/><text x="22.0377%" y="703.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.07%)</title><rect x="21.7877%" y="677" width="0.0698%" height="15" fill="rgb(211,146,34)" fg:x="312" fg:w="1"/><text x="22.0377%" y="687.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.07%)</title><rect x="21.7877%" y="661" width="0.0698%" height="15" fill="rgb(228,22,38)" fg:x="312" fg:w="1"/><text x="22.0377%" y="671.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.07%)</title><rect x="21.7877%" y="645" width="0.0698%" height="15" fill="rgb(235,168,5)" fg:x="312" fg:w="1"/><text x="22.0377%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.07%)</title><rect x="21.7877%" y="629" width="0.0698%" height="15" fill="rgb(221,155,16)" fg:x="312" fg:w="1"/><text x="22.0377%" y="639.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.07%)</title><rect x="21.7877%" y="613" width="0.0698%" height="15" fill="rgb(215,215,53)" fg:x="312" fg:w="1"/><text x="22.0377%" y="623.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.07%)</title><rect x="21.7877%" y="597" width="0.0698%" height="15" fill="rgb(223,4,10)" fg:x="312" fg:w="1"/><text x="22.0377%" y="607.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.07%)</title><rect x="21.7877%" y="581" width="0.0698%" height="15" fill="rgb(234,103,6)" fg:x="312" fg:w="1"/><text x="22.0377%" y="591.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.07%)</title><rect x="21.7877%" y="565" width="0.0698%" height="15" fill="rgb(227,97,0)" fg:x="312" fg:w="1"/><text x="22.0377%" y="575.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (1 samples, 0.07%)</title><rect x="21.7877%" y="549" width="0.0698%" height="15" fill="rgb(234,150,53)" fg:x="312" fg:w="1"/><text x="22.0377%" y="559.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (1 samples, 0.07%)</title><rect x="21.7877%" y="533" width="0.0698%" height="15" fill="rgb(228,201,54)" fg:x="312" fg:w="1"/><text x="22.0377%" y="543.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (1 samples, 0.07%)</title><rect x="21.7877%" y="517" width="0.0698%" height="15" fill="rgb(222,22,37)" fg:x="312" fg:w="1"/><text x="22.0377%" y="527.50"></text></g><g><title>0x11000aeec (1 samples, 0.07%)</title><rect x="21.8575%" y="741" width="0.0698%" height="15" fill="rgb(237,53,32)" fg:x="313" fg:w="1"/><text x="22.1075%" y="751.50"></text></g><g><title>0x11000b878 (3 samples, 0.21%)</title><rect x="21.7877%" y="757" width="0.2095%" height="15" fill="rgb(233,25,53)" fg:x="312" fg:w="3"/><text x="22.0377%" y="767.50"></text></g><g><title>deno`Builtins_BaselineOutOfLinePrologue (1 samples, 0.07%)</title><rect x="21.9274%" y="741" width="0.0698%" height="15" fill="rgb(210,40,34)" fg:x="314" fg:w="1"/><text x="22.1774%" y="751.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.07%)</title><rect x="21.9274%" y="725" width="0.0698%" height="15" fill="rgb(241,220,44)" fg:x="314" fg:w="1"/><text x="22.1774%" y="735.50"></text></g><g><title>deno`v8::internal::Runtime_CompileOptimized (1 samples, 0.07%)</title><rect x="21.9274%" y="709" width="0.0698%" height="15" fill="rgb(235,28,35)" fg:x="314" fg:w="1"/><text x="22.1774%" y="719.50"></text></g><g><title>deno`v8::internal::Compiler::CompileOptimized(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.07%)</title><rect x="21.9274%" y="693" width="0.0698%" height="15" fill="rgb(210,56,17)" fg:x="314" fg:w="1"/><text x="22.1774%" y="703.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::GetOrCompileOptimized(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::ConcurrencyMode, v8::internal::CodeKind, v8::internal::BytecodeOffset, v8::internal:: (1 samples, 0.07%)</title><rect x="21.9274%" y="677" width="0.0698%" height="15" fill="rgb(224,130,29)" fg:x="314" fg:w="1"/><text x="22.1774%" y="687.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::PipelineCompilationJob(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle (1 samples, 0.07%)</title><rect x="21.9274%" y="661" width="0.0698%" height="15" fill="rgb(235,212,8)" fg:x="314" fg:w="1"/><text x="22.1774%" y="671.50"></text></g><g><title>deno`v8::internal::compiler::PipelineData::PipelineData (1 samples, 0.07%)</title><rect x="21.9274%" y="645" width="0.0698%" height="15" fill="rgb(223,33,50)" fg:x="314" fg:w="1"/><text x="22.1774%" y="655.50"></text></g><g><title>deno`v8::internal::compiler::JSHeapBroker::JSHeapBroker (1 samples, 0.07%)</title><rect x="21.9274%" y="629" width="0.0698%" height="15" fill="rgb(219,149,13)" fg:x="314" fg:w="1"/><text x="22.1774%" y="639.50"></text></g><g><title>deno`v8::internal::RootIndexMap::RootIndexMap (1 samples, 0.07%)</title><rect x="21.9274%" y="613" width="0.0698%" height="15" fill="rgb(250,156,29)" fg:x="314" fg:w="1"/><text x="22.1774%" y="623.50"></text></g><g><title>deno`v8::base::TemplateHashMapEntry&lt;unsigned long, unsigned int&gt;* v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert&lt;unsigned long, v8::base::TemplateHashMapEntry&lt;unsigned long, unsigned int&gt;* v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert&lt;v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert(unsigned long const&amp;, unsigned int)::&apos;lambda&apos;()&gt;(unsigned long const&amp;, unsigned int, v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert(unsigned long const&amp;, unsigned int)::&apos;lambda&apos;() const&amp;)::&apos;lambda&apos;(), v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert (1 samples, 0.07%)</title><rect x="21.9274%" y="597" width="0.0698%" height="15" fill="rgb(216,193,19)" fg:x="314" fg:w="1"/><text x="22.1774%" y="607.50"></text></g><g><title>deno`v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::Resize (1 samples, 0.07%)</title><rect x="21.9274%" y="581" width="0.0698%" height="15" fill="rgb(216,135,14)" fg:x="314" fg:w="1"/><text x="22.1774%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_20948 (1 samples, 0.07%)</title><rect x="21.9972%" y="613" width="0.0698%" height="15" fill="rgb(241,47,5)" fg:x="315" fg:w="1"/><text x="22.2472%" y="623.50"></text></g><g><title>deno`std::fs::File::try_clone (3 samples, 0.21%)</title><rect x="22.0670%" y="613" width="0.2095%" height="15" fill="rgb(233,42,35)" fg:x="316" fg:w="3"/><text x="22.3170%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (3 samples, 0.21%)</title><rect x="22.0670%" y="597" width="0.2095%" height="15" fill="rgb(231,13,6)" fg:x="316" fg:w="3"/><text x="22.3170%" y="607.50"></text></g><g><title>0x11000b6c0 (10 samples, 0.70%)</title><rect x="21.6480%" y="821" width="0.6983%" height="15" fill="rgb(207,181,40)" fg:x="310" fg:w="10"/><text x="21.8980%" y="831.50"></text></g><g><title>0x11000b564 (10 samples, 0.70%)</title><rect x="21.6480%" y="805" width="0.6983%" height="15" fill="rgb(254,173,49)" fg:x="310" fg:w="10"/><text x="21.8980%" y="815.50"></text></g><g><title>0x11000b43c (9 samples, 0.63%)</title><rect x="21.7179%" y="789" width="0.6285%" height="15" fill="rgb(221,1,38)" fg:x="311" fg:w="9"/><text x="21.9679%" y="799.50"></text></g><g><title>0x11000b314 (8 samples, 0.56%)</title><rect x="21.7877%" y="773" width="0.5587%" height="15" fill="rgb(206,124,46)" fg:x="312" fg:w="8"/><text x="22.0377%" y="783.50"></text></g><g><title>0x11000b8b8 (5 samples, 0.35%)</title><rect x="21.9972%" y="757" width="0.3492%" height="15" fill="rgb(249,21,11)" fg:x="315" fg:w="5"/><text x="22.2472%" y="767.50"></text></g><g><title>0x11000b188 (5 samples, 0.35%)</title><rect x="21.9972%" y="741" width="0.3492%" height="15" fill="rgb(222,201,40)" fg:x="315" fg:w="5"/><text x="22.2472%" y="751.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (5 samples, 0.35%)</title><rect x="21.9972%" y="725" width="0.3492%" height="15" fill="rgb(235,61,29)" fg:x="315" fg:w="5"/><text x="22.2472%" y="735.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (5 samples, 0.35%)</title><rect x="21.9972%" y="709" width="0.3492%" height="15" fill="rgb(219,207,3)" fg:x="315" fg:w="5"/><text x="22.2472%" y="719.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (5 samples, 0.35%)</title><rect x="21.9972%" y="693" width="0.3492%" height="15" fill="rgb(222,56,46)" fg:x="315" fg:w="5"/><text x="22.2472%" y="703.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (5 samples, 0.35%)</title><rect x="21.9972%" y="677" width="0.3492%" height="15" fill="rgb(239,76,54)" fg:x="315" fg:w="5"/><text x="22.2472%" y="687.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.35%)</title><rect x="21.9972%" y="661" width="0.3492%" height="15" fill="rgb(231,124,27)" fg:x="315" fg:w="5"/><text x="22.2472%" y="671.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.35%)</title><rect x="21.9972%" y="645" width="0.3492%" height="15" fill="rgb(249,195,6)" fg:x="315" fg:w="5"/><text x="22.2472%" y="655.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5 samples, 0.35%)</title><rect x="21.9972%" y="629" width="0.3492%" height="15" fill="rgb(237,174,47)" fg:x="315" fg:w="5"/><text x="22.2472%" y="639.50"></text></g><g><title>deno`tokio::runtime::blocking::pool::Spawner::spawn (1 samples, 0.07%)</title><rect x="22.2765%" y="613" width="0.0698%" height="15" fill="rgb(206,201,31)" fg:x="319" fg:w="1"/><text x="22.5265%" y="623.50"></text></g><g><title>deno`parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.07%)</title><rect x="22.2765%" y="597" width="0.0698%" height="15" fill="rgb(231,57,52)" fg:x="319" fg:w="1"/><text x="22.5265%" y="607.50"></text></g><g><title>deno`&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (1 samples, 0.07%)</title><rect x="22.2765%" y="581" width="0.0698%" height="15" fill="rgb(248,177,22)" fg:x="319" fg:w="1"/><text x="22.5265%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.07%)</title><rect x="22.2765%" y="565" width="0.0698%" height="15" fill="rgb(215,211,37)" fg:x="319" fg:w="1"/><text x="22.5265%" y="575.50"></text></g><g><title>0x11000d0a0 (1 samples, 0.07%)</title><rect x="22.3464%" y="821" width="0.0698%" height="15" fill="rgb(241,128,51)" fg:x="320" fg:w="1"/><text x="22.5964%" y="831.50"></text></g><g><title>deno`Builtins_CreateTypedArray (1 samples, 0.07%)</title><rect x="22.3464%" y="805" width="0.0698%" height="15" fill="rgb(227,165,31)" fg:x="320" fg:w="1"/><text x="22.5964%" y="815.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.07%)</title><rect x="22.3464%" y="789" width="0.0698%" height="15" fill="rgb(228,167,24)" fg:x="320" fg:w="1"/><text x="22.5964%" y="799.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.07%)</title><rect x="22.3464%" y="773" width="0.0698%" height="15" fill="rgb(228,143,12)" fg:x="320" fg:w="1"/><text x="22.5964%" y="783.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (1 samples, 0.07%)</title><rect x="22.3464%" y="757" width="0.0698%" height="15" fill="rgb(249,149,8)" fg:x="320" fg:w="1"/><text x="22.5964%" y="767.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.07%)</title><rect x="22.3464%" y="741" width="0.0698%" height="15" fill="rgb(243,35,44)" fg:x="320" fg:w="1"/><text x="22.5964%" y="751.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Attach(std::__1::shared_ptr (1 samples, 0.07%)</title><rect x="22.3464%" y="725" width="0.0698%" height="15" fill="rgb(246,89,9)" fg:x="320" fg:w="1"/><text x="22.5964%" y="735.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (1 samples, 0.07%)</title><rect x="22.3464%" y="709" width="0.0698%" height="15" fill="rgb(233,213,13)" fg:x="320" fg:w="1"/><text x="22.5964%" y="719.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (1 samples, 0.07%)</title><rect x="22.3464%" y="693" width="0.0698%" height="15" fill="rgb(233,141,41)" fg:x="320" fg:w="1"/><text x="22.5964%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="22.3464%" y="677" width="0.0698%" height="15" fill="rgb(239,167,4)" fg:x="320" fg:w="1"/><text x="22.5964%" y="687.50"></text></g><g><title>deno`std::fs::File::try_clone (1 samples, 0.07%)</title><rect x="22.4860%" y="741" width="0.0698%" height="15" fill="rgb(209,217,16)" fg:x="322" fg:w="1"/><text x="22.7360%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (1 samples, 0.07%)</title><rect x="22.4860%" y="725" width="0.0698%" height="15" fill="rgb(219,88,35)" fg:x="322" fg:w="1"/><text x="22.7360%" y="735.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.28%)</title><rect x="22.4860%" y="789" width="0.2793%" height="15" fill="rgb(220,193,23)" fg:x="322" fg:w="4"/><text x="22.7360%" y="799.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.28%)</title><rect x="22.4860%" y="773" width="0.2793%" height="15" fill="rgb(230,90,52)" fg:x="322" fg:w="4"/><text x="22.7360%" y="783.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.28%)</title><rect x="22.4860%" y="757" width="0.2793%" height="15" fill="rgb(252,106,19)" fg:x="322" fg:w="4"/><text x="22.7360%" y="767.50"></text></g><g><title>deno`tokio::runtime::blocking::pool::Spawner::spawn (3 samples, 0.21%)</title><rect x="22.5559%" y="741" width="0.2095%" height="15" fill="rgb(206,74,20)" fg:x="323" fg:w="3"/><text x="22.8059%" y="751.50"></text></g><g><title>deno`parking_lot::raw_mutex::RawMutex::unlock_slow (3 samples, 0.21%)</title><rect x="22.5559%" y="725" width="0.2095%" height="15" fill="rgb(230,138,44)" fg:x="323" fg:w="3"/><text x="22.8059%" y="735.50"></text></g><g><title>deno`&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (3 samples, 0.21%)</title><rect x="22.5559%" y="709" width="0.2095%" height="15" fill="rgb(235,182,43)" fg:x="323" fg:w="3"/><text x="22.8059%" y="719.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.14%)</title><rect x="22.6257%" y="693" width="0.1397%" height="15" fill="rgb(242,16,51)" fg:x="324" fg:w="2"/><text x="22.8757%" y="703.50"></text></g><g><title>0x11000d464 (6 samples, 0.42%)</title><rect x="22.4162%" y="821" width="0.4190%" height="15" fill="rgb(248,9,4)" fg:x="321" fg:w="6"/><text x="22.6662%" y="831.50"></text></g><g><title>deno`deno_core::ops_builtin::func_op_write (6 samples, 0.42%)</title><rect x="22.4162%" y="805" width="0.4190%" height="15" fill="rgb(210,31,22)" fg:x="321" fg:w="6"/><text x="22.6662%" y="815.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (1 samples, 0.07%)</title><rect x="22.7654%" y="789" width="0.0698%" height="15" fill="rgb(239,54,39)" fg:x="326" fg:w="1"/><text x="23.0154%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="22.7654%" y="773" width="0.0698%" height="15" fill="rgb(230,99,41)" fg:x="326" fg:w="1"/><text x="23.0154%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="22.7654%" y="757" width="0.0698%" height="15" fill="rgb(253,106,12)" fg:x="326" fg:w="1"/><text x="23.0154%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="22.7654%" y="741" width="0.0698%" height="15" fill="rgb(213,46,41)" fg:x="326" fg:w="1"/><text x="23.0154%" y="751.50"></text></g><g><title>0x110009e9c (19 samples, 1.33%)</title><rect x="21.5782%" y="837" width="1.3268%" height="15" fill="rgb(215,133,35)" fg:x="309" fg:w="19"/><text x="21.8282%" y="847.50"></text></g><g><title>deno`Builtins_Construct (1 samples, 0.07%)</title><rect x="22.8352%" y="821" width="0.0698%" height="15" fill="rgb(213,28,5)" fg:x="327" fg:w="1"/><text x="23.0852%" y="831.50"></text></g><g><title>0x110009ed4 (1 samples, 0.07%)</title><rect x="22.9050%" y="837" width="0.0698%" height="15" fill="rgb(215,77,49)" fg:x="328" fg:w="1"/><text x="23.1550%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (1 samples, 0.07%)</title><rect x="22.9749%" y="693" width="0.0698%" height="15" fill="rgb(248,100,22)" fg:x="329" fg:w="1"/><text x="23.2249%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.07%)</title><rect x="23.0447%" y="677" width="0.0698%" height="15" fill="rgb(208,67,9)" fg:x="330" fg:w="1"/><text x="23.2947%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.07%)</title><rect x="23.1145%" y="677" width="0.0698%" height="15" fill="rgb(219,133,21)" fg:x="331" fg:w="1"/><text x="23.3645%" y="687.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (4 samples, 0.28%)</title><rect x="22.9749%" y="757" width="0.2793%" height="15" fill="rgb(246,46,29)" fg:x="329" fg:w="4"/><text x="23.2249%" y="767.50"></text></g><g><title>deno`v8::internal::BackingStore::Allocate (4 samples, 0.28%)</title><rect x="22.9749%" y="741" width="0.2793%" height="15" fill="rgb(246,185,52)" fg:x="329" fg:w="4"/><text x="23.2249%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::AllocateExternalBackingStore(std::__1::function&lt;void*  (4 samples, 0.28%)</title><rect x="22.9749%" y="725" width="0.2793%" height="15" fill="rgb(252,136,11)" fg:x="329" fg:w="4"/><text x="23.2249%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.28%)</title><rect x="22.9749%" y="709" width="0.2793%" height="15" fill="rgb(219,138,53)" fg:x="329" fg:w="4"/><text x="23.2249%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.21%)</title><rect x="23.0447%" y="693" width="0.2095%" height="15" fill="rgb(211,51,23)" fg:x="330" fg:w="3"/><text x="23.2947%" y="703.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.07%)</title><rect x="23.1844%" y="677" width="0.0698%" height="15" fill="rgb(247,221,28)" fg:x="332" fg:w="1"/><text x="23.4344%" y="687.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::Append (1 samples, 0.07%)</title><rect x="23.2542%" y="757" width="0.0698%" height="15" fill="rgb(251,222,45)" fg:x="333" fg:w="1"/><text x="23.5042%" y="767.50"></text></g><g><title>0x11000dd28 (6 samples, 0.42%)</title><rect x="22.9749%" y="837" width="0.4190%" height="15" fill="rgb(217,162,53)" fg:x="329" fg:w="6"/><text x="23.2249%" y="847.50"></text></g><g><title>deno`Builtins_CreateTypedArray (6 samples, 0.42%)</title><rect x="22.9749%" y="821" width="0.4190%" height="15" fill="rgb(229,93,14)" fg:x="329" fg:w="6"/><text x="23.2249%" y="831.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (6 samples, 0.42%)</title><rect x="22.9749%" y="805" width="0.4190%" height="15" fill="rgb(209,67,49)" fg:x="329" fg:w="6"/><text x="23.2249%" y="815.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (6 samples, 0.42%)</title><rect x="22.9749%" y="789" width="0.4190%" height="15" fill="rgb(213,87,29)" fg:x="329" fg:w="6"/><text x="23.2249%" y="799.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (6 samples, 0.42%)</title><rect x="22.9749%" y="773" width="0.4190%" height="15" fill="rgb(205,151,52)" fg:x="329" fg:w="6"/><text x="23.2249%" y="783.50"></text></g><g><title>deno`v8::internal::JSObject::New(v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle (1 samples, 0.07%)</title><rect x="23.3240%" y="757" width="0.0698%" height="15" fill="rgb(253,215,39)" fg:x="334" fg:w="1"/><text x="23.5740%" y="767.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.07%)</title><rect x="23.3939%" y="757" width="0.0698%" height="15" fill="rgb(221,220,41)" fg:x="335" fg:w="1"/><text x="23.6439%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="23.3939%" y="741" width="0.0698%" height="15" fill="rgb(218,133,21)" fg:x="335" fg:w="1"/><text x="23.6439%" y="751.50"></text></g><g><title>deno`std::fs::File::try_clone (2 samples, 0.14%)</title><rect x="23.4637%" y="757" width="0.1397%" height="15" fill="rgb(221,193,43)" fg:x="336" fg:w="2"/><text x="23.7137%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (2 samples, 0.14%)</title><rect x="23.4637%" y="741" width="0.1397%" height="15" fill="rgb(240,128,52)" fg:x="336" fg:w="2"/><text x="23.7137%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (5 samples, 0.35%)</title><rect x="23.6034%" y="709" width="0.3492%" height="15" fill="rgb(253,114,12)" fg:x="338" fg:w="5"/><text x="23.8534%" y="719.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.63%)</title><rect x="23.3939%" y="805" width="0.6285%" height="15" fill="rgb(215,223,47)" fg:x="335" fg:w="9"/><text x="23.6439%" y="815.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.63%)</title><rect x="23.3939%" y="789" width="0.6285%" height="15" fill="rgb(248,225,23)" fg:x="335" fg:w="9"/><text x="23.6439%" y="799.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.63%)</title><rect x="23.3939%" y="773" width="0.6285%" height="15" fill="rgb(250,108,0)" fg:x="335" fg:w="9"/><text x="23.6439%" y="783.50"></text></g><g><title>deno`tokio::runtime::blocking::pool::Spawner::spawn (6 samples, 0.42%)</title><rect x="23.6034%" y="757" width="0.4190%" height="15" fill="rgb(228,208,7)" fg:x="338" fg:w="6"/><text x="23.8534%" y="767.50"></text></g><g><title>deno`parking_lot::raw_mutex::RawMutex::unlock_slow (6 samples, 0.42%)</title><rect x="23.6034%" y="741" width="0.4190%" height="15" fill="rgb(244,45,10)" fg:x="338" fg:w="6"/><text x="23.8534%" y="751.50"></text></g><g><title>deno`&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (6 samples, 0.42%)</title><rect x="23.6034%" y="725" width="0.4190%" height="15" fill="rgb(207,125,25)" fg:x="338" fg:w="6"/><text x="23.8534%" y="735.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.07%)</title><rect x="23.9525%" y="709" width="0.0698%" height="15" fill="rgb(210,195,18)" fg:x="343" fg:w="1"/><text x="24.2025%" y="719.50"></text></g><g><title>0x11000e0f0 (10 samples, 0.70%)</title><rect x="23.3939%" y="837" width="0.6983%" height="15" fill="rgb(249,80,12)" fg:x="335" fg:w="10"/><text x="23.6439%" y="847.50"></text></g><g><title>deno`deno_core::ops_builtin::func_op_write (10 samples, 0.70%)</title><rect x="23.3939%" y="821" width="0.6983%" height="15" fill="rgb(221,65,9)" fg:x="335" fg:w="10"/><text x="23.6439%" y="831.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (1 samples, 0.07%)</title><rect x="24.0223%" y="805" width="0.0698%" height="15" fill="rgb(235,49,36)" fg:x="344" fg:w="1"/><text x="24.2723%" y="815.50"></text></g><g><title>0x11000e104 (1 samples, 0.07%)</title><rect x="24.0922%" y="837" width="0.0698%" height="15" fill="rgb(225,32,20)" fg:x="345" fg:w="1"/><text x="24.3422%" y="847.50"></text></g><g><title>0x11000e2d0 (1 samples, 0.07%)</title><rect x="24.1620%" y="837" width="0.0698%" height="15" fill="rgb(215,141,46)" fg:x="346" fg:w="1"/><text x="24.4120%" y="847.50"></text></g><g><title>0x11000e75c (1 samples, 0.07%)</title><rect x="24.2318%" y="837" width="0.0698%" height="15" fill="rgb(250,160,47)" fg:x="347" fg:w="1"/><text x="24.4818%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.07%)</title><rect x="24.2318%" y="821" width="0.0698%" height="15" fill="rgb(216,222,40)" fg:x="347" fg:w="1"/><text x="24.4818%" y="831.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.07%)</title><rect x="24.2318%" y="805" width="0.0698%" height="15" fill="rgb(234,217,39)" fg:x="347" fg:w="1"/><text x="24.4818%" y="815.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.07%)</title><rect x="24.2318%" y="789" width="0.0698%" height="15" fill="rgb(207,178,40)" fg:x="347" fg:w="1"/><text x="24.4818%" y="799.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.07%)</title><rect x="24.2318%" y="773" width="0.0698%" height="15" fill="rgb(221,136,13)" fg:x="347" fg:w="1"/><text x="24.4818%" y="783.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.07%)</title><rect x="24.2318%" y="757" width="0.0698%" height="15" fill="rgb(249,199,10)" fg:x="347" fg:w="1"/><text x="24.4818%" y="767.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.07%)</title><rect x="24.2318%" y="741" width="0.0698%" height="15" fill="rgb(249,222,13)" fg:x="347" fg:w="1"/><text x="24.4818%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.07%)</title><rect x="24.2318%" y="725" width="0.0698%" height="15" fill="rgb(244,185,38)" fg:x="347" fg:w="1"/><text x="24.4818%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.07%)</title><rect x="24.2318%" y="709" width="0.0698%" height="15" fill="rgb(236,202,9)" fg:x="347" fg:w="1"/><text x="24.4818%" y="719.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.07%)</title><rect x="24.2318%" y="693" width="0.0698%" height="15" fill="rgb(250,229,37)" fg:x="347" fg:w="1"/><text x="24.4818%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.07%)</title><rect x="24.2318%" y="677" width="0.0698%" height="15" fill="rgb(206,174,23)" fg:x="347" fg:w="1"/><text x="24.4818%" y="687.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointers (1 samples, 0.07%)</title><rect x="24.2318%" y="661" width="0.0698%" height="15" fill="rgb(211,33,43)" fg:x="347" fg:w="1"/><text x="24.4818%" y="671.50"></text></g><g><title>0x11000f384 (1 samples, 0.07%)</title><rect x="24.3017%" y="837" width="0.0698%" height="15" fill="rgb(245,58,50)" fg:x="348" fg:w="1"/><text x="24.5517%" y="847.50"></text></g><g><title>deno`Builtins_ConstructFunction (1 samples, 0.07%)</title><rect x="24.3715%" y="821" width="0.0698%" height="15" fill="rgb(244,68,36)" fg:x="349" fg:w="1"/><text x="24.6215%" y="831.50"></text></g><g><title>deno`operator new(unsigned long) (3 samples, 0.21%)</title><rect x="24.9302%" y="741" width="0.2095%" height="15" fill="rgb(232,229,15)" fg:x="357" fg:w="3"/><text x="25.1802%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.21%)</title><rect x="24.9302%" y="725" width="0.2095%" height="15" fill="rgb(254,30,23)" fg:x="357" fg:w="3"/><text x="25.1802%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="25.0698%" y="709" width="0.0698%" height="15" fill="rgb(235,160,14)" fg:x="359" fg:w="1"/><text x="25.3198%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="25.0698%" y="693" width="0.0698%" height="15" fill="rgb(212,155,44)" fg:x="359" fg:w="1"/><text x="25.3198%" y="703.50"></text></g><g><title>deno`operator new(unsigned long) (3 samples, 0.21%)</title><rect x="25.3492%" y="725" width="0.2095%" height="15" fill="rgb(226,2,50)" fg:x="363" fg:w="3"/><text x="25.5992%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="25.4190%" y="709" width="0.1397%" height="15" fill="rgb(234,177,6)" fg:x="364" fg:w="2"/><text x="25.6690%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="25.4888%" y="693" width="0.0698%" height="15" fill="rgb(217,24,9)" fg:x="365" fg:w="1"/><text x="25.7388%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="25.4888%" y="677" width="0.0698%" height="15" fill="rgb(220,13,46)" fg:x="365" fg:w="1"/><text x="25.7388%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (3 samples, 0.21%)</title><rect x="25.5587%" y="693" width="0.2095%" height="15" fill="rgb(239,221,27)" fg:x="366" fg:w="3"/><text x="25.8087%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.07%)</title><rect x="25.8380%" y="661" width="0.0698%" height="15" fill="rgb(222,198,25)" fg:x="370" fg:w="1"/><text x="26.0880%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.07%)</title><rect x="25.9777%" y="645" width="0.0698%" height="15" fill="rgb(211,99,13)" fg:x="372" fg:w="1"/><text x="26.2277%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (4 samples, 0.28%)</title><rect x="26.0475%" y="645" width="0.2793%" height="15" fill="rgb(232,111,31)" fg:x="373" fg:w="4"/><text x="26.2975%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (13 samples, 0.91%)</title><rect x="25.5587%" y="709" width="0.9078%" height="15" fill="rgb(245,82,37)" fg:x="366" fg:w="13"/><text x="25.8087%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.70%)</title><rect x="25.7682%" y="693" width="0.6983%" height="15" fill="rgb(227,149,46)" fg:x="369" fg:w="10"/><text x="26.0182%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.70%)</title><rect x="25.7682%" y="677" width="0.6983%" height="15" fill="rgb(218,36,50)" fg:x="369" fg:w="10"/><text x="26.0182%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.56%)</title><rect x="25.9078%" y="661" width="0.5587%" height="15" fill="rgb(226,80,48)" fg:x="371" fg:w="8"/><text x="26.1578%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.14%)</title><rect x="26.3268%" y="645" width="0.1397%" height="15" fill="rgb(238,224,15)" fg:x="377" fg:w="2"/><text x="26.5768%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::AllocateExternalBackingStore(std::__1::function&lt;void*  (16 samples, 1.12%)</title><rect x="25.5587%" y="725" width="1.1173%" height="15" fill="rgb(241,136,10)" fg:x="366" fg:w="16"/><text x="25.8087%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (3 samples, 0.21%)</title><rect x="26.4665%" y="709" width="0.2095%" height="15" fill="rgb(208,32,45)" fg:x="379" fg:w="3"/><text x="26.7165%" y="719.50"></text></g><g><title>deno`v8::internal::Heap::YoungArrayBufferBytes (1 samples, 0.07%)</title><rect x="26.6760%" y="725" width="0.0698%" height="15" fill="rgb(207,135,9)" fg:x="382" fg:w="1"/><text x="26.9260%" y="735.50"></text></g><g><title>deno`v8::internal::BackingStore::Allocate (25 samples, 1.75%)</title><rect x="25.1397%" y="741" width="1.7458%" height="15" fill="rgb(206,86,44)" fg:x="360" fg:w="25"/><text x="25.3897%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.14%)</title><rect x="26.7458%" y="725" width="0.1397%" height="15" fill="rgb(245,177,15)" fg:x="383" fg:w="2"/><text x="26.9958%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (1 samples, 0.07%)</title><rect x="26.8855%" y="741" width="0.0698%" height="15" fill="rgb(206,64,50)" fg:x="385" fg:w="1"/><text x="27.1355%" y="751.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (2 samples, 0.14%)</title><rect x="26.9553%" y="725" width="0.1397%" height="15" fill="rgb(234,36,40)" fg:x="386" fg:w="2"/><text x="27.2053%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (3 samples, 0.21%)</title><rect x="27.0950%" y="725" width="0.2095%" height="15" fill="rgb(213,64,8)" fg:x="388" fg:w="3"/><text x="27.3450%" y="735.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (3 samples, 0.21%)</title><rect x="27.0950%" y="709" width="0.2095%" height="15" fill="rgb(210,75,36)" fg:x="388" fg:w="3"/><text x="27.3450%" y="719.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectFromMap (2 samples, 0.14%)</title><rect x="27.3045%" y="725" width="0.1397%" height="15" fill="rgb(229,88,21)" fg:x="391" fg:w="2"/><text x="27.5545%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObjectFromMap(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (8 samples, 0.56%)</title><rect x="26.9553%" y="741" width="0.5587%" height="15" fill="rgb(252,204,47)" fg:x="386" fg:w="8"/><text x="27.2053%" y="751.50"></text></g><g><title>deno`v8::internal::ReadOnlyRoots::one_pointer_filler_map_word (1 samples, 0.07%)</title><rect x="27.4441%" y="725" width="0.0698%" height="15" fill="rgb(208,77,27)" fg:x="393" fg:w="1"/><text x="27.6941%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::AllocateExternalBackingStore(std::__1::function&lt;void* (1 samples, 0.07%)</title><rect x="27.5140%" y="741" width="0.0698%" height="15" fill="rgb(221,76,26)" fg:x="394" fg:w="1"/><text x="27.7640%" y="751.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Attach(std::__1::shared_ptr (2 samples, 0.14%)</title><rect x="27.5838%" y="741" width="0.1397%" height="15" fill="rgb(225,139,18)" fg:x="395" fg:w="2"/><text x="27.8338%" y="751.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (1 samples, 0.07%)</title><rect x="27.6536%" y="725" width="0.0698%" height="15" fill="rgb(230,137,11)" fg:x="396" fg:w="1"/><text x="27.9036%" y="735.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (1 samples, 0.07%)</title><rect x="27.7235%" y="741" width="0.0698%" height="15" fill="rgb(212,28,1)" fg:x="397" fg:w="1"/><text x="27.9735%" y="751.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (42 samples, 2.93%)</title><rect x="24.9302%" y="757" width="2.9330%" height="15" fill="rgb(248,164,17)" fg:x="357" fg:w="42"/><text x="25.1802%" y="767.50">de..</text></g><g><title>deno`v8::internal::JSArrayBuffer::Setup(v8::internal::SharedFlag, v8::internal::ResizableFlag, std::__1::shared_ptr (1 samples, 0.07%)</title><rect x="27.7933%" y="741" width="0.0698%" height="15" fill="rgb(222,171,42)" fg:x="398" fg:w="1"/><text x="28.0433%" y="751.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::Append (1 samples, 0.07%)</title><rect x="27.8631%" y="757" width="0.0698%" height="15" fill="rgb(243,84,45)" fg:x="399" fg:w="1"/><text x="28.1131%" y="767.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObjectFromMap(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (1 samples, 0.07%)</title><rect x="27.9330%" y="757" width="0.0698%" height="15" fill="rgb(252,49,23)" fg:x="400" fg:w="1"/><text x="28.1830%" y="767.50"></text></g><g><title>deno`v8::internal::Heap::AppendArrayBufferExtension (1 samples, 0.07%)</title><rect x="28.0028%" y="757" width="0.0698%" height="15" fill="rgb(215,19,7)" fg:x="401" fg:w="1"/><text x="28.2528%" y="767.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Setup(v8::internal::SharedFlag, v8::internal::ResizableFlag, std::__1::shared_ptr (1 samples, 0.07%)</title><rect x="28.0726%" y="757" width="0.0698%" height="15" fill="rgb(238,81,41)" fg:x="402" fg:w="1"/><text x="28.3226%" y="767.50"></text></g><g><title>0x11000f760 (56 samples, 3.91%)</title><rect x="24.3715%" y="837" width="3.9106%" height="15" fill="rgb(210,199,37)" fg:x="349" fg:w="56"/><text x="24.6215%" y="847.50">0x11..</text></g><g><title>deno`Builtins_CreateTypedArray (55 samples, 3.84%)</title><rect x="24.4413%" y="821" width="3.8408%" height="15" fill="rgb(244,192,49)" fg:x="350" fg:w="55"/><text x="24.6913%" y="831.50">deno..</text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (49 samples, 3.42%)</title><rect x="24.8603%" y="805" width="3.4218%" height="15" fill="rgb(226,211,11)" fg:x="356" fg:w="49"/><text x="25.1103%" y="815.50">den..</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (49 samples, 3.42%)</title><rect x="24.8603%" y="789" width="3.4218%" height="15" fill="rgb(236,162,54)" fg:x="356" fg:w="49"/><text x="25.1103%" y="799.50">den..</text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (48 samples, 3.35%)</title><rect x="24.9302%" y="773" width="3.3520%" height="15" fill="rgb(220,229,9)" fg:x="357" fg:w="48"/><text x="25.1802%" y="783.50">den..</text></g><g><title>deno`v8::internal::JSObject::New(v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle (2 samples, 0.14%)</title><rect x="28.1425%" y="757" width="0.1397%" height="15" fill="rgb(250,87,22)" fg:x="403" fg:w="2"/><text x="28.3925%" y="767.50"></text></g><g><title>0x11000f93c (1 samples, 0.07%)</title><rect x="28.2821%" y="837" width="0.0698%" height="15" fill="rgb(239,43,17)" fg:x="405" fg:w="1"/><text x="28.5321%" y="847.50"></text></g><g><title>0x11000f9cc (1 samples, 0.07%)</title><rect x="28.3520%" y="837" width="0.0698%" height="15" fill="rgb(231,177,25)" fg:x="406" fg:w="1"/><text x="28.6020%" y="847.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 0.07%)</title><rect x="29.1899%" y="741" width="0.0698%" height="15" fill="rgb(219,179,1)" fg:x="418" fg:w="1"/><text x="29.4399%" y="751.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.28%)</title><rect x="29.0503%" y="757" width="0.2793%" height="15" fill="rgb(238,219,53)" fg:x="416" fg:w="4"/><text x="29.3003%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="29.2598%" y="741" width="0.0698%" height="15" fill="rgb(232,167,36)" fg:x="419" fg:w="1"/><text x="29.5098%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="29.2598%" y="725" width="0.0698%" height="15" fill="rgb(244,19,51)" fg:x="419" fg:w="1"/><text x="29.5098%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.07%)</title><rect x="29.2598%" y="709" width="0.0698%" height="15" fill="rgb(224,6,22)" fg:x="419" fg:w="1"/><text x="29.5098%" y="719.50"></text></g><g><title>deno`OUTLINED_FUNCTION_20948 (1 samples, 0.07%)</title><rect x="29.3296%" y="757" width="0.0698%" height="15" fill="rgb(224,145,5)" fg:x="420" fg:w="1"/><text x="29.5796%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (30 samples, 2.09%)</title><rect x="29.3994%" y="741" width="2.0950%" height="15" fill="rgb(234,130,49)" fg:x="421" fg:w="30"/><text x="29.6494%" y="751.50">l..</text></g><g><title>deno`std::fs::File::try_clone (31 samples, 2.16%)</title><rect x="29.3994%" y="757" width="2.1648%" height="15" fill="rgb(254,6,2)" fg:x="421" fg:w="31"/><text x="29.6494%" y="767.50">d..</text></g><g><title>libsystem_kernel.dylib`fcntl (1 samples, 0.07%)</title><rect x="31.4944%" y="741" width="0.0698%" height="15" fill="rgb(208,96,46)" fg:x="451" fg:w="1"/><text x="31.7444%" y="751.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_lock (2 samples, 0.14%)</title><rect x="31.6341%" y="741" width="0.1397%" height="15" fill="rgb(239,3,39)" fg:x="453" fg:w="2"/><text x="31.8841%" y="751.50"></text></g><g><title>deno`OUTLINED_FUNCTION_26402 (1 samples, 0.07%)</title><rect x="31.7737%" y="741" width="0.0698%" height="15" fill="rgb(233,210,1)" fg:x="455" fg:w="1"/><text x="32.0237%" y="751.50"></text></g><g><title>deno`OUTLINED_FUNCTION_29760 (1 samples, 0.07%)</title><rect x="31.8436%" y="741" width="0.0698%" height="15" fill="rgb(244,137,37)" fg:x="456" fg:w="1"/><text x="32.0936%" y="751.50"></text></g><g><title>deno`OUTLINED_FUNCTION_30055 (1 samples, 0.07%)</title><rect x="31.9134%" y="741" width="0.0698%" height="15" fill="rgb(240,136,2)" fg:x="457" fg:w="1"/><text x="32.1634%" y="751.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3055 (1 samples, 0.07%)</title><rect x="31.9832%" y="741" width="0.0698%" height="15" fill="rgb(239,18,37)" fg:x="458" fg:w="1"/><text x="32.2332%" y="751.50"></text></g><g><title>deno`parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.07%)</title><rect x="32.0531%" y="741" width="0.0698%" height="15" fill="rgb(218,185,22)" fg:x="459" fg:w="1"/><text x="32.3031%" y="751.50"></text></g><g><title>deno`parking_lot_core::word_lock::WordLock::lock (1 samples, 0.07%)</title><rect x="32.0531%" y="725" width="0.0698%" height="15" fill="rgb(225,218,4)" fg:x="459" fg:w="1"/><text x="32.3031%" y="735.50"></text></g><g><title>deno`&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (67 samples, 4.68%)</title><rect x="32.1229%" y="725" width="4.6788%" height="15" fill="rgb(230,182,32)" fg:x="460" fg:w="67"/><text x="32.3729%" y="735.50">deno`..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (67 samples, 4.68%)</title><rect x="32.1229%" y="709" width="4.6788%" height="15" fill="rgb(242,56,43)" fg:x="460" fg:w="67"/><text x="32.3729%" y="719.50">libsy..</text></g><g><title>deno`parking_lot_core::parking_lot::lock_bucket (2 samples, 0.14%)</title><rect x="36.8017%" y="725" width="0.1397%" height="15" fill="rgb(233,99,24)" fg:x="527" fg:w="2"/><text x="37.0517%" y="735.50"></text></g><g><title>deno`parking_lot_core::word_lock::WordLock::lock (2 samples, 0.14%)</title><rect x="36.9413%" y="725" width="0.1397%" height="15" fill="rgb(234,209,42)" fg:x="529" fg:w="2"/><text x="37.1913%" y="735.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.07%)</title><rect x="37.0810%" y="725" width="0.0698%" height="15" fill="rgb(227,7,12)" fg:x="531" fg:w="1"/><text x="37.3310%" y="735.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.07%)</title><rect x="37.1508%" y="725" width="0.0698%" height="15" fill="rgb(245,203,43)" fg:x="532" fg:w="1"/><text x="37.4008%" y="735.50"></text></g><g><title>deno`tokio::runtime::blocking::pool::Spawner::spawn (82 samples, 5.73%)</title><rect x="31.5642%" y="757" width="5.7263%" height="15" fill="rgb(238,205,33)" fg:x="452" fg:w="82"/><text x="31.8142%" y="767.50">deno`to..</text></g><g><title>deno`parking_lot::raw_mutex::RawMutex::unlock_slow (74 samples, 5.17%)</title><rect x="32.1229%" y="741" width="5.1676%" height="15" fill="rgb(231,56,7)" fg:x="460" fg:w="74"/><text x="32.3729%" y="751.50">deno`p..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.07%)</title><rect x="37.2207%" y="725" width="0.0698%" height="15" fill="rgb(244,186,29)" fg:x="533" fg:w="1"/><text x="37.4707%" y="735.50"></text></g><g><title>deno`tokio::runtime::task::raw::try_read_output (1 samples, 0.07%)</title><rect x="37.2905%" y="757" width="0.0698%" height="15" fill="rgb(234,111,31)" fg:x="534" fg:w="1"/><text x="37.5405%" y="767.50"></text></g><g><title>deno`tokio::runtime::task::harness::can_read_output (1 samples, 0.07%)</title><rect x="37.2905%" y="741" width="0.0698%" height="15" fill="rgb(241,149,10)" fg:x="534" fg:w="1"/><text x="37.5405%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="37.3603%" y="757" width="0.0698%" height="15" fill="rgb(249,206,44)" fg:x="535" fg:w="1"/><text x="37.6103%" y="767.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (123 samples, 8.59%)</title><rect x="28.9106%" y="773" width="8.5894%" height="15" fill="rgb(251,153,30)" fg:x="414" fg:w="123"/><text x="29.1606%" y="783.50">deno`&lt;core::..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="37.4302%" y="757" width="0.0698%" height="15" fill="rgb(239,152,38)" fg:x="536" fg:w="1"/><text x="37.6802%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="37.7793%" y="757" width="0.0698%" height="15" fill="rgb(249,139,47)" fg:x="541" fg:w="1"/><text x="38.0293%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="37.7793%" y="741" width="0.0698%" height="15" fill="rgb(244,64,35)" fg:x="541" fg:w="1"/><text x="38.0293%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="37.7793%" y="725" width="0.0698%" height="15" fill="rgb(216,46,15)" fg:x="541" fg:w="1"/><text x="38.0293%" y="735.50"></text></g><g><title>deno`&lt;deno_runtime::ops::io::StdFileResource as deno_core::resources::Resource&gt;::write (7 samples, 0.49%)</title><rect x="37.5000%" y="773" width="0.4888%" height="15" fill="rgb(250,74,19)" fg:x="537" fg:w="7"/><text x="37.7500%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.14%)</title><rect x="37.8492%" y="757" width="0.1397%" height="15" fill="rgb(249,42,33)" fg:x="542" fg:w="2"/><text x="38.0992%" y="767.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (134 samples, 9.36%)</title><rect x="28.7011%" y="805" width="9.3575%" height="15" fill="rgb(242,149,17)" fg:x="411" fg:w="134"/><text x="28.9511%" y="815.50">deno`&lt;core::f..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (133 samples, 9.29%)</title><rect x="28.7709%" y="789" width="9.2877%" height="15" fill="rgb(244,29,21)" fg:x="412" fg:w="133"/><text x="29.0209%" y="799.50">deno`&lt;core::f..</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="37.9888%" y="773" width="0.0698%" height="15" fill="rgb(220,130,37)" fg:x="544" fg:w="1"/><text x="38.2388%" y="783.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.07%)</title><rect x="38.0587%" y="805" width="0.0698%" height="15" fill="rgb(211,67,2)" fg:x="545" fg:w="1"/><text x="38.3087%" y="815.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.07%)</title><rect x="38.0587%" y="789" width="0.0698%" height="15" fill="rgb(235,68,52)" fg:x="545" fg:w="1"/><text x="38.3087%" y="799.50"></text></g><g><title>deno`deno_core::ops_builtin::func_op_write (141 samples, 9.85%)</title><rect x="28.4218%" y="821" width="9.8464%" height="15" fill="rgb(246,142,3)" fg:x="407" fg:w="141"/><text x="28.6718%" y="831.50">deno`deno_core..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.14%)</title><rect x="38.1285%" y="805" width="0.1397%" height="15" fill="rgb(241,25,7)" fg:x="546" fg:w="2"/><text x="38.3785%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.07%)</title><rect x="38.1983%" y="789" width="0.0698%" height="15" fill="rgb(242,119,39)" fg:x="547" fg:w="1"/><text x="38.4483%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.07%)</title><rect x="38.1983%" y="773" width="0.0698%" height="15" fill="rgb(241,98,45)" fg:x="547" fg:w="1"/><text x="38.4483%" y="783.50"></text></g><g><title>0x11000fb28 (142 samples, 9.92%)</title><rect x="28.4218%" y="837" width="9.9162%" height="15" fill="rgb(254,28,30)" fg:x="407" fg:w="142"/><text x="28.6718%" y="847.50">0x11000fb28</text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (1 samples, 0.07%)</title><rect x="38.2682%" y="821" width="0.0698%" height="15" fill="rgb(241,142,54)" fg:x="548" fg:w="1"/><text x="38.5182%" y="831.50"></text></g><g><title>0x11000fbec (1 samples, 0.07%)</title><rect x="38.3380%" y="837" width="0.0698%" height="15" fill="rgb(222,85,15)" fg:x="549" fg:w="1"/><text x="38.5880%" y="847.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (1 samples, 0.07%)</title><rect x="38.3380%" y="821" width="0.0698%" height="15" fill="rgb(210,85,47)" fg:x="549" fg:w="1"/><text x="38.5880%" y="831.50"></text></g><g><title>0x11000fc9c (1 samples, 0.07%)</title><rect x="38.4078%" y="837" width="0.0698%" height="15" fill="rgb(224,206,25)" fg:x="550" fg:w="1"/><text x="38.6578%" y="847.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (1 samples, 0.07%)</title><rect x="38.4078%" y="821" width="0.0698%" height="15" fill="rgb(243,201,19)" fg:x="550" fg:w="1"/><text x="38.6578%" y="831.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.07%)</title><rect x="38.4078%" y="805" width="0.0698%" height="15" fill="rgb(236,59,4)" fg:x="550" fg:w="1"/><text x="38.6578%" y="815.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.07%)</title><rect x="38.4078%" y="789" width="0.0698%" height="15" fill="rgb(254,179,45)" fg:x="550" fg:w="1"/><text x="38.6578%" y="799.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.07%)</title><rect x="38.4078%" y="773" width="0.0698%" height="15" fill="rgb(226,14,10)" fg:x="550" fg:w="1"/><text x="38.6578%" y="783.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.07%)</title><rect x="38.4078%" y="757" width="0.0698%" height="15" fill="rgb(244,27,41)" fg:x="550" fg:w="1"/><text x="38.6578%" y="767.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.07%)</title><rect x="38.4078%" y="741" width="0.0698%" height="15" fill="rgb(235,35,32)" fg:x="550" fg:w="1"/><text x="38.6578%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.07%)</title><rect x="38.4078%" y="725" width="0.0698%" height="15" fill="rgb(218,68,31)" fg:x="550" fg:w="1"/><text x="38.6578%" y="735.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (1 samples, 0.07%)</title><rect x="38.4078%" y="709" width="0.0698%" height="15" fill="rgb(207,120,37)" fg:x="550" fg:w="1"/><text x="38.6578%" y="719.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (1 samples, 0.07%)</title><rect x="38.4078%" y="693" width="0.0698%" height="15" fill="rgb(227,98,0)" fg:x="550" fg:w="1"/><text x="38.6578%" y="703.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (1 samples, 0.07%)</title><rect x="38.4078%" y="677" width="0.0698%" height="15" fill="rgb(207,7,3)" fg:x="550" fg:w="1"/><text x="38.6578%" y="687.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (1 samples, 0.07%)</title><rect x="38.4078%" y="661" width="0.0698%" height="15" fill="rgb(206,98,19)" fg:x="550" fg:w="1"/><text x="38.6578%" y="671.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.07%)</title><rect x="38.4078%" y="645" width="0.0698%" height="15" fill="rgb(217,5,26)" fg:x="550" fg:w="1"/><text x="38.6578%" y="655.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.07%)</title><rect x="38.4078%" y="629" width="0.0698%" height="15" fill="rgb(235,190,38)" fg:x="550" fg:w="1"/><text x="38.6578%" y="639.50"></text></g><g><title>0x11000ffe8 (1 samples, 0.07%)</title><rect x="38.4777%" y="837" width="0.0698%" height="15" fill="rgb(247,86,24)" fg:x="551" fg:w="1"/><text x="38.7277%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.07%)</title><rect x="38.4777%" y="821" width="0.0698%" height="15" fill="rgb(205,101,16)" fg:x="551" fg:w="1"/><text x="38.7277%" y="831.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.07%)</title><rect x="38.4777%" y="805" width="0.0698%" height="15" fill="rgb(246,168,33)" fg:x="551" fg:w="1"/><text x="38.7277%" y="815.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.07%)</title><rect x="38.4777%" y="789" width="0.0698%" height="15" fill="rgb(231,114,1)" fg:x="551" fg:w="1"/><text x="38.7277%" y="799.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.07%)</title><rect x="38.4777%" y="773" width="0.0698%" height="15" fill="rgb(207,184,53)" fg:x="551" fg:w="1"/><text x="38.7277%" y="783.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.07%)</title><rect x="38.4777%" y="757" width="0.0698%" height="15" fill="rgb(224,95,51)" fg:x="551" fg:w="1"/><text x="38.7277%" y="767.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.07%)</title><rect x="38.4777%" y="741" width="0.0698%" height="15" fill="rgb(212,188,45)" fg:x="551" fg:w="1"/><text x="38.7277%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.07%)</title><rect x="38.4777%" y="725" width="0.0698%" height="15" fill="rgb(223,154,38)" fg:x="551" fg:w="1"/><text x="38.7277%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.07%)</title><rect x="38.4777%" y="709" width="0.0698%" height="15" fill="rgb(251,22,52)" fg:x="551" fg:w="1"/><text x="38.7277%" y="719.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.07%)</title><rect x="38.4777%" y="693" width="0.0698%" height="15" fill="rgb(229,209,22)" fg:x="551" fg:w="1"/><text x="38.7277%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.07%)</title><rect x="38.4777%" y="677" width="0.0698%" height="15" fill="rgb(234,138,34)" fg:x="551" fg:w="1"/><text x="38.7277%" y="687.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (1 samples, 0.07%)</title><rect x="38.4777%" y="661" width="0.0698%" height="15" fill="rgb(212,95,11)" fg:x="551" fg:w="1"/><text x="38.7277%" y="671.50"></text></g><g><title>0x110010018 (1 samples, 0.07%)</title><rect x="38.5475%" y="837" width="0.0698%" height="15" fill="rgb(240,179,47)" fg:x="552" fg:w="1"/><text x="38.7975%" y="847.50"></text></g><g><title>0x110010028 (1 samples, 0.07%)</title><rect x="38.6173%" y="837" width="0.0698%" height="15" fill="rgb(240,163,11)" fg:x="553" fg:w="1"/><text x="38.8673%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.07%)</title><rect x="38.6173%" y="821" width="0.0698%" height="15" fill="rgb(236,37,12)" fg:x="553" fg:w="1"/><text x="38.8673%" y="831.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.07%)</title><rect x="38.6173%" y="805" width="0.0698%" height="15" fill="rgb(232,164,16)" fg:x="553" fg:w="1"/><text x="38.8673%" y="815.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.07%)</title><rect x="38.6173%" y="789" width="0.0698%" height="15" fill="rgb(244,205,15)" fg:x="553" fg:w="1"/><text x="38.8673%" y="799.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.07%)</title><rect x="38.6173%" y="773" width="0.0698%" height="15" fill="rgb(223,117,47)" fg:x="553" fg:w="1"/><text x="38.8673%" y="783.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.07%)</title><rect x="38.6173%" y="757" width="0.0698%" height="15" fill="rgb(244,107,35)" fg:x="553" fg:w="1"/><text x="38.8673%" y="767.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.07%)</title><rect x="38.6173%" y="741" width="0.0698%" height="15" fill="rgb(205,140,8)" fg:x="553" fg:w="1"/><text x="38.8673%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.07%)</title><rect x="38.6173%" y="725" width="0.0698%" height="15" fill="rgb(228,84,46)" fg:x="553" fg:w="1"/><text x="38.8673%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.07%)</title><rect x="38.6173%" y="709" width="0.0698%" height="15" fill="rgb(254,188,9)" fg:x="553" fg:w="1"/><text x="38.8673%" y="719.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.07%)</title><rect x="38.6173%" y="693" width="0.0698%" height="15" fill="rgb(206,112,54)" fg:x="553" fg:w="1"/><text x="38.8673%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.07%)</title><rect x="38.6173%" y="677" width="0.0698%" height="15" fill="rgb(216,84,49)" fg:x="553" fg:w="1"/><text x="38.8673%" y="687.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (1 samples, 0.07%)</title><rect x="38.6173%" y="661" width="0.0698%" height="15" fill="rgb(214,194,35)" fg:x="553" fg:w="1"/><text x="38.8673%" y="671.50"></text></g><g><title>0x1100102b4 (1 samples, 0.07%)</title><rect x="38.6872%" y="837" width="0.0698%" height="15" fill="rgb(249,28,3)" fg:x="554" fg:w="1"/><text x="38.9372%" y="847.50"></text></g><g><title>deno`Builtins_CreateTypedArray (1 samples, 0.07%)</title><rect x="38.7570%" y="837" width="0.0698%" height="15" fill="rgb(222,56,52)" fg:x="555" fg:w="1"/><text x="39.0070%" y="847.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (310 samples, 21.65%)</title><rect x="17.2486%" y="1013" width="21.6480%" height="15" fill="rgb(245,217,50)" fg:x="247" fg:w="310"/><text x="17.4986%" y="1023.50">deno`v8::Function::Call(v8::Local&lt;..</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (266 samples, 18.58%)</title><rect x="20.3212%" y="997" width="18.5754%" height="15" fill="rgb(213,201,24)" fg:x="291" fg:w="266"/><text x="20.5712%" y="1007.50">deno`v8::internal::Isolate::F..</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (266 samples, 18.58%)</title><rect x="20.3212%" y="981" width="18.5754%" height="15" fill="rgb(248,116,28)" fg:x="291" fg:w="266"/><text x="20.5712%" y="991.50">deno`v8::internal::MicrotaskQ..</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (264 samples, 18.44%)</title><rect x="20.4609%" y="965" width="18.4358%" height="15" fill="rgb(219,72,43)" fg:x="293" fg:w="264"/><text x="20.7109%" y="975.50">deno`v8::internal::MicrotaskQ..</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (262 samples, 18.30%)</title><rect x="20.6006%" y="949" width="18.2961%" height="15" fill="rgb(209,138,14)" fg:x="295" fg:w="262"/><text x="20.8506%" y="959.50">deno`v8::internal::Execution:..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (262 samples, 18.30%)</title><rect x="20.6006%" y="933" width="18.2961%" height="15" fill="rgb(222,18,33)" fg:x="295" fg:w="262"/><text x="20.8506%" y="943.50">deno`v8::internal::(anonymous..</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (261 samples, 18.23%)</title><rect x="20.6704%" y="917" width="18.2263%" height="15" fill="rgb(213,199,7)" fg:x="296" fg:w="261"/><text x="20.9204%" y="927.50">deno`v8::internal::(anonymou..</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (261 samples, 18.23%)</title><rect x="20.6704%" y="901" width="18.2263%" height="15" fill="rgb(250,110,10)" fg:x="296" fg:w="261"/><text x="20.9204%" y="911.50">deno`Builtins_JSRunMicrotask..</text></g><g><title>deno`Builtins_RunMicrotasks (259 samples, 18.09%)</title><rect x="20.8101%" y="885" width="18.0866%" height="15" fill="rgb(248,123,6)" fg:x="298" fg:w="259"/><text x="21.0601%" y="895.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (253 samples, 17.67%)</title><rect x="21.2291%" y="869" width="17.6676%" height="15" fill="rgb(206,91,31)" fg:x="304" fg:w="253"/><text x="21.4791%" y="879.50">deno`Builtins_PromiseFulfil..</text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (249 samples, 17.39%)</title><rect x="21.5084%" y="853" width="17.3883%" height="15" fill="rgb(211,154,13)" fg:x="308" fg:w="249"/><text x="21.7584%" y="863.50">deno`Builtins_AsyncFunction..</text></g><g><title>deno`Builtins_ResumeGeneratorBaseline (1 samples, 0.07%)</title><rect x="38.8268%" y="837" width="0.0698%" height="15" fill="rgb(225,148,7)" fg:x="556" fg:w="1"/><text x="39.0768%" y="847.50"></text></g><g><title>deno`v8::Isolate::HasPendingBackgroundTasks (1 samples, 0.07%)</title><rect x="38.8966%" y="1013" width="0.0698%" height="15" fill="rgb(220,160,43)" fg:x="557" fg:w="1"/><text x="39.1466%" y="1023.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (3 samples, 0.21%)</title><rect x="38.9665%" y="1013" width="0.2095%" height="15" fill="rgb(213,52,39)" fg:x="558" fg:w="3"/><text x="39.2165%" y="1023.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (2 samples, 0.14%)</title><rect x="39.1760%" y="1013" width="0.1397%" height="15" fill="rgb(243,137,7)" fg:x="561" fg:w="2"/><text x="39.4260%" y="1023.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (1 samples, 0.07%)</title><rect x="39.3156%" y="1013" width="0.0698%" height="15" fill="rgb(230,79,13)" fg:x="563" fg:w="1"/><text x="39.5656%" y="1023.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (2 samples, 0.14%)</title><rect x="39.3855%" y="1013" width="0.1397%" height="15" fill="rgb(247,105,23)" fg:x="564" fg:w="2"/><text x="39.6355%" y="1023.50"></text></g><g><title>deno`v8::internal::Isolate::ClearKeptObjects (1 samples, 0.07%)</title><rect x="39.5251%" y="1013" width="0.0698%" height="15" fill="rgb(223,179,41)" fg:x="566" fg:w="1"/><text x="39.7751%" y="1023.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (1 samples, 0.07%)</title><rect x="39.5950%" y="1013" width="0.0698%" height="15" fill="rgb(218,9,34)" fg:x="567" fg:w="1"/><text x="39.8450%" y="1023.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (1 samples, 0.07%)</title><rect x="39.5950%" y="997" width="0.0698%" height="15" fill="rgb(222,106,8)" fg:x="567" fg:w="1"/><text x="39.8450%" y="1007.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (1 samples, 0.07%)</title><rect x="39.6648%" y="1013" width="0.0698%" height="15" fill="rgb(211,220,0)" fg:x="568" fg:w="1"/><text x="39.9148%" y="1023.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (3 samples, 0.21%)</title><rect x="39.7346%" y="1013" width="0.2095%" height="15" fill="rgb(229,52,16)" fg:x="569" fg:w="3"/><text x="39.9846%" y="1023.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (3 samples, 0.21%)</title><rect x="39.9441%" y="1013" width="0.2095%" height="15" fill="rgb(212,155,18)" fg:x="572" fg:w="3"/><text x="40.1941%" y="1023.50"></text></g><g><title>deno`v8::Context::Enter (1 samples, 0.07%)</title><rect x="40.2235%" y="997" width="0.0698%" height="15" fill="rgb(242,21,14)" fg:x="576" fg:w="1"/><text x="40.4735%" y="1007.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (1 samples, 0.07%)</title><rect x="40.2933%" y="997" width="0.0698%" height="15" fill="rgb(222,19,48)" fg:x="577" fg:w="1"/><text x="40.5433%" y="1007.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (1 samples, 0.07%)</title><rect x="40.2933%" y="981" width="0.0698%" height="15" fill="rgb(232,45,27)" fg:x="577" fg:w="1"/><text x="40.5433%" y="991.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (5 samples, 0.35%)</title><rect x="40.1536%" y="1013" width="0.3492%" height="15" fill="rgb(249,103,42)" fg:x="575" fg:w="5"/><text x="40.4036%" y="1023.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (2 samples, 0.14%)</title><rect x="40.3631%" y="997" width="0.1397%" height="15" fill="rgb(246,81,33)" fg:x="578" fg:w="2"/><text x="40.6131%" y="1007.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (1 samples, 0.07%)</title><rect x="40.5726%" y="997" width="0.0698%" height="15" fill="rgb(252,33,42)" fg:x="581" fg:w="1"/><text x="40.8226%" y="1007.50"></text></g><g><title>deno`v8::internal::GetCurrentStackPosition (1 samples, 0.07%)</title><rect x="40.6425%" y="997" width="0.0698%" height="15" fill="rgb(209,212,41)" fg:x="582" fg:w="1"/><text x="40.8925%" y="1007.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (4 samples, 0.28%)</title><rect x="40.5028%" y="1013" width="0.2793%" height="15" fill="rgb(207,154,6)" fg:x="580" fg:w="4"/><text x="40.7528%" y="1023.50"></text></g><g><title>deno`v8::internal::Isolate::RegisterTryCatchHandler (1 samples, 0.07%)</title><rect x="40.7123%" y="997" width="0.0698%" height="15" fill="rgb(223,64,47)" fg:x="583" fg:w="1"/><text x="40.9623%" y="1007.50"></text></g><g><title>libsystem_kernel.dylib`kevent (26 samples, 1.82%)</title><rect x="40.7821%" y="1013" width="1.8156%" height="15" fill="rgb(211,161,38)" fg:x="584" fg:w="26"/><text x="41.0321%" y="1023.50">l..</text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.42%)</title><rect x="42.5978%" y="1013" width="0.4190%" height="15" fill="rgb(219,138,40)" fg:x="610" fg:w="6"/><text x="42.8478%" y="1023.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.07%)</title><rect x="42.9469%" y="997" width="0.0698%" height="15" fill="rgb(241,228,46)" fg:x="615" fg:w="1"/><text x="43.1969%" y="1007.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (579 samples, 40.43%)</title><rect x="2.7235%" y="1029" width="40.4330%" height="15" fill="rgb(223,209,38)" fg:x="39" fg:w="579"/><text x="2.9735%" y="1039.50">deno`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.14%)</title><rect x="43.0168%" y="1013" width="0.1397%" height="15" fill="rgb(236,164,45)" fg:x="616" fg:w="2"/><text x="43.2668%" y="1023.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (1 samples, 0.07%)</title><rect x="43.1564%" y="1029" width="0.0698%" height="15" fill="rgb(231,15,5)" fg:x="618" fg:w="1"/><text x="43.4064%" y="1039.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (1 samples, 0.07%)</title><rect x="43.2263%" y="1029" width="0.0698%" height="15" fill="rgb(252,35,15)" fg:x="619" fg:w="1"/><text x="43.4763%" y="1039.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (1 samples, 0.07%)</title><rect x="43.2961%" y="1029" width="0.0698%" height="15" fill="rgb(248,181,18)" fg:x="620" fg:w="1"/><text x="43.5461%" y="1039.50"></text></g><g><title>deno`v8::Isolate::PerformMicrotaskCheckpoint (3 samples, 0.21%)</title><rect x="43.3659%" y="1029" width="0.2095%" height="15" fill="rgb(233,39,42)" fg:x="621" fg:w="3"/><text x="43.6159%" y="1039.50"></text></g><g><title>deno`v8::Value::IsTrue (2 samples, 0.14%)</title><rect x="43.5754%" y="1029" width="0.1397%" height="15" fill="rgb(238,110,33)" fg:x="624" fg:w="2"/><text x="43.8254%" y="1039.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (4 samples, 0.28%)</title><rect x="43.7151%" y="1029" width="0.2793%" height="15" fill="rgb(233,195,10)" fg:x="626" fg:w="4"/><text x="43.9651%" y="1039.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (1 samples, 0.07%)</title><rect x="43.9944%" y="1029" width="0.0698%" height="15" fill="rgb(254,105,3)" fg:x="630" fg:w="1"/><text x="44.2444%" y="1039.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (2 samples, 0.14%)</title><rect x="44.0642%" y="1029" width="0.1397%" height="15" fill="rgb(221,225,9)" fg:x="631" fg:w="2"/><text x="44.3142%" y="1039.50"></text></g><g><title>deno`v8__Global__Reset (1 samples, 0.07%)</title><rect x="44.2039%" y="1029" width="0.0698%" height="15" fill="rgb(224,227,45)" fg:x="633" fg:w="1"/><text x="44.4539%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="44.2737%" y="1029" width="0.0698%" height="15" fill="rgb(229,198,43)" fg:x="634" fg:w="1"/><text x="44.5237%" y="1039.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (605 samples, 42.25%)</title><rect x="2.1648%" y="1045" width="42.2486%" height="15" fill="rgb(206,209,35)" fg:x="31" fg:w="605"/><text x="2.4148%" y="1055.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::fut..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="44.3436%" y="1029" width="0.0698%" height="15" fill="rgb(245,195,53)" fg:x="635" fg:w="1"/><text x="44.5936%" y="1039.50"></text></g><g><title>deno`OUTLINED_FUNCTION_25132 (1 samples, 0.07%)</title><rect x="44.4134%" y="1045" width="0.0698%" height="15" fill="rgb(240,92,26)" fg:x="636" fg:w="1"/><text x="44.6634%" y="1055.50"></text></g><g><title>deno`OUTLINED_FUNCTION_38992 (1 samples, 0.07%)</title><rect x="44.4832%" y="1045" width="0.0698%" height="15" fill="rgb(207,40,23)" fg:x="637" fg:w="1"/><text x="44.7332%" y="1055.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (1 samples, 0.07%)</title><rect x="44.5531%" y="1045" width="0.0698%" height="15" fill="rgb(223,111,35)" fg:x="638" fg:w="1"/><text x="44.8031%" y="1055.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="901" width="0.0698%" height="15" fill="rgb(229,147,28)" fg:x="639" fg:w="1"/><text x="44.8729%" y="911.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.07%)</title><rect x="44.6229%" y="885" width="0.0698%" height="15" fill="rgb(211,29,28)" fg:x="639" fg:w="1"/><text x="44.8729%" y="895.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="869" width="0.0698%" height="15" fill="rgb(228,72,33)" fg:x="639" fg:w="1"/><text x="44.8729%" y="879.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="853" width="0.0698%" height="15" fill="rgb(205,214,31)" fg:x="639" fg:w="1"/><text x="44.8729%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="837" width="0.0698%" height="15" fill="rgb(224,111,15)" fg:x="639" fg:w="1"/><text x="44.8729%" y="847.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.07%)</title><rect x="44.6229%" y="821" width="0.0698%" height="15" fill="rgb(253,21,26)" fg:x="639" fg:w="1"/><text x="44.8729%" y="831.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="805" width="0.0698%" height="15" fill="rgb(245,139,43)" fg:x="639" fg:w="1"/><text x="44.8729%" y="815.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="789" width="0.0698%" height="15" fill="rgb(252,170,7)" fg:x="639" fg:w="1"/><text x="44.8729%" y="799.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="773" width="0.0698%" height="15" fill="rgb(231,118,14)" fg:x="639" fg:w="1"/><text x="44.8729%" y="783.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.07%)</title><rect x="44.6229%" y="757" width="0.0698%" height="15" fill="rgb(238,83,0)" fg:x="639" fg:w="1"/><text x="44.8729%" y="767.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="741" width="0.0698%" height="15" fill="rgb(221,39,39)" fg:x="639" fg:w="1"/><text x="44.8729%" y="751.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="725" width="0.0698%" height="15" fill="rgb(222,119,46)" fg:x="639" fg:w="1"/><text x="44.8729%" y="735.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="709" width="0.0698%" height="15" fill="rgb(222,165,49)" fg:x="639" fg:w="1"/><text x="44.8729%" y="719.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.07%)</title><rect x="44.6229%" y="693" width="0.0698%" height="15" fill="rgb(219,113,52)" fg:x="639" fg:w="1"/><text x="44.8729%" y="703.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="677" width="0.0698%" height="15" fill="rgb(214,7,15)" fg:x="639" fg:w="1"/><text x="44.8729%" y="687.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="661" width="0.0698%" height="15" fill="rgb(235,32,4)" fg:x="639" fg:w="1"/><text x="44.8729%" y="671.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="645" width="0.0698%" height="15" fill="rgb(238,90,54)" fg:x="639" fg:w="1"/><text x="44.8729%" y="655.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="629" width="0.0698%" height="15" fill="rgb(213,208,19)" fg:x="639" fg:w="1"/><text x="44.8729%" y="639.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="613" width="0.0698%" height="15" fill="rgb(233,156,4)" fg:x="639" fg:w="1"/><text x="44.8729%" y="623.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="597" width="0.0698%" height="15" fill="rgb(207,194,5)" fg:x="639" fg:w="1"/><text x="44.8729%" y="607.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="581" width="0.0698%" height="15" fill="rgb(206,111,30)" fg:x="639" fg:w="1"/><text x="44.8729%" y="591.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="565" width="0.0698%" height="15" fill="rgb(243,70,54)" fg:x="639" fg:w="1"/><text x="44.8729%" y="575.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="549" width="0.0698%" height="15" fill="rgb(242,28,8)" fg:x="639" fg:w="1"/><text x="44.8729%" y="559.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="533" width="0.0698%" height="15" fill="rgb(219,106,18)" fg:x="639" fg:w="1"/><text x="44.8729%" y="543.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="517" width="0.0698%" height="15" fill="rgb(244,222,10)" fg:x="639" fg:w="1"/><text x="44.8729%" y="527.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="501" width="0.0698%" height="15" fill="rgb(236,179,52)" fg:x="639" fg:w="1"/><text x="44.8729%" y="511.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="485" width="0.0698%" height="15" fill="rgb(213,23,39)" fg:x="639" fg:w="1"/><text x="44.8729%" y="495.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="469" width="0.0698%" height="15" fill="rgb(238,48,10)" fg:x="639" fg:w="1"/><text x="44.8729%" y="479.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="453" width="0.0698%" height="15" fill="rgb(251,196,23)" fg:x="639" fg:w="1"/><text x="44.8729%" y="463.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="437" width="0.0698%" height="15" fill="rgb(250,152,24)" fg:x="639" fg:w="1"/><text x="44.8729%" y="447.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="421" width="0.0698%" height="15" fill="rgb(209,150,17)" fg:x="639" fg:w="1"/><text x="44.8729%" y="431.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="405" width="0.0698%" height="15" fill="rgb(234,202,34)" fg:x="639" fg:w="1"/><text x="44.8729%" y="415.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="389" width="0.0698%" height="15" fill="rgb(253,148,53)" fg:x="639" fg:w="1"/><text x="44.8729%" y="399.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="373" width="0.0698%" height="15" fill="rgb(218,129,16)" fg:x="639" fg:w="1"/><text x="44.8729%" y="383.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="357" width="0.0698%" height="15" fill="rgb(216,85,19)" fg:x="639" fg:w="1"/><text x="44.8729%" y="367.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="341" width="0.0698%" height="15" fill="rgb(235,228,7)" fg:x="639" fg:w="1"/><text x="44.8729%" y="351.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="325" width="0.0698%" height="15" fill="rgb(245,175,0)" fg:x="639" fg:w="1"/><text x="44.8729%" y="335.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="309" width="0.0698%" height="15" fill="rgb(208,168,36)" fg:x="639" fg:w="1"/><text x="44.8729%" y="319.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="293" width="0.0698%" height="15" fill="rgb(246,171,24)" fg:x="639" fg:w="1"/><text x="44.8729%" y="303.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="277" width="0.0698%" height="15" fill="rgb(215,142,24)" fg:x="639" fg:w="1"/><text x="44.8729%" y="287.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="261" width="0.0698%" height="15" fill="rgb(250,187,7)" fg:x="639" fg:w="1"/><text x="44.8729%" y="271.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="245" width="0.0698%" height="15" fill="rgb(228,66,33)" fg:x="639" fg:w="1"/><text x="44.8729%" y="255.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="229" width="0.0698%" height="15" fill="rgb(234,215,21)" fg:x="639" fg:w="1"/><text x="44.8729%" y="239.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="213" width="0.0698%" height="15" fill="rgb(222,191,20)" fg:x="639" fg:w="1"/><text x="44.8729%" y="223.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="197" width="0.0698%" height="15" fill="rgb(245,79,54)" fg:x="639" fg:w="1"/><text x="44.8729%" y="207.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="181" width="0.0698%" height="15" fill="rgb(240,10,37)" fg:x="639" fg:w="1"/><text x="44.8729%" y="191.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="165" width="0.0698%" height="15" fill="rgb(214,192,32)" fg:x="639" fg:w="1"/><text x="44.8729%" y="175.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="149" width="0.0698%" height="15" fill="rgb(209,36,54)" fg:x="639" fg:w="1"/><text x="44.8729%" y="159.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="133" width="0.0698%" height="15" fill="rgb(220,10,11)" fg:x="639" fg:w="1"/><text x="44.8729%" y="143.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="117" width="0.0698%" height="15" fill="rgb(221,106,17)" fg:x="639" fg:w="1"/><text x="44.8729%" y="127.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="101" width="0.0698%" height="15" fill="rgb(251,142,44)" fg:x="639" fg:w="1"/><text x="44.8729%" y="111.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="85" width="0.0698%" height="15" fill="rgb(238,13,15)" fg:x="639" fg:w="1"/><text x="44.8729%" y="95.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="44.6229%" y="69" width="0.0698%" height="15" fill="rgb(208,107,27)" fg:x="639" fg:w="1"/><text x="44.8729%" y="79.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="44.6229%" y="53" width="0.0698%" height="15" fill="rgb(205,136,37)" fg:x="639" fg:w="1"/><text x="44.8729%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.07%)</title><rect x="44.6229%" y="37" width="0.0698%" height="15" fill="rgb(250,205,27)" fg:x="639" fg:w="1"/><text x="44.8729%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.14%)</title><rect x="44.6229%" y="1013" width="0.1397%" height="15" fill="rgb(210,80,43)" fg:x="639" fg:w="2"/><text x="44.8729%" y="1023.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.14%)</title><rect x="44.6229%" y="997" width="0.1397%" height="15" fill="rgb(247,160,36)" fg:x="639" fg:w="2"/><text x="44.8729%" y="1007.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.14%)</title><rect x="44.6229%" y="981" width="0.1397%" height="15" fill="rgb(234,13,49)" fg:x="639" fg:w="2"/><text x="44.8729%" y="991.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.14%)</title><rect x="44.6229%" y="965" width="0.1397%" height="15" fill="rgb(234,122,0)" fg:x="639" fg:w="2"/><text x="44.8729%" y="975.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.14%)</title><rect x="44.6229%" y="949" width="0.1397%" height="15" fill="rgb(207,146,38)" fg:x="639" fg:w="2"/><text x="44.8729%" y="959.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.14%)</title><rect x="44.6229%" y="933" width="0.1397%" height="15" fill="rgb(207,177,25)" fg:x="639" fg:w="2"/><text x="44.8729%" y="943.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.14%)</title><rect x="44.6229%" y="917" width="0.1397%" height="15" fill="rgb(211,178,42)" fg:x="639" fg:w="2"/><text x="44.8729%" y="927.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.07%)</title><rect x="44.6927%" y="901" width="0.0698%" height="15" fill="rgb(230,69,54)" fg:x="640" fg:w="1"/><text x="44.9427%" y="911.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.07%)</title><rect x="44.6927%" y="885" width="0.0698%" height="15" fill="rgb(214,135,41)" fg:x="640" fg:w="1"/><text x="44.9427%" y="895.50"></text></g><g><title>deno`v8::internal::HashTable&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Rehash (1 samples, 0.07%)</title><rect x="44.6927%" y="869" width="0.0698%" height="15" fill="rgb(237,67,25)" fg:x="640" fg:w="1"/><text x="44.9427%" y="879.50"></text></g><g><title>deno`v8::internal::HashTable&lt;v8::internal::NameDictionary, v8::internal::NameDictionaryShape&gt;::Swap (1 samples, 0.07%)</title><rect x="44.6927%" y="853" width="0.0698%" height="15" fill="rgb(222,189,50)" fg:x="640" fg:w="1"/><text x="44.9427%" y="863.50"></text></g><g><title>deno`v8::internal::Checksum(v8::base::Vector (6 samples, 0.42%)</title><rect x="44.7626%" y="981" width="0.4190%" height="15" fill="rgb(245,148,34)" fg:x="641" fg:w="6"/><text x="45.0126%" y="991.50"></text></g><g><title>deno`v8::internal::Heap::SetUp (1 samples, 0.07%)</title><rect x="45.1816%" y="933" width="0.0698%" height="15" fill="rgb(222,29,6)" fg:x="647" fg:w="1"/><text x="45.4316%" y="943.50"></text></g><g><title>deno`v8::internal::CodeRange::EnsureProcessWideCodeRange (1 samples, 0.07%)</title><rect x="45.1816%" y="917" width="0.0698%" height="15" fill="rgb(221,189,43)" fg:x="647" fg:w="1"/><text x="45.4316%" y="927.50"></text></g><g><title>deno`v8::internal::CodeRange::InitReservation (1 samples, 0.07%)</title><rect x="45.1816%" y="901" width="0.0698%" height="15" fill="rgb(207,36,27)" fg:x="647" fg:w="1"/><text x="45.4316%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.07%)</title><rect x="45.1816%" y="885" width="0.0698%" height="15" fill="rgb(217,90,24)" fg:x="647" fg:w="1"/><text x="45.4316%" y="895.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (10 samples, 0.70%)</title><rect x="44.6229%" y="1029" width="0.6983%" height="15" fill="rgb(224,66,35)" fg:x="639" fg:w="10"/><text x="44.8729%" y="1039.50"></text></g><g><title>deno`v8::Isolate::New (8 samples, 0.56%)</title><rect x="44.7626%" y="1013" width="0.5587%" height="15" fill="rgb(221,13,50)" fg:x="641" fg:w="8"/><text x="45.0126%" y="1023.50"></text></g><g><title>deno`v8::Isolate::Initialize (8 samples, 0.56%)</title><rect x="44.7626%" y="997" width="0.5587%" height="15" fill="rgb(236,68,49)" fg:x="641" fg:w="8"/><text x="45.0126%" y="1007.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.14%)</title><rect x="45.1816%" y="981" width="0.1397%" height="15" fill="rgb(229,146,28)" fg:x="647" fg:w="2"/><text x="45.4316%" y="991.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.14%)</title><rect x="45.1816%" y="965" width="0.1397%" height="15" fill="rgb(225,31,38)" fg:x="647" fg:w="2"/><text x="45.4316%" y="975.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.14%)</title><rect x="45.1816%" y="949" width="0.1397%" height="15" fill="rgb(250,208,3)" fg:x="647" fg:w="2"/><text x="45.4316%" y="959.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.07%)</title><rect x="45.2514%" y="933" width="0.0698%" height="15" fill="rgb(246,54,23)" fg:x="648" fg:w="1"/><text x="45.5014%" y="943.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.07%)</title><rect x="45.2514%" y="917" width="0.0698%" height="15" fill="rgb(243,76,11)" fg:x="648" fg:w="1"/><text x="45.5014%" y="927.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.07%)</title><rect x="45.2514%" y="901" width="0.0698%" height="15" fill="rgb(245,21,50)" fg:x="648" fg:w="1"/><text x="45.5014%" y="911.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.07%)</title><rect x="45.2514%" y="885" width="0.0698%" height="15" fill="rgb(228,9,43)" fg:x="648" fg:w="1"/><text x="45.5014%" y="895.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="45.2514%" y="869" width="0.0698%" height="15" fill="rgb(208,100,47)" fg:x="648" fg:w="1"/><text x="45.5014%" y="879.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="45.2514%" y="853" width="0.0698%" height="15" fill="rgb(232,26,8)" fg:x="648" fg:w="1"/><text x="45.5014%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.07%)</title><rect x="45.2514%" y="837" width="0.0698%" height="15" fill="rgb(216,166,38)" fg:x="648" fg:w="1"/><text x="45.5014%" y="847.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.07%)</title><rect x="45.2514%" y="821" width="0.0698%" height="15" fill="rgb(251,202,51)" fg:x="648" fg:w="1"/><text x="45.5014%" y="831.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.07%)</title><rect x="45.2514%" y="805" width="0.0698%" height="15" fill="rgb(254,216,34)" fg:x="648" fg:w="1"/><text x="45.5014%" y="815.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.07%)</title><rect x="45.3212%" y="1029" width="0.0698%" height="15" fill="rgb(251,32,27)" fg:x="649" fg:w="1"/><text x="45.5712%" y="1039.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.07%)</title><rect x="45.3212%" y="1013" width="0.0698%" height="15" fill="rgb(208,127,28)" fg:x="649" fg:w="1"/><text x="45.5712%" y="1023.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.07%)</title><rect x="45.3212%" y="997" width="0.0698%" height="15" fill="rgb(224,137,22)" fg:x="649" fg:w="1"/><text x="45.5712%" y="1007.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.07%)</title><rect x="45.3212%" y="981" width="0.0698%" height="15" fill="rgb(254,70,32)" fg:x="649" fg:w="1"/><text x="45.5712%" y="991.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.07%)</title><rect x="45.3212%" y="965" width="0.0698%" height="15" fill="rgb(229,75,37)" fg:x="649" fg:w="1"/><text x="45.5712%" y="975.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.07%)</title><rect x="45.3212%" y="949" width="0.0698%" height="15" fill="rgb(252,64,23)" fg:x="649" fg:w="1"/><text x="45.5712%" y="959.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.07%)</title><rect x="45.3212%" y="933" width="0.0698%" height="15" fill="rgb(232,162,48)" fg:x="649" fg:w="1"/><text x="45.5712%" y="943.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.07%)</title><rect x="45.3212%" y="917" width="0.0698%" height="15" fill="rgb(246,160,12)" fg:x="649" fg:w="1"/><text x="45.5712%" y="927.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.07%)</title><rect x="45.3212%" y="901" width="0.0698%" height="15" fill="rgb(247,166,0)" fg:x="649" fg:w="1"/><text x="45.5712%" y="911.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.07%)</title><rect x="45.3212%" y="885" width="0.0698%" height="15" fill="rgb(249,219,21)" fg:x="649" fg:w="1"/><text x="45.5712%" y="895.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.07%)</title><rect x="45.3212%" y="869" width="0.0698%" height="15" fill="rgb(205,209,3)" fg:x="649" fg:w="1"/><text x="45.5712%" y="879.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.07%)</title><rect x="45.3212%" y="853" width="0.0698%" height="15" fill="rgb(243,44,1)" fg:x="649" fg:w="1"/><text x="45.5712%" y="863.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.07%)</title><rect x="45.3212%" y="837" width="0.0698%" height="15" fill="rgb(206,159,16)" fg:x="649" fg:w="1"/><text x="45.5712%" y="847.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.07%)</title><rect x="45.3212%" y="821" width="0.0698%" height="15" fill="rgb(244,77,30)" fg:x="649" fg:w="1"/><text x="45.5712%" y="831.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.07%)</title><rect x="45.3212%" y="805" width="0.0698%" height="15" fill="rgb(218,69,12)" fg:x="649" fg:w="1"/><text x="45.5712%" y="815.50"></text></g><g><title>deno`bool v8::internal::(anonymous namespace)::IterativelyExecuteAndFinalizeUnoptimizedCompilationJobs&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::AccountingAllocator*, v8::internal::IsCompiledScope*, std::__1::vector&lt;v8::internal::FinalizeUnoptimizedCompilationData, std::__1::allocator&lt;v8::internal::FinalizeUnoptimizedCompilationData&gt; &gt;*, std::__1::vector&lt;v8::internal::DeferredFinalizationJobData, std::__1::allocator (1 samples, 0.07%)</title><rect x="45.3212%" y="789" width="0.0698%" height="15" fill="rgb(212,87,7)" fg:x="649" fg:w="1"/><text x="45.5712%" y="799.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ExecuteSingleUnoptimizedCompilationJob(v8::internal::ParseInfo*, v8::internal::FunctionLiteral*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::AccountingAllocator*, std::__1::vector&lt;v8::internal::FunctionLiteral*, std::__1::allocator (1 samples, 0.07%)</title><rect x="45.3212%" y="773" width="0.0698%" height="15" fill="rgb(245,114,25)" fg:x="649" fg:w="1"/><text x="45.5712%" y="783.50"></text></g><g><title>deno`v8::internal::interpreter::InterpreterCompilationJob::ExecuteJobImpl (1 samples, 0.07%)</title><rect x="45.3212%" y="757" width="0.0698%" height="15" fill="rgb(210,61,42)" fg:x="649" fg:w="1"/><text x="45.5712%" y="767.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::GenerateBytecode (1 samples, 0.07%)</title><rect x="45.3212%" y="741" width="0.0698%" height="15" fill="rgb(211,52,33)" fg:x="649" fg:w="1"/><text x="45.5712%" y="751.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::GenerateBytecodeBody (1 samples, 0.07%)</title><rect x="45.3212%" y="725" width="0.0698%" height="15" fill="rgb(234,58,33)" fg:x="649" fg:w="1"/><text x="45.5712%" y="735.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitBlock (1 samples, 0.07%)</title><rect x="45.3212%" y="709" width="0.0698%" height="15" fill="rgb(220,115,36)" fg:x="649" fg:w="1"/><text x="45.5712%" y="719.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitBlockDeclarationsAndStatements (1 samples, 0.07%)</title><rect x="45.3212%" y="693" width="0.0698%" height="15" fill="rgb(243,153,54)" fg:x="649" fg:w="1"/><text x="45.5712%" y="703.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitExpressionStatement (1 samples, 0.07%)</title><rect x="45.3212%" y="677" width="0.0698%" height="15" fill="rgb(251,47,18)" fg:x="649" fg:w="1"/><text x="45.5712%" y="687.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitAssignment (1 samples, 0.07%)</title><rect x="45.3212%" y="661" width="0.0698%" height="15" fill="rgb(242,102,42)" fg:x="649" fg:w="1"/><text x="45.5712%" y="671.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::BuildDestructuringObjectAssignment (1 samples, 0.07%)</title><rect x="45.3212%" y="645" width="0.0698%" height="15" fill="rgb(234,31,38)" fg:x="649" fg:w="1"/><text x="45.5712%" y="655.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeArrayBuilder::LoadNamedProperty (1 samples, 0.07%)</title><rect x="45.3212%" y="629" width="0.0698%" height="15" fill="rgb(221,117,51)" fg:x="649" fg:w="1"/><text x="45.5712%" y="639.50"></text></g><g><title>deno`v8::internal::interpreter::ConstantArrayBuilder::Insert (1 samples, 0.07%)</title><rect x="45.3212%" y="613" width="0.0698%" height="15" fill="rgb(212,20,18)" fg:x="649" fg:w="1"/><text x="45.5712%" y="623.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (627 samples, 43.78%)</title><rect x="1.6760%" y="1061" width="43.7849%" height="15" fill="rgb(245,133,36)" fg:x="24" fg:w="627"/><text x="1.9260%" y="1071.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future..</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (12 samples, 0.84%)</title><rect x="44.6229%" y="1045" width="0.8380%" height="15" fill="rgb(212,6,19)" fg:x="639" fg:w="12"/><text x="44.8729%" y="1055.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.07%)</title><rect x="45.3911%" y="1029" width="0.0698%" height="15" fill="rgb(218,1,36)" fg:x="650" fg:w="1"/><text x="45.6411%" y="1039.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.07%)</title><rect x="45.3911%" y="1013" width="0.0698%" height="15" fill="rgb(246,84,54)" fg:x="650" fg:w="1"/><text x="45.6411%" y="1023.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.07%)</title><rect x="45.3911%" y="997" width="0.0698%" height="15" fill="rgb(242,110,6)" fg:x="650" fg:w="1"/><text x="45.6411%" y="1007.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.07%)</title><rect x="45.3911%" y="981" width="0.0698%" height="15" fill="rgb(214,47,5)" fg:x="650" fg:w="1"/><text x="45.6411%" y="991.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.07%)</title><rect x="45.3911%" y="965" width="0.0698%" height="15" fill="rgb(218,159,25)" fg:x="650" fg:w="1"/><text x="45.6411%" y="975.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (634 samples, 44.27%)</title><rect x="1.2570%" y="1093" width="44.2737%" height="15" fill="rgb(215,211,28)" fg:x="18" fg:w="634"/><text x="1.5070%" y="1103.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future:..</text></g><g><title>deno`deno::run_command::_{{closure}} (631 samples, 44.06%)</title><rect x="1.4665%" y="1077" width="44.0642%" height="15" fill="rgb(238,59,32)" fg:x="21" fg:w="631"/><text x="1.7165%" y="1087.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`OUTLINED_FUNCTION_8223 (1 samples, 0.07%)</title><rect x="45.4609%" y="1061" width="0.0698%" height="15" fill="rgb(226,82,3)" fg:x="651" fg:w="1"/><text x="45.7109%" y="1071.50"></text></g><g><title>deno`OUTLINED_FUNCTION_16626 (1 samples, 0.07%)</title><rect x="45.5307%" y="1093" width="0.0698%" height="15" fill="rgb(240,164,32)" fg:x="652" fg:w="1"/><text x="45.7807%" y="1103.50"></text></g><g><title>deno`deno::main::_{{closure}} (638 samples, 44.55%)</title><rect x="1.1872%" y="1109" width="44.5531%" height="15" fill="rgb(232,46,7)" fg:x="17" fg:w="638"/><text x="1.4372%" y="1119.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`OUTLINED_FUNCTION_21692 (2 samples, 0.14%)</title><rect x="45.6006%" y="1093" width="0.1397%" height="15" fill="rgb(229,129,53)" fg:x="653" fg:w="2"/><text x="45.8506%" y="1103.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (3 samples, 0.21%)</title><rect x="45.7402%" y="1109" width="0.2095%" height="15" fill="rgb(234,188,29)" fg:x="655" fg:w="3"/><text x="45.9902%" y="1119.50"></text></g><g><title>deno`tokio::task::local::LocalSet::tick (1 samples, 0.07%)</title><rect x="45.9497%" y="1109" width="0.0698%" height="15" fill="rgb(246,141,4)" fg:x="658" fg:w="1"/><text x="46.1997%" y="1119.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (648 samples, 45.25%)</title><rect x="0.8380%" y="1125" width="45.2514%" height="15" fill="rgb(229,23,39)" fg:x="12" fg:w="648"/><text x="1.0880%" y="1135.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::..</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="46.0196%" y="1109" width="0.0698%" height="15" fill="rgb(206,12,3)" fg:x="659" fg:w="1"/><text x="46.2696%" y="1119.50"></text></g><g><title>deno`OUTLINED_FUNCTION_1582 (1 samples, 0.07%)</title><rect x="46.0894%" y="1125" width="0.0698%" height="15" fill="rgb(252,226,20)" fg:x="660" fg:w="1"/><text x="46.3394%" y="1135.50"></text></g><g><title>deno`OUTLINED_FUNCTION_87 (1 samples, 0.07%)</title><rect x="46.1592%" y="1125" width="0.0698%" height="15" fill="rgb(216,123,35)" fg:x="661" fg:w="1"/><text x="46.4092%" y="1135.50"></text></g><g><title>deno`OUTLINED_FUNCTION_978 (1 samples, 0.07%)</title><rect x="46.2291%" y="1125" width="0.0698%" height="15" fill="rgb(212,68,40)" fg:x="662" fg:w="1"/><text x="46.4791%" y="1135.50"></text></g><g><title>deno`core::result::Result&lt;T,E&gt;::expect (1 samples, 0.07%)</title><rect x="46.2989%" y="1125" width="0.0698%" height="15" fill="rgb(254,125,32)" fg:x="663" fg:w="1"/><text x="46.5489%" y="1135.50"></text></g><g><title>deno`tokio::runtime::enter::disallow_blocking (2 samples, 0.14%)</title><rect x="46.3687%" y="1125" width="0.1397%" height="15" fill="rgb(253,97,22)" fg:x="664" fg:w="2"/><text x="46.6187%" y="1135.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (1 samples, 0.07%)</title><rect x="46.8575%" y="1109" width="0.0698%" height="15" fill="rgb(241,101,14)" fg:x="671" fg:w="1"/><text x="47.1075%" y="1119.50"></text></g><g><title>deno`mio::poll::Poll::poll (2 samples, 0.14%)</title><rect x="47.1369%" y="1093" width="0.1397%" height="15" fill="rgb(238,103,29)" fg:x="675" fg:w="2"/><text x="47.3869%" y="1103.50"></text></g><g><title>deno`tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.07%)</title><rect x="47.2765%" y="1093" width="0.0698%" height="15" fill="rgb(233,195,47)" fg:x="677" fg:w="1"/><text x="47.5265%" y="1103.50"></text></g><g><title>deno`mio::poll::Poll::poll (1 samples, 0.07%)</title><rect x="47.6955%" y="1077" width="0.0698%" height="15" fill="rgb(246,218,30)" fg:x="683" fg:w="1"/><text x="47.9455%" y="1087.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (192 samples, 13.41%)</title><rect x="47.3464%" y="1093" width="13.4078%" height="15" fill="rgb(219,145,47)" fg:x="678" fg:w="192"/><text x="47.5964%" y="1103.50">deno`tokio::runtime:..</text></g><g><title>libsystem_kernel.dylib`kevent (186 samples, 12.99%)</title><rect x="47.7654%" y="1077" width="12.9888%" height="15" fill="rgb(243,12,26)" fg:x="684" fg:w="186"/><text x="48.0154%" y="1087.50">libsystem_kernel.dyl..</text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.14%)</title><rect x="60.7542%" y="1077" width="0.1397%" height="15" fill="rgb(214,87,16)" fg:x="870" fg:w="2"/><text x="61.0042%" y="1087.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (4 samples, 0.28%)</title><rect x="60.7542%" y="1093" width="0.2793%" height="15" fill="rgb(208,99,42)" fg:x="870" fg:w="4"/><text x="61.0042%" y="1103.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="60.8939%" y="1077" width="0.1397%" height="15" fill="rgb(253,99,2)" fg:x="872" fg:w="2"/><text x="61.1439%" y="1087.50"></text></g><g><title>deno`tokio::signal::unix::driver::noop (1 samples, 0.07%)</title><rect x="61.0335%" y="1093" width="0.0698%" height="15" fill="rgb(220,168,23)" fg:x="874" fg:w="1"/><text x="61.2835%" y="1103.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (4 samples, 0.28%)</title><rect x="61.3827%" y="1077" width="0.2793%" height="15" fill="rgb(242,38,24)" fg:x="879" fg:w="4"/><text x="61.6327%" y="1087.50"></text></g><g><title> 32]&gt; (4 samples, 0.28%)</title><rect x="61.3827%" y="1061" width="0.2793%" height="15" fill="rgb(225,182,9)" fg:x="879" fg:w="4"/><text x="61.6327%" y="1071.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (9 samples, 0.63%)</title><rect x="61.1034%" y="1093" width="0.6285%" height="15" fill="rgb(243,178,37)" fg:x="875" fg:w="9"/><text x="61.3534%" y="1103.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.07%)</title><rect x="61.6620%" y="1077" width="0.0698%" height="15" fill="rgb(232,139,19)" fg:x="883" fg:w="1"/><text x="61.9120%" y="1087.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (213 samples, 14.87%)</title><rect x="46.9274%" y="1109" width="14.8743%" height="15" fill="rgb(225,201,24)" fg:x="672" fg:w="213"/><text x="47.1774%" y="1119.50">deno`tokio::time::drive..</text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.07%)</title><rect x="61.7318%" y="1093" width="0.0698%" height="15" fill="rgb(221,47,46)" fg:x="884" fg:w="1"/><text x="61.9818%" y="1103.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.07%)</title><rect x="61.8017%" y="1109" width="0.0698%" height="15" fill="rgb(249,23,13)" fg:x="885" fg:w="1"/><text x="62.0517%" y="1119.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Context::park (227 samples, 15.85%)</title><rect x="46.5084%" y="1125" width="15.8520%" height="15" fill="rgb(219,9,5)" fg:x="666" fg:w="227"/><text x="46.7584%" y="1135.50">deno`tokio::runtime::sch..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.49%)</title><rect x="61.8715%" y="1109" width="0.4888%" height="15" fill="rgb(254,171,16)" fg:x="886" fg:w="7"/><text x="62.1215%" y="1119.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Spawner::pop (1 samples, 0.07%)</title><rect x="62.3603%" y="1125" width="0.0698%" height="15" fill="rgb(230,171,20)" fg:x="893" fg:w="1"/><text x="62.6103%" y="1135.50"></text></g><g><title>deno`tokio::task::local::LocalSet::tick (3 samples, 0.21%)</title><rect x="62.4302%" y="1125" width="0.2095%" height="15" fill="rgb(210,71,41)" fg:x="894" fg:w="3"/><text x="62.6802%" y="1135.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (1 samples, 0.07%)</title><rect x="62.6397%" y="1125" width="0.0698%" height="15" fill="rgb(206,173,20)" fg:x="897" fg:w="1"/><text x="62.8897%" y="1135.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="62.7095%" y="1125" width="0.0698%" height="15" fill="rgb(233,88,34)" fg:x="898" fg:w="1"/><text x="62.9595%" y="1135.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.28%)</title><rect x="62.7793%" y="1125" width="0.2793%" height="15" fill="rgb(223,209,46)" fg:x="899" fg:w="4"/><text x="63.0293%" y="1135.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (895 samples, 62.50%)</title><rect x="0.6285%" y="1141" width="62.5000%" height="15" fill="rgb(250,43,18)" fg:x="9" fg:w="895"/><text x="0.8785%" y="1151.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.07%)</title><rect x="63.0587%" y="1125" width="0.0698%" height="15" fill="rgb(208,13,10)" fg:x="903" fg:w="1"/><text x="63.3087%" y="1135.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Spawner::pop (2 samples, 0.14%)</title><rect x="63.1285%" y="1141" width="0.1397%" height="15" fill="rgb(212,200,36)" fg:x="904" fg:w="2"/><text x="63.3785%" y="1151.50"></text></g><g><title>dyld`start (910 samples, 63.55%)</title><rect x="0.0000%" y="1205" width="63.5475%" height="15" fill="rgb(225,90,30)" fg:x="0" fg:w="910"/><text x="0.2500%" y="1215.50">dyld`start</text></g><g><title>deno`main (910 samples, 63.55%)</title><rect x="0.0000%" y="1189" width="63.5475%" height="15" fill="rgb(236,182,39)" fg:x="0" fg:w="910"/><text x="0.2500%" y="1199.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (910 samples, 63.55%)</title><rect x="0.0000%" y="1173" width="63.5475%" height="15" fill="rgb(212,144,35)" fg:x="0" fg:w="910"/><text x="0.2500%" y="1183.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (910 samples, 63.55%)</title><rect x="0.0000%" y="1157" width="63.5475%" height="15" fill="rgb(228,63,44)" fg:x="0" fg:w="910"/><text x="0.2500%" y="1167.50">deno`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.28%)</title><rect x="63.2682%" y="1141" width="0.2793%" height="15" fill="rgb(228,109,6)" fg:x="906" fg:w="4"/><text x="63.5182%" y="1151.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as core::ops::deref::Deref&gt;::deref (1 samples, 0.07%)</title><rect x="63.6872%" y="1125" width="0.0698%" height="15" fill="rgb(238,117,24)" fg:x="912" fg:w="1"/><text x="63.9372%" y="1135.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="63.7570%" y="1125" width="0.1397%" height="15" fill="rgb(242,26,26)" fg:x="913" fg:w="2"/><text x="64.0070%" y="1135.50"></text></g><g><title>deno`OUTLINED_FUNCTION_40768 (1 samples, 0.07%)</title><rect x="63.8966%" y="1125" width="0.0698%" height="15" fill="rgb(221,92,48)" fg:x="915" fg:w="1"/><text x="64.1466%" y="1135.50"></text></g><g><title>deno`OUTLINED_FUNCTION_5 (2 samples, 0.14%)</title><rect x="63.9665%" y="1125" width="0.1397%" height="15" fill="rgb(209,209,32)" fg:x="916" fg:w="2"/><text x="64.2165%" y="1135.50"></text></g><g><title>deno`OUTLINED_FUNCTION_5169 (1 samples, 0.07%)</title><rect x="64.1061%" y="1125" width="0.0698%" height="15" fill="rgb(221,70,22)" fg:x="918" fg:w="1"/><text x="64.3561%" y="1135.50"></text></g><g><title>deno`OUTLINED_FUNCTION_5516 (1 samples, 0.07%)</title><rect x="64.1760%" y="1125" width="0.0698%" height="15" fill="rgb(248,145,5)" fg:x="919" fg:w="1"/><text x="64.4260%" y="1135.50"></text></g><g><title>deno`deno_runtime::ops::io::StdFileResourceInner::write_and_maybe_flush (2 samples, 0.14%)</title><rect x="64.2458%" y="1125" width="0.1397%" height="15" fill="rgb(226,116,26)" fg:x="920" fg:w="2"/><text x="64.4958%" y="1135.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18431 (1 samples, 0.07%)</title><rect x="64.6648%" y="1109" width="0.0698%" height="15" fill="rgb(244,5,17)" fg:x="926" fg:w="1"/><text x="64.9148%" y="1119.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::option::Option&lt;parking_lot_core::parking_lot::ThreadData&gt;&gt; (1 samples, 0.07%)</title><rect x="64.7346%" y="1109" width="0.0698%" height="15" fill="rgb(252,159,33)" fg:x="927" fg:w="1"/><text x="64.9846%" y="1119.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (4 samples, 0.28%)</title><rect x="64.8045%" y="1109" width="0.2793%" height="15" fill="rgb(206,71,0)" fg:x="928" fg:w="4"/><text x="65.0545%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.28%)</title><rect x="64.8045%" y="1093" width="0.2793%" height="15" fill="rgb(233,118,54)" fg:x="928" fg:w="4"/><text x="65.0545%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`__gettimeofday (22 samples, 1.54%)</title><rect x="65.0838%" y="1109" width="1.5363%" height="15" fill="rgb(234,83,48)" fg:x="932" fg:w="22"/><text x="65.3338%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (131 samples, 9.15%)</title><rect x="66.6201%" y="1109" width="9.1480%" height="15" fill="rgb(228,3,54)" fg:x="954" fg:w="131"/><text x="66.8701%" y="1119.50">libsystem_ker..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__gettimeofday (1 samples, 0.07%)</title><rect x="75.7682%" y="1109" width="0.0698%" height="15" fill="rgb(226,155,13)" fg:x="1085" fg:w="1"/><text x="76.0182%" y="1119.50"></text></g><g><title>deno`parking_lot::condvar::Condvar::wait_until_internal (166 samples, 11.59%)</title><rect x="64.3855%" y="1125" width="11.5922%" height="15" fill="rgb(241,28,37)" fg:x="922" fg:w="166"/><text x="64.6355%" y="1135.50">deno`parking_lot:..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (2 samples, 0.14%)</title><rect x="75.8380%" y="1109" width="0.1397%" height="15" fill="rgb(233,93,10)" fg:x="1086" fg:w="2"/><text x="76.0880%" y="1119.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.07%)</title><rect x="75.9078%" y="1093" width="0.0698%" height="15" fill="rgb(225,113,19)" fg:x="1087" fg:w="1"/><text x="76.1578%" y="1103.50"></text></g><g><title>deno`deno_runtime::ops::io::StdFileResourceInner::write_and_maybe_flush (242 samples, 16.90%)</title><rect x="75.9777%" y="1109" width="16.8994%" height="15" fill="rgb(241,2,18)" fg:x="1088" fg:w="242"/><text x="76.2277%" y="1119.50">deno`deno_runtime::ops::io..</text></g><g><title>libsystem_kernel.dylib`write (241 samples, 16.83%)</title><rect x="76.0475%" y="1093" width="16.8296%" height="15" fill="rgb(228,207,21)" fg:x="1089" fg:w="241"/><text x="76.2975%" y="1103.50">libsystem_kernel.dylib`wri..</text></g><g><title>deno`std::fs::OpenOptions::_open (1 samples, 0.07%)</title><rect x="92.8771%" y="1109" width="0.0698%" height="15" fill="rgb(213,211,35)" fg:x="1330" fg:w="1"/><text x="93.1271%" y="1119.50"></text></g><g><title>deno`std::sys::unix::fs::File::open_c (1 samples, 0.07%)</title><rect x="92.8771%" y="1093" width="0.0698%" height="15" fill="rgb(209,83,10)" fg:x="1330" fg:w="1"/><text x="93.1271%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.07%)</title><rect x="92.8771%" y="1077" width="0.0698%" height="15" fill="rgb(209,164,1)" fg:x="1330" fg:w="1"/><text x="93.1271%" y="1087.50"></text></g><g><title>deno`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (1 samples, 0.07%)</title><rect x="92.9469%" y="1045" width="0.0698%" height="15" fill="rgb(213,184,43)" fg:x="1331" fg:w="1"/><text x="93.1969%" y="1055.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (70 samples, 4.89%)</title><rect x="92.9469%" y="1077" width="4.8883%" height="15" fill="rgb(231,61,34)" fg:x="1331" fg:w="70"/><text x="93.1969%" y="1087.50">deno`&lt;..</text></g><g><title>deno`tokio::util::wake::wake_arc_raw (70 samples, 4.89%)</title><rect x="92.9469%" y="1061" width="4.8883%" height="15" fill="rgb(235,75,3)" fg:x="1331" fg:w="70"/><text x="93.1969%" y="1071.50">deno`t..</text></g><g><title>libsystem_kernel.dylib`kevent (69 samples, 4.82%)</title><rect x="93.0168%" y="1045" width="4.8184%" height="15" fill="rgb(220,106,47)" fg:x="1332" fg:w="69"/><text x="93.2668%" y="1055.50">libsys..</text></g><g><title>deno`tokio::runtime::task::raw::poll (314 samples, 21.93%)</title><rect x="75.9777%" y="1125" width="21.9274%" height="15" fill="rgb(210,196,33)" fg:x="1088" fg:w="314"/><text x="76.2277%" y="1135.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>deno`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (71 samples, 4.96%)</title><rect x="92.9469%" y="1109" width="4.9581%" height="15" fill="rgb(229,154,42)" fg:x="1331" fg:w="71"/><text x="93.1969%" y="1119.50">deno`t..</text></g><g><title>deno`futures_task::waker::wake_by_ref_arc_raw (71 samples, 4.96%)</title><rect x="92.9469%" y="1093" width="4.9581%" height="15" fill="rgb(228,114,26)" fg:x="1331" fg:w="71"/><text x="93.1969%" y="1103.50">deno`f..</text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (1 samples, 0.07%)</title><rect x="97.8352%" y="1077" width="0.0698%" height="15" fill="rgb(208,144,1)" fg:x="1401" fg:w="1"/><text x="98.0852%" y="1087.50"></text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (497 samples, 34.71%)</title><rect x="63.5475%" y="1141" width="34.7067%" height="15" fill="rgb(239,112,37)" fg:x="910" fg:w="497"/><text x="63.7975%" y="1151.50">deno`std::sys_common::backtrace::__rust_begin_short_back..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (5 samples, 0.35%)</title><rect x="97.9050%" y="1125" width="0.3492%" height="15" fill="rgb(210,96,50)" fg:x="1402" fg:w="5"/><text x="98.1550%" y="1135.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (501 samples, 34.99%)</title><rect x="63.5475%" y="1173" width="34.9860%" height="15" fill="rgb(222,178,2)" fg:x="910" fg:w="501"/><text x="63.7975%" y="1183.50">deno`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (501 samples, 34.99%)</title><rect x="63.5475%" y="1157" width="34.9860%" height="15" fill="rgb(226,74,18)" fg:x="910" fg:w="501"/><text x="63.7975%" y="1167.50">deno`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.28%)</title><rect x="98.2542%" y="1141" width="0.2793%" height="15" fill="rgb(225,67,54)" fg:x="1407" fg:w="4"/><text x="98.5042%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.07%)</title><rect x="98.5335%" y="1013" width="0.0698%" height="15" fill="rgb(251,92,32)" fg:x="1411" fg:w="1"/><text x="98.7835%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.07%)</title><rect x="98.5335%" y="997" width="0.0698%" height="15" fill="rgb(228,149,22)" fg:x="1411" fg:w="1"/><text x="98.7835%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::DeadCodeElimination::ReduceNode (1 samples, 0.07%)</title><rect x="98.5335%" y="981" width="0.0698%" height="15" fill="rgb(243,54,13)" fg:x="1411" fg:w="1"/><text x="98.7835%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::DeadCodeElimination::ReduceEffectNode (1 samples, 0.07%)</title><rect x="98.5335%" y="965" width="0.0698%" height="15" fill="rgb(243,180,28)" fg:x="1411" fg:w="1"/><text x="98.7835%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (2 samples, 0.14%)</title><rect x="98.5335%" y="1077" width="0.1397%" height="15" fill="rgb(208,167,24)" fg:x="1411" fg:w="2"/><text x="98.7835%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (2 samples, 0.14%)</title><rect x="98.5335%" y="1061" width="0.1397%" height="15" fill="rgb(245,73,45)" fg:x="1411" fg:w="2"/><text x="98.7835%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (2 samples, 0.14%)</title><rect x="98.5335%" y="1045" width="0.1397%" height="15" fill="rgb(237,203,48)" fg:x="1411" fg:w="2"/><text x="98.7835%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.14%)</title><rect x="98.5335%" y="1029" width="0.1397%" height="15" fill="rgb(211,197,16)" fg:x="1411" fg:w="2"/><text x="98.7835%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::Finalize (1 samples, 0.07%)</title><rect x="98.6034%" y="1013" width="0.0698%" height="15" fill="rgb(243,99,51)" fg:x="1412" fg:w="1"/><text x="98.8534%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::InlineCandidate (1 samples, 0.07%)</title><rect x="98.6034%" y="997" width="0.0698%" height="15" fill="rgb(215,123,29)" fg:x="1412" fg:w="1"/><text x="98.8534%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::JSInliner::ReduceJSCall (1 samples, 0.07%)</title><rect x="98.6034%" y="981" width="0.0698%" height="15" fill="rgb(239,186,37)" fg:x="1412" fg:w="1"/><text x="98.8534%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasContextInput (1 samples, 0.07%)</title><rect x="98.6034%" y="965" width="0.0698%" height="15" fill="rgb(252,136,39)" fg:x="1412" fg:w="1"/><text x="98.8534%" y="975.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (2 samples, 0.14%)</title><rect x="98.6732%" y="1061" width="0.1397%" height="15" fill="rgb(223,213,32)" fg:x="1413" fg:w="2"/><text x="98.9232%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (2 samples, 0.14%)</title><rect x="98.6732%" y="1045" width="0.1397%" height="15" fill="rgb(233,115,5)" fg:x="1413" fg:w="2"/><text x="98.9232%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::EffectGraphReducer::ReduceFrom (2 samples, 0.14%)</title><rect x="98.6732%" y="1029" width="0.1397%" height="15" fill="rgb(207,226,44)" fg:x="1413" fg:w="2"/><text x="98.9232%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::SparseSidetable&lt;v8::internal::compiler::VariableTracker::State&gt;::Get (1 samples, 0.07%)</title><rect x="98.7430%" y="1013" width="0.0698%" height="15" fill="rgb(208,126,0)" fg:x="1414" fg:w="1"/><text x="98.9930%" y="1023.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (1 samples, 0.07%)</title><rect x="98.8128%" y="1061" width="0.0698%" height="15" fill="rgb(244,66,21)" fg:x="1415" fg:w="1"/><text x="99.0628%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (1 samples, 0.07%)</title><rect x="98.8128%" y="1045" width="0.0698%" height="15" fill="rgb(222,97,12)" fg:x="1415" fg:w="1"/><text x="99.0628%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.07%)</title><rect x="98.8128%" y="1029" width="0.0698%" height="15" fill="rgb(219,213,19)" fg:x="1415" fg:w="1"/><text x="99.0628%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.07%)</title><rect x="98.8128%" y="1013" width="0.0698%" height="15" fill="rgb(252,169,30)" fg:x="1415" fg:w="1"/><text x="99.0628%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.07%)</title><rect x="98.8128%" y="997" width="0.0698%" height="15" fill="rgb(206,32,51)" fg:x="1415" fg:w="1"/><text x="99.0628%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (1 samples, 0.07%)</title><rect x="98.8128%" y="981" width="0.0698%" height="15" fill="rgb(250,172,42)" fg:x="1415" fg:w="1"/><text x="99.0628%" y="991.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (1 samples, 0.07%)</title><rect x="98.8827%" y="1061" width="0.0698%" height="15" fill="rgb(209,34,43)" fg:x="1416" fg:w="1"/><text x="99.1327%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLoweringPhase::Run (1 samples, 0.07%)</title><rect x="98.8827%" y="1045" width="0.0698%" height="15" fill="rgb(223,11,35)" fg:x="1416" fg:w="1"/><text x="99.1327%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (1 samples, 0.07%)</title><rect x="98.8827%" y="1029" width="0.0698%" height="15" fill="rgb(251,219,26)" fg:x="1416" fg:w="1"/><text x="99.1327%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunLowerPhase (1 samples, 0.07%)</title><rect x="98.8827%" y="1013" width="0.0698%" height="15" fill="rgb(231,119,3)" fg:x="1416" fg:w="1"/><text x="99.1327%" y="1023.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::VisitNode&lt;(v8::internal::compiler::Phase)2&gt; (1 samples, 0.07%)</title><rect x="98.8827%" y="997" width="0.0698%" height="15" fill="rgb(216,97,11)" fg:x="1416" fg:w="1"/><text x="99.1327%" y="1007.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InstructionSelectionPhase, v8::internal::compiler::Linkage*&amp;&gt; (1 samples, 0.07%)</title><rect x="98.9525%" y="1045" width="0.0698%" height="15" fill="rgb(223,59,9)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelectionPhase::Run (1 samples, 0.07%)</title><rect x="98.9525%" y="1029" width="0.0698%" height="15" fill="rgb(233,93,31)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::SelectInstructions (1 samples, 0.07%)</title><rect x="98.9525%" y="1013" width="0.0698%" height="15" fill="rgb(239,81,33)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitBlock (1 samples, 0.07%)</title><rect x="98.9525%" y="997" width="0.0698%" height="15" fill="rgb(213,120,34)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitControl (1 samples, 0.07%)</title><rect x="98.9525%" y="981" width="0.0698%" height="15" fill="rgb(243,49,53)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::AppendDeoptimizeArguments(v8::internal::ZoneVector (1 samples, 0.07%)</title><rect x="98.9525%" y="965" width="0.0698%" height="15" fill="rgb(247,216,33)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::AddInputsToFrameStateDescriptor(v8::internal::compiler::FrameStateDescriptor*, v8::internal::compiler::FrameState, v8::internal::compiler::OperandGenerator*, v8::internal::compiler::StateObjectDeduplicator*, v8::internal::ZoneVector (1 samples, 0.07%)</title><rect x="98.9525%" y="949" width="0.0698%" height="15" fill="rgb(226,26,14)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::AddInputsToFrameStateDescriptor(v8::internal::compiler::StateValueList*, v8::internal::ZoneVector (1 samples, 0.07%)</title><rect x="98.9525%" y="933" width="0.0698%" height="15" fill="rgb(215,49,53)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::CachedStateValues* v8::internal::Zone::New&lt;v8::internal::compiler::InstructionSelector::CachedStateValues, v8::internal::Zone*&amp;, v8::internal::compiler::StateValueList*&amp;, unsigned long&amp;, v8::internal::ZoneVector&lt;v8::internal::compiler::InstructionOperand&gt;*&amp;, unsigned long&amp;&gt;(v8::internal::Zone*&amp;, v8::internal::compiler::StateValueList*&amp;, unsigned long&amp;, v8::internal::ZoneVector (1 samples, 0.07%)</title><rect x="98.9525%" y="917" width="0.0698%" height="15" fill="rgb(245,162,40)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="927.50"></text></g><g><title>deno`v8::internal::Zone::NewExpand (1 samples, 0.07%)</title><rect x="98.9525%" y="901" width="0.0698%" height="15" fill="rgb(229,68,17)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="911.50"></text></g><g><title>deno`v8::internal::AccountingAllocator::AllocateSegment (1 samples, 0.07%)</title><rect x="98.9525%" y="885" width="0.0698%" height="15" fill="rgb(213,182,10)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="895.50"></text></g><g><title>deno`v8::internal::AllocWithRetry(unsigned long, void* (*) (1 samples, 0.07%)</title><rect x="98.9525%" y="869" width="0.0698%" height="15" fill="rgb(245,125,30)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.07%)</title><rect x="98.9525%" y="853" width="0.0698%" height="15" fill="rgb(232,202,2)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.07%)</title><rect x="98.9525%" y="837" width="0.0698%" height="15" fill="rgb(237,140,51)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.07%)</title><rect x="98.9525%" y="821" width="0.0698%" height="15" fill="rgb(236,157,25)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.07%)</title><rect x="98.9525%" y="805" width="0.0698%" height="15" fill="rgb(219,209,0)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.07%)</title><rect x="98.9525%" y="789" width="0.0698%" height="15" fill="rgb(240,116,54)" fg:x="1417" fg:w="1"/><text x="99.2025%" y="799.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (1 samples, 0.07%)</title><rect x="99.0223%" y="997" width="0.0698%" height="15" fill="rgb(216,10,36)" fg:x="1418" fg:w="1"/><text x="99.2723%" y="1007.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (9 samples, 0.63%)</title><rect x="98.5335%" y="1141" width="0.6285%" height="15" fill="rgb(222,72,44)" fg:x="1411" fg:w="9"/><text x="98.7835%" y="1151.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (9 samples, 0.63%)</title><rect x="98.5335%" y="1125" width="0.6285%" height="15" fill="rgb(232,159,9)" fg:x="1411" fg:w="9"/><text x="98.7835%" y="1135.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (9 samples, 0.63%)</title><rect x="98.5335%" y="1109" width="0.6285%" height="15" fill="rgb(210,39,32)" fg:x="1411" fg:w="9"/><text x="98.7835%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (9 samples, 0.63%)</title><rect x="98.5335%" y="1093" width="0.6285%" height="15" fill="rgb(216,194,45)" fg:x="1411" fg:w="9"/><text x="98.7835%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (7 samples, 0.49%)</title><rect x="98.6732%" y="1077" width="0.4888%" height="15" fill="rgb(218,18,35)" fg:x="1413" fg:w="7"/><text x="98.9232%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (3 samples, 0.21%)</title><rect x="98.9525%" y="1061" width="0.2095%" height="15" fill="rgb(207,83,51)" fg:x="1417" fg:w="3"/><text x="99.2025%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (2 samples, 0.14%)</title><rect x="99.0223%" y="1045" width="0.1397%" height="15" fill="rgb(225,63,43)" fg:x="1418" fg:w="2"/><text x="99.2723%" y="1055.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (2 samples, 0.14%)</title><rect x="99.0223%" y="1029" width="0.1397%" height="15" fill="rgb(207,57,36)" fg:x="1418" fg:w="2"/><text x="99.2723%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (2 samples, 0.14%)</title><rect x="99.0223%" y="1013" width="0.1397%" height="15" fill="rgb(216,99,33)" fg:x="1418" fg:w="2"/><text x="99.2723%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges (1 samples, 0.07%)</title><rect x="99.0922%" y="997" width="0.0698%" height="15" fill="rgb(225,42,16)" fg:x="1419" fg:w="1"/><text x="99.3422%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator() (1 samples, 0.07%)</title><rect x="99.0922%" y="981" width="0.0698%" height="15" fill="rgb(220,201,45)" fg:x="1419" fg:w="1"/><text x="99.3422%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator()(v8::internal::compiler::LiveRange*) const::&apos;lambda&apos;(v8::internal::compiler::LiveRange*, v8::internal::compiler::LiveRange*, std::__1::function&lt;void (v8::internal::compiler::LiveRange*)&gt;)::operator()(v8::internal::compiler::LiveRange*, v8::internal::compiler::LiveRange*, std::__1::function&lt;void (1 samples, 0.07%)</title><rect x="99.0922%" y="965" width="0.0698%" height="15" fill="rgb(225,33,4)" fg:x="1419" fg:w="1"/><text x="99.3422%" y="975.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (1 samples, 0.07%)</title><rect x="99.1620%" y="1141" width="0.0698%" height="15" fill="rgb(224,33,50)" fg:x="1420" fg:w="1"/><text x="99.4120%" y="1151.50"></text></g><g><title>deno`v8::platform::(anonymous namespace)::DefaultTimeFunction (1 samples, 0.07%)</title><rect x="99.1620%" y="1125" width="0.0698%" height="15" fill="rgb(246,198,51)" fg:x="1420" fg:w="1"/><text x="99.4120%" y="1135.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.07%)</title><rect x="99.1620%" y="1109" width="0.0698%" height="15" fill="rgb(205,22,4)" fg:x="1420" fg:w="1"/><text x="99.4120%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="99.2318%" y="1077" width="0.0698%" height="15" fill="rgb(206,3,8)" fg:x="1421" fg:w="1"/><text x="99.4818%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.07%)</title><rect x="99.3715%" y="1061" width="0.0698%" height="15" fill="rgb(251,23,15)" fg:x="1423" fg:w="1"/><text x="99.6215%" y="1071.50"></text></g><g><title>deno`v8::internal::BackingStore::~BackingStore (4 samples, 0.28%)</title><rect x="99.2318%" y="1093" width="0.2793%" height="15" fill="rgb(252,88,28)" fg:x="1421" fg:w="4"/><text x="99.4818%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.21%)</title><rect x="99.3017%" y="1077" width="0.2095%" height="15" fill="rgb(212,127,14)" fg:x="1422" fg:w="3"/><text x="99.5517%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.07%)</title><rect x="99.4413%" y="1061" width="0.0698%" height="15" fill="rgb(247,145,37)" fg:x="1424" fg:w="1"/><text x="99.6913%" y="1071.50"></text></g><g><title>deno`std::__1::__shared_ptr_pointer&lt;v8::internal::BackingStore*, std::__1::default_delete&lt;v8::internal::BackingStore&gt;, std::__1::allocator&lt;v8::internal::BackingStore&gt; &gt;::__on_zero_shared (5 samples, 0.35%)</title><rect x="99.2318%" y="1109" width="0.3492%" height="15" fill="rgb(209,117,53)" fg:x="1421" fg:w="5"/><text x="99.4818%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.07%)</title><rect x="99.5112%" y="1093" width="0.0698%" height="15" fill="rgb(212,90,42)" fg:x="1425" fg:w="1"/><text x="99.7612%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.28%)</title><rect x="99.5810%" y="1109" width="0.2793%" height="15" fill="rgb(218,164,37)" fg:x="1426" fg:w="4"/><text x="99.8310%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.14%)</title><rect x="99.7207%" y="1093" width="0.1397%" height="15" fill="rgb(246,65,34)" fg:x="1428" fg:w="2"/><text x="99.9707%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.07%)</title><rect x="99.8603%" y="1109" width="0.0698%" height="15" fill="rgb(231,100,33)" fg:x="1430" fg:w="1"/><text x="100.1103%" y="1119.50"></text></g><g><title>all (1,432 samples, 100%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(228,126,14)" fg:x="0" fg:w="1432"/><text x="0.2500%" y="1231.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (522 samples, 36.45%)</title><rect x="63.5475%" y="1205" width="36.4525%" height="15" fill="rgb(215,173,21)" fg:x="910" fg:w="522"/><text x="63.7975%" y="1215.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (522 samples, 36.45%)</title><rect x="63.5475%" y="1189" width="36.4525%" height="15" fill="rgb(210,6,40)" fg:x="910" fg:w="522"/><text x="63.7975%" y="1199.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>deno`v8::base::ThreadEntry (21 samples, 1.47%)</title><rect x="98.5335%" y="1173" width="1.4665%" height="15" fill="rgb(212,48,18)" fg:x="1411" fg:w="21"/><text x="98.7835%" y="1183.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (21 samples, 1.47%)</title><rect x="98.5335%" y="1157" width="1.4665%" height="15" fill="rgb(230,214,11)" fg:x="1411" fg:w="21"/><text x="98.7835%" y="1167.50"></text></g><g><title>deno`void std::__1::__function::__policy_invoker&lt;void ()&gt;::__call_impl&lt;std::__1::__function::__default_alloc_func&lt;v8::internal::ArrayBufferSweeper::RequestSweep(v8::internal::ArrayBufferSweeper::SweepingType)::$_0, void ()&gt; &gt; (11 samples, 0.77%)</title><rect x="99.2318%" y="1141" width="0.7682%" height="15" fill="rgb(254,105,39)" fg:x="1421" fg:w="11"/><text x="99.4818%" y="1151.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::SweepingJob::SweepYoung (11 samples, 0.77%)</title><rect x="99.2318%" y="1125" width="0.7682%" height="15" fill="rgb(245,158,5)" fg:x="1421" fg:w="11"/><text x="99.4818%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.07%)</title><rect x="99.9302%" y="1109" width="0.0698%" height="15" fill="rgb(249,208,11)" fg:x="1431" fg:w="1"/><text x="100.1802%" y="1119.50"></text></g></svg></svg>