<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1205.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="1562"><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (2 samples, 0.13%)</title><rect x="0.0640%" y="917" width="0.1280%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.3140%" y="927.50"></text></g><g><title>0x11000d9fc (1 samples, 0.06%)</title><rect x="0.1921%" y="885" width="0.0640%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.4421%" y="895.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="0.3201%" y="853" width="0.0640%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.5701%" y="863.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.06%)</title><rect x="0.6402%" y="837" width="0.0640%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="1"/><text x="0.8902%" y="847.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (1 samples, 0.06%)</title><rect x="0.7042%" y="837" width="0.0640%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="1"/><text x="0.9542%" y="847.50"></text></g><g><title>deno`v8::Value::IsInt32 (1 samples, 0.06%)</title><rect x="0.7682%" y="837" width="0.0640%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="1"/><text x="1.0182%" y="847.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.06%)</title><rect x="0.8323%" y="837" width="0.0640%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="1"/><text x="1.0823%" y="847.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (1 samples, 0.06%)</title><rect x="0.8963%" y="837" width="0.0640%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="1"/><text x="1.1463%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="0.9603%" y="837" width="0.0640%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="1"/><text x="1.2103%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="0.9603%" y="821" width="0.0640%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="1"/><text x="1.2103%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="1.0243%" y="837" width="0.0640%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="1"/><text x="1.2743%" y="847.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (12 samples, 0.77%)</title><rect x="0.3841%" y="853" width="0.7682%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="12"/><text x="0.6341%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="1.0883%" y="837" width="0.0640%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="1"/><text x="1.3383%" y="847.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.06%)</title><rect x="1.1524%" y="853" width="0.0640%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="1"/><text x="1.4024%" y="863.50"></text></g><g><title>0x11000e1b0 (16 samples, 1.02%)</title><rect x="0.2561%" y="885" width="1.0243%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="16"/><text x="0.5061%" y="895.50"></text></g><g><title>deno`Builtins_CallApiCallback (16 samples, 1.02%)</title><rect x="0.2561%" y="869" width="1.0243%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="16"/><text x="0.5061%" y="879.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.06%)</title><rect x="1.2164%" y="853" width="0.0640%" height="15" fill="rgb(225,20,46)" fg:x="19" fg:w="1"/><text x="1.4664%" y="863.50"></text></g><g><title>0x11000e210 (2 samples, 0.13%)</title><rect x="1.2804%" y="885" width="0.1280%" height="15" fill="rgb(210,31,41)" fg:x="20" fg:w="2"/><text x="1.5304%" y="895.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (2 samples, 0.13%)</title><rect x="1.2804%" y="869" width="0.1280%" height="15" fill="rgb(221,200,47)" fg:x="20" fg:w="2"/><text x="1.5304%" y="879.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (1 samples, 0.06%)</title><rect x="1.3444%" y="853" width="0.0640%" height="15" fill="rgb(226,26,5)" fg:x="21" fg:w="1"/><text x="1.5944%" y="863.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.06%)</title><rect x="1.4085%" y="725" width="0.0640%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="1"/><text x="1.6585%" y="735.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (1 samples, 0.06%)</title><rect x="1.4085%" y="709" width="0.0640%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="1"/><text x="1.6585%" y="719.50"></text></g><g><title>0x11000e570 (2 samples, 0.13%)</title><rect x="1.4085%" y="885" width="0.1280%" height="15" fill="rgb(221,5,38)" fg:x="22" fg:w="2"/><text x="1.6585%" y="895.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.13%)</title><rect x="1.4085%" y="869" width="0.1280%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="2"/><text x="1.6585%" y="879.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.13%)</title><rect x="1.4085%" y="853" width="0.1280%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="2"/><text x="1.6585%" y="863.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.13%)</title><rect x="1.4085%" y="837" width="0.1280%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="2"/><text x="1.6585%" y="847.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.13%)</title><rect x="1.4085%" y="821" width="0.1280%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="2"/><text x="1.6585%" y="831.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.13%)</title><rect x="1.4085%" y="805" width="0.1280%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="2"/><text x="1.6585%" y="815.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.13%)</title><rect x="1.4085%" y="789" width="0.1280%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="2"/><text x="1.6585%" y="799.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.13%)</title><rect x="1.4085%" y="773" width="0.1280%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="2"/><text x="1.6585%" y="783.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.13%)</title><rect x="1.4085%" y="757" width="0.1280%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="2"/><text x="1.6585%" y="767.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.13%)</title><rect x="1.4085%" y="741" width="0.1280%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="2"/><text x="1.6585%" y="751.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.06%)</title><rect x="1.4725%" y="725" width="0.0640%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="1.7225%" y="735.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (1 samples, 0.06%)</title><rect x="1.4725%" y="709" width="0.0640%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="1"/><text x="1.7225%" y="719.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (1 samples, 0.06%)</title><rect x="1.4725%" y="693" width="0.0640%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="1"/><text x="1.7225%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.06%)</title><rect x="1.4725%" y="677" width="0.0640%" height="15" fill="rgb(233,36,39)" fg:x="23" fg:w="1"/><text x="1.7225%" y="687.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (22 samples, 1.41%)</title><rect x="0.1921%" y="901" width="1.4085%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="22"/><text x="0.4421%" y="911.50"></text></g><g><title>0x11000e720 (1 samples, 0.06%)</title><rect x="1.5365%" y="885" width="0.0640%" height="15" fill="rgb(245,192,40)" fg:x="24" fg:w="1"/><text x="1.7865%" y="895.50"></text></g><g><title>deno`deno::run_command::_{{closure}} (26 samples, 1.66%)</title><rect x="0.0000%" y="1157" width="1.6645%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1167.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 1.66%)</title><rect x="0.0000%" y="1141" width="1.6645%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1151.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 1.66%)</title><rect x="0.0000%" y="1125" width="1.6645%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1135.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 1.66%)</title><rect x="0.0000%" y="1109" width="1.6645%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1119.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 1.66%)</title><rect x="0.0000%" y="1093" width="1.6645%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1103.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (26 samples, 1.66%)</title><rect x="0.0000%" y="1077" width="1.6645%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1087.50"></text></g><g><title>deno`v8::Module::Evaluate(v8::Local (26 samples, 1.66%)</title><rect x="0.0000%" y="1061" width="1.6645%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1071.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (26 samples, 1.66%)</title><rect x="0.0000%" y="1045" width="1.6645%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1055.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (26 samples, 1.66%)</title><rect x="0.0000%" y="1029" width="1.6645%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1039.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (26 samples, 1.66%)</title><rect x="0.0000%" y="1013" width="1.6645%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1023.50"></text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (26 samples, 1.66%)</title><rect x="0.0000%" y="997" width="1.6645%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1007.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (26 samples, 1.66%)</title><rect x="0.0000%" y="981" width="1.6645%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="26"/><text x="0.2500%" y="991.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (26 samples, 1.66%)</title><rect x="0.0000%" y="965" width="1.6645%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="26"/><text x="0.2500%" y="975.50"></text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (26 samples, 1.66%)</title><rect x="0.0000%" y="949" width="1.6645%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="26"/><text x="0.2500%" y="959.50"></text></g><g><title>deno`Builtins_RunMicrotasks (26 samples, 1.66%)</title><rect x="0.0000%" y="933" width="1.6645%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="26"/><text x="0.2500%" y="943.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (23 samples, 1.47%)</title><rect x="0.1921%" y="917" width="1.4725%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="23"/><text x="0.4421%" y="927.50"></text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (1 samples, 0.06%)</title><rect x="1.6005%" y="901" width="0.0640%" height="15" fill="rgb(231,145,46)" fg:x="25" fg:w="1"/><text x="1.8505%" y="911.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="1.6645%" y="949" width="0.0640%" height="15" fill="rgb(251,118,11)" fg:x="26" fg:w="1"/><text x="1.9145%" y="959.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="1.6645%" y="933" width="0.0640%" height="15" fill="rgb(217,147,25)" fg:x="26" fg:w="1"/><text x="1.9145%" y="943.50"></text></g><g><title>deno`deno::cache::parsed_source::ParsedSourceCache::as_analyzer (1 samples, 0.06%)</title><rect x="1.6645%" y="917" width="0.0640%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="1"/><text x="1.9145%" y="927.50"></text></g><g><title>deno`deno::cache::common::run_sqlite_pragma (1 samples, 0.06%)</title><rect x="1.6645%" y="901" width="0.0640%" height="15" fill="rgb(209,12,38)" fg:x="26" fg:w="1"/><text x="1.9145%" y="911.50"></text></g><g><title>deno`rusqlite::Connection::execute_batch (1 samples, 0.06%)</title><rect x="1.6645%" y="885" width="0.0640%" height="15" fill="rgb(227,1,9)" fg:x="26" fg:w="1"/><text x="1.9145%" y="895.50"></text></g><g><title>deno`rusqlite::Connection::prepare (1 samples, 0.06%)</title><rect x="1.6645%" y="869" width="0.0640%" height="15" fill="rgb(248,47,43)" fg:x="26" fg:w="1"/><text x="1.9145%" y="879.50"></text></g><g><title>deno`rusqlite::inner_connection::InnerConnection::prepare (1 samples, 0.06%)</title><rect x="1.6645%" y="853" width="0.0640%" height="15" fill="rgb(221,10,30)" fg:x="26" fg:w="1"/><text x="1.9145%" y="863.50"></text></g><g><title>deno`sqlite3LockAndPrepare (1 samples, 0.06%)</title><rect x="1.6645%" y="837" width="0.0640%" height="15" fill="rgb(210,229,1)" fg:x="26" fg:w="1"/><text x="1.9145%" y="847.50"></text></g><g><title>deno`sqlite3Prepare (1 samples, 0.06%)</title><rect x="1.6645%" y="821" width="0.0640%" height="15" fill="rgb(222,148,37)" fg:x="26" fg:w="1"/><text x="1.9145%" y="831.50"></text></g><g><title>deno`sqlite3RunParser (1 samples, 0.06%)</title><rect x="1.6645%" y="805" width="0.0640%" height="15" fill="rgb(234,67,33)" fg:x="26" fg:w="1"/><text x="1.9145%" y="815.50"></text></g><g><title>deno`yy_reduce (1 samples, 0.06%)</title><rect x="1.6645%" y="789" width="0.0640%" height="15" fill="rgb(247,98,35)" fg:x="26" fg:w="1"/><text x="1.9145%" y="799.50"></text></g><g><title>deno`sqlite3Pragma (1 samples, 0.06%)</title><rect x="1.6645%" y="773" width="0.0640%" height="15" fill="rgb(247,138,52)" fg:x="26" fg:w="1"/><text x="1.9145%" y="783.50"></text></g><g><title>deno`sqlite3ReadSchema (1 samples, 0.06%)</title><rect x="1.6645%" y="757" width="0.0640%" height="15" fill="rgb(213,79,30)" fg:x="26" fg:w="1"/><text x="1.9145%" y="767.50"></text></g><g><title>deno`sqlite3Init (1 samples, 0.06%)</title><rect x="1.6645%" y="741" width="0.0640%" height="15" fill="rgb(246,177,23)" fg:x="26" fg:w="1"/><text x="1.9145%" y="751.50"></text></g><g><title>deno`sqlite3InitOne (1 samples, 0.06%)</title><rect x="1.6645%" y="725" width="0.0640%" height="15" fill="rgb(230,62,27)" fg:x="26" fg:w="1"/><text x="1.9145%" y="735.50"></text></g><g><title>deno`sqlite3BtreeBeginTrans (1 samples, 0.06%)</title><rect x="1.6645%" y="709" width="0.0640%" height="15" fill="rgb(216,154,8)" fg:x="26" fg:w="1"/><text x="1.9145%" y="719.50"></text></g><g><title>deno`sqlite3PagerSharedLock (1 samples, 0.06%)</title><rect x="1.6645%" y="693" width="0.0640%" height="15" fill="rgb(244,35,45)" fg:x="26" fg:w="1"/><text x="1.9145%" y="703.50"></text></g><g><title>deno`walTryBeginRead (1 samples, 0.06%)</title><rect x="1.6645%" y="677" width="0.0640%" height="15" fill="rgb(251,115,12)" fg:x="26" fg:w="1"/><text x="1.9145%" y="687.50"></text></g><g><title>deno`walIndexReadHdr (1 samples, 0.06%)</title><rect x="1.6645%" y="661" width="0.0640%" height="15" fill="rgb(240,54,50)" fg:x="26" fg:w="1"/><text x="1.9145%" y="671.50"></text></g><g><title>deno`walIndexPageRealloc (1 samples, 0.06%)</title><rect x="1.6645%" y="645" width="0.0640%" height="15" fill="rgb(233,84,52)" fg:x="26" fg:w="1"/><text x="1.9145%" y="655.50"></text></g><g><title>deno`unixShmMap (1 samples, 0.06%)</title><rect x="1.6645%" y="629" width="0.0640%" height="15" fill="rgb(207,117,47)" fg:x="26" fg:w="1"/><text x="1.9145%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`pwrite (1 samples, 0.06%)</title><rect x="1.6645%" y="613" width="0.0640%" height="15" fill="rgb(249,43,39)" fg:x="26" fg:w="1"/><text x="1.9145%" y="623.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (3 samples, 0.19%)</title><rect x="3.8412%" y="789" width="0.1921%" height="15" fill="rgb(209,38,44)" fg:x="60" fg:w="3"/><text x="4.0912%" y="799.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (22 samples, 1.41%)</title><rect x="4.0333%" y="789" width="1.4085%" height="15" fill="rgb(236,212,23)" fg:x="63" fg:w="22"/><text x="4.2833%" y="799.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNullOrUndefined (13 samples, 0.83%)</title><rect x="5.4417%" y="789" width="0.8323%" height="15" fill="rgb(242,79,21)" fg:x="85" fg:w="13"/><text x="5.6917%" y="799.50"></text></g><g><title>0x11000c8a8 (1 samples, 0.06%)</title><rect x="7.4904%" y="773" width="0.0640%" height="15" fill="rgb(211,96,35)" fg:x="117" fg:w="1"/><text x="7.7404%" y="783.50"></text></g><g><title>0x11000c9b4 (1 samples, 0.06%)</title><rect x="7.5544%" y="773" width="0.0640%" height="15" fill="rgb(253,215,40)" fg:x="118" fg:w="1"/><text x="7.8044%" y="783.50"></text></g><g><title>0x11000d728 (2 samples, 0.13%)</title><rect x="7.6184%" y="773" width="0.1280%" height="15" fill="rgb(211,81,21)" fg:x="119" fg:w="2"/><text x="7.8684%" y="783.50"></text></g><g><title>0x11000ddf0 (3 samples, 0.19%)</title><rect x="7.7465%" y="773" width="0.1921%" height="15" fill="rgb(208,190,38)" fg:x="121" fg:w="3"/><text x="7.9965%" y="783.50"></text></g><g><title>0x11000b084 (1 samples, 0.06%)</title><rect x="9.1549%" y="741" width="0.0640%" height="15" fill="rgb(235,213,38)" fg:x="143" fg:w="1"/><text x="9.4049%" y="751.50"></text></g><g><title>0x11000b34c (1 samples, 0.06%)</title><rect x="9.1549%" y="725" width="0.0640%" height="15" fill="rgb(237,122,38)" fg:x="143" fg:w="1"/><text x="9.4049%" y="735.50"></text></g><g><title>deno`Builtins_FastNewClosure (1 samples, 0.06%)</title><rect x="9.1549%" y="709" width="0.0640%" height="15" fill="rgb(244,218,35)" fg:x="143" fg:w="1"/><text x="9.4049%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (1 samples, 0.06%)</title><rect x="9.2190%" y="693" width="0.0640%" height="15" fill="rgb(240,68,47)" fg:x="144" fg:w="1"/><text x="9.4690%" y="703.50"></text></g><g><title>0x11000c524 (2 samples, 0.13%)</title><rect x="9.2190%" y="741" width="0.1280%" height="15" fill="rgb(210,16,53)" fg:x="144" fg:w="2"/><text x="9.4690%" y="751.50"></text></g><g><title>deno`Builtins_CallApiCallback (2 samples, 0.13%)</title><rect x="9.2190%" y="725" width="0.1280%" height="15" fill="rgb(235,124,12)" fg:x="144" fg:w="2"/><text x="9.4690%" y="735.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.13%)</title><rect x="9.2190%" y="709" width="0.1280%" height="15" fill="rgb(224,169,11)" fg:x="144" fg:w="2"/><text x="9.4690%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (1 samples, 0.06%)</title><rect x="9.2830%" y="693" width="0.0640%" height="15" fill="rgb(250,166,2)" fg:x="145" fg:w="1"/><text x="9.5330%" y="703.50"></text></g><g><title>0x110009e28 (4 samples, 0.26%)</title><rect x="9.1549%" y="757" width="0.2561%" height="15" fill="rgb(242,216,29)" fg:x="143" fg:w="4"/><text x="9.4049%" y="767.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_PolymorphicName (1 samples, 0.06%)</title><rect x="9.3470%" y="741" width="0.0640%" height="15" fill="rgb(230,116,27)" fg:x="146" fg:w="1"/><text x="9.5970%" y="751.50"></text></g><g><title>0x11000c904 (1 samples, 0.06%)</title><rect x="9.4110%" y="757" width="0.0640%" height="15" fill="rgb(228,99,48)" fg:x="147" fg:w="1"/><text x="9.6610%" y="767.50"></text></g><g><title>0x11000ca20 (2 samples, 0.13%)</title><rect x="9.4750%" y="757" width="0.1280%" height="15" fill="rgb(253,11,6)" fg:x="148" fg:w="2"/><text x="9.7250%" y="767.50"></text></g><g><title>0x11000ca5c (1 samples, 0.06%)</title><rect x="9.6031%" y="757" width="0.0640%" height="15" fill="rgb(247,143,39)" fg:x="150" fg:w="1"/><text x="9.8531%" y="767.50"></text></g><g><title>0x11000cb10 (1 samples, 0.06%)</title><rect x="9.6671%" y="757" width="0.0640%" height="15" fill="rgb(236,97,10)" fg:x="151" fg:w="1"/><text x="9.9171%" y="767.50"></text></g><g><title>0x11000cb24 (1 samples, 0.06%)</title><rect x="9.7311%" y="757" width="0.0640%" height="15" fill="rgb(233,208,19)" fg:x="152" fg:w="1"/><text x="9.9811%" y="767.50"></text></g><g><title>0x11000cbf8 (1 samples, 0.06%)</title><rect x="9.7951%" y="757" width="0.0640%" height="15" fill="rgb(216,164,2)" fg:x="153" fg:w="1"/><text x="10.0451%" y="767.50"></text></g><g><title>0x11000cc08 (1 samples, 0.06%)</title><rect x="9.8592%" y="757" width="0.0640%" height="15" fill="rgb(220,129,5)" fg:x="154" fg:w="1"/><text x="10.1092%" y="767.50"></text></g><g><title>0x11000cc98 (1 samples, 0.06%)</title><rect x="9.9232%" y="757" width="0.0640%" height="15" fill="rgb(242,17,10)" fg:x="155" fg:w="1"/><text x="10.1732%" y="767.50"></text></g><g><title>0x11000ccf0 (1 samples, 0.06%)</title><rect x="9.9872%" y="757" width="0.0640%" height="15" fill="rgb(242,107,0)" fg:x="156" fg:w="1"/><text x="10.2372%" y="767.50"></text></g><g><title>0x11000cd2c (1 samples, 0.06%)</title><rect x="10.0512%" y="757" width="0.0640%" height="15" fill="rgb(251,28,31)" fg:x="157" fg:w="1"/><text x="10.3012%" y="767.50"></text></g><g><title>0x11000cd34 (1 samples, 0.06%)</title><rect x="10.1152%" y="757" width="0.0640%" height="15" fill="rgb(233,223,10)" fg:x="158" fg:w="1"/><text x="10.3652%" y="767.50"></text></g><g><title>0x11000cd94 (1 samples, 0.06%)</title><rect x="10.1793%" y="757" width="0.0640%" height="15" fill="rgb(215,21,27)" fg:x="159" fg:w="1"/><text x="10.4293%" y="767.50"></text></g><g><title>0x11000cdd0 (1 samples, 0.06%)</title><rect x="10.2433%" y="757" width="0.0640%" height="15" fill="rgb(232,23,21)" fg:x="160" fg:w="1"/><text x="10.4933%" y="767.50"></text></g><g><title>0x11000cdec (1 samples, 0.06%)</title><rect x="10.3073%" y="757" width="0.0640%" height="15" fill="rgb(244,5,23)" fg:x="161" fg:w="1"/><text x="10.5573%" y="767.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.06%)</title><rect x="11.3316%" y="709" width="0.0640%" height="15" fill="rgb(226,81,46)" fg:x="177" fg:w="1"/><text x="11.5816%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (1 samples, 0.06%)</title><rect x="11.3956%" y="709" width="0.0640%" height="15" fill="rgb(247,70,30)" fg:x="178" fg:w="1"/><text x="11.6456%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (1 samples, 0.06%)</title><rect x="11.4597%" y="709" width="0.0640%" height="15" fill="rgb(212,68,19)" fg:x="179" fg:w="1"/><text x="11.7097%" y="719.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (3 samples, 0.19%)</title><rect x="11.5237%" y="709" width="0.1921%" height="15" fill="rgb(240,187,13)" fg:x="180" fg:w="3"/><text x="11.7737%" y="719.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (2 samples, 0.13%)</title><rect x="11.5877%" y="693" width="0.1280%" height="15" fill="rgb(223,113,26)" fg:x="181" fg:w="2"/><text x="11.8377%" y="703.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.06%)</title><rect x="11.7157%" y="709" width="0.0640%" height="15" fill="rgb(206,192,2)" fg:x="183" fg:w="1"/><text x="11.9657%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (6 samples, 0.38%)</title><rect x="11.7798%" y="709" width="0.3841%" height="15" fill="rgb(241,108,4)" fg:x="184" fg:w="6"/><text x="12.0298%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (1 samples, 0.06%)</title><rect x="12.1639%" y="709" width="0.0640%" height="15" fill="rgb(247,173,49)" fg:x="190" fg:w="1"/><text x="12.4139%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (3 samples, 0.19%)</title><rect x="12.2279%" y="709" width="0.1921%" height="15" fill="rgb(224,114,35)" fg:x="191" fg:w="3"/><text x="12.4779%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (1 samples, 0.06%)</title><rect x="12.4200%" y="709" width="0.0640%" height="15" fill="rgb(245,159,27)" fg:x="194" fg:w="1"/><text x="12.6700%" y="719.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (1 samples, 0.06%)</title><rect x="12.4200%" y="693" width="0.0640%" height="15" fill="rgb(245,172,44)" fg:x="194" fg:w="1"/><text x="12.6700%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (1 samples, 0.06%)</title><rect x="12.4840%" y="709" width="0.0640%" height="15" fill="rgb(236,23,11)" fg:x="195" fg:w="1"/><text x="12.7340%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (2 samples, 0.13%)</title><rect x="12.5480%" y="709" width="0.1280%" height="15" fill="rgb(205,117,38)" fg:x="196" fg:w="2"/><text x="12.7980%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (2 samples, 0.13%)</title><rect x="12.6761%" y="709" width="0.1280%" height="15" fill="rgb(237,72,25)" fg:x="198" fg:w="2"/><text x="12.9261%" y="719.50"></text></g><g><title>deno`v8__Global__New (10 samples, 0.64%)</title><rect x="12.8041%" y="709" width="0.6402%" height="15" fill="rgb(244,70,9)" fg:x="200" fg:w="10"/><text x="13.0541%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (8 samples, 0.51%)</title><rect x="12.9321%" y="693" width="0.5122%" height="15" fill="rgb(217,125,39)" fg:x="202" fg:w="8"/><text x="13.1821%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.19%)</title><rect x="13.5723%" y="693" width="0.1921%" height="15" fill="rgb(235,36,10)" fg:x="212" fg:w="3"/><text x="13.8223%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.64%)</title><rect x="13.4443%" y="709" width="0.6402%" height="15" fill="rgb(251,123,47)" fg:x="210" fg:w="10"/><text x="13.6943%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.32%)</title><rect x="13.7644%" y="693" width="0.3201%" height="15" fill="rgb(221,13,13)" fg:x="215" fg:w="5"/><text x="14.0144%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.19%)</title><rect x="13.8924%" y="677" width="0.1921%" height="15" fill="rgb(238,131,9)" fg:x="217" fg:w="3"/><text x="14.1424%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.26%)</title><rect x="14.3406%" y="693" width="0.2561%" height="15" fill="rgb(211,50,8)" fg:x="224" fg:w="4"/><text x="14.5906%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.58%)</title><rect x="14.0845%" y="709" width="0.5762%" height="15" fill="rgb(245,182,24)" fg:x="220" fg:w="9"/><text x="14.3345%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="14.5967%" y="693" width="0.0640%" height="15" fill="rgb(242,14,37)" fg:x="228" fg:w="1"/><text x="14.8467%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="14.6607%" y="709" width="0.0640%" height="15" fill="rgb(246,228,12)" fg:x="229" fg:w="1"/><text x="14.9107%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="14.7247%" y="709" width="0.0640%" height="15" fill="rgb(213,55,15)" fg:x="230" fg:w="1"/><text x="14.9747%" y="719.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (67 samples, 4.29%)</title><rect x="10.5634%" y="725" width="4.2894%" height="15" fill="rgb(209,9,3)" fg:x="165" fg:w="67"/><text x="10.8134%" y="735.50">deno`..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="14.7887%" y="709" width="0.0640%" height="15" fill="rgb(230,59,30)" fg:x="231" fg:w="1"/><text x="15.0387%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.06%)</title><rect x="14.8528%" y="725" width="0.0640%" height="15" fill="rgb(209,121,21)" fg:x="232" fg:w="1"/><text x="15.1028%" y="735.50"></text></g><g><title>deno`DYLD-STUB$$free (1 samples, 0.06%)</title><rect x="14.9168%" y="725" width="0.0640%" height="15" fill="rgb(220,109,13)" fg:x="233" fg:w="1"/><text x="15.1668%" y="735.50"></text></g><g><title>deno`DYLD-STUB$$malloc (2 samples, 0.13%)</title><rect x="14.9808%" y="725" width="0.1280%" height="15" fill="rgb(232,18,1)" fg:x="234" fg:w="2"/><text x="15.2308%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (1 samples, 0.06%)</title><rect x="15.1088%" y="725" width="0.0640%" height="15" fill="rgb(215,41,42)" fg:x="236" fg:w="1"/><text x="15.3588%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (1 samples, 0.06%)</title><rect x="15.1729%" y="725" width="0.0640%" height="15" fill="rgb(224,123,36)" fg:x="237" fg:w="1"/><text x="15.4229%" y="735.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (1 samples, 0.06%)</title><rect x="15.2369%" y="725" width="0.0640%" height="15" fill="rgb(240,125,3)" fg:x="238" fg:w="1"/><text x="15.4869%" y="735.50"></text></g><g><title>deno`futures_task::noop_waker::noop (1 samples, 0.06%)</title><rect x="15.3009%" y="725" width="0.0640%" height="15" fill="rgb(205,98,50)" fg:x="239" fg:w="1"/><text x="15.5509%" y="735.50"></text></g><g><title>deno`v8::Integer::Value (2 samples, 0.13%)</title><rect x="15.3649%" y="725" width="0.1280%" height="15" fill="rgb(205,185,37)" fg:x="240" fg:w="2"/><text x="15.6149%" y="735.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (1 samples, 0.06%)</title><rect x="15.4930%" y="725" width="0.0640%" height="15" fill="rgb(238,207,15)" fg:x="242" fg:w="1"/><text x="15.7430%" y="735.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (1 samples, 0.06%)</title><rect x="15.5570%" y="725" width="0.0640%" height="15" fill="rgb(213,199,42)" fg:x="243" fg:w="1"/><text x="15.8070%" y="735.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (1 samples, 0.06%)</title><rect x="15.6210%" y="725" width="0.0640%" height="15" fill="rgb(235,201,11)" fg:x="244" fg:w="1"/><text x="15.8710%" y="735.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.06%)</title><rect x="15.6850%" y="725" width="0.0640%" height="15" fill="rgb(207,46,11)" fg:x="245" fg:w="1"/><text x="15.9350%" y="735.50"></text></g><g><title>deno`v8__ReturnValue__Set (1 samples, 0.06%)</title><rect x="15.7490%" y="725" width="0.0640%" height="15" fill="rgb(241,35,35)" fg:x="246" fg:w="1"/><text x="15.9990%" y="735.50"></text></g><g><title>0x11000ce30 (86 samples, 5.51%)</title><rect x="10.3713%" y="757" width="5.5058%" height="15" fill="rgb(243,32,47)" fg:x="162" fg:w="86"/><text x="10.6213%" y="767.50">0x11000..</text></g><g><title>deno`Builtins_CallApiCallback (86 samples, 5.51%)</title><rect x="10.3713%" y="741" width="5.5058%" height="15" fill="rgb(247,202,23)" fg:x="162" fg:w="86"/><text x="10.6213%" y="751.50">deno`Bu..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.06%)</title><rect x="15.8131%" y="725" width="0.0640%" height="15" fill="rgb(219,102,11)" fg:x="247" fg:w="1"/><text x="16.0631%" y="735.50"></text></g><g><title>0x11000ce74 (1 samples, 0.06%)</title><rect x="15.8771%" y="757" width="0.0640%" height="15" fill="rgb(243,110,44)" fg:x="248" fg:w="1"/><text x="16.1271%" y="767.50"></text></g><g><title>0x11000ce7c (1 samples, 0.06%)</title><rect x="15.9411%" y="757" width="0.0640%" height="15" fill="rgb(222,74,54)" fg:x="249" fg:w="1"/><text x="16.1911%" y="767.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (1 samples, 0.06%)</title><rect x="15.9411%" y="741" width="0.0640%" height="15" fill="rgb(216,99,12)" fg:x="249" fg:w="1"/><text x="16.1911%" y="751.50"></text></g><g><title>deno`Builtins_ResolvePromise (1 samples, 0.06%)</title><rect x="15.9411%" y="725" width="0.0640%" height="15" fill="rgb(226,22,26)" fg:x="249" fg:w="1"/><text x="16.1911%" y="735.50"></text></g><g><title>deno`Builtins_FulfillPromise (1 samples, 0.06%)</title><rect x="15.9411%" y="709" width="0.0640%" height="15" fill="rgb(217,163,10)" fg:x="249" fg:w="1"/><text x="16.1911%" y="719.50"></text></g><g><title>0x11000ce90 (10 samples, 0.64%)</title><rect x="16.0051%" y="757" width="0.6402%" height="15" fill="rgb(213,25,53)" fg:x="250" fg:w="10"/><text x="16.2551%" y="767.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (10 samples, 0.64%)</title><rect x="16.0051%" y="741" width="0.6402%" height="15" fill="rgb(252,105,26)" fg:x="250" fg:w="10"/><text x="16.2551%" y="751.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (3 samples, 0.19%)</title><rect x="16.4533%" y="725" width="0.1921%" height="15" fill="rgb(220,39,43)" fg:x="257" fg:w="3"/><text x="16.7033%" y="735.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (5 samples, 0.32%)</title><rect x="16.6453%" y="581" width="0.3201%" height="15" fill="rgb(229,68,48)" fg:x="260" fg:w="5"/><text x="16.8953%" y="591.50"></text></g><g><title>deno`v8::internal::Isolate::Iterate (1 samples, 0.06%)</title><rect x="16.9654%" y="581" width="0.0640%" height="15" fill="rgb(252,8,32)" fg:x="265" fg:w="1"/><text x="17.2154%" y="591.50"></text></g><g><title>deno`v8::internal::CommonFrame::IterateTurbofanOptimizedFrame (1 samples, 0.06%)</title><rect x="16.9654%" y="565" width="0.0640%" height="15" fill="rgb(223,20,43)" fg:x="265" fg:w="1"/><text x="17.2154%" y="575.50"></text></g><g><title>deno`v8::internal::OffHeapStackSlots (1 samples, 0.06%)</title><rect x="16.9654%" y="549" width="0.0640%" height="15" fill="rgb(229,81,49)" fg:x="265" fg:w="1"/><text x="17.2154%" y="559.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (9 samples, 0.58%)</title><rect x="16.6453%" y="597" width="0.5762%" height="15" fill="rgb(236,28,36)" fg:x="260" fg:w="9"/><text x="16.8953%" y="607.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (3 samples, 0.19%)</title><rect x="17.0294%" y="581" width="0.1921%" height="15" fill="rgb(249,185,26)" fg:x="266" fg:w="3"/><text x="17.2794%" y="591.50"></text></g><g><title>deno`v8::internal::RootVisitor::Synchronize (1 samples, 0.06%)</title><rect x="17.2215%" y="597" width="0.0640%" height="15" fill="rgb(249,174,33)" fg:x="269" fg:w="1"/><text x="17.4715%" y="607.50"></text></g><g><title>deno`v8::base::Mutex::~Mutex (1 samples, 0.06%)</title><rect x="17.2855%" y="581" width="0.0640%" height="15" fill="rgb(233,201,37)" fg:x="270" fg:w="1"/><text x="17.5355%" y="591.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (12 samples, 0.77%)</title><rect x="16.6453%" y="645" width="0.7682%" height="15" fill="rgb(221,78,26)" fg:x="260" fg:w="12"/><text x="16.8953%" y="655.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (12 samples, 0.77%)</title><rect x="16.6453%" y="629" width="0.7682%" height="15" fill="rgb(250,127,30)" fg:x="260" fg:w="12"/><text x="16.8953%" y="639.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (12 samples, 0.77%)</title><rect x="16.6453%" y="613" width="0.7682%" height="15" fill="rgb(230,49,44)" fg:x="260" fg:w="12"/><text x="16.8953%" y="623.50"></text></g><g><title>deno`v8::internal::Scavenger::~Scavenger (2 samples, 0.13%)</title><rect x="17.2855%" y="597" width="0.1280%" height="15" fill="rgb(229,67,23)" fg:x="270" fg:w="2"/><text x="17.5355%" y="607.50"></text></g><g><title>deno`v8::internal::PagedSpace::~PagedSpace (1 samples, 0.06%)</title><rect x="17.3496%" y="581" width="0.0640%" height="15" fill="rgb(249,83,47)" fg:x="271" fg:w="1"/><text x="17.5996%" y="591.50"></text></g><g><title>deno`v8::base::Mutex::~Mutex (1 samples, 0.06%)</title><rect x="17.3496%" y="565" width="0.0640%" height="15" fill="rgb(215,43,3)" fg:x="271" fg:w="1"/><text x="17.5996%" y="575.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.06%)</title><rect x="17.3496%" y="549" width="0.0640%" height="15" fill="rgb(238,154,13)" fg:x="271" fg:w="1"/><text x="17.5996%" y="559.50"></text></g><g><title>0x11000d1fc (13 samples, 0.83%)</title><rect x="16.6453%" y="757" width="0.8323%" height="15" fill="rgb(219,56,2)" fg:x="260" fg:w="13"/><text x="16.8953%" y="767.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (13 samples, 0.83%)</title><rect x="16.6453%" y="741" width="0.8323%" height="15" fill="rgb(233,0,4)" fg:x="260" fg:w="13"/><text x="16.8953%" y="751.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (13 samples, 0.83%)</title><rect x="16.6453%" y="725" width="0.8323%" height="15" fill="rgb(235,30,7)" fg:x="260" fg:w="13"/><text x="16.8953%" y="735.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (13 samples, 0.83%)</title><rect x="16.6453%" y="709" width="0.8323%" height="15" fill="rgb(250,79,13)" fg:x="260" fg:w="13"/><text x="16.8953%" y="719.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (13 samples, 0.83%)</title><rect x="16.6453%" y="693" width="0.8323%" height="15" fill="rgb(211,146,34)" fg:x="260" fg:w="13"/><text x="16.8953%" y="703.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (13 samples, 0.83%)</title><rect x="16.6453%" y="677" width="0.8323%" height="15" fill="rgb(228,22,38)" fg:x="260" fg:w="13"/><text x="16.8953%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (13 samples, 0.83%)</title><rect x="16.6453%" y="661" width="0.8323%" height="15" fill="rgb(235,168,5)" fg:x="260" fg:w="13"/><text x="16.8953%" y="671.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.06%)</title><rect x="17.4136%" y="645" width="0.0640%" height="15" fill="rgb(221,155,16)" fg:x="272" fg:w="1"/><text x="17.6636%" y="655.50"></text></g><g><title>0x11000d35c (1 samples, 0.06%)</title><rect x="17.4776%" y="757" width="0.0640%" height="15" fill="rgb(215,215,53)" fg:x="273" fg:w="1"/><text x="17.7276%" y="767.50"></text></g><g><title>0x11000d750 (4 samples, 0.26%)</title><rect x="17.5416%" y="757" width="0.2561%" height="15" fill="rgb(223,4,10)" fg:x="274" fg:w="4"/><text x="17.7916%" y="767.50"></text></g><g><title>0x11000d760 (4 samples, 0.26%)</title><rect x="17.7977%" y="757" width="0.2561%" height="15" fill="rgb(234,103,6)" fg:x="278" fg:w="4"/><text x="18.0477%" y="767.50"></text></g><g><title>0x11000d778 (1 samples, 0.06%)</title><rect x="18.0538%" y="757" width="0.0640%" height="15" fill="rgb(227,97,0)" fg:x="282" fg:w="1"/><text x="18.3038%" y="767.50"></text></g><g><title>0x11000d980 (1 samples, 0.06%)</title><rect x="18.1178%" y="757" width="0.0640%" height="15" fill="rgb(234,150,53)" fg:x="283" fg:w="1"/><text x="18.3678%" y="767.50"></text></g><g><title>0x11000d988 (1 samples, 0.06%)</title><rect x="18.1818%" y="757" width="0.0640%" height="15" fill="rgb(228,201,54)" fg:x="284" fg:w="1"/><text x="18.4318%" y="767.50"></text></g><g><title>0x11000d9a8 (2 samples, 0.13%)</title><rect x="18.2458%" y="757" width="0.1280%" height="15" fill="rgb(222,22,37)" fg:x="285" fg:w="2"/><text x="18.4958%" y="767.50"></text></g><g><title>0x11000d9b0 (2 samples, 0.13%)</title><rect x="18.3739%" y="757" width="0.1280%" height="15" fill="rgb(237,53,32)" fg:x="287" fg:w="2"/><text x="18.6239%" y="767.50"></text></g><g><title>0x11000d9c0 (5 samples, 0.32%)</title><rect x="18.5019%" y="757" width="0.3201%" height="15" fill="rgb(233,25,53)" fg:x="289" fg:w="5"/><text x="18.7519%" y="767.50"></text></g><g><title>0x11000d9dc (5 samples, 0.32%)</title><rect x="18.8220%" y="757" width="0.3201%" height="15" fill="rgb(210,40,34)" fg:x="294" fg:w="5"/><text x="19.0720%" y="767.50"></text></g><g><title>0x11000d9fc (4 samples, 0.26%)</title><rect x="19.1421%" y="757" width="0.2561%" height="15" fill="rgb(241,220,44)" fg:x="299" fg:w="4"/><text x="19.3921%" y="767.50"></text></g><g><title>0x11000da0c (3 samples, 0.19%)</title><rect x="19.3982%" y="757" width="0.1921%" height="15" fill="rgb(235,28,35)" fg:x="303" fg:w="3"/><text x="19.6482%" y="767.50"></text></g><g><title>0x11000da1c (4 samples, 0.26%)</title><rect x="19.5903%" y="757" width="0.2561%" height="15" fill="rgb(210,56,17)" fg:x="306" fg:w="4"/><text x="19.8403%" y="767.50"></text></g><g><title>0x11000da34 (5 samples, 0.32%)</title><rect x="19.8464%" y="757" width="0.3201%" height="15" fill="rgb(224,130,29)" fg:x="310" fg:w="5"/><text x="20.0964%" y="767.50"></text></g><g><title>0x11000dab0 (1 samples, 0.06%)</title><rect x="20.1665%" y="757" width="0.0640%" height="15" fill="rgb(235,212,8)" fg:x="315" fg:w="1"/><text x="20.4165%" y="767.50"></text></g><g><title>0x11000dac0 (1 samples, 0.06%)</title><rect x="20.2305%" y="757" width="0.0640%" height="15" fill="rgb(223,33,50)" fg:x="316" fg:w="1"/><text x="20.4805%" y="767.50"></text></g><g><title>0x11000dde0 (4 samples, 0.26%)</title><rect x="20.2945%" y="757" width="0.2561%" height="15" fill="rgb(219,149,13)" fg:x="317" fg:w="4"/><text x="20.5445%" y="767.50"></text></g><g><title>0x11000decc (2 samples, 0.13%)</title><rect x="20.5506%" y="757" width="0.1280%" height="15" fill="rgb(250,156,29)" fg:x="321" fg:w="2"/><text x="20.8006%" y="767.50"></text></g><g><title>0x11000defc (3 samples, 0.19%)</title><rect x="20.6786%" y="757" width="0.1921%" height="15" fill="rgb(216,193,19)" fg:x="323" fg:w="3"/><text x="20.9286%" y="767.50"></text></g><g><title>0x11000df10 (1 samples, 0.06%)</title><rect x="20.8707%" y="757" width="0.0640%" height="15" fill="rgb(216,135,14)" fg:x="326" fg:w="1"/><text x="21.1207%" y="767.50"></text></g><g><title>0x11000df1c (11 samples, 0.70%)</title><rect x="20.9347%" y="757" width="0.7042%" height="15" fill="rgb(241,47,5)" fg:x="327" fg:w="11"/><text x="21.1847%" y="767.50"></text></g><g><title>0x11000df3c (1 samples, 0.06%)</title><rect x="21.6389%" y="757" width="0.0640%" height="15" fill="rgb(233,42,35)" fg:x="338" fg:w="1"/><text x="21.8889%" y="767.50"></text></g><g><title>0x11000df78 (1 samples, 0.06%)</title><rect x="21.7029%" y="757" width="0.0640%" height="15" fill="rgb(231,13,6)" fg:x="339" fg:w="1"/><text x="21.9529%" y="767.50"></text></g><g><title>0x11000df88 (2 samples, 0.13%)</title><rect x="21.7670%" y="757" width="0.1280%" height="15" fill="rgb(207,181,40)" fg:x="340" fg:w="2"/><text x="22.0170%" y="767.50"></text></g><g><title>0x11000df8c (2 samples, 0.13%)</title><rect x="21.8950%" y="757" width="0.1280%" height="15" fill="rgb(254,173,49)" fg:x="342" fg:w="2"/><text x="22.1450%" y="767.50"></text></g><g><title>0x11000dfa0 (5 samples, 0.32%)</title><rect x="22.0230%" y="757" width="0.3201%" height="15" fill="rgb(221,1,38)" fg:x="344" fg:w="5"/><text x="22.2730%" y="767.50"></text></g><g><title>0x11000dfb0 (5 samples, 0.32%)</title><rect x="22.3431%" y="757" width="0.3201%" height="15" fill="rgb(206,124,46)" fg:x="349" fg:w="5"/><text x="22.5931%" y="767.50"></text></g><g><title>0x11000dfcc (3 samples, 0.19%)</title><rect x="22.6633%" y="757" width="0.1921%" height="15" fill="rgb(249,21,11)" fg:x="354" fg:w="3"/><text x="22.9133%" y="767.50"></text></g><g><title>0x11000e018 (3 samples, 0.19%)</title><rect x="22.8553%" y="757" width="0.1921%" height="15" fill="rgb(222,201,40)" fg:x="357" fg:w="3"/><text x="23.1053%" y="767.50"></text></g><g><title>0x11000e038 (2 samples, 0.13%)</title><rect x="23.0474%" y="757" width="0.1280%" height="15" fill="rgb(235,61,29)" fg:x="360" fg:w="2"/><text x="23.2974%" y="767.50"></text></g><g><title>0x11000e04c (1 samples, 0.06%)</title><rect x="23.1754%" y="757" width="0.0640%" height="15" fill="rgb(219,207,3)" fg:x="362" fg:w="1"/><text x="23.4254%" y="767.50"></text></g><g><title>0x11000e058 (2 samples, 0.13%)</title><rect x="23.2394%" y="757" width="0.1280%" height="15" fill="rgb(222,56,46)" fg:x="363" fg:w="2"/><text x="23.4894%" y="767.50"></text></g><g><title>0x11000e05c (5 samples, 0.32%)</title><rect x="23.3675%" y="757" width="0.3201%" height="15" fill="rgb(239,76,54)" fg:x="365" fg:w="5"/><text x="23.6175%" y="767.50"></text></g><g><title>0x11000e070 (6 samples, 0.38%)</title><rect x="23.6876%" y="757" width="0.3841%" height="15" fill="rgb(231,124,27)" fg:x="370" fg:w="6"/><text x="23.9376%" y="767.50"></text></g><g><title>0x11000e098 (6 samples, 0.38%)</title><rect x="24.0717%" y="757" width="0.3841%" height="15" fill="rgb(249,195,6)" fg:x="376" fg:w="6"/><text x="24.3217%" y="767.50"></text></g><g><title>0x11000e0b8 (1 samples, 0.06%)</title><rect x="24.4558%" y="757" width="0.0640%" height="15" fill="rgb(237,174,47)" fg:x="382" fg:w="1"/><text x="24.7058%" y="767.50"></text></g><g><title>0x11000e0d8 (6 samples, 0.38%)</title><rect x="24.5198%" y="757" width="0.3841%" height="15" fill="rgb(206,201,31)" fg:x="383" fg:w="6"/><text x="24.7698%" y="767.50"></text></g><g><title>0x11000e0dc (3 samples, 0.19%)</title><rect x="24.9040%" y="757" width="0.1921%" height="15" fill="rgb(231,57,52)" fg:x="389" fg:w="3"/><text x="25.1540%" y="767.50"></text></g><g><title>0x11000e0f8 (5 samples, 0.32%)</title><rect x="25.0960%" y="757" width="0.3201%" height="15" fill="rgb(248,177,22)" fg:x="392" fg:w="5"/><text x="25.3460%" y="767.50"></text></g><g><title>0x11000e110 (1 samples, 0.06%)</title><rect x="25.4161%" y="757" width="0.0640%" height="15" fill="rgb(215,211,37)" fg:x="397" fg:w="1"/><text x="25.6661%" y="767.50"></text></g><g><title>0x11000e118 (3 samples, 0.19%)</title><rect x="25.4802%" y="757" width="0.1921%" height="15" fill="rgb(241,128,51)" fg:x="398" fg:w="3"/><text x="25.7302%" y="767.50"></text></g><g><title>0x11000e11c (4 samples, 0.26%)</title><rect x="25.6722%" y="757" width="0.2561%" height="15" fill="rgb(227,165,31)" fg:x="401" fg:w="4"/><text x="25.9222%" y="767.50"></text></g><g><title>0x11000e134 (7 samples, 0.45%)</title><rect x="25.9283%" y="757" width="0.4481%" height="15" fill="rgb(228,167,24)" fg:x="405" fg:w="7"/><text x="26.1783%" y="767.50"></text></g><g><title>0x11000e13c (13 samples, 0.83%)</title><rect x="26.3764%" y="757" width="0.8323%" height="15" fill="rgb(228,143,12)" fg:x="412" fg:w="13"/><text x="26.6264%" y="767.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (13 samples, 0.83%)</title><rect x="26.3764%" y="741" width="0.8323%" height="15" fill="rgb(249,149,8)" fg:x="412" fg:w="13"/><text x="26.6264%" y="751.50"></text></g><g><title>0x11000e16c (1 samples, 0.06%)</title><rect x="27.2087%" y="757" width="0.0640%" height="15" fill="rgb(243,35,44)" fg:x="425" fg:w="1"/><text x="27.4587%" y="767.50"></text></g><g><title>0x11000e1a8 (3 samples, 0.19%)</title><rect x="27.2727%" y="757" width="0.1921%" height="15" fill="rgb(246,89,9)" fg:x="426" fg:w="3"/><text x="27.5227%" y="767.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (8 samples, 0.51%)</title><rect x="27.4648%" y="741" width="0.5122%" height="15" fill="rgb(233,213,13)" fg:x="429" fg:w="8"/><text x="27.7148%" y="751.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.13%)</title><rect x="29.1293%" y="725" width="0.1280%" height="15" fill="rgb(233,141,41)" fg:x="455" fg:w="2"/><text x="29.3793%" y="735.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.64%)</title><rect x="38.5403%" y="709" width="0.6402%" height="15" fill="rgb(239,167,4)" fg:x="602" fg:w="10"/><text x="38.7903%" y="719.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (3 samples, 0.19%)</title><rect x="39.1805%" y="709" width="0.1921%" height="15" fill="rgb(209,217,16)" fg:x="612" fg:w="3"/><text x="39.4305%" y="719.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.58%)</title><rect x="39.3726%" y="709" width="0.5762%" height="15" fill="rgb(219,88,35)" fg:x="615" fg:w="9"/><text x="39.6226%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (5 samples, 0.32%)</title><rect x="39.9488%" y="709" width="0.3201%" height="15" fill="rgb(220,193,23)" fg:x="624" fg:w="5"/><text x="40.1988%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (4 samples, 0.26%)</title><rect x="40.2689%" y="709" width="0.2561%" height="15" fill="rgb(230,90,52)" fg:x="629" fg:w="4"/><text x="40.5189%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (4 samples, 0.26%)</title><rect x="40.5250%" y="709" width="0.2561%" height="15" fill="rgb(252,106,19)" fg:x="633" fg:w="4"/><text x="40.7750%" y="719.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (8 samples, 0.51%)</title><rect x="41.8694%" y="693" width="0.5122%" height="15" fill="rgb(206,74,20)" fg:x="654" fg:w="8"/><text x="42.1194%" y="703.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (27 samples, 1.73%)</title><rect x="40.7810%" y="709" width="1.7286%" height="15" fill="rgb(230,138,44)" fg:x="637" fg:w="27"/><text x="41.0310%" y="719.50"></text></g><g><title>deno`v8__Null (2 samples, 0.13%)</title><rect x="42.3816%" y="693" width="0.1280%" height="15" fill="rgb(235,182,43)" fg:x="662" fg:w="2"/><text x="42.6316%" y="703.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (1 samples, 0.06%)</title><rect x="42.5096%" y="709" width="0.0640%" height="15" fill="rgb(242,16,51)" fg:x="664" fg:w="1"/><text x="42.7596%" y="719.50"></text></g><g><title>deno`v8::Value::IsInt32 (11 samples, 0.70%)</title><rect x="42.5736%" y="709" width="0.7042%" height="15" fill="rgb(248,9,4)" fg:x="665" fg:w="11"/><text x="42.8236%" y="719.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (4 samples, 0.26%)</title><rect x="43.2778%" y="709" width="0.2561%" height="15" fill="rgb(210,31,22)" fg:x="676" fg:w="4"/><text x="43.5278%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (32 samples, 2.05%)</title><rect x="43.5339%" y="709" width="2.0487%" height="15" fill="rgb(239,54,39)" fg:x="680" fg:w="32"/><text x="43.7839%" y="719.50">d..</text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (25 samples, 1.60%)</title><rect x="45.5826%" y="709" width="1.6005%" height="15" fill="rgb(230,99,41)" fg:x="712" fg:w="25"/><text x="45.8326%" y="719.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (8 samples, 0.51%)</title><rect x="47.1831%" y="709" width="0.5122%" height="15" fill="rgb(253,106,12)" fg:x="737" fg:w="8"/><text x="47.4331%" y="719.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (8 samples, 0.51%)</title><rect x="47.6953%" y="709" width="0.5122%" height="15" fill="rgb(213,46,41)" fg:x="745" fg:w="8"/><text x="47.9453%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (12 samples, 0.77%)</title><rect x="48.2074%" y="709" width="0.7682%" height="15" fill="rgb(215,133,35)" fg:x="753" fg:w="12"/><text x="48.4574%" y="719.50"></text></g><g><title>deno`v8::Isolate::GetCurrentContext (8 samples, 0.51%)</title><rect x="48.4635%" y="693" width="0.5122%" height="15" fill="rgb(213,28,5)" fg:x="757" fg:w="8"/><text x="48.7135%" y="703.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (4 samples, 0.26%)</title><rect x="48.9757%" y="709" width="0.2561%" height="15" fill="rgb(215,77,49)" fg:x="765" fg:w="4"/><text x="49.2257%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (6 samples, 0.38%)</title><rect x="49.2318%" y="709" width="0.3841%" height="15" fill="rgb(248,100,22)" fg:x="769" fg:w="6"/><text x="49.4818%" y="719.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (17 samples, 1.09%)</title><rect x="49.6159%" y="709" width="1.0883%" height="15" fill="rgb(208,67,9)" fg:x="775" fg:w="17"/><text x="49.8659%" y="719.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (8 samples, 0.51%)</title><rect x="50.1921%" y="693" width="0.5122%" height="15" fill="rgb(219,133,21)" fg:x="784" fg:w="8"/><text x="50.4421%" y="703.50"></text></g><g><title>deno`v8__Global__New (45 samples, 2.88%)</title><rect x="50.7042%" y="709" width="2.8809%" height="15" fill="rgb(246,46,29)" fg:x="792" fg:w="45"/><text x="50.9542%" y="719.50">de..</text></g><g><title>deno`v8::internal::GlobalHandles::Create (38 samples, 2.43%)</title><rect x="51.1524%" y="693" width="2.4328%" height="15" fill="rgb(246,185,52)" fg:x="799" fg:w="38"/><text x="51.4024%" y="703.50">de..</text></g><g><title>deno`v8__Isolate__GetData (5 samples, 0.32%)</title><rect x="53.5851%" y="709" width="0.3201%" height="15" fill="rgb(252,136,11)" fg:x="837" fg:w="5"/><text x="53.8351%" y="719.50"></text></g><g><title>deno`v8__Isolate__SetData (2 samples, 0.13%)</title><rect x="53.9052%" y="709" width="0.1280%" height="15" fill="rgb(219,138,53)" fg:x="842" fg:w="2"/><text x="54.1552%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.45%)</title><rect x="55.4417%" y="693" width="0.4481%" height="15" fill="rgb(211,51,23)" fg:x="866" fg:w="7"/><text x="55.6917%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (38 samples, 2.43%)</title><rect x="56.4020%" y="677" width="2.4328%" height="15" fill="rgb(247,221,28)" fg:x="881" fg:w="38"/><text x="56.6520%" y="687.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.90%)</title><rect x="57.9385%" y="661" width="0.8963%" height="15" fill="rgb(251,222,45)" fg:x="905" fg:w="14"/><text x="58.1885%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (81 samples, 5.19%)</title><rect x="54.0333%" y="709" width="5.1857%" height="15" fill="rgb(217,162,53)" fg:x="844" fg:w="81"/><text x="54.2833%" y="719.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (52 samples, 3.33%)</title><rect x="55.8899%" y="693" width="3.3291%" height="15" fill="rgb(229,93,14)" fg:x="873" fg:w="52"/><text x="56.1399%" y="703.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.38%)</title><rect x="58.8348%" y="677" width="0.3841%" height="15" fill="rgb(209,67,49)" fg:x="919" fg:w="6"/><text x="59.0848%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.32%)</title><rect x="59.2190%" y="709" width="0.3201%" height="15" fill="rgb(213,87,29)" fg:x="925" fg:w="5"/><text x="59.4690%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (23 samples, 1.47%)</title><rect x="61.3956%" y="693" width="1.4725%" height="15" fill="rgb(205,151,52)" fg:x="959" fg:w="23"/><text x="61.6456%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 3.52%)</title><rect x="59.5391%" y="709" width="3.5211%" height="15" fill="rgb(253,215,39)" fg:x="930" fg:w="55"/><text x="59.7891%" y="719.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.19%)</title><rect x="62.8681%" y="693" width="0.1921%" height="15" fill="rgb(221,220,41)" fg:x="982" fg:w="3"/><text x="63.1181%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.06%)</title><rect x="63.0602%" y="709" width="0.0640%" height="15" fill="rgb(218,133,21)" fg:x="985" fg:w="1"/><text x="63.3102%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 1.34%)</title><rect x="63.1242%" y="709" width="1.3444%" height="15" fill="rgb(221,193,43)" fg:x="986" fg:w="21"/><text x="63.3742%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.19%)</title><rect x="64.4686%" y="709" width="0.1921%" height="15" fill="rgb(240,128,52)" fg:x="1007" fg:w="3"/><text x="64.7186%" y="719.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (554 samples, 35.47%)</title><rect x="29.2574%" y="725" width="35.4673%" height="15" fill="rgb(253,114,12)" fg:x="457" fg:w="554"/><text x="29.5074%" y="735.50">deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="64.6607%" y="709" width="0.0640%" height="15" fill="rgb(215,223,47)" fg:x="1010" fg:w="1"/><text x="64.9107%" y="719.50"></text></g><g><title>deno`DYLD-STUB$$free (5 samples, 0.32%)</title><rect x="64.7247%" y="725" width="0.3201%" height="15" fill="rgb(248,225,23)" fg:x="1011" fg:w="5"/><text x="64.9747%" y="735.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.06%)</title><rect x="65.0448%" y="725" width="0.0640%" height="15" fill="rgb(250,108,0)" fg:x="1016" fg:w="1"/><text x="65.2948%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_core::ops_builtin::op_void_async::v8_func::{{closure}}&gt;&gt; (8 samples, 0.51%)</title><rect x="65.1088%" y="725" width="0.5122%" height="15" fill="rgb(228,208,7)" fg:x="1017" fg:w="8"/><text x="65.3588%" y="735.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::ops::OpResult&gt; (3 samples, 0.19%)</title><rect x="65.6210%" y="725" width="0.1921%" height="15" fill="rgb(244,45,10)" fg:x="1025" fg:w="3"/><text x="65.8710%" y="735.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (15 samples, 0.96%)</title><rect x="65.8131%" y="725" width="0.9603%" height="15" fill="rgb(207,125,25)" fg:x="1028" fg:w="15"/><text x="66.0631%" y="735.50"></text></g><g><title>deno`v8::External::Value (3 samples, 0.19%)</title><rect x="66.7734%" y="725" width="0.1921%" height="15" fill="rgb(210,195,18)" fg:x="1043" fg:w="3"/><text x="67.0234%" y="735.50"></text></g><g><title>deno`v8::Integer::Value (9 samples, 0.58%)</title><rect x="66.9654%" y="725" width="0.5762%" height="15" fill="rgb(249,80,12)" fg:x="1046" fg:w="9"/><text x="67.2154%" y="735.50"></text></g><g><title>deno`v8::Value::IsFunction (4 samples, 0.26%)</title><rect x="67.5416%" y="725" width="0.2561%" height="15" fill="rgb(221,65,9)" fg:x="1055" fg:w="4"/><text x="67.7916%" y="735.50"></text></g><g><title>deno`v8::data::_&lt;impl core::convert::TryFrom&lt;v8::handle::Local&lt;v8::data::Value&gt;&gt; for v8::handle::Local&lt;v8::data::Integer&gt;&gt;::try_from (4 samples, 0.26%)</title><rect x="67.7977%" y="725" width="0.2561%" height="15" fill="rgb(235,49,36)" fg:x="1059" fg:w="4"/><text x="68.0477%" y="735.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (15 samples, 0.96%)</title><rect x="68.0538%" y="725" width="0.9603%" height="15" fill="rgb(225,32,20)" fg:x="1063" fg:w="15"/><text x="68.3038%" y="735.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (8 samples, 0.51%)</title><rect x="69.0141%" y="725" width="0.5122%" height="15" fill="rgb(215,141,46)" fg:x="1078" fg:w="8"/><text x="69.2641%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (4 samples, 0.26%)</title><rect x="69.5262%" y="725" width="0.2561%" height="15" fill="rgb(250,160,47)" fg:x="1086" fg:w="4"/><text x="69.7762%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_mut (2 samples, 0.13%)</title><rect x="69.7823%" y="725" width="0.1280%" height="15" fill="rgb(216,222,40)" fg:x="1090" fg:w="2"/><text x="70.0323%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (6 samples, 0.38%)</title><rect x="69.9104%" y="725" width="0.3841%" height="15" fill="rgb(234,217,39)" fg:x="1092" fg:w="6"/><text x="70.1604%" y="735.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (2 samples, 0.13%)</title><rect x="70.2945%" y="725" width="0.1280%" height="15" fill="rgb(207,178,40)" fg:x="1098" fg:w="2"/><text x="70.5445%" y="735.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__Data (3 samples, 0.19%)</title><rect x="70.4225%" y="725" width="0.1921%" height="15" fill="rgb(221,136,13)" fg:x="1100" fg:w="3"/><text x="70.6725%" y="735.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (11 samples, 0.70%)</title><rect x="70.6146%" y="725" width="0.7042%" height="15" fill="rgb(249,199,10)" fg:x="1103" fg:w="11"/><text x="70.8646%" y="735.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetIsolate (5 samples, 0.32%)</title><rect x="71.3188%" y="725" width="0.3201%" height="15" fill="rgb(249,222,13)" fg:x="1114" fg:w="5"/><text x="71.5688%" y="735.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetReturnValue (1 samples, 0.06%)</title><rect x="71.6389%" y="725" width="0.0640%" height="15" fill="rgb(244,185,38)" fg:x="1119" fg:w="1"/><text x="71.8889%" y="735.50"></text></g><g><title>deno`v8__Global__New (3 samples, 0.19%)</title><rect x="71.7029%" y="725" width="0.1921%" height="15" fill="rgb(236,202,9)" fg:x="1120" fg:w="3"/><text x="71.9529%" y="735.50"></text></g><g><title>deno`v8__ReturnValue__Set (2 samples, 0.13%)</title><rect x="71.8950%" y="725" width="0.1280%" height="15" fill="rgb(250,229,37)" fg:x="1123" fg:w="2"/><text x="72.1450%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="72.0230%" y="725" width="0.0640%" height="15" fill="rgb(206,174,23)" fg:x="1125" fg:w="1"/><text x="72.2730%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.19%)</title><rect x="72.0871%" y="725" width="0.1921%" height="15" fill="rgb(211,33,43)" fg:x="1126" fg:w="3"/><text x="72.3371%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.26%)</title><rect x="72.2791%" y="725" width="0.2561%" height="15" fill="rgb(245,58,50)" fg:x="1129" fg:w="4"/><text x="72.5291%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.38%)</title><rect x="72.5352%" y="725" width="0.3841%" height="15" fill="rgb(244,68,36)" fg:x="1133" fg:w="6"/><text x="72.7852%" y="735.50"></text></g><g><title>0x11000e1b0 (711 samples, 45.52%)</title><rect x="27.4648%" y="757" width="45.5186%" height="15" fill="rgb(232,229,15)" fg:x="429" fg:w="711"/><text x="27.7148%" y="767.50">0x11000e1b0</text></g><g><title>deno`Builtins_CallApiCallback (703 samples, 45.01%)</title><rect x="27.9770%" y="741" width="45.0064%" height="15" fill="rgb(254,30,23)" fg:x="437" fg:w="703"/><text x="28.2270%" y="751.50">deno`Builtins_CallApiCallback</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="72.9193%" y="725" width="0.0640%" height="15" fill="rgb(235,160,14)" fg:x="1139" fg:w="1"/><text x="73.1693%" y="735.50"></text></g><g><title>0x11000e1c4 (4 samples, 0.26%)</title><rect x="72.9834%" y="757" width="0.2561%" height="15" fill="rgb(212,155,44)" fg:x="1140" fg:w="4"/><text x="73.2334%" y="767.50"></text></g><g><title>0x11000e1f4 (6 samples, 0.38%)</title><rect x="73.2394%" y="757" width="0.3841%" height="15" fill="rgb(226,2,50)" fg:x="1144" fg:w="6"/><text x="73.4894%" y="767.50"></text></g><g><title>0x11000e1fc (38 samples, 2.43%)</title><rect x="73.6236%" y="757" width="2.4328%" height="15" fill="rgb(234,177,6)" fg:x="1150" fg:w="38"/><text x="73.8736%" y="767.50">0x..</text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (38 samples, 2.43%)</title><rect x="73.6236%" y="741" width="2.4328%" height="15" fill="rgb(217,24,9)" fg:x="1150" fg:w="38"/><text x="73.8736%" y="751.50">de..</text></g><g><title>deno`Builtins_ResolvePromise (27 samples, 1.73%)</title><rect x="74.3278%" y="725" width="1.7286%" height="15" fill="rgb(220,13,46)" fg:x="1161" fg:w="27"/><text x="74.5778%" y="735.50"></text></g><g><title>deno`Builtins_FulfillPromise (12 samples, 0.77%)</title><rect x="75.2881%" y="709" width="0.7682%" height="15" fill="rgb(239,221,27)" fg:x="1176" fg:w="12"/><text x="75.5381%" y="719.50"></text></g><g><title>0x11000e208 (8 samples, 0.51%)</title><rect x="76.0563%" y="757" width="0.5122%" height="15" fill="rgb(222,198,25)" fg:x="1188" fg:w="8"/><text x="76.3063%" y="767.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.06%)</title><rect x="80.9859%" y="725" width="0.0640%" height="15" fill="rgb(211,99,13)" fg:x="1265" fg:w="1"/><text x="81.2359%" y="735.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.06%)</title><rect x="80.9859%" y="709" width="0.0640%" height="15" fill="rgb(232,111,31)" fg:x="1265" fg:w="1"/><text x="81.2359%" y="719.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (15 samples, 0.96%)</title><rect x="81.0499%" y="725" width="0.9603%" height="15" fill="rgb(245,82,37)" fg:x="1266" fg:w="15"/><text x="81.2999%" y="735.50"></text></g><g><title>0x11000e210 (112 samples, 7.17%)</title><rect x="76.5685%" y="757" width="7.1703%" height="15" fill="rgb(227,149,46)" fg:x="1196" fg:w="112"/><text x="76.8185%" y="767.50">0x11000e210</text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (112 samples, 7.17%)</title><rect x="76.5685%" y="741" width="7.1703%" height="15" fill="rgb(218,36,50)" fg:x="1196" fg:w="112"/><text x="76.8185%" y="751.50">deno`Built..</text></g><g><title>deno`Builtins_PerformPromiseThen (27 samples, 1.73%)</title><rect x="82.0102%" y="725" width="1.7286%" height="15" fill="rgb(226,80,48)" fg:x="1281" fg:w="27"/><text x="82.2602%" y="735.50"></text></g><g><title>0x11000e220 (2 samples, 0.13%)</title><rect x="83.7388%" y="757" width="0.1280%" height="15" fill="rgb(238,224,15)" fg:x="1308" fg:w="2"/><text x="83.9888%" y="767.50"></text></g><g><title>0x11000e234 (1 samples, 0.06%)</title><rect x="83.8668%" y="757" width="0.0640%" height="15" fill="rgb(241,136,10)" fg:x="1310" fg:w="1"/><text x="84.1168%" y="767.50"></text></g><g><title>0x11000e240 (3 samples, 0.19%)</title><rect x="83.9309%" y="757" width="0.1921%" height="15" fill="rgb(208,32,45)" fg:x="1311" fg:w="3"/><text x="84.1809%" y="767.50"></text></g><g><title>0x11000e24c (3 samples, 0.19%)</title><rect x="84.1229%" y="757" width="0.1921%" height="15" fill="rgb(207,135,9)" fg:x="1314" fg:w="3"/><text x="84.3729%" y="767.50"></text></g><g><title>0x11000e27c (3 samples, 0.19%)</title><rect x="84.3150%" y="757" width="0.1921%" height="15" fill="rgb(206,86,44)" fg:x="1317" fg:w="3"/><text x="84.5650%" y="767.50"></text></g><g><title>0x11000e29c (1 samples, 0.06%)</title><rect x="84.5070%" y="757" width="0.0640%" height="15" fill="rgb(245,177,15)" fg:x="1320" fg:w="1"/><text x="84.7570%" y="767.50"></text></g><g><title>deno`v8::internal::GCTracer::StopObservablePause (1 samples, 0.06%)</title><rect x="84.5711%" y="645" width="0.0640%" height="15" fill="rgb(206,64,50)" fg:x="1321" fg:w="1"/><text x="84.8211%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.06%)</title><rect x="84.5711%" y="629" width="0.0640%" height="15" fill="rgb(234,36,40)" fg:x="1321" fg:w="1"/><text x="84.8211%" y="639.50"></text></g><g><title>deno`v8::internal::GCTracer::FinalizeCurrentEvent (1 samples, 0.06%)</title><rect x="84.6351%" y="613" width="0.0640%" height="15" fill="rgb(213,64,8)" fg:x="1322" fg:w="1"/><text x="84.8851%" y="623.50"></text></g><g><title>deno`v8::internal::GCTracer::StopYoungCycleIfNeeded (2 samples, 0.13%)</title><rect x="84.6351%" y="645" width="0.1280%" height="15" fill="rgb(210,75,36)" fg:x="1322" fg:w="2"/><text x="84.8851%" y="655.50"></text></g><g><title>deno`v8::internal::GCTracer::StopCycle (2 samples, 0.13%)</title><rect x="84.6351%" y="629" width="0.1280%" height="15" fill="rgb(229,88,21)" fg:x="1322" fg:w="2"/><text x="84.8851%" y="639.50"></text></g><g><title>deno`v8::internal::metrics::Recorder::HasEmbedderRecorder (1 samples, 0.06%)</title><rect x="84.6991%" y="613" width="0.0640%" height="15" fill="rgb(252,204,47)" fg:x="1323" fg:w="1"/><text x="84.9491%" y="623.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (1 samples, 0.06%)</title><rect x="84.7631%" y="645" width="0.0640%" height="15" fill="rgb(208,77,27)" fg:x="1324" fg:w="1"/><text x="85.0131%" y="655.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (1 samples, 0.06%)</title><rect x="84.7631%" y="629" width="0.0640%" height="15" fill="rgb(221,76,26)" fg:x="1324" fg:w="1"/><text x="85.0131%" y="639.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (1 samples, 0.06%)</title><rect x="84.7631%" y="613" width="0.0640%" height="15" fill="rgb(225,139,18)" fg:x="1324" fg:w="1"/><text x="85.0131%" y="623.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (1 samples, 0.06%)</title><rect x="84.7631%" y="597" width="0.0640%" height="15" fill="rgb(230,137,11)" fg:x="1324" fg:w="1"/><text x="85.0131%" y="607.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.06%)</title><rect x="84.7631%" y="581" width="0.0640%" height="15" fill="rgb(212,28,1)" fg:x="1324" fg:w="1"/><text x="85.0131%" y="591.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.06%)</title><rect x="84.7631%" y="565" width="0.0640%" height="15" fill="rgb(248,164,17)" fg:x="1324" fg:w="1"/><text x="85.0131%" y="575.50"></text></g><g><title>libsystem_c.dylib`__dtoa (1 samples, 0.06%)</title><rect x="84.7631%" y="549" width="0.0640%" height="15" fill="rgb(222,171,42)" fg:x="1324" fg:w="1"/><text x="85.0131%" y="559.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (1 samples, 0.06%)</title><rect x="84.7631%" y="533" width="0.0640%" height="15" fill="rgb(243,84,45)" fg:x="1324" fg:w="1"/><text x="85.0131%" y="543.50"></text></g><g><title>deno`v8::internal::Heap::GarbageCollectionEpilogue (1 samples, 0.06%)</title><rect x="84.8271%" y="645" width="0.0640%" height="15" fill="rgb(252,49,23)" fg:x="1325" fg:w="1"/><text x="85.0771%" y="655.50"></text></g><g><title>deno`v8::internal::MemoryChunkLayout::AllocatableMemoryInDataPage (1 samples, 0.06%)</title><rect x="84.8271%" y="629" width="0.0640%" height="15" fill="rgb(215,19,7)" fg:x="1325" fg:w="1"/><text x="85.0771%" y="639.50"></text></g><g><title>deno`heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;::Local::Publish (1 samples, 0.06%)</title><rect x="84.9552%" y="597" width="0.0640%" height="15" fill="rgb(238,81,41)" fg:x="1327" fg:w="1"/><text x="85.2052%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="84.9552%" y="581" width="0.0640%" height="15" fill="rgb(210,199,37)" fg:x="1327" fg:w="1"/><text x="85.2052%" y="591.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (17 samples, 1.09%)</title><rect x="85.0832%" y="581" width="1.0883%" height="15" fill="rgb(244,192,49)" fg:x="1329" fg:w="17"/><text x="85.3332%" y="591.50"></text></g><g><title>deno`v8::internal::StackFrameIterator::Advance (1 samples, 0.06%)</title><rect x="86.1716%" y="565" width="0.0640%" height="15" fill="rgb(226,211,11)" fg:x="1346" fg:w="1"/><text x="86.4216%" y="575.50"></text></g><g><title>deno`v8::internal::StackFrame::ComputeType (1 samples, 0.06%)</title><rect x="86.1716%" y="549" width="0.0640%" height="15" fill="rgb(236,162,54)" fg:x="1346" fg:w="1"/><text x="86.4216%" y="559.50"></text></g><g><title>deno`v8::internal::wasm::WasmCodeRefScope::WasmCodeRefScope (1 samples, 0.06%)</title><rect x="86.1716%" y="533" width="0.0640%" height="15" fill="rgb(220,229,9)" fg:x="1346" fg:w="1"/><text x="86.4216%" y="543.50"></text></g><g><title>deno`v8::internal::Isolate::Iterate (3 samples, 0.19%)</title><rect x="86.1716%" y="581" width="0.1921%" height="15" fill="rgb(250,87,22)" fg:x="1346" fg:w="3"/><text x="86.4216%" y="591.50"></text></g><g><title>deno`v8::internal::StackFrameIteratorBase::StackFrameIteratorBase (2 samples, 0.13%)</title><rect x="86.2356%" y="565" width="0.1280%" height="15" fill="rgb(239,43,17)" fg:x="1347" fg:w="2"/><text x="86.4856%" y="575.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (31 samples, 1.98%)</title><rect x="85.0192%" y="597" width="1.9846%" height="15" fill="rgb(231,177,25)" fg:x="1328" fg:w="31"/><text x="85.2692%" y="607.50">d..</text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (10 samples, 0.64%)</title><rect x="86.3636%" y="581" width="0.6402%" height="15" fill="rgb(219,179,1)" fg:x="1349" fg:w="10"/><text x="86.6136%" y="591.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (1 samples, 0.06%)</title><rect x="87.0038%" y="597" width="0.0640%" height="15" fill="rgb(238,219,53)" fg:x="1359" fg:w="1"/><text x="87.2538%" y="607.50"></text></g><g><title>deno`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::AllocationSite, std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt;, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, v8::internal::Object::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::AllocationSite, unsigned long&gt; &gt; &gt;::__rehash (1 samples, 0.06%)</title><rect x="87.0038%" y="581" width="0.0640%" height="15" fill="rgb(232,167,36)" fg:x="1359" fg:w="1"/><text x="87.2538%" y="591.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.06%)</title><rect x="87.0038%" y="565" width="0.0640%" height="15" fill="rgb(244,19,51)" fg:x="1359" fg:w="1"/><text x="87.2538%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="87.0038%" y="549" width="0.0640%" height="15" fill="rgb(224,6,22)" fg:x="1359" fg:w="1"/><text x="87.2538%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="87.0038%" y="533" width="0.0640%" height="15" fill="rgb(224,145,5)" fg:x="1359" fg:w="1"/><text x="87.2538%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.06%)</title><rect x="87.0038%" y="517" width="0.0640%" height="15" fill="rgb(234,130,49)" fg:x="1359" fg:w="1"/><text x="87.2538%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.06%)</title><rect x="87.0038%" y="501" width="0.0640%" height="15" fill="rgb(254,6,2)" fg:x="1359" fg:w="1"/><text x="87.2538%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.06%)</title><rect x="87.0038%" y="485" width="0.0640%" height="15" fill="rgb(208,96,46)" fg:x="1359" fg:w="1"/><text x="87.2538%" y="495.50"></text></g><g><title>deno`v8::internal::FreeListManyCachedOrigin::~FreeListManyCachedOrigin (1 samples, 0.06%)</title><rect x="87.0679%" y="565" width="0.0640%" height="15" fill="rgb(239,3,39)" fg:x="1360" fg:w="1"/><text x="87.3179%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="87.0679%" y="549" width="0.0640%" height="15" fill="rgb(233,210,1)" fg:x="1360" fg:w="1"/><text x="87.3179%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="87.0679%" y="533" width="0.0640%" height="15" fill="rgb(244,137,37)" fg:x="1360" fg:w="1"/><text x="87.3179%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="87.1319%" y="565" width="0.0640%" height="15" fill="rgb(240,136,2)" fg:x="1361" fg:w="1"/><text x="87.3819%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="87.1319%" y="549" width="0.0640%" height="15" fill="rgb(239,18,37)" fg:x="1361" fg:w="1"/><text x="87.3819%" y="559.50"></text></g><g><title>deno`v8::internal::PagedSpace::~PagedSpace (3 samples, 0.19%)</title><rect x="87.0679%" y="581" width="0.1921%" height="15" fill="rgb(218,185,22)" fg:x="1360" fg:w="3"/><text x="87.3179%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.06%)</title><rect x="87.1959%" y="565" width="0.0640%" height="15" fill="rgb(225,218,4)" fg:x="1362" fg:w="1"/><text x="87.4459%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="87.2599%" y="581" width="0.0640%" height="15" fill="rgb(230,182,32)" fg:x="1363" fg:w="1"/><text x="87.5099%" y="591.50"></text></g><g><title>deno`v8::internal::Scavenger::~Scavenger (5 samples, 0.32%)</title><rect x="87.0679%" y="597" width="0.3201%" height="15" fill="rgb(242,56,43)" fg:x="1360" fg:w="5"/><text x="87.3179%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="87.3239%" y="581" width="0.0640%" height="15" fill="rgb(233,99,24)" fg:x="1364" fg:w="1"/><text x="87.5739%" y="591.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (7 samples, 0.45%)</title><rect x="87.3880%" y="597" width="0.4481%" height="15" fill="rgb(234,209,42)" fg:x="1365" fg:w="7"/><text x="87.6380%" y="607.50"></text></g><g><title>deno`v8::platform::DefaultJobState::~DefaultJobState (7 samples, 0.45%)</title><rect x="87.3880%" y="581" width="0.4481%" height="15" fill="rgb(227,7,12)" fg:x="1365" fg:w="7"/><text x="87.6380%" y="591.50"></text></g><g><title>deno`v8::base::ConditionVariable::~ConditionVariable (7 samples, 0.45%)</title><rect x="87.3880%" y="565" width="0.4481%" height="15" fill="rgb(245,203,43)" fg:x="1365" fg:w="7"/><text x="87.6380%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (7 samples, 0.45%)</title><rect x="87.3880%" y="549" width="0.4481%" height="15" fill="rgb(238,205,33)" fg:x="1365" fg:w="7"/><text x="87.6380%" y="559.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (47 samples, 3.01%)</title><rect x="84.8912%" y="645" width="3.0090%" height="15" fill="rgb(231,56,7)" fg:x="1326" fg:w="47"/><text x="85.1412%" y="655.50">den..</text></g><g><title>deno`v8::internal::Heap::Scavenge (47 samples, 3.01%)</title><rect x="84.8912%" y="629" width="3.0090%" height="15" fill="rgb(244,186,29)" fg:x="1326" fg:w="47"/><text x="85.1412%" y="639.50">den..</text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (47 samples, 3.01%)</title><rect x="84.8912%" y="613" width="3.0090%" height="15" fill="rgb(234,111,31)" fg:x="1326" fg:w="47"/><text x="85.1412%" y="623.50">den..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.06%)</title><rect x="87.8361%" y="597" width="0.0640%" height="15" fill="rgb(241,149,10)" fg:x="1372" fg:w="1"/><text x="88.0861%" y="607.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (53 samples, 3.39%)</title><rect x="84.5711%" y="693" width="3.3931%" height="15" fill="rgb(249,206,44)" fg:x="1321" fg:w="53"/><text x="84.8211%" y="703.50">den..</text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (53 samples, 3.39%)</title><rect x="84.5711%" y="677" width="3.3931%" height="15" fill="rgb(251,153,30)" fg:x="1321" fg:w="53"/><text x="84.8211%" y="687.50">den..</text></g><g><title>deno`v8::internal::Heap::CollectGarbage (53 samples, 3.39%)</title><rect x="84.5711%" y="661" width="3.3931%" height="15" fill="rgb(239,152,38)" fg:x="1321" fg:w="53"/><text x="84.8211%" y="671.50">den..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.06%)</title><rect x="87.9001%" y="645" width="0.0640%" height="15" fill="rgb(249,139,47)" fg:x="1373" fg:w="1"/><text x="88.1501%" y="655.50"></text></g><g><title>0x11000e570 (54 samples, 3.46%)</title><rect x="84.5711%" y="757" width="3.4571%" height="15" fill="rgb(244,64,35)" fg:x="1321" fg:w="54"/><text x="84.8211%" y="767.50">0x1..</text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (54 samples, 3.46%)</title><rect x="84.5711%" y="741" width="3.4571%" height="15" fill="rgb(216,46,15)" fg:x="1321" fg:w="54"/><text x="84.8211%" y="751.50">den..</text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (54 samples, 3.46%)</title><rect x="84.5711%" y="725" width="3.4571%" height="15" fill="rgb(250,74,19)" fg:x="1321" fg:w="54"/><text x="84.8211%" y="735.50">den..</text></g><g><title>deno`v8::internal::Factory::NewFillerObject (54 samples, 3.46%)</title><rect x="84.5711%" y="709" width="3.4571%" height="15" fill="rgb(249,42,33)" fg:x="1321" fg:w="54"/><text x="84.8211%" y="719.50">den..</text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::EnsureAllocation (1 samples, 0.06%)</title><rect x="87.9641%" y="693" width="0.0640%" height="15" fill="rgb(242,149,17)" fg:x="1374" fg:w="1"/><text x="88.2141%" y="703.50"></text></g><g><title>deno`v8::internal::NewSpace::SupportsAllocationObserver (1 samples, 0.06%)</title><rect x="87.9641%" y="677" width="0.0640%" height="15" fill="rgb(244,29,21)" fg:x="1374" fg:w="1"/><text x="88.2141%" y="687.50"></text></g><g><title>0x11000e628 (2 samples, 0.13%)</title><rect x="88.0282%" y="757" width="0.1280%" height="15" fill="rgb(220,130,37)" fg:x="1375" fg:w="2"/><text x="88.2782%" y="767.50"></text></g><g><title>0x11000e658 (1 samples, 0.06%)</title><rect x="88.1562%" y="757" width="0.0640%" height="15" fill="rgb(211,67,2)" fg:x="1377" fg:w="1"/><text x="88.4062%" y="767.50"></text></g><g><title>0x11000e6b8 (2 samples, 0.13%)</title><rect x="88.2202%" y="757" width="0.1280%" height="15" fill="rgb(235,68,52)" fg:x="1378" fg:w="2"/><text x="88.4702%" y="767.50"></text></g><g><title>0x11000e720 (1 samples, 0.06%)</title><rect x="88.3483%" y="757" width="0.0640%" height="15" fill="rgb(246,142,3)" fg:x="1380" fg:w="1"/><text x="88.5983%" y="767.50"></text></g><g><title>deno`Builtins_CallApiCallback (13 samples, 0.83%)</title><rect x="88.4123%" y="757" width="0.8323%" height="15" fill="rgb(241,25,7)" fg:x="1381" fg:w="13"/><text x="88.6623%" y="767.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (10 samples, 0.64%)</title><rect x="89.2446%" y="757" width="0.6402%" height="15" fill="rgb(242,119,39)" fg:x="1394" fg:w="10"/><text x="89.4946%" y="767.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNotNullOrUndefined (6 samples, 0.38%)</title><rect x="89.8848%" y="757" width="0.3841%" height="15" fill="rgb(241,98,45)" fg:x="1404" fg:w="6"/><text x="90.1348%" y="767.50"></text></g><g><title>deno`Builtins_Increment_Baseline (1 samples, 0.06%)</title><rect x="90.2689%" y="757" width="0.0640%" height="15" fill="rgb(254,28,30)" fg:x="1410" fg:w="1"/><text x="90.5189%" y="767.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (8 samples, 0.51%)</title><rect x="90.3329%" y="757" width="0.5122%" height="15" fill="rgb(241,142,54)" fg:x="1411" fg:w="8"/><text x="90.5829%" y="767.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_PolymorphicName (28 samples, 1.79%)</title><rect x="90.8451%" y="757" width="1.7926%" height="15" fill="rgb(222,85,15)" fg:x="1419" fg:w="28"/><text x="91.0951%" y="767.50">d..</text></g><g><title>deno`Builtins_LoadIC (52 samples, 3.33%)</title><rect x="92.6376%" y="757" width="3.3291%" height="15" fill="rgb(210,85,47)" fg:x="1447" fg:w="52"/><text x="92.8876%" y="767.50">den..</text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (3 samples, 0.19%)</title><rect x="95.9667%" y="757" width="0.1921%" height="15" fill="rgb(224,206,25)" fg:x="1499" fg:w="3"/><text x="96.2167%" y="767.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (1,379 samples, 88.28%)</title><rect x="7.9385%" y="773" width="88.2843%" height="15" fill="rgb(243,201,19)" fg:x="124" fg:w="1379"/><text x="8.1885%" y="783.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_SuspendGeneratorBaseline (1 samples, 0.06%)</title><rect x="96.1588%" y="757" width="0.0640%" height="15" fill="rgb(236,59,4)" fg:x="1502" fg:w="1"/><text x="96.4088%" y="767.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,514 samples, 96.93%)</title><rect x="1.6645%" y="965" width="96.9270%" height="15" fill="rgb(254,179,45)" fg:x="26" fg:w="1514"/><text x="1.9145%" y="975.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (1,513 samples, 96.86%)</title><rect x="1.7286%" y="949" width="96.8630%" height="15" fill="rgb(226,14,10)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="959.50">deno`deno_core::runtime::JsRuntime::mod_evaluate</text></g><g><title>deno`v8::Module::Evaluate(v8::Local (1,513 samples, 96.86%)</title><rect x="1.7286%" y="933" width="96.8630%" height="15" fill="rgb(244,27,41)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="943.50">deno`v8::Module::Evaluate(v8::Local</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (1,513 samples, 96.86%)</title><rect x="1.7286%" y="917" width="96.8630%" height="15" fill="rgb(235,35,32)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="927.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (1,513 samples, 96.86%)</title><rect x="1.7286%" y="901" width="96.8630%" height="15" fill="rgb(218,68,31)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="911.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (1,513 samples, 96.86%)</title><rect x="1.7286%" y="885" width="96.8630%" height="15" fill="rgb(207,120,37)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="895.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (1,513 samples, 96.86%)</title><rect x="1.7286%" y="869" width="96.8630%" height="15" fill="rgb(227,98,0)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="879.50">deno`v8::internal::Execution::TryRunMicrotasks</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (1,513 samples, 96.86%)</title><rect x="1.7286%" y="853" width="96.8630%" height="15" fill="rgb(207,7,3)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="863.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1,513 samples, 96.86%)</title><rect x="1.7286%" y="837" width="96.8630%" height="15" fill="rgb(206,98,19)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="847.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (1,513 samples, 96.86%)</title><rect x="1.7286%" y="821" width="96.8630%" height="15" fill="rgb(217,5,26)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="831.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (1,513 samples, 96.86%)</title><rect x="1.7286%" y="805" width="96.8630%" height="15" fill="rgb(235,190,38)" fg:x="27" fg:w="1513"/><text x="1.9786%" y="815.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (1,442 samples, 92.32%)</title><rect x="6.2740%" y="789" width="92.3175%" height="15" fill="rgb(247,86,24)" fg:x="98" fg:w="1442"/><text x="6.5240%" y="799.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (37 samples, 2.37%)</title><rect x="96.2228%" y="773" width="2.3688%" height="15" fill="rgb(205,101,16)" fg:x="1503" fg:w="37"/><text x="96.4728%" y="783.50">de..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,515 samples, 96.99%)</title><rect x="1.6645%" y="997" width="96.9910%" height="15" fill="rgb(246,168,33)" fg:x="26" fg:w="1515"/><text x="1.9145%" y="1007.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,515 samples, 96.99%)</title><rect x="1.6645%" y="981" width="96.9910%" height="15" fill="rgb(231,114,1)" fg:x="26" fg:w="1515"/><text x="1.9145%" y="991.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::modules::RecursiveModuleLoad::register_and_recurse (1 samples, 0.06%)</title><rect x="98.5915%" y="965" width="0.0640%" height="15" fill="rgb(207,184,53)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="975.50"></text></g><g><title>deno`deno_core::modules::ModuleMap::new_es_module (1 samples, 0.06%)</title><rect x="98.5915%" y="949" width="0.0640%" height="15" fill="rgb(224,95,51)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="959.50"></text></g><g><title>deno`v8::ScriptCompiler::CompileModule (1 samples, 0.06%)</title><rect x="98.5915%" y="933" width="0.0640%" height="15" fill="rgb(212,188,45)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="943.50"></text></g><g><title>deno`v8::ScriptCompiler::CompileUnboundInternal (1 samples, 0.06%)</title><rect x="98.5915%" y="917" width="0.0640%" height="15" fill="rgb(223,154,38)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="927.50"></text></g><g><title>deno`v8::internal::Compiler::GetSharedFunctionInfoForScript(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="98.5915%" y="901" width="0.0640%" height="15" fill="rgb(251,22,52)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="911.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::GetSharedFunctionInfoForScriptImpl(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="98.5915%" y="885" width="0.0640%" height="15" fill="rgb(229,209,22)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="895.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CompileScriptOnMainThread(v8::internal::UnoptimizedCompileFlags, v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::ScriptDetails const&amp;, v8::internal::NativesFlag, v8::Extension*, v8::internal::Isolate*, v8::internal::MaybeHandle (1 samples, 0.06%)</title><rect x="98.5915%" y="869" width="0.0640%" height="15" fill="rgb(234,138,34)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="879.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::CompileToplevel(v8::internal::ParseInfo*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::MaybeHandle (1 samples, 0.06%)</title><rect x="98.5915%" y="853" width="0.0640%" height="15" fill="rgb(212,95,11)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="863.50"></text></g><g><title>deno`bool v8::internal::(anonymous namespace)::IterativelyExecuteAndFinalizeUnoptimizedCompilationJobs&lt;v8::internal::Isolate&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::ParseInfo*, v8::internal::AccountingAllocator*, v8::internal::IsCompiledScope*, std::__1::vector&lt;v8::internal::FinalizeUnoptimizedCompilationData, std::__1::allocator&lt;v8::internal::FinalizeUnoptimizedCompilationData&gt; &gt;*, std::__1::vector&lt;v8::internal::DeferredFinalizationJobData, std::__1::allocator (1 samples, 0.06%)</title><rect x="98.5915%" y="837" width="0.0640%" height="15" fill="rgb(240,179,47)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="847.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ExecuteSingleUnoptimizedCompilationJob(v8::internal::ParseInfo*, v8::internal::FunctionLiteral*, v8::internal::Handle&lt;v8::internal::Script&gt;, v8::internal::AccountingAllocator*, std::__1::vector&lt;v8::internal::FunctionLiteral*, std::__1::allocator (1 samples, 0.06%)</title><rect x="98.5915%" y="821" width="0.0640%" height="15" fill="rgb(240,163,11)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="831.50"></text></g><g><title>deno`v8::internal::interpreter::InterpreterCompilationJob::ExecuteJobImpl (1 samples, 0.06%)</title><rect x="98.5915%" y="805" width="0.0640%" height="15" fill="rgb(236,37,12)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="815.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::GenerateBytecode (1 samples, 0.06%)</title><rect x="98.5915%" y="789" width="0.0640%" height="15" fill="rgb(232,164,16)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="799.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::GenerateBytecodeBody (1 samples, 0.06%)</title><rect x="98.5915%" y="773" width="0.0640%" height="15" fill="rgb(244,205,15)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="783.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitBlock (1 samples, 0.06%)</title><rect x="98.5915%" y="757" width="0.0640%" height="15" fill="rgb(223,117,47)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="767.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitBlockDeclarationsAndStatements (1 samples, 0.06%)</title><rect x="98.5915%" y="741" width="0.0640%" height="15" fill="rgb(244,107,35)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="751.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitExpressionStatement (1 samples, 0.06%)</title><rect x="98.5915%" y="725" width="0.0640%" height="15" fill="rgb(205,140,8)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="735.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitAssignment (1 samples, 0.06%)</title><rect x="98.5915%" y="709" width="0.0640%" height="15" fill="rgb(228,84,46)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="719.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitConditional (1 samples, 0.06%)</title><rect x="98.5915%" y="693" width="0.0640%" height="15" fill="rgb(254,188,9)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="703.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitForTest (1 samples, 0.06%)</title><rect x="98.5915%" y="677" width="0.0640%" height="15" fill="rgb(206,112,54)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="687.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitNot (1 samples, 0.06%)</title><rect x="98.5915%" y="661" width="0.0640%" height="15" fill="rgb(216,84,49)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="671.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeGenerator::VisitCompareOperation (1 samples, 0.06%)</title><rect x="98.5915%" y="645" width="0.0640%" height="15" fill="rgb(214,194,35)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="655.50"></text></g><g><title>deno`v8::internal::interpreter::BytecodeArrayBuilder::LoadGlobal (1 samples, 0.06%)</title><rect x="98.5915%" y="629" width="0.0640%" height="15" fill="rgb(249,28,3)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="639.50"></text></g><g><title>deno`v8::internal::interpreter::ConstantArrayBuilder::Insert (1 samples, 0.06%)</title><rect x="98.5915%" y="613" width="0.0640%" height="15" fill="rgb(222,56,52)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="623.50"></text></g><g><title>deno`v8::internal::interpreter::ConstantArrayBuilder::ConstantArraySlice::Allocate (1 samples, 0.06%)</title><rect x="98.5915%" y="597" width="0.0640%" height="15" fill="rgb(245,217,50)" fg:x="1540" fg:w="1"/><text x="98.8415%" y="607.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="853" width="0.0640%" height="15" fill="rgb(213,201,24)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.06%)</title><rect x="98.6556%" y="837" width="0.0640%" height="15" fill="rgb(248,116,28)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="821" width="0.0640%" height="15" fill="rgb(219,72,43)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="805" width="0.0640%" height="15" fill="rgb(209,138,14)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="789" width="0.0640%" height="15" fill="rgb(222,18,33)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.06%)</title><rect x="98.6556%" y="773" width="0.0640%" height="15" fill="rgb(213,199,7)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="757" width="0.0640%" height="15" fill="rgb(250,110,10)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="741" width="0.0640%" height="15" fill="rgb(248,123,6)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="751.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="725" width="0.0640%" height="15" fill="rgb(206,91,31)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="735.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.06%)</title><rect x="98.6556%" y="709" width="0.0640%" height="15" fill="rgb(211,154,13)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="719.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="693" width="0.0640%" height="15" fill="rgb(225,148,7)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="703.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="677" width="0.0640%" height="15" fill="rgb(220,160,43)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="687.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="661" width="0.0640%" height="15" fill="rgb(213,52,39)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="671.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.06%)</title><rect x="98.6556%" y="645" width="0.0640%" height="15" fill="rgb(243,137,7)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="655.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="629" width="0.0640%" height="15" fill="rgb(230,79,13)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="639.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="613" width="0.0640%" height="15" fill="rgb(247,105,23)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="623.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="597" width="0.0640%" height="15" fill="rgb(223,179,41)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="607.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="581" width="0.0640%" height="15" fill="rgb(218,9,34)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="591.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="565" width="0.0640%" height="15" fill="rgb(222,106,8)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="575.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="549" width="0.0640%" height="15" fill="rgb(211,220,0)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="559.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="533" width="0.0640%" height="15" fill="rgb(229,52,16)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="543.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="517" width="0.0640%" height="15" fill="rgb(212,155,18)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="527.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="501" width="0.0640%" height="15" fill="rgb(242,21,14)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="511.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="485" width="0.0640%" height="15" fill="rgb(222,19,48)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="495.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="469" width="0.0640%" height="15" fill="rgb(232,45,27)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="479.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="453" width="0.0640%" height="15" fill="rgb(249,103,42)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="463.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="437" width="0.0640%" height="15" fill="rgb(246,81,33)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="447.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="421" width="0.0640%" height="15" fill="rgb(252,33,42)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="431.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="405" width="0.0640%" height="15" fill="rgb(209,212,41)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="415.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="389" width="0.0640%" height="15" fill="rgb(207,154,6)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="399.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="373" width="0.0640%" height="15" fill="rgb(223,64,47)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="383.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="357" width="0.0640%" height="15" fill="rgb(211,161,38)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="367.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="341" width="0.0640%" height="15" fill="rgb(219,138,40)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="351.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="325" width="0.0640%" height="15" fill="rgb(241,228,46)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="335.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="309" width="0.0640%" height="15" fill="rgb(223,209,38)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="319.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="293" width="0.0640%" height="15" fill="rgb(236,164,45)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="303.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="277" width="0.0640%" height="15" fill="rgb(231,15,5)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="287.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="261" width="0.0640%" height="15" fill="rgb(252,35,15)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="271.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="245" width="0.0640%" height="15" fill="rgb(248,181,18)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="255.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="229" width="0.0640%" height="15" fill="rgb(233,39,42)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="239.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="213" width="0.0640%" height="15" fill="rgb(238,110,33)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="223.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="197" width="0.0640%" height="15" fill="rgb(233,195,10)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="207.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="181" width="0.0640%" height="15" fill="rgb(254,105,3)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="191.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="165" width="0.0640%" height="15" fill="rgb(221,225,9)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="175.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="149" width="0.0640%" height="15" fill="rgb(224,227,45)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="159.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="133" width="0.0640%" height="15" fill="rgb(229,198,43)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="143.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="117" width="0.0640%" height="15" fill="rgb(206,209,35)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="127.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="101" width="0.0640%" height="15" fill="rgb(245,195,53)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="111.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="85" width="0.0640%" height="15" fill="rgb(240,92,26)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="95.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="69" width="0.0640%" height="15" fill="rgb(207,40,23)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="79.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="98.6556%" y="53" width="0.0640%" height="15" fill="rgb(223,111,35)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="63.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="98.6556%" y="37" width="0.0640%" height="15" fill="rgb(229,147,28)" fg:x="1541" fg:w="1"/><text x="98.9056%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.13%)</title><rect x="98.6556%" y="965" width="0.1280%" height="15" fill="rgb(211,29,28)" fg:x="1541" fg:w="2"/><text x="98.9056%" y="975.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.13%)</title><rect x="98.6556%" y="949" width="0.1280%" height="15" fill="rgb(228,72,33)" fg:x="1541" fg:w="2"/><text x="98.9056%" y="959.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.13%)</title><rect x="98.6556%" y="933" width="0.1280%" height="15" fill="rgb(205,214,31)" fg:x="1541" fg:w="2"/><text x="98.9056%" y="943.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.13%)</title><rect x="98.6556%" y="917" width="0.1280%" height="15" fill="rgb(224,111,15)" fg:x="1541" fg:w="2"/><text x="98.9056%" y="927.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.13%)</title><rect x="98.6556%" y="901" width="0.1280%" height="15" fill="rgb(253,21,26)" fg:x="1541" fg:w="2"/><text x="98.9056%" y="911.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.13%)</title><rect x="98.6556%" y="885" width="0.1280%" height="15" fill="rgb(245,139,43)" fg:x="1541" fg:w="2"/><text x="98.9056%" y="895.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.13%)</title><rect x="98.6556%" y="869" width="0.1280%" height="15" fill="rgb(252,170,7)" fg:x="1541" fg:w="2"/><text x="98.9056%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.06%)</title><rect x="98.7196%" y="853" width="0.0640%" height="15" fill="rgb(231,118,14)" fg:x="1542" fg:w="1"/><text x="98.9696%" y="863.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.06%)</title><rect x="98.7196%" y="837" width="0.0640%" height="15" fill="rgb(238,83,0)" fg:x="1542" fg:w="1"/><text x="98.9696%" y="847.50"></text></g><g><title>deno`v8::internal::DescriptorArray::Sort (1 samples, 0.06%)</title><rect x="98.7196%" y="821" width="0.0640%" height="15" fill="rgb(221,39,39)" fg:x="1542" fg:w="1"/><text x="98.9696%" y="831.50"></text></g><g><title>deno`v8::internal::Checksum(v8::base::Vector (6 samples, 0.38%)</title><rect x="98.7836%" y="933" width="0.3841%" height="15" fill="rgb(222,119,46)" fg:x="1543" fg:w="6"/><text x="99.0336%" y="943.50"></text></g><g><title>deno`v8::internal::Heap::SetUp (1 samples, 0.06%)</title><rect x="99.1677%" y="885" width="0.0640%" height="15" fill="rgb(222,165,49)" fg:x="1549" fg:w="1"/><text x="99.4177%" y="895.50"></text></g><g><title>deno`v8::internal::CodeRange::EnsureProcessWideCodeRange (1 samples, 0.06%)</title><rect x="99.1677%" y="869" width="0.0640%" height="15" fill="rgb(219,113,52)" fg:x="1549" fg:w="1"/><text x="99.4177%" y="879.50"></text></g><g><title>deno`v8::internal::CodeRange::InitReservation (1 samples, 0.06%)</title><rect x="99.1677%" y="853" width="0.0640%" height="15" fill="rgb(214,7,15)" fg:x="1549" fg:w="1"/><text x="99.4177%" y="863.50"></text></g><g><title>deno`v8::internal::VirtualMemoryCage::InitReservation (1 samples, 0.06%)</title><rect x="99.1677%" y="837" width="0.0640%" height="15" fill="rgb(235,32,4)" fg:x="1549" fg:w="1"/><text x="99.4177%" y="847.50"></text></g><g><title>deno`v8::internal::VirtualMemory::VirtualMemory (1 samples, 0.06%)</title><rect x="99.1677%" y="821" width="0.0640%" height="15" fill="rgb(238,90,54)" fg:x="1549" fg:w="1"/><text x="99.4177%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.06%)</title><rect x="99.1677%" y="805" width="0.0640%" height="15" fill="rgb(213,208,19)" fg:x="1549" fg:w="1"/><text x="99.4177%" y="815.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (10 samples, 0.64%)</title><rect x="98.6556%" y="981" width="0.6402%" height="15" fill="rgb(233,156,4)" fg:x="1541" fg:w="10"/><text x="98.9056%" y="991.50"></text></g><g><title>deno`v8::Isolate::New (8 samples, 0.51%)</title><rect x="98.7836%" y="965" width="0.5122%" height="15" fill="rgb(207,194,5)" fg:x="1543" fg:w="8"/><text x="99.0336%" y="975.50"></text></g><g><title>deno`v8::Isolate::Initialize (8 samples, 0.51%)</title><rect x="98.7836%" y="949" width="0.5122%" height="15" fill="rgb(206,111,30)" fg:x="1543" fg:w="8"/><text x="99.0336%" y="959.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.13%)</title><rect x="99.1677%" y="933" width="0.1280%" height="15" fill="rgb(243,70,54)" fg:x="1549" fg:w="2"/><text x="99.4177%" y="943.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.13%)</title><rect x="99.1677%" y="917" width="0.1280%" height="15" fill="rgb(242,28,8)" fg:x="1549" fg:w="2"/><text x="99.4177%" y="927.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.13%)</title><rect x="99.1677%" y="901" width="0.1280%" height="15" fill="rgb(219,106,18)" fg:x="1549" fg:w="2"/><text x="99.4177%" y="911.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.06%)</title><rect x="99.2318%" y="885" width="0.0640%" height="15" fill="rgb(244,222,10)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="895.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.06%)</title><rect x="99.2318%" y="869" width="0.0640%" height="15" fill="rgb(236,179,52)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="879.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.06%)</title><rect x="99.2318%" y="853" width="0.0640%" height="15" fill="rgb(213,23,39)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="863.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.06%)</title><rect x="99.2318%" y="837" width="0.0640%" height="15" fill="rgb(238,48,10)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="847.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="99.2318%" y="821" width="0.0640%" height="15" fill="rgb(251,196,23)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="831.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="99.2318%" y="805" width="0.0640%" height="15" fill="rgb(250,152,24)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="815.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="99.2318%" y="789" width="0.0640%" height="15" fill="rgb(209,150,17)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="799.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="99.2318%" y="773" width="0.0640%" height="15" fill="rgb(234,202,34)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="783.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.06%)</title><rect x="99.2318%" y="757" width="0.0640%" height="15" fill="rgb(253,148,53)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="767.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.06%)</title><rect x="99.2318%" y="741" width="0.0640%" height="15" fill="rgb(218,129,16)" fg:x="1550" fg:w="1"/><text x="99.4818%" y="751.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.06%)</title><rect x="99.2958%" y="981" width="0.0640%" height="15" fill="rgb(216,85,19)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="991.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.06%)</title><rect x="99.2958%" y="965" width="0.0640%" height="15" fill="rgb(235,228,7)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="975.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.06%)</title><rect x="99.2958%" y="949" width="0.0640%" height="15" fill="rgb(245,175,0)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="959.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.06%)</title><rect x="99.2958%" y="933" width="0.0640%" height="15" fill="rgb(208,168,36)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="943.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.2958%" y="917" width="0.0640%" height="15" fill="rgb(246,171,24)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="927.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.06%)</title><rect x="99.2958%" y="901" width="0.0640%" height="15" fill="rgb(215,142,24)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="911.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.06%)</title><rect x="99.2958%" y="885" width="0.0640%" height="15" fill="rgb(250,187,7)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="895.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.06%)</title><rect x="99.2958%" y="869" width="0.0640%" height="15" fill="rgb(228,66,33)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="879.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.06%)</title><rect x="99.2958%" y="853" width="0.0640%" height="15" fill="rgb(234,215,21)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="863.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.06%)</title><rect x="99.2958%" y="837" width="0.0640%" height="15" fill="rgb(222,191,20)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="847.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.06%)</title><rect x="99.2958%" y="821" width="0.0640%" height="15" fill="rgb(245,79,54)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="831.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.06%)</title><rect x="99.2958%" y="805" width="0.0640%" height="15" fill="rgb(240,10,37)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="815.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.06%)</title><rect x="99.2958%" y="789" width="0.0640%" height="15" fill="rgb(214,192,32)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="799.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.2958%" y="773" width="0.0640%" height="15" fill="rgb(209,36,54)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="783.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.2958%" y="757" width="0.0640%" height="15" fill="rgb(220,10,11)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="767.50"></text></g><g><title>deno`v8::internal::parsing::ParseFunction(v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.2958%" y="741" width="0.0640%" height="15" fill="rgb(221,106,17)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="751.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::Isolate*, v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.06%)</title><rect x="99.2958%" y="725" width="0.0640%" height="15" fill="rgb(251,142,44)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="735.50"></text></g><g><title>deno`v8::internal::DeclarationScope::Analyze (1 samples, 0.06%)</title><rect x="99.2958%" y="709" width="0.0640%" height="15" fill="rgb(238,13,15)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="719.50"></text></g><g><title>deno`v8::internal::DeclarationScope::AllocateVariables (1 samples, 0.06%)</title><rect x="99.2958%" y="693" width="0.0640%" height="15" fill="rgb(208,107,27)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="703.50"></text></g><g><title>deno`v8::internal::Scope::AllocateVariablesRecursively (1 samples, 0.06%)</title><rect x="99.2958%" y="677" width="0.0640%" height="15" fill="rgb(205,136,37)" fg:x="1551" fg:w="1"/><text x="99.5458%" y="687.50"></text></g><g><title>dyld`start (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1157" width="97.7593%" height="15" fill="rgb(250,205,27)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1167.50">dyld`start</text></g><g><title>deno`main (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1141" width="97.7593%" height="15" fill="rgb(210,80,43)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1151.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1125" width="97.7593%" height="15" fill="rgb(247,160,36)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1135.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1109" width="97.7593%" height="15" fill="rgb(234,13,49)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1119.50">deno`deno::main</text></g><g><title>deno`deno_runtime::tokio_util::run_local (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1093" width="97.7593%" height="15" fill="rgb(234,122,0)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1103.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1077" width="97.7593%" height="15" fill="rgb(207,146,38)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1087.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::main::_{{closure}} (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1061" width="97.7593%" height="15" fill="rgb(207,177,25)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1071.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1045" width="97.7593%" height="15" fill="rgb(211,178,42)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1055.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1029" width="97.7593%" height="15" fill="rgb(230,69,54)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1039.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,527 samples, 97.76%)</title><rect x="1.6645%" y="1013" width="97.7593%" height="15" fill="rgb(214,135,41)" fg:x="26" fg:w="1527"/><text x="1.9145%" y="1023.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (12 samples, 0.77%)</title><rect x="98.6556%" y="997" width="0.7682%" height="15" fill="rgb(237,67,25)" fg:x="1541" fg:w="12"/><text x="98.9056%" y="1007.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.06%)</title><rect x="99.3598%" y="981" width="0.0640%" height="15" fill="rgb(222,189,50)" fg:x="1552" fg:w="1"/><text x="99.6098%" y="991.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.06%)</title><rect x="99.3598%" y="965" width="0.0640%" height="15" fill="rgb(245,148,34)" fg:x="1552" fg:w="1"/><text x="99.6098%" y="975.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.06%)</title><rect x="99.3598%" y="949" width="0.0640%" height="15" fill="rgb(222,29,6)" fg:x="1552" fg:w="1"/><text x="99.6098%" y="959.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.06%)</title><rect x="99.3598%" y="933" width="0.0640%" height="15" fill="rgb(221,189,43)" fg:x="1552" fg:w="1"/><text x="99.6098%" y="943.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.06%)</title><rect x="99.3598%" y="917" width="0.0640%" height="15" fill="rgb(207,36,27)" fg:x="1552" fg:w="1"/><text x="99.6098%" y="927.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.06%)</title><rect x="99.4238%" y="1125" width="0.0640%" height="15" fill="rgb(217,90,24)" fg:x="1553" fg:w="1"/><text x="99.6738%" y="1135.50"></text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.06%)</title><rect x="99.4238%" y="1109" width="0.0640%" height="15" fill="rgb(224,66,35)" fg:x="1553" fg:w="1"/><text x="99.6738%" y="1119.50"></text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.06%)</title><rect x="99.4238%" y="1093" width="0.0640%" height="15" fill="rgb(221,13,50)" fg:x="1553" fg:w="1"/><text x="99.6738%" y="1103.50"></text></g><g><title>deno`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (1 samples, 0.06%)</title><rect x="99.4238%" y="1077" width="0.0640%" height="15" fill="rgb(236,68,49)" fg:x="1553" fg:w="1"/><text x="99.6738%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (1 samples, 0.06%)</title><rect x="99.4878%" y="1029" width="0.0640%" height="15" fill="rgb(229,146,28)" fg:x="1554" fg:w="1"/><text x="99.7378%" y="1039.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (1 samples, 0.06%)</title><rect x="99.4878%" y="1013" width="0.0640%" height="15" fill="rgb(225,31,38)" fg:x="1554" fg:w="1"/><text x="99.7378%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (1 samples, 0.06%)</title><rect x="99.4878%" y="997" width="0.0640%" height="15" fill="rgb(250,208,3)" fg:x="1554" fg:w="1"/><text x="99.7378%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.06%)</title><rect x="99.4878%" y="981" width="0.0640%" height="15" fill="rgb(246,54,23)" fg:x="1554" fg:w="1"/><text x="99.7378%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.06%)</title><rect x="99.4878%" y="965" width="0.0640%" height="15" fill="rgb(243,76,11)" fg:x="1554" fg:w="1"/><text x="99.7378%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.06%)</title><rect x="99.4878%" y="949" width="0.0640%" height="15" fill="rgb(245,21,50)" fg:x="1554" fg:w="1"/><text x="99.7378%" y="959.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ControlFlowOptimizationPhase&gt; (1 samples, 0.06%)</title><rect x="99.5519%" y="1013" width="0.0640%" height="15" fill="rgb(228,9,43)" fg:x="1555" fg:w="1"/><text x="99.8019%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::ControlFlowOptimizationPhase::Run (1 samples, 0.06%)</title><rect x="99.5519%" y="997" width="0.0640%" height="15" fill="rgb(208,100,47)" fg:x="1555" fg:w="1"/><text x="99.8019%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::ControlFlowOptimizer::Optimize (1 samples, 0.06%)</title><rect x="99.5519%" y="981" width="0.0640%" height="15" fill="rgb(232,26,8)" fg:x="1555" fg:w="1"/><text x="99.8019%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::ControlFlowOptimizer::VisitNode (1 samples, 0.06%)</title><rect x="99.5519%" y="965" width="0.0640%" height="15" fill="rgb(216,166,38)" fg:x="1555" fg:w="1"/><text x="99.8019%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::IsControlEdge (1 samples, 0.06%)</title><rect x="99.5519%" y="949" width="0.0640%" height="15" fill="rgb(251,202,51)" fg:x="1555" fg:w="1"/><text x="99.8019%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasFrameStateInput (1 samples, 0.06%)</title><rect x="99.5519%" y="933" width="0.0640%" height="15" fill="rgb(254,216,34)" fg:x="1555" fg:w="1"/><text x="99.8019%" y="943.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (1 samples, 0.06%)</title><rect x="99.6159%" y="1013" width="0.0640%" height="15" fill="rgb(251,32,27)" fg:x="1556" fg:w="1"/><text x="99.8659%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (1 samples, 0.06%)</title><rect x="99.6159%" y="997" width="0.0640%" height="15" fill="rgb(208,127,28)" fg:x="1556" fg:w="1"/><text x="99.8659%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.06%)</title><rect x="99.6159%" y="981" width="0.0640%" height="15" fill="rgb(224,137,22)" fg:x="1556" fg:w="1"/><text x="99.8659%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.06%)</title><rect x="99.6159%" y="965" width="0.0640%" height="15" fill="rgb(254,70,32)" fg:x="1556" fg:w="1"/><text x="99.8659%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.06%)</title><rect x="99.7439%" y="949" width="0.0640%" height="15" fill="rgb(229,75,37)" fg:x="1558" fg:w="1"/><text x="99.9939%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::ConstantFoldingReducer::Reduce (1 samples, 0.06%)</title><rect x="99.7439%" y="933" width="0.0640%" height="15" fill="rgb(252,64,23)" fg:x="1558" fg:w="1"/><text x="99.9939%" y="943.50"></text></g><g><title>deno`v8::internal::compiler::Type::SlowIs (1 samples, 0.06%)</title><rect x="99.7439%" y="917" width="0.0640%" height="15" fill="rgb(232,162,48)" fg:x="1558" fg:w="1"/><text x="99.9939%" y="927.50"></text></g><g><title>deno`v8::internal::compiler::Type::BitsetLub (1 samples, 0.06%)</title><rect x="99.7439%" y="901" width="0.0640%" height="15" fill="rgb(246,160,12)" fg:x="1558" fg:w="1"/><text x="99.9939%" y="911.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (3 samples, 0.19%)</title><rect x="99.6799%" y="1013" width="0.1921%" height="15" fill="rgb(247,166,0)" fg:x="1557" fg:w="3"/><text x="99.9299%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (3 samples, 0.19%)</title><rect x="99.6799%" y="997" width="0.1921%" height="15" fill="rgb(249,219,21)" fg:x="1557" fg:w="3"/><text x="99.9299%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.19%)</title><rect x="99.6799%" y="981" width="0.1921%" height="15" fill="rgb(205,209,3)" fg:x="1557" fg:w="3"/><text x="99.9299%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.19%)</title><rect x="99.6799%" y="965" width="0.1921%" height="15" fill="rgb(243,44,1)" fg:x="1557" fg:w="3"/><text x="99.9299%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::TypedOptimization::Reduce (1 samples, 0.06%)</title><rect x="99.8079%" y="949" width="0.0640%" height="15" fill="rgb(206,159,16)" fg:x="1559" fg:w="1"/><text x="100.0579%" y="959.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (1 samples, 0.06%)</title><rect x="99.8720%" y="1013" width="0.0640%" height="15" fill="rgb(244,77,30)" fg:x="1560" fg:w="1"/><text x="100.1220%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLoweringPhase::Run (1 samples, 0.06%)</title><rect x="99.8720%" y="997" width="0.0640%" height="15" fill="rgb(218,69,12)" fg:x="1560" fg:w="1"/><text x="100.1220%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (1 samples, 0.06%)</title><rect x="99.8720%" y="981" width="0.0640%" height="15" fill="rgb(212,87,7)" fg:x="1560" fg:w="1"/><text x="100.1220%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunPropagatePhase (1 samples, 0.06%)</title><rect x="99.8720%" y="965" width="0.0640%" height="15" fill="rgb(245,114,25)" fg:x="1560" fg:w="1"/><text x="100.1220%" y="975.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::VisitInputs&lt;(v8::internal::compiler::Phase)0&gt; (1 samples, 0.06%)</title><rect x="99.8720%" y="949" width="0.0640%" height="15" fill="rgb(210,61,42)" fg:x="1560" fg:w="1"/><text x="100.1220%" y="959.50"></text></g><g><title>all (1,562 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(211,52,33)" fg:x="0" fg:w="1562"/><text x="0.2500%" y="1183.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (9 samples, 0.58%)</title><rect x="99.4238%" y="1157" width="0.5762%" height="15" fill="rgb(234,58,33)" fg:x="1553" fg:w="9"/><text x="99.6738%" y="1167.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (9 samples, 0.58%)</title><rect x="99.4238%" y="1141" width="0.5762%" height="15" fill="rgb(220,115,36)" fg:x="1553" fg:w="9"/><text x="99.6738%" y="1151.50"></text></g><g><title>deno`v8::base::ThreadEntry (8 samples, 0.51%)</title><rect x="99.4878%" y="1125" width="0.5122%" height="15" fill="rgb(243,153,54)" fg:x="1554" fg:w="8"/><text x="99.7378%" y="1135.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (8 samples, 0.51%)</title><rect x="99.4878%" y="1109" width="0.5122%" height="15" fill="rgb(251,47,18)" fg:x="1554" fg:w="8"/><text x="99.7378%" y="1119.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (8 samples, 0.51%)</title><rect x="99.4878%" y="1093" width="0.5122%" height="15" fill="rgb(242,102,42)" fg:x="1554" fg:w="8"/><text x="99.7378%" y="1103.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (8 samples, 0.51%)</title><rect x="99.4878%" y="1077" width="0.5122%" height="15" fill="rgb(234,31,38)" fg:x="1554" fg:w="8"/><text x="99.7378%" y="1087.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (8 samples, 0.51%)</title><rect x="99.4878%" y="1061" width="0.5122%" height="15" fill="rgb(221,117,51)" fg:x="1554" fg:w="8"/><text x="99.7378%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (8 samples, 0.51%)</title><rect x="99.4878%" y="1045" width="0.5122%" height="15" fill="rgb(212,20,18)" fg:x="1554" fg:w="8"/><text x="99.7378%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (7 samples, 0.45%)</title><rect x="99.5519%" y="1029" width="0.4481%" height="15" fill="rgb(245,133,36)" fg:x="1555" fg:w="7"/><text x="99.8019%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (1 samples, 0.06%)</title><rect x="99.9360%" y="1013" width="0.0640%" height="15" fill="rgb(212,6,19)" fg:x="1561" fg:w="1"/><text x="100.1860%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (1 samples, 0.06%)</title><rect x="99.9360%" y="997" width="0.0640%" height="15" fill="rgb(218,1,36)" fg:x="1561" fg:w="1"/><text x="100.1860%" y="1007.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (1 samples, 0.06%)</title><rect x="99.9360%" y="981" width="0.0640%" height="15" fill="rgb(246,84,54)" fg:x="1561" fg:w="1"/><text x="100.1860%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (1 samples, 0.06%)</title><rect x="99.9360%" y="965" width="0.0640%" height="15" fill="rgb(242,110,6)" fg:x="1561" fg:w="1"/><text x="100.1860%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (1 samples, 0.06%)</title><rect x="99.9360%" y="949" width="0.0640%" height="15" fill="rgb(214,47,5)" fg:x="1561" fg:w="1"/><text x="100.1860%" y="959.50"></text></g></svg></svg>