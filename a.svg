<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1366" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1349.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1349.00"> </text><svg id="frames" x="10" width="1180" total_samples="3438"><g><title>deno`OUTLINED_FUNCTION_11021 (4 samples, 0.12%)</title><rect x="0.0000%" y="1237" width="0.1163%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_12546 (1 samples, 0.03%)</title><rect x="0.1163%" y="1237" width="0.0291%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.3663%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_20314 (1 samples, 0.03%)</title><rect x="0.1454%" y="1237" width="0.0291%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.3954%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_266 (1 samples, 0.03%)</title><rect x="0.1745%" y="1237" width="0.0291%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.4245%" y="1247.50"></text></g><g><title>deno`OUTLINED_FUNCTION_817 (1 samples, 0.03%)</title><rect x="0.2036%" y="1237" width="0.0291%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="1"/><text x="0.4536%" y="1247.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (1 samples, 0.03%)</title><rect x="0.2327%" y="1237" width="0.0291%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="1"/><text x="0.4827%" y="1247.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="0.5526%" y="1205" width="0.0291%" height="15" fill="rgb(207,160,47)" fg:x="19" fg:w="1"/><text x="0.8026%" y="1215.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18436 (1 samples, 0.03%)</title><rect x="0.5817%" y="1205" width="0.0291%" height="15" fill="rgb(228,23,34)" fg:x="20" fg:w="1"/><text x="0.8317%" y="1215.50"></text></g><g><title>deno`OUTLINED_FUNCTION_20819 (2 samples, 0.06%)</title><rect x="0.6108%" y="1205" width="0.0582%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="2"/><text x="0.8608%" y="1215.50"></text></g><g><title>deno`OUTLINED_FUNCTION_23876 (1 samples, 0.03%)</title><rect x="0.6981%" y="1173" width="0.0291%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="1"/><text x="0.9481%" y="1183.50"></text></g><g><title>deno`OUTLINED_FUNCTION_24694 (1 samples, 0.03%)</title><rect x="0.7272%" y="1173" width="0.0291%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="1"/><text x="0.9772%" y="1183.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="0.7853%" y="1093" width="0.0291%" height="15" fill="rgb(240,193,28)" fg:x="27" fg:w="1"/><text x="1.0353%" y="1103.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="0.7853%" y="1077" width="0.0291%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="1"/><text x="1.0353%" y="1087.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="0.7853%" y="1061" width="0.0291%" height="15" fill="rgb(206,188,39)" fg:x="27" fg:w="1"/><text x="1.0353%" y="1071.50"></text></g><g><title>deno`deno_graph::graph::parse_module (1 samples, 0.03%)</title><rect x="0.7853%" y="1045" width="0.0291%" height="15" fill="rgb(217,207,13)" fg:x="27" fg:w="1"/><text x="1.0353%" y="1055.50"></text></g><g><title>deno`deno_graph::graph::parse_module_from_module_info (1 samples, 0.03%)</title><rect x="0.7853%" y="1029" width="0.0291%" height="15" fill="rgb(231,73,38)" fg:x="27" fg:w="1"/><text x="1.0353%" y="1039.50"></text></g><g><title>deno`regex::re_unicode::Regex::new (1 samples, 0.03%)</title><rect x="0.7853%" y="1013" width="0.0291%" height="15" fill="rgb(225,20,46)" fg:x="27" fg:w="1"/><text x="1.0353%" y="1023.50"></text></g><g><title>deno`regex::re_builder::unicode::RegexBuilder::build (1 samples, 0.03%)</title><rect x="0.7853%" y="997" width="0.0291%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="1"/><text x="1.0353%" y="1007.50"></text></g><g><title>deno`regex::exec::ExecBuilder::build (1 samples, 0.03%)</title><rect x="0.7853%" y="981" width="0.0291%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="1"/><text x="1.0353%" y="991.50"></text></g><g><title>deno`regex::literal::imp::Matcher::new (1 samples, 0.03%)</title><rect x="0.7853%" y="965" width="0.0291%" height="15" fill="rgb(226,26,5)" fg:x="27" fg:w="1"/><text x="1.0353%" y="975.50"></text></g><g><title>deno`aho_corasick::prefilter::Builder::build (1 samples, 0.03%)</title><rect x="0.7853%" y="949" width="0.0291%" height="15" fill="rgb(249,33,26)" fg:x="27" fg:w="1"/><text x="1.0353%" y="959.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObjectFromMap(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (1 samples, 0.03%)</title><rect x="0.8144%" y="741" width="0.0291%" height="15" fill="rgb(235,183,28)" fg:x="28" fg:w="1"/><text x="1.0644%" y="751.50"></text></g><g><title>deno`v8::internal::Factory::AllocateRawWithAllocationSite(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (1 samples, 0.03%)</title><rect x="0.8144%" y="725" width="0.0291%" height="15" fill="rgb(221,5,38)" fg:x="28" fg:w="1"/><text x="1.0644%" y="735.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.03%)</title><rect x="0.8144%" y="709" width="0.0291%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="1"/><text x="1.0644%" y="719.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.03%)</title><rect x="0.8144%" y="693" width="0.0291%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="1"/><text x="1.0644%" y="703.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.03%)</title><rect x="0.8144%" y="677" width="0.0291%" height="15" fill="rgb(249,31,29)" fg:x="28" fg:w="1"/><text x="1.0644%" y="687.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.03%)</title><rect x="0.8144%" y="661" width="0.0291%" height="15" fill="rgb(225,111,53)" fg:x="28" fg:w="1"/><text x="1.0644%" y="671.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.03%)</title><rect x="0.8144%" y="645" width="0.0291%" height="15" fill="rgb(238,160,17)" fg:x="28" fg:w="1"/><text x="1.0644%" y="655.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.03%)</title><rect x="0.8144%" y="629" width="0.0291%" height="15" fill="rgb(214,148,48)" fg:x="28" fg:w="1"/><text x="1.0644%" y="639.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.03%)</title><rect x="0.8144%" y="613" width="0.0291%" height="15" fill="rgb(232,36,49)" fg:x="28" fg:w="1"/><text x="1.0644%" y="623.50"></text></g><g><title>deno`v8::internal::RootScavengeVisitor::VisitRootPointer (1 samples, 0.03%)</title><rect x="0.8144%" y="597" width="0.0291%" height="15" fill="rgb(209,103,24)" fg:x="28" fg:w="1"/><text x="1.0644%" y="607.50"></text></g><g><title>0x11000b378 (2 samples, 0.06%)</title><rect x="0.8144%" y="869" width="0.0582%" height="15" fill="rgb(229,88,8)" fg:x="28" fg:w="2"/><text x="1.0644%" y="879.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (2 samples, 0.06%)</title><rect x="0.8144%" y="853" width="0.0582%" height="15" fill="rgb(213,181,19)" fg:x="28" fg:w="2"/><text x="1.0644%" y="863.50"></text></g><g><title>deno`Builtins_TypedArrayConstructor (2 samples, 0.06%)</title><rect x="0.8144%" y="837" width="0.0582%" height="15" fill="rgb(254,191,54)" fg:x="28" fg:w="2"/><text x="1.0644%" y="847.50"></text></g><g><title>deno`Builtins_CreateTypedArray (2 samples, 0.06%)</title><rect x="0.8144%" y="821" width="0.0582%" height="15" fill="rgb(241,83,37)" fg:x="28" fg:w="2"/><text x="1.0644%" y="831.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (2 samples, 0.06%)</title><rect x="0.8144%" y="805" width="0.0582%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="2"/><text x="1.0644%" y="815.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.06%)</title><rect x="0.8144%" y="789" width="0.0582%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="2"/><text x="1.0644%" y="799.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (2 samples, 0.06%)</title><rect x="0.8144%" y="773" width="0.0582%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="2"/><text x="1.0644%" y="783.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (2 samples, 0.06%)</title><rect x="0.8144%" y="757" width="0.0582%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="2"/><text x="1.0644%" y="767.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Attach(std::__1::shared_ptr (1 samples, 0.03%)</title><rect x="0.8435%" y="741" width="0.0291%" height="15" fill="rgb(232,182,51)" fg:x="29" fg:w="1"/><text x="1.0935%" y="751.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (1 samples, 0.03%)</title><rect x="0.8435%" y="725" width="0.0291%" height="15" fill="rgb(231,60,39)" fg:x="29" fg:w="1"/><text x="1.0935%" y="735.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (1 samples, 0.03%)</title><rect x="0.8435%" y="709" width="0.0291%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="1"/><text x="1.0935%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="0.8435%" y="693" width="0.0291%" height="15" fill="rgb(235,93,37)" fg:x="29" fg:w="1"/><text x="1.0935%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="0.8435%" y="677" width="0.0291%" height="15" fill="rgb(213,116,39)" fg:x="29" fg:w="1"/><text x="1.0935%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="0.8435%" y="661" width="0.0291%" height="15" fill="rgb(222,207,29)" fg:x="29" fg:w="1"/><text x="1.0935%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="0.8435%" y="645" width="0.0291%" height="15" fill="rgb(206,96,30)" fg:x="29" fg:w="1"/><text x="1.0935%" y="655.50"></text></g><g><title>0x110009cb0 (1 samples, 0.03%)</title><rect x="0.8726%" y="853" width="0.0291%" height="15" fill="rgb(218,138,4)" fg:x="30" fg:w="1"/><text x="1.1226%" y="863.50"></text></g><g><title>0x110009d48 (1 samples, 0.03%)</title><rect x="0.9017%" y="853" width="0.0291%" height="15" fill="rgb(250,191,14)" fg:x="31" fg:w="1"/><text x="1.1517%" y="863.50"></text></g><g><title>deno`Builtins_AsyncFunctionEnter (1 samples, 0.03%)</title><rect x="0.9017%" y="837" width="0.0291%" height="15" fill="rgb(239,60,40)" fg:x="31" fg:w="1"/><text x="1.1517%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.03%)</title><rect x="0.9017%" y="821" width="0.0291%" height="15" fill="rgb(206,27,48)" fg:x="31" fg:w="1"/><text x="1.1517%" y="831.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.03%)</title><rect x="0.9017%" y="805" width="0.0291%" height="15" fill="rgb(225,35,8)" fg:x="31" fg:w="1"/><text x="1.1517%" y="815.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.03%)</title><rect x="0.9017%" y="789" width="0.0291%" height="15" fill="rgb(250,213,24)" fg:x="31" fg:w="1"/><text x="1.1517%" y="799.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.03%)</title><rect x="0.9017%" y="773" width="0.0291%" height="15" fill="rgb(247,123,22)" fg:x="31" fg:w="1"/><text x="1.1517%" y="783.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.03%)</title><rect x="0.9017%" y="757" width="0.0291%" height="15" fill="rgb(231,138,38)" fg:x="31" fg:w="1"/><text x="1.1517%" y="767.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.03%)</title><rect x="0.9017%" y="741" width="0.0291%" height="15" fill="rgb(231,145,46)" fg:x="31" fg:w="1"/><text x="1.1517%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.03%)</title><rect x="0.9017%" y="725" width="0.0291%" height="15" fill="rgb(251,118,11)" fg:x="31" fg:w="1"/><text x="1.1517%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.03%)</title><rect x="0.9017%" y="709" width="0.0291%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="1"/><text x="1.1517%" y="719.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.03%)</title><rect x="0.9017%" y="693" width="0.0291%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="1"/><text x="1.1517%" y="703.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.03%)</title><rect x="0.9017%" y="677" width="0.0291%" height="15" fill="rgb(209,12,38)" fg:x="31" fg:w="1"/><text x="1.1517%" y="687.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (1 samples, 0.03%)</title><rect x="0.9017%" y="661" width="0.0291%" height="15" fill="rgb(227,1,9)" fg:x="31" fg:w="1"/><text x="1.1517%" y="671.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (1 samples, 0.03%)</title><rect x="0.9017%" y="645" width="0.0291%" height="15" fill="rgb(248,47,43)" fg:x="31" fg:w="1"/><text x="1.1517%" y="655.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (1 samples, 0.03%)</title><rect x="0.9017%" y="629" width="0.0291%" height="15" fill="rgb(221,10,30)" fg:x="31" fg:w="1"/><text x="1.1517%" y="639.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="0.9017%" y="613" width="0.0291%" height="15" fill="rgb(210,229,1)" fg:x="31" fg:w="1"/><text x="1.1517%" y="623.50"></text></g><g><title>0x11000ba24 (1 samples, 0.03%)</title><rect x="0.9308%" y="837" width="0.0291%" height="15" fill="rgb(222,148,37)" fg:x="32" fg:w="1"/><text x="1.1808%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.03%)</title><rect x="0.9308%" y="821" width="0.0291%" height="15" fill="rgb(234,67,33)" fg:x="32" fg:w="1"/><text x="1.1808%" y="831.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.03%)</title><rect x="0.9308%" y="805" width="0.0291%" height="15" fill="rgb(247,98,35)" fg:x="32" fg:w="1"/><text x="1.1808%" y="815.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="0.9308%" y="789" width="0.0291%" height="15" fill="rgb(247,138,52)" fg:x="32" fg:w="1"/><text x="1.1808%" y="799.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.03%)</title><rect x="0.9308%" y="773" width="0.0291%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="1"/><text x="1.1808%" y="783.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (1 samples, 0.03%)</title><rect x="0.9308%" y="757" width="0.0291%" height="15" fill="rgb(246,177,23)" fg:x="32" fg:w="1"/><text x="1.1808%" y="767.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8_uninit (1 samples, 0.03%)</title><rect x="0.9308%" y="741" width="0.0291%" height="15" fill="rgb(230,62,27)" fg:x="32" fg:w="1"/><text x="1.1808%" y="751.50"></text></g><g><title>deno`v8::String::WriteUtf8 (1 samples, 0.03%)</title><rect x="0.9308%" y="725" width="0.0291%" height="15" fill="rgb(216,154,8)" fg:x="32" fg:w="1"/><text x="1.1808%" y="735.50"></text></g><g><title>0x1100109c8 (1 samples, 0.03%)</title><rect x="0.9599%" y="837" width="0.0291%" height="15" fill="rgb(244,35,45)" fg:x="33" fg:w="1"/><text x="1.2099%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.03%)</title><rect x="0.9599%" y="821" width="0.0291%" height="15" fill="rgb(251,115,12)" fg:x="33" fg:w="1"/><text x="1.2099%" y="831.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.03%)</title><rect x="0.9599%" y="805" width="0.0291%" height="15" fill="rgb(240,54,50)" fg:x="33" fg:w="1"/><text x="1.2099%" y="815.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.03%)</title><rect x="0.9599%" y="789" width="0.0291%" height="15" fill="rgb(233,84,52)" fg:x="33" fg:w="1"/><text x="1.2099%" y="799.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.03%)</title><rect x="0.9599%" y="773" width="0.0291%" height="15" fill="rgb(207,117,47)" fg:x="33" fg:w="1"/><text x="1.2099%" y="783.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.03%)</title><rect x="0.9599%" y="757" width="0.0291%" height="15" fill="rgb(249,43,39)" fg:x="33" fg:w="1"/><text x="1.2099%" y="767.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.03%)</title><rect x="0.9599%" y="741" width="0.0291%" height="15" fill="rgb(209,38,44)" fg:x="33" fg:w="1"/><text x="1.2099%" y="751.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.03%)</title><rect x="0.9599%" y="725" width="0.0291%" height="15" fill="rgb(236,212,23)" fg:x="33" fg:w="1"/><text x="1.2099%" y="735.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.03%)</title><rect x="0.9599%" y="709" width="0.0291%" height="15" fill="rgb(242,79,21)" fg:x="33" fg:w="1"/><text x="1.2099%" y="719.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.03%)</title><rect x="0.9599%" y="693" width="0.0291%" height="15" fill="rgb(211,96,35)" fg:x="33" fg:w="1"/><text x="1.2099%" y="703.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.03%)</title><rect x="0.9599%" y="677" width="0.0291%" height="15" fill="rgb(253,215,40)" fg:x="33" fg:w="1"/><text x="1.2099%" y="687.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (1 samples, 0.03%)</title><rect x="0.9599%" y="661" width="0.0291%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="1"/><text x="1.2099%" y="671.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (1 samples, 0.03%)</title><rect x="0.9599%" y="645" width="0.0291%" height="15" fill="rgb(208,190,38)" fg:x="33" fg:w="1"/><text x="1.2099%" y="655.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (1 samples, 0.03%)</title><rect x="0.9599%" y="629" width="0.0291%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="1"/><text x="1.2099%" y="639.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="0.9599%" y="613" width="0.0291%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="1"/><text x="1.2099%" y="623.50"></text></g><g><title>0x11000a350 (3 samples, 0.09%)</title><rect x="0.9308%" y="853" width="0.0873%" height="15" fill="rgb(244,218,35)" fg:x="32" fg:w="3"/><text x="1.1808%" y="863.50"></text></g><g><title>deno`Builtins_BaselineOutOfLinePrologue (1 samples, 0.03%)</title><rect x="0.9889%" y="837" width="0.0291%" height="15" fill="rgb(240,68,47)" fg:x="34" fg:w="1"/><text x="1.2389%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.03%)</title><rect x="0.9889%" y="821" width="0.0291%" height="15" fill="rgb(210,16,53)" fg:x="34" fg:w="1"/><text x="1.2389%" y="831.50"></text></g><g><title>deno`v8::internal::Runtime_CompileOptimized (1 samples, 0.03%)</title><rect x="0.9889%" y="805" width="0.0291%" height="15" fill="rgb(235,124,12)" fg:x="34" fg:w="1"/><text x="1.2389%" y="815.50"></text></g><g><title>deno`v8::internal::Compiler::CompileOptimized(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="0.9889%" y="789" width="0.0291%" height="15" fill="rgb(224,169,11)" fg:x="34" fg:w="1"/><text x="1.2389%" y="799.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::GetOrCompileOptimized(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::ConcurrencyMode, v8::internal::CodeKind, v8::internal::BytecodeOffset, v8::internal:: (1 samples, 0.03%)</title><rect x="0.9889%" y="773" width="0.0291%" height="15" fill="rgb(250,166,2)" fg:x="34" fg:w="1"/><text x="1.2389%" y="783.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::PrepareJobWithHandleScope (1 samples, 0.03%)</title><rect x="0.9889%" y="757" width="0.0291%" height="15" fill="rgb(242,216,29)" fg:x="34" fg:w="1"/><text x="1.2389%" y="767.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::PrepareJobImpl (1 samples, 0.03%)</title><rect x="0.9889%" y="741" width="0.0291%" height="15" fill="rgb(230,116,27)" fg:x="34" fg:w="1"/><text x="1.2389%" y="751.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::InitializeHeapBroker (1 samples, 0.03%)</title><rect x="0.9889%" y="725" width="0.0291%" height="15" fill="rgb(228,99,48)" fg:x="34" fg:w="1"/><text x="1.2389%" y="735.50"></text></g><g><title>deno`v8::internal::compiler::JSHeapBroker::InitializeAndStartSerializing (1 samples, 0.03%)</title><rect x="0.9889%" y="709" width="0.0291%" height="15" fill="rgb(253,11,6)" fg:x="34" fg:w="1"/><text x="1.2389%" y="719.50"></text></g><g><title>deno`v8::internal::compiler::RefsMap::RefsMap (1 samples, 0.03%)</title><rect x="0.9889%" y="693" width="0.0291%" height="15" fill="rgb(247,143,39)" fg:x="34" fg:w="1"/><text x="1.2389%" y="703.50"></text></g><g><title>0x11000a370 (1 samples, 0.03%)</title><rect x="1.0180%" y="853" width="0.0291%" height="15" fill="rgb(236,97,10)" fg:x="35" fg:w="1"/><text x="1.2680%" y="863.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (1 samples, 0.03%)</title><rect x="1.0180%" y="837" width="0.0291%" height="15" fill="rgb(233,208,19)" fg:x="35" fg:w="1"/><text x="1.2680%" y="847.50"></text></g><g><title>0x11000b3a0 (7 samples, 0.20%)</title><rect x="0.8726%" y="869" width="0.2036%" height="15" fill="rgb(216,164,2)" fg:x="30" fg:w="7"/><text x="1.1226%" y="879.50"></text></g><g><title>deno`Builtins_LoadIC (1 samples, 0.03%)</title><rect x="1.0471%" y="853" width="0.0291%" height="15" fill="rgb(220,129,5)" fg:x="36" fg:w="1"/><text x="1.2971%" y="863.50"></text></g><g><title>0x11000c240 (10 samples, 0.29%)</title><rect x="0.8144%" y="885" width="0.2909%" height="15" fill="rgb(242,17,10)" fg:x="28" fg:w="10"/><text x="1.0644%" y="895.50"></text></g><g><title>0x110011304 (1 samples, 0.03%)</title><rect x="1.0762%" y="869" width="0.0291%" height="15" fill="rgb(242,107,0)" fg:x="37" fg:w="1"/><text x="1.3262%" y="879.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.03%)</title><rect x="1.1053%" y="773" width="0.0291%" height="15" fill="rgb(251,28,31)" fg:x="38" fg:w="1"/><text x="1.3553%" y="783.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="1.1053%" y="757" width="0.0291%" height="15" fill="rgb(233,223,10)" fg:x="38" fg:w="1"/><text x="1.3553%" y="767.50"></text></g><g><title>deno`deno_runtime::ops::fs::open_helper (1 samples, 0.03%)</title><rect x="1.1053%" y="741" width="0.0291%" height="15" fill="rgb(215,21,27)" fg:x="38" fg:w="1"/><text x="1.3553%" y="751.50"></text></g><g><title>deno`std::path::Path::to_path_buf (1 samples, 0.03%)</title><rect x="1.1053%" y="725" width="0.0291%" height="15" fill="rgb(232,23,21)" fg:x="38" fg:w="1"/><text x="1.3553%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1.1053%" y="709" width="0.0291%" height="15" fill="rgb(244,5,23)" fg:x="38" fg:w="1"/><text x="1.3553%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="1.1053%" y="693" width="0.0291%" height="15" fill="rgb(226,81,46)" fg:x="38" fg:w="1"/><text x="1.3553%" y="703.50"></text></g><g><title>0x11000ba24 (2 samples, 0.06%)</title><rect x="1.1053%" y="837" width="0.0582%" height="15" fill="rgb(247,70,30)" fg:x="38" fg:w="2"/><text x="1.3553%" y="847.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.06%)</title><rect x="1.1053%" y="821" width="0.0582%" height="15" fill="rgb(212,68,19)" fg:x="38" fg:w="2"/><text x="1.3553%" y="831.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (2 samples, 0.06%)</title><rect x="1.1053%" y="805" width="0.0582%" height="15" fill="rgb(240,187,13)" fg:x="38" fg:w="2"/><text x="1.3553%" y="815.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2 samples, 0.06%)</title><rect x="1.1053%" y="789" width="0.0582%" height="15" fill="rgb(223,113,26)" fg:x="38" fg:w="2"/><text x="1.3553%" y="799.50"></text></g><g><title>deno`v8__Value__IsString (1 samples, 0.03%)</title><rect x="1.1344%" y="773" width="0.0291%" height="15" fill="rgb(206,192,2)" fg:x="39" fg:w="1"/><text x="1.3844%" y="783.50"></text></g><g><title>0x11000bb70 (1 samples, 0.03%)</title><rect x="1.1635%" y="837" width="0.0291%" height="15" fill="rgb(241,108,4)" fg:x="40" fg:w="1"/><text x="1.4135%" y="847.50"></text></g><g><title>0x11000b6ec (1 samples, 0.03%)</title><rect x="1.1635%" y="821" width="0.0291%" height="15" fill="rgb(247,173,49)" fg:x="40" fg:w="1"/><text x="1.4135%" y="831.50"></text></g><g><title>deno`Builtins_BaselineOutOfLinePrologue (1 samples, 0.03%)</title><rect x="1.1635%" y="805" width="0.0291%" height="15" fill="rgb(224,114,35)" fg:x="40" fg:w="1"/><text x="1.4135%" y="815.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.03%)</title><rect x="1.1635%" y="789" width="0.0291%" height="15" fill="rgb(245,159,27)" fg:x="40" fg:w="1"/><text x="1.4135%" y="799.50"></text></g><g><title>deno`v8::internal::Runtime_CompileOptimized (1 samples, 0.03%)</title><rect x="1.1635%" y="773" width="0.0291%" height="15" fill="rgb(245,172,44)" fg:x="40" fg:w="1"/><text x="1.4135%" y="783.50"></text></g><g><title>deno`v8::internal::Compiler::CompileOptimized(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="1.1635%" y="757" width="0.0291%" height="15" fill="rgb(236,23,11)" fg:x="40" fg:w="1"/><text x="1.4135%" y="767.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::GetOrCompileOptimized(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::ConcurrencyMode, v8::internal::CodeKind, v8::internal::BytecodeOffset, v8::internal:: (1 samples, 0.03%)</title><rect x="1.1635%" y="741" width="0.0291%" height="15" fill="rgb(205,117,38)" fg:x="40" fg:w="1"/><text x="1.4135%" y="751.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::PipelineCompilationJob(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SharedFunctionInfo&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="1.1635%" y="725" width="0.0291%" height="15" fill="rgb(237,72,25)" fg:x="40" fg:w="1"/><text x="1.4135%" y="735.50"></text></g><g><title>deno`v8::internal::compiler::PipelineData::PipelineData (1 samples, 0.03%)</title><rect x="1.1635%" y="709" width="0.0291%" height="15" fill="rgb(244,70,9)" fg:x="40" fg:w="1"/><text x="1.4135%" y="719.50"></text></g><g><title>deno`v8::internal::compiler::JSHeapBroker::JSHeapBroker (1 samples, 0.03%)</title><rect x="1.1635%" y="693" width="0.0291%" height="15" fill="rgb(217,125,39)" fg:x="40" fg:w="1"/><text x="1.4135%" y="703.50"></text></g><g><title>deno`v8::internal::RootIndexMap::RootIndexMap (1 samples, 0.03%)</title><rect x="1.1635%" y="677" width="0.0291%" height="15" fill="rgb(235,36,10)" fg:x="40" fg:w="1"/><text x="1.4135%" y="687.50"></text></g><g><title>deno`v8::base::TemplateHashMapEntry&lt;unsigned long, unsigned int&gt;* v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert&lt;unsigned long, v8::base::TemplateHashMapEntry&lt;unsigned long, unsigned int&gt;* v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert&lt;v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert(unsigned long const&amp;, unsigned int)::&apos;lambda&apos;()&gt;(unsigned long const&amp;, unsigned int, v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert(unsigned long const&amp;, unsigned int)::&apos;lambda&apos;() const&amp;)::&apos;lambda&apos;(), v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::LookupOrInsert (1 samples, 0.03%)</title><rect x="1.1635%" y="661" width="0.0291%" height="15" fill="rgb(251,123,47)" fg:x="40" fg:w="1"/><text x="1.4135%" y="671.50"></text></g><g><title>deno`v8::base::TemplateHashMapImpl&lt;unsigned long, unsigned int, v8::base::KeyEqualityMatcher&lt;long&gt;, v8::base::DefaultAllocationPolicy&gt;::Resize (1 samples, 0.03%)</title><rect x="1.1635%" y="645" width="0.0291%" height="15" fill="rgb(221,13,13)" fg:x="40" fg:w="1"/><text x="1.4135%" y="655.50"></text></g><g><title>0x11000b3a0 (4 samples, 0.12%)</title><rect x="1.1053%" y="869" width="0.1163%" height="15" fill="rgb(238,131,9)" fg:x="38" fg:w="4"/><text x="1.3553%" y="879.50"></text></g><g><title>0x11000a350 (4 samples, 0.12%)</title><rect x="1.1053%" y="853" width="0.1163%" height="15" fill="rgb(211,50,8)" fg:x="38" fg:w="4"/><text x="1.3553%" y="863.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (1 samples, 0.03%)</title><rect x="1.1926%" y="837" width="0.0291%" height="15" fill="rgb(245,182,24)" fg:x="41" fg:w="1"/><text x="1.4426%" y="847.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.47%)</title><rect x="0.7853%" y="1125" width="0.4654%" height="15" fill="rgb(242,14,37)" fg:x="27" fg:w="16"/><text x="1.0353%" y="1135.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.47%)</title><rect x="0.7853%" y="1109" width="0.4654%" height="15" fill="rgb(246,228,12)" fg:x="27" fg:w="16"/><text x="1.0353%" y="1119.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::mod_evaluate (15 samples, 0.44%)</title><rect x="0.8144%" y="1093" width="0.4363%" height="15" fill="rgb(213,55,15)" fg:x="28" fg:w="15"/><text x="1.0644%" y="1103.50"></text></g><g><title>deno`v8::Module::Evaluate(v8::Local (15 samples, 0.44%)</title><rect x="0.8144%" y="1077" width="0.4363%" height="15" fill="rgb(209,9,3)" fg:x="28" fg:w="15"/><text x="1.0644%" y="1087.50"></text></g><g><title>deno`v8::internal::Module::Evaluate(v8::internal::Isolate*, v8::internal::Handle (15 samples, 0.44%)</title><rect x="0.8144%" y="1061" width="0.4363%" height="15" fill="rgb(230,59,30)" fg:x="28" fg:w="15"/><text x="1.0644%" y="1071.50"></text></g><g><title>deno`v8::internal::SourceTextModule::Evaluate(v8::internal::Isolate*, v8::internal::Handle (15 samples, 0.44%)</title><rect x="0.8144%" y="1045" width="0.4363%" height="15" fill="rgb(209,121,21)" fg:x="28" fg:w="15"/><text x="1.0644%" y="1055.50"></text></g><g><title>deno`v8::internal::SourceTextModule::InnerModuleEvaluation(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::SourceTextModule&gt;, v8::internal::ZoneForwardList&lt;v8::internal::Handle (15 samples, 0.44%)</title><rect x="0.8144%" y="1029" width="0.4363%" height="15" fill="rgb(220,109,13)" fg:x="28" fg:w="15"/><text x="1.0644%" y="1039.50"></text></g><g><title>deno`v8::internal::SourceTextModule::ExecuteModule(v8::internal::Isolate*, v8::internal::Handle (15 samples, 0.44%)</title><rect x="0.8144%" y="1013" width="0.4363%" height="15" fill="rgb(232,18,1)" fg:x="28" fg:w="15"/><text x="1.0644%" y="1023.50"></text></g><g><title>deno`v8::internal::Execution::TryCall(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle&lt;v8::internal::Object&gt;*, v8::internal::Execution::MessageHandling, v8::internal::MaybeHandle (15 samples, 0.44%)</title><rect x="0.8144%" y="997" width="0.4363%" height="15" fill="rgb(215,41,42)" fg:x="28" fg:w="15"/><text x="1.0644%" y="1007.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (15 samples, 0.44%)</title><rect x="0.8144%" y="981" width="0.4363%" height="15" fill="rgb(224,123,36)" fg:x="28" fg:w="15"/><text x="1.0644%" y="991.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (15 samples, 0.44%)</title><rect x="0.8144%" y="965" width="0.4363%" height="15" fill="rgb(240,125,3)" fg:x="28" fg:w="15"/><text x="1.0644%" y="975.50"></text></g><g><title>deno`Builtins_JSEntry (15 samples, 0.44%)</title><rect x="0.8144%" y="949" width="0.4363%" height="15" fill="rgb(205,98,50)" fg:x="28" fg:w="15"/><text x="1.0644%" y="959.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (15 samples, 0.44%)</title><rect x="0.8144%" y="933" width="0.4363%" height="15" fill="rgb(205,185,37)" fg:x="28" fg:w="15"/><text x="1.0644%" y="943.50"></text></g><g><title>deno`Builtins_GeneratorPrototypeNext (15 samples, 0.44%)</title><rect x="0.8144%" y="917" width="0.4363%" height="15" fill="rgb(238,207,15)" fg:x="28" fg:w="15"/><text x="1.0644%" y="927.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (15 samples, 0.44%)</title><rect x="0.8144%" y="901" width="0.4363%" height="15" fill="rgb(213,199,42)" fg:x="28" fg:w="15"/><text x="1.0644%" y="911.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (5 samples, 0.15%)</title><rect x="1.1053%" y="885" width="0.1454%" height="15" fill="rgb(235,201,11)" fg:x="38" fg:w="5"/><text x="1.3553%" y="895.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="1.2216%" y="869" width="0.0291%" height="15" fill="rgb(207,46,11)" fg:x="42" fg:w="1"/><text x="1.4716%" y="879.50"></text></g><g><title>deno`Builtins_ConstructHandler (1 samples, 0.03%)</title><rect x="1.2216%" y="853" width="0.0291%" height="15" fill="rgb(241,35,35)" fg:x="42" fg:w="1"/><text x="1.4716%" y="863.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.03%)</title><rect x="1.2216%" y="837" width="0.0291%" height="15" fill="rgb(243,32,47)" fg:x="42" fg:w="1"/><text x="1.4716%" y="847.50"></text></g><g><title>deno`Builtins_TypedArrayConstructor (1 samples, 0.03%)</title><rect x="1.2216%" y="821" width="0.0291%" height="15" fill="rgb(247,202,23)" fg:x="42" fg:w="1"/><text x="1.4716%" y="831.50"></text></g><g><title>deno`Builtins_CreateTypedArray (1 samples, 0.03%)</title><rect x="1.2216%" y="805" width="0.0291%" height="15" fill="rgb(219,102,11)" fg:x="42" fg:w="1"/><text x="1.4716%" y="815.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.03%)</title><rect x="1.2216%" y="789" width="0.0291%" height="15" fill="rgb(243,110,44)" fg:x="42" fg:w="1"/><text x="1.4716%" y="799.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.03%)</title><rect x="1.2216%" y="773" width="0.0291%" height="15" fill="rgb(222,74,54)" fg:x="42" fg:w="1"/><text x="1.4716%" y="783.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (1 samples, 0.03%)</title><rect x="1.2216%" y="757" width="0.0291%" height="15" fill="rgb(216,99,12)" fg:x="42" fg:w="1"/><text x="1.4716%" y="767.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="1.2216%" y="741" width="0.0291%" height="15" fill="rgb(226,22,26)" fg:x="42" fg:w="1"/><text x="1.4716%" y="751.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1.2216%" y="725" width="0.0291%" height="15" fill="rgb(217,163,10)" fg:x="42" fg:w="1"/><text x="1.4716%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1.2216%" y="709" width="0.0291%" height="15" fill="rgb(213,25,53)" fg:x="42" fg:w="1"/><text x="1.4716%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="1.2216%" y="693" width="0.0291%" height="15" fill="rgb(252,105,26)" fg:x="42" fg:w="1"/><text x="1.4716%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="1.2216%" y="677" width="0.0291%" height="15" fill="rgb(220,39,43)" fg:x="42" fg:w="1"/><text x="1.4716%" y="687.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3 (1 samples, 0.03%)</title><rect x="1.2507%" y="1125" width="0.0291%" height="15" fill="rgb(229,68,48)" fg:x="43" fg:w="1"/><text x="1.5007%" y="1135.50"></text></g><g><title>deno`__rust_alloc (1 samples, 0.03%)</title><rect x="1.2798%" y="1125" width="0.0291%" height="15" fill="rgb(252,8,32)" fg:x="44" fg:w="1"/><text x="1.5298%" y="1135.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (1 samples, 0.03%)</title><rect x="1.3089%" y="1125" width="0.0291%" height="15" fill="rgb(223,20,43)" fg:x="45" fg:w="1"/><text x="1.5589%" y="1135.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="1.3380%" y="1125" width="0.0291%" height="15" fill="rgb(229,81,49)" fg:x="46" fg:w="1"/><text x="1.5880%" y="1135.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[v8::handle::Global&lt;v8::data::Function&gt;]&gt; (2 samples, 0.06%)</title><rect x="1.3671%" y="1125" width="0.0582%" height="15" fill="rgb(236,28,36)" fg:x="47" fg:w="2"/><text x="1.6171%" y="1135.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_runtime::ops::fs::op_write_file_async::v8_func::{{closure}}&gt;&gt; (1 samples, 0.03%)</title><rect x="1.4252%" y="1125" width="0.0291%" height="15" fill="rgb(249,185,26)" fg:x="49" fg:w="1"/><text x="1.6752%" y="1135.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (1 samples, 0.03%)</title><rect x="1.4543%" y="1125" width="0.0291%" height="15" fill="rgb(249,174,33)" fg:x="50" fg:w="1"/><text x="1.7043%" y="1135.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (2 samples, 0.06%)</title><rect x="1.4834%" y="1125" width="0.0582%" height="15" fill="rgb(233,201,37)" fg:x="51" fg:w="2"/><text x="1.7334%" y="1135.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.06%)</title><rect x="2.3269%" y="1109" width="0.0582%" height="15" fill="rgb(221,78,26)" fg:x="80" fg:w="2"/><text x="2.5769%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="2.3269%" y="1093" width="0.0582%" height="15" fill="rgb(250,127,30)" fg:x="80" fg:w="2"/><text x="2.5769%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="2.3269%" y="1077" width="0.0582%" height="15" fill="rgb(230,49,44)" fg:x="80" fg:w="2"/><text x="2.5769%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="2.3269%" y="1061" width="0.0582%" height="15" fill="rgb(229,67,23)" fg:x="80" fg:w="2"/><text x="2.5769%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="2.3560%" y="1045" width="0.0291%" height="15" fill="rgb(249,83,47)" fg:x="81" fg:w="1"/><text x="2.6060%" y="1055.50"></text></g><g><title>deno`futures_task::waker::wake_by_ref_arc_raw (1 samples, 0.03%)</title><rect x="2.4724%" y="1077" width="0.0291%" height="15" fill="rgb(215,43,3)" fg:x="85" fg:w="1"/><text x="2.7224%" y="1087.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (1 samples, 0.03%)</title><rect x="2.4724%" y="1061" width="0.0291%" height="15" fill="rgb(238,154,13)" fg:x="85" fg:w="1"/><text x="2.7224%" y="1071.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (1 samples, 0.03%)</title><rect x="2.4724%" y="1045" width="0.0291%" height="15" fill="rgb(219,56,2)" fg:x="85" fg:w="1"/><text x="2.7224%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.03%)</title><rect x="2.4724%" y="1029" width="0.0291%" height="15" fill="rgb(233,0,4)" fg:x="85" fg:w="1"/><text x="2.7224%" y="1039.50"></text></g><g><title>deno`tokio::runtime::task::harness::can_read_output (4 samples, 0.12%)</title><rect x="2.5596%" y="1061" width="0.1163%" height="15" fill="rgb(235,30,7)" fg:x="88" fg:w="4"/><text x="2.8096%" y="1071.50"></text></g><g><title>deno`&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.32%)</title><rect x="2.4433%" y="1093" width="0.3200%" height="15" fill="rgb(250,79,13)" fg:x="84" fg:w="11"/><text x="2.6933%" y="1103.50"></text></g><g><title>deno`tokio::runtime::task::raw::try_read_output (9 samples, 0.26%)</title><rect x="2.5015%" y="1077" width="0.2618%" height="15" fill="rgb(211,146,34)" fg:x="86" fg:w="9"/><text x="2.7515%" y="1087.50"></text></g><g><title>deno`tokio::runtime::task::harness::set_join_waker (3 samples, 0.09%)</title><rect x="2.6760%" y="1061" width="0.0873%" height="15" fill="rgb(228,22,38)" fg:x="92" fg:w="3"/><text x="2.9260%" y="1071.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="2.7632%" y="1093" width="0.0291%" height="15" fill="rgb(235,168,5)" fg:x="95" fg:w="1"/><text x="3.0132%" y="1103.50"></text></g><g><title>deno`tokio::runtime::task::raw::drop_join_handle_slow (27 samples, 0.79%)</title><rect x="2.7923%" y="1093" width="0.7853%" height="15" fill="rgb(221,155,16)" fg:x="96" fg:w="27"/><text x="3.0423%" y="1103.50"></text></g><g><title>deno`tokio::runtime::task::state::State::unset_join_interested (27 samples, 0.79%)</title><rect x="2.7923%" y="1077" width="0.7853%" height="15" fill="rgb(215,215,53)" fg:x="96" fg:w="27"/><text x="3.0423%" y="1087.50"></text></g><g><title>deno`tokio::runtime::task::raw::try_read_output (1 samples, 0.03%)</title><rect x="3.5777%" y="1093" width="0.0291%" height="15" fill="rgb(223,4,10)" fg:x="123" fg:w="1"/><text x="3.8277%" y="1103.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="3.6067%" y="1093" width="0.0291%" height="15" fill="rgb(234,103,6)" fg:x="124" fg:w="1"/><text x="3.8567%" y="1103.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (46 samples, 1.34%)</title><rect x="2.3851%" y="1109" width="1.3380%" height="15" fill="rgb(227,97,0)" fg:x="82" fg:w="46"/><text x="2.6351%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.09%)</title><rect x="3.6358%" y="1093" width="0.0873%" height="15" fill="rgb(234,150,53)" fg:x="125" fg:w="3"/><text x="3.8858%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="3.6940%" y="1077" width="0.0291%" height="15" fill="rgb(228,201,54)" fg:x="127" fg:w="1"/><text x="3.9440%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="3.6940%" y="1061" width="0.0291%" height="15" fill="rgb(222,22,37)" fg:x="127" fg:w="1"/><text x="3.9440%" y="1071.50"></text></g><g><title>deno`&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.09%)</title><rect x="3.7231%" y="1109" width="0.0873%" height="15" fill="rgb(237,53,32)" fg:x="128" fg:w="3"/><text x="3.9731%" y="1119.50"></text></g><g><title>deno`&lt;v8::V8::GLOBAL_STATE as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="3.8104%" y="1109" width="0.0291%" height="15" fill="rgb(233,25,53)" fg:x="131" fg:w="1"/><text x="4.0604%" y="1119.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (2 samples, 0.06%)</title><rect x="3.8394%" y="1109" width="0.0582%" height="15" fill="rgb(210,40,34)" fg:x="132" fg:w="2"/><text x="4.0894%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.12%)</title><rect x="3.9558%" y="1077" width="0.1163%" height="15" fill="rgb(241,220,44)" fg:x="136" fg:w="4"/><text x="4.2058%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.09%)</title><rect x="3.9849%" y="1061" width="0.0873%" height="15" fill="rgb(235,28,35)" fg:x="137" fg:w="3"/><text x="4.2349%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.09%)</title><rect x="3.9849%" y="1045" width="0.0873%" height="15" fill="rgb(210,56,17)" fg:x="137" fg:w="3"/><text x="4.2349%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.09%)</title><rect x="3.9849%" y="1029" width="0.0873%" height="15" fill="rgb(224,130,29)" fg:x="137" fg:w="3"/><text x="4.2349%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="4.0721%" y="1077" width="0.0291%" height="15" fill="rgb(235,212,8)" fg:x="140" fg:w="1"/><text x="4.3221%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="4.1012%" y="1077" width="0.0291%" height="15" fill="rgb(223,33,50)" fg:x="141" fg:w="1"/><text x="4.3512%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.03%)</title><rect x="4.1303%" y="1045" width="0.0291%" height="15" fill="rgb(219,149,13)" fg:x="142" fg:w="1"/><text x="4.3803%" y="1055.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.29%)</title><rect x="3.8976%" y="1109" width="0.2909%" height="15" fill="rgb(250,156,29)" fg:x="134" fg:w="10"/><text x="4.1476%" y="1119.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (9 samples, 0.26%)</title><rect x="3.9267%" y="1093" width="0.2618%" height="15" fill="rgb(216,193,19)" fg:x="135" fg:w="9"/><text x="4.1767%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.06%)</title><rect x="4.1303%" y="1077" width="0.0582%" height="15" fill="rgb(216,135,14)" fg:x="142" fg:w="2"/><text x="4.3803%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.06%)</title><rect x="4.1303%" y="1061" width="0.0582%" height="15" fill="rgb(241,47,5)" fg:x="142" fg:w="2"/><text x="4.3803%" y="1071.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="4.1594%" y="1045" width="0.0291%" height="15" fill="rgb(233,42,35)" fg:x="143" fg:w="1"/><text x="4.4094%" y="1055.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (1 samples, 0.03%)</title><rect x="4.1885%" y="1109" width="0.0291%" height="15" fill="rgb(231,13,6)" fg:x="144" fg:w="1"/><text x="4.4385%" y="1119.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.03%)</title><rect x="4.1885%" y="1093" width="0.0291%" height="15" fill="rgb(207,181,40)" fg:x="144" fg:w="1"/><text x="4.4385%" y="1103.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.06%)</title><rect x="4.2176%" y="1109" width="0.0582%" height="15" fill="rgb(254,173,49)" fg:x="145" fg:w="2"/><text x="4.4676%" y="1119.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="4.2757%" y="1109" width="0.0291%" height="15" fill="rgb(221,1,38)" fg:x="147" fg:w="1"/><text x="4.5257%" y="1119.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (6 samples, 0.17%)</title><rect x="4.3048%" y="1109" width="0.1745%" height="15" fill="rgb(206,124,46)" fg:x="148" fg:w="6"/><text x="4.5548%" y="1119.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (2 samples, 0.06%)</title><rect x="4.4212%" y="1093" width="0.0582%" height="15" fill="rgb(249,21,11)" fg:x="152" fg:w="2"/><text x="4.6712%" y="1103.50"></text></g><g><title>deno`deno_core::ops::OpResult::to_v8 (2 samples, 0.06%)</title><rect x="4.4793%" y="1109" width="0.0582%" height="15" fill="rgb(222,201,40)" fg:x="154" fg:w="2"/><text x="4.7293%" y="1119.50"></text></g><g><title>deno`&lt;serde_v8::ser::Serializer as serde::ser::Serializer&gt;::serialize_unit (1 samples, 0.03%)</title><rect x="4.5084%" y="1093" width="0.0291%" height="15" fill="rgb(235,61,29)" fg:x="155" fg:w="1"/><text x="4.7584%" y="1103.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::evaluate_pending_module (1 samples, 0.03%)</title><rect x="4.5375%" y="1109" width="0.0291%" height="15" fill="rgb(219,207,3)" fg:x="156" fg:w="1"/><text x="4.7875%" y="1119.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="4.6248%" y="1093" width="0.0291%" height="15" fill="rgb(222,56,46)" fg:x="159" fg:w="1"/><text x="4.8748%" y="1103.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (2 samples, 0.06%)</title><rect x="4.6539%" y="1093" width="0.0582%" height="15" fill="rgb(239,76,54)" fg:x="160" fg:w="2"/><text x="4.9039%" y="1103.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (1 samples, 0.03%)</title><rect x="4.7120%" y="1093" width="0.0291%" height="15" fill="rgb(231,124,27)" fg:x="162" fg:w="1"/><text x="4.9620%" y="1103.50"></text></g><g><title>deno`v8::internal::wasm::GetWasmEngine (2 samples, 0.06%)</title><rect x="4.7411%" y="1093" width="0.0582%" height="15" fill="rgb(249,195,6)" fg:x="163" fg:w="2"/><text x="4.9911%" y="1103.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (9 samples, 0.26%)</title><rect x="4.5666%" y="1109" width="0.2618%" height="15" fill="rgb(237,174,47)" fg:x="157" fg:w="9"/><text x="4.8166%" y="1119.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.03%)</title><rect x="4.7993%" y="1093" width="0.0291%" height="15" fill="rgb(206,201,31)" fg:x="165" fg:w="1"/><text x="5.0493%" y="1103.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (7 samples, 0.20%)</title><rect x="4.8284%" y="1093" width="0.2036%" height="15" fill="rgb(231,57,52)" fg:x="166" fg:w="7"/><text x="5.0784%" y="1103.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (3 samples, 0.09%)</title><rect x="4.9447%" y="1077" width="0.0873%" height="15" fill="rgb(248,177,22)" fg:x="170" fg:w="3"/><text x="5.1947%" y="1087.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (3 samples, 0.09%)</title><rect x="4.9447%" y="1061" width="0.0873%" height="15" fill="rgb(215,211,37)" fg:x="170" fg:w="3"/><text x="5.1947%" y="1071.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (3 samples, 0.09%)</title><rect x="4.9447%" y="1045" width="0.0873%" height="15" fill="rgb(241,128,51)" fg:x="170" fg:w="3"/><text x="5.1947%" y="1055.50"></text></g><g><title>deno`v8::api_internal::GlobalizeReference (1 samples, 0.03%)</title><rect x="5.0902%" y="1077" width="0.0291%" height="15" fill="rgb(227,165,31)" fg:x="175" fg:w="1"/><text x="5.3402%" y="1087.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.06%)</title><rect x="5.1193%" y="1077" width="0.0582%" height="15" fill="rgb(228,167,24)" fg:x="176" fg:w="2"/><text x="5.3693%" y="1087.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (1 samples, 0.03%)</title><rect x="5.1774%" y="1077" width="0.0291%" height="15" fill="rgb(228,143,12)" fg:x="178" fg:w="1"/><text x="5.4274%" y="1087.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (1 samples, 0.03%)</title><rect x="5.2065%" y="1077" width="0.0291%" height="15" fill="rgb(249,149,8)" fg:x="179" fg:w="1"/><text x="5.4565%" y="1087.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (10 samples, 0.29%)</title><rect x="5.0320%" y="1093" width="0.2909%" height="15" fill="rgb(243,35,44)" fg:x="173" fg:w="10"/><text x="5.2820%" y="1103.50"></text></g><g><title>deno`v8__Global__New (3 samples, 0.09%)</title><rect x="5.2356%" y="1077" width="0.0873%" height="15" fill="rgb(246,89,9)" fg:x="180" fg:w="3"/><text x="5.4856%" y="1087.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.09%)</title><rect x="5.2356%" y="1061" width="0.0873%" height="15" fill="rgb(233,213,13)" fg:x="180" fg:w="3"/><text x="5.4856%" y="1071.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (1 samples, 0.03%)</title><rect x="5.3229%" y="1093" width="0.0291%" height="15" fill="rgb(233,141,41)" fg:x="183" fg:w="1"/><text x="5.5729%" y="1103.50"></text></g><g><title>deno`v8::Context::Enter (3 samples, 0.09%)</title><rect x="5.4101%" y="1077" width="0.0873%" height="15" fill="rgb(239,167,4)" fg:x="186" fg:w="3"/><text x="5.6601%" y="1087.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (2 samples, 0.06%)</title><rect x="5.4974%" y="1077" width="0.0582%" height="15" fill="rgb(209,217,16)" fg:x="189" fg:w="2"/><text x="5.7474%" y="1087.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (1 samples, 0.03%)</title><rect x="5.5265%" y="1061" width="0.0291%" height="15" fill="rgb(219,88,35)" fg:x="190" fg:w="1"/><text x="5.7765%" y="1071.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (27 samples, 0.79%)</title><rect x="4.8284%" y="1109" width="0.7853%" height="15" fill="rgb(220,193,23)" fg:x="166" fg:w="27"/><text x="5.0784%" y="1119.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (9 samples, 0.26%)</title><rect x="5.3519%" y="1093" width="0.2618%" height="15" fill="rgb(230,90,52)" fg:x="184" fg:w="9"/><text x="5.6019%" y="1103.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (2 samples, 0.06%)</title><rect x="5.5556%" y="1077" width="0.0582%" height="15" fill="rgb(252,106,19)" fg:x="191" fg:w="2"/><text x="5.8056%" y="1087.50"></text></g><g><title>deno`&lt;T as core::any::Any&gt;::type_id (1 samples, 0.03%)</title><rect x="5.6137%" y="1093" width="0.0291%" height="15" fill="rgb(206,74,20)" fg:x="193" fg:w="1"/><text x="5.8637%" y="1103.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (2 samples, 0.06%)</title><rect x="5.6137%" y="1109" width="0.0582%" height="15" fill="rgb(230,138,44)" fg:x="193" fg:w="2"/><text x="5.8637%" y="1119.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (1 samples, 0.03%)</title><rect x="5.6428%" y="1093" width="0.0291%" height="15" fill="rgb(235,182,43)" fg:x="194" fg:w="1"/><text x="5.8928%" y="1103.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (4 samples, 0.12%)</title><rect x="5.7010%" y="1093" width="0.1163%" height="15" fill="rgb(242,16,51)" fg:x="196" fg:w="4"/><text x="5.9510%" y="1103.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (2 samples, 0.06%)</title><rect x="5.8173%" y="1093" width="0.0582%" height="15" fill="rgb(248,9,4)" fg:x="200" fg:w="2"/><text x="6.0673%" y="1103.50"></text></g><g><title>deno`deno_napi::init::_{{closure}} (8 samples, 0.23%)</title><rect x="5.6719%" y="1109" width="0.2327%" height="15" fill="rgb(210,31,22)" fg:x="195" fg:w="8"/><text x="5.9219%" y="1119.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 0.03%)</title><rect x="5.8755%" y="1093" width="0.0291%" height="15" fill="rgb(239,54,39)" fg:x="202" fg:w="1"/><text x="6.1255%" y="1103.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (4 samples, 0.12%)</title><rect x="5.9046%" y="1109" width="0.1163%" height="15" fill="rgb(230,99,41)" fg:x="203" fg:w="4"/><text x="6.1546%" y="1119.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (4 samples, 0.12%)</title><rect x="6.0209%" y="1109" width="0.1163%" height="15" fill="rgb(253,106,12)" fg:x="207" fg:w="4"/><text x="6.2709%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="6.1664%" y="1093" width="0.0873%" height="15" fill="rgb(213,46,41)" fg:x="212" fg:w="3"/><text x="6.4164%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="6.2245%" y="1077" width="0.0291%" height="15" fill="rgb(215,133,35)" fg:x="214" fg:w="1"/><text x="6.4745%" y="1087.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (12 samples, 0.35%)</title><rect x="6.1373%" y="1109" width="0.3490%" height="15" fill="rgb(213,28,5)" fg:x="211" fg:w="12"/><text x="6.3873%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.23%)</title><rect x="6.2536%" y="1093" width="0.2327%" height="15" fill="rgb(215,77,49)" fg:x="215" fg:w="8"/><text x="6.5036%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (8 samples, 0.23%)</title><rect x="6.2536%" y="1077" width="0.2327%" height="15" fill="rgb(248,100,22)" fg:x="215" fg:w="8"/><text x="6.5036%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.23%)</title><rect x="6.2536%" y="1061" width="0.2327%" height="15" fill="rgb(208,67,9)" fg:x="215" fg:w="8"/><text x="6.5036%" y="1071.50"></text></g><g><title>deno`tokio::util::wake::clone_arc_raw (1 samples, 0.03%)</title><rect x="6.4863%" y="1109" width="0.0291%" height="15" fill="rgb(219,133,21)" fg:x="223" fg:w="1"/><text x="6.7363%" y="1119.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (1 samples, 0.03%)</title><rect x="6.5154%" y="1109" width="0.0291%" height="15" fill="rgb(246,46,29)" fg:x="224" fg:w="1"/><text x="6.7654%" y="1119.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (3 samples, 0.09%)</title><rect x="6.6899%" y="1093" width="0.0873%" height="15" fill="rgb(246,185,52)" fg:x="230" fg:w="3"/><text x="6.9399%" y="1103.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (2 samples, 0.06%)</title><rect x="6.7772%" y="1093" width="0.0582%" height="15" fill="rgb(252,136,11)" fg:x="233" fg:w="2"/><text x="7.0272%" y="1103.50"></text></g><g><title>deno`Builtins_JSEntry (3 samples, 0.09%)</title><rect x="6.8935%" y="1077" width="0.0873%" height="15" fill="rgb(219,138,53)" fg:x="237" fg:w="3"/><text x="7.1435%" y="1087.50"></text></g><g><title>0x110016380 (1 samples, 0.03%)</title><rect x="7.1553%" y="1045" width="0.0291%" height="15" fill="rgb(211,51,23)" fg:x="246" fg:w="1"/><text x="7.4053%" y="1055.50"></text></g><g><title>0x1100178c0 (2 samples, 0.06%)</title><rect x="7.1844%" y="1045" width="0.0582%" height="15" fill="rgb(247,221,28)" fg:x="247" fg:w="2"/><text x="7.4344%" y="1055.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsAny (2 samples, 0.06%)</title><rect x="7.2426%" y="1045" width="0.0582%" height="15" fill="rgb(251,222,45)" fg:x="249" fg:w="2"/><text x="7.4926%" y="1055.50"></text></g><g><title>0x1100164e4 (1 samples, 0.03%)</title><rect x="7.3880%" y="1029" width="0.0291%" height="15" fill="rgb(217,162,53)" fg:x="254" fg:w="1"/><text x="7.6380%" y="1039.50"></text></g><g><title>0x1100164ec (7 samples, 0.20%)</title><rect x="7.4171%" y="1029" width="0.2036%" height="15" fill="rgb(229,93,14)" fg:x="255" fg:w="7"/><text x="7.6671%" y="1039.50"></text></g><g><title>deno`Builtins_FindOrderedHashMapEntry (7 samples, 0.20%)</title><rect x="7.4171%" y="1013" width="0.2036%" height="15" fill="rgb(209,67,49)" fg:x="255" fg:w="7"/><text x="7.6671%" y="1023.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (3 samples, 0.09%)</title><rect x="7.7661%" y="981" width="0.0873%" height="15" fill="rgb(213,87,29)" fg:x="267" fg:w="3"/><text x="8.0161%" y="991.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (9 samples, 0.26%)</title><rect x="7.6789%" y="1013" width="0.2618%" height="15" fill="rgb(205,151,52)" fg:x="264" fg:w="9"/><text x="7.9289%" y="1023.50"></text></g><g><title>deno`Builtins_ResolvePromise (6 samples, 0.17%)</title><rect x="7.7661%" y="997" width="0.1745%" height="15" fill="rgb(253,215,39)" fg:x="267" fg:w="6"/><text x="8.0161%" y="1007.50"></text></g><g><title>deno`Builtins_FulfillPromise (3 samples, 0.09%)</title><rect x="7.8534%" y="981" width="0.0873%" height="15" fill="rgb(221,220,41)" fg:x="270" fg:w="3"/><text x="8.1034%" y="991.50"></text></g><g><title>0x11001659c (12 samples, 0.35%)</title><rect x="7.6207%" y="1029" width="0.3490%" height="15" fill="rgb(218,133,21)" fg:x="262" fg:w="12"/><text x="7.8707%" y="1039.50"></text></g><g><title>deno`Builtins_ResolvePromise (1 samples, 0.03%)</title><rect x="7.9407%" y="1013" width="0.0291%" height="15" fill="rgb(221,193,43)" fg:x="273" fg:w="1"/><text x="8.1907%" y="1023.50"></text></g><g><title>0x1100165ac (1 samples, 0.03%)</title><rect x="7.9697%" y="1029" width="0.0291%" height="15" fill="rgb(240,128,52)" fg:x="274" fg:w="1"/><text x="8.2197%" y="1039.50"></text></g><g><title>0x1100165b0 (1 samples, 0.03%)</title><rect x="7.9988%" y="1029" width="0.0291%" height="15" fill="rgb(253,114,12)" fg:x="275" fg:w="1"/><text x="8.2488%" y="1039.50"></text></g><g><title>deno`Builtins_BaselineOutOfLinePrologue (1 samples, 0.03%)</title><rect x="8.0279%" y="1029" width="0.0291%" height="15" fill="rgb(215,223,47)" fg:x="276" fg:w="1"/><text x="8.2779%" y="1039.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.03%)</title><rect x="8.0279%" y="1013" width="0.0291%" height="15" fill="rgb(248,225,23)" fg:x="276" fg:w="1"/><text x="8.2779%" y="1023.50"></text></g><g><title>deno`v8::internal::Runtime_CompileOptimized (1 samples, 0.03%)</title><rect x="8.0279%" y="997" width="0.0291%" height="15" fill="rgb(250,108,0)" fg:x="276" fg:w="1"/><text x="8.2779%" y="1007.50"></text></g><g><title>deno`v8::internal::Compiler::CompileOptimized(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="8.0279%" y="981" width="0.0291%" height="15" fill="rgb(228,208,7)" fg:x="276" fg:w="1"/><text x="8.2779%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::Pipeline::NewCompilationJob(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="8.0279%" y="965" width="0.0291%" height="15" fill="rgb(244,45,10)" fg:x="276" fg:w="1"/><text x="8.2779%" y="975.50"></text></g><g><title>deno`Builtins_FindOrderedHashMapEntry (1 samples, 0.03%)</title><rect x="8.0570%" y="1029" width="0.0291%" height="15" fill="rgb(207,125,25)" fg:x="277" fg:w="1"/><text x="8.3070%" y="1039.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="8.0861%" y="1029" width="0.0291%" height="15" fill="rgb(210,195,18)" fg:x="278" fg:w="1"/><text x="8.3361%" y="1039.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="8.0861%" y="1013" width="0.0291%" height="15" fill="rgb(249,80,12)" fg:x="278" fg:w="1"/><text x="8.3361%" y="1023.50"></text></g><g><title>deno`Builtins_MapPrototypeGet (1 samples, 0.03%)</title><rect x="8.0861%" y="997" width="0.0291%" height="15" fill="rgb(221,65,9)" fg:x="278" fg:w="1"/><text x="8.3361%" y="1007.50"></text></g><g><title>deno`Builtins_FindOrderedHashMapEntry (1 samples, 0.03%)</title><rect x="8.0861%" y="981" width="0.0291%" height="15" fill="rgb(235,49,36)" fg:x="278" fg:w="1"/><text x="8.3361%" y="991.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (41 samples, 1.19%)</title><rect x="6.9808%" y="1077" width="1.1926%" height="15" fill="rgb(225,32,20)" fg:x="240" fg:w="41"/><text x="7.2308%" y="1087.50"></text></g><g><title>deno`Builtins_JSEntry (35 samples, 1.02%)</title><rect x="7.1553%" y="1061" width="1.0180%" height="15" fill="rgb(215,141,46)" fg:x="246" fg:w="35"/><text x="7.4053%" y="1071.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (30 samples, 0.87%)</title><rect x="7.3008%" y="1045" width="0.8726%" height="15" fill="rgb(250,160,47)" fg:x="251" fg:w="30"/><text x="7.5508%" y="1055.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (2 samples, 0.06%)</title><rect x="8.1152%" y="1029" width="0.0582%" height="15" fill="rgb(216,222,40)" fg:x="279" fg:w="2"/><text x="8.3652%" y="1039.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (1 samples, 0.03%)</title><rect x="8.1734%" y="1077" width="0.0291%" height="15" fill="rgb(234,217,39)" fg:x="281" fg:w="1"/><text x="8.4234%" y="1087.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (1 samples, 0.03%)</title><rect x="8.2024%" y="1077" width="0.0291%" height="15" fill="rgb(207,178,40)" fg:x="282" fg:w="1"/><text x="8.4524%" y="1087.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (49 samples, 1.43%)</title><rect x="6.8354%" y="1093" width="1.4252%" height="15" fill="rgb(221,136,13)" fg:x="235" fg:w="49"/><text x="7.0854%" y="1103.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (1 samples, 0.03%)</title><rect x="8.2315%" y="1077" width="0.0291%" height="15" fill="rgb(249,199,10)" fg:x="283" fg:w="1"/><text x="8.4815%" y="1087.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (1 samples, 0.03%)</title><rect x="8.2606%" y="1093" width="0.0291%" height="15" fill="rgb(249,222,13)" fg:x="284" fg:w="1"/><text x="8.5106%" y="1103.50"></text></g><g><title>deno`v8::Isolate::SuppressMicrotaskExecutionScope::~SuppressMicrotaskExecutionScope (1 samples, 0.03%)</title><rect x="8.2897%" y="1061" width="0.0291%" height="15" fill="rgb(244,185,38)" fg:x="285" fg:w="1"/><text x="8.5397%" y="1071.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (1 samples, 0.03%)</title><rect x="8.4351%" y="1045" width="0.0291%" height="15" fill="rgb(236,202,9)" fg:x="290" fg:w="1"/><text x="8.6851%" y="1055.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (1 samples, 0.03%)</title><rect x="8.4642%" y="1029" width="0.0291%" height="15" fill="rgb(250,229,37)" fg:x="291" fg:w="1"/><text x="8.7142%" y="1039.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (1 samples, 0.03%)</title><rect x="8.4933%" y="981" width="0.0291%" height="15" fill="rgb(206,174,23)" fg:x="292" fg:w="1"/><text x="8.7433%" y="991.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (1 samples, 0.03%)</title><rect x="9.1041%" y="965" width="0.0291%" height="15" fill="rgb(211,33,43)" fg:x="313" fg:w="1"/><text x="9.3541%" y="975.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNullOrUndefined (1 samples, 0.03%)</title><rect x="9.1332%" y="965" width="0.0291%" height="15" fill="rgb(245,58,50)" fg:x="314" fg:w="1"/><text x="9.3832%" y="975.50"></text></g><g><title>0x110010de8 (2 samples, 0.06%)</title><rect x="9.1623%" y="917" width="0.0582%" height="15" fill="rgb(244,68,36)" fg:x="315" fg:w="2"/><text x="9.4123%" y="927.50"></text></g><g><title>deno`Builtins_CreateTypedArray (2 samples, 0.06%)</title><rect x="9.1623%" y="901" width="0.0582%" height="15" fill="rgb(232,229,15)" fg:x="315" fg:w="2"/><text x="9.4123%" y="911.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (2 samples, 0.06%)</title><rect x="9.1623%" y="885" width="0.0582%" height="15" fill="rgb(254,30,23)" fg:x="315" fg:w="2"/><text x="9.4123%" y="895.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.06%)</title><rect x="9.1623%" y="869" width="0.0582%" height="15" fill="rgb(235,160,14)" fg:x="315" fg:w="2"/><text x="9.4123%" y="879.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (2 samples, 0.06%)</title><rect x="9.1623%" y="853" width="0.0582%" height="15" fill="rgb(212,155,44)" fg:x="315" fg:w="2"/><text x="9.4123%" y="863.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="9.1914%" y="837" width="0.0291%" height="15" fill="rgb(226,2,50)" fg:x="316" fg:w="1"/><text x="9.4414%" y="847.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Attach(std::__1::shared_ptr (1 samples, 0.03%)</title><rect x="9.1914%" y="821" width="0.0291%" height="15" fill="rgb(234,177,6)" fg:x="316" fg:w="1"/><text x="9.4414%" y="831.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (1 samples, 0.03%)</title><rect x="9.1914%" y="805" width="0.0291%" height="15" fill="rgb(217,24,9)" fg:x="316" fg:w="1"/><text x="9.4414%" y="815.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (1 samples, 0.03%)</title><rect x="9.1914%" y="789" width="0.0291%" height="15" fill="rgb(220,13,46)" fg:x="316" fg:w="1"/><text x="9.4414%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="9.1914%" y="773" width="0.0291%" height="15" fill="rgb(239,221,27)" fg:x="316" fg:w="1"/><text x="9.4414%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="9.1914%" y="757" width="0.0291%" height="15" fill="rgb(222,198,25)" fg:x="316" fg:w="1"/><text x="9.4414%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="9.1914%" y="741" width="0.0291%" height="15" fill="rgb(211,99,13)" fg:x="316" fg:w="1"/><text x="9.4414%" y="751.50"></text></g><g><title>deno`deno_runtime::ops::fs::open_helper (1 samples, 0.03%)</title><rect x="9.2205%" y="853" width="0.0291%" height="15" fill="rgb(232,111,31)" fg:x="317" fg:w="1"/><text x="9.4705%" y="863.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (1 samples, 0.03%)</title><rect x="9.2205%" y="837" width="0.0291%" height="15" fill="rgb(245,82,37)" fg:x="317" fg:w="1"/><text x="9.4705%" y="847.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.06%)</title><rect x="9.2205%" y="885" width="0.0582%" height="15" fill="rgb(227,149,46)" fg:x="317" fg:w="2"/><text x="9.4705%" y="895.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.06%)</title><rect x="9.2205%" y="869" width="0.0582%" height="15" fill="rgb(218,36,50)" fg:x="317" fg:w="2"/><text x="9.4705%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="9.2496%" y="853" width="0.0291%" height="15" fill="rgb(226,80,48)" fg:x="318" fg:w="1"/><text x="9.4996%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="9.2496%" y="837" width="0.0291%" height="15" fill="rgb(238,224,15)" fg:x="318" fg:w="1"/><text x="9.4996%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="9.2496%" y="821" width="0.0291%" height="15" fill="rgb(241,136,10)" fg:x="318" fg:w="1"/><text x="9.4996%" y="831.50"></text></g><g><title>0x110011148 (3 samples, 0.09%)</title><rect x="9.2205%" y="917" width="0.0873%" height="15" fill="rgb(208,32,45)" fg:x="317" fg:w="3"/><text x="9.4705%" y="927.50"></text></g><g><title>deno`Builtins_CallApiCallback (3 samples, 0.09%)</title><rect x="9.2205%" y="901" width="0.0873%" height="15" fill="rgb(207,135,9)" fg:x="317" fg:w="3"/><text x="9.4705%" y="911.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (1 samples, 0.03%)</title><rect x="9.2787%" y="885" width="0.0291%" height="15" fill="rgb(206,86,44)" fg:x="319" fg:w="1"/><text x="9.5287%" y="895.50"></text></g><g><title>0x110011200 (1 samples, 0.03%)</title><rect x="9.3077%" y="917" width="0.0291%" height="15" fill="rgb(245,177,15)" fg:x="320" fg:w="1"/><text x="9.5577%" y="927.50"></text></g><g><title>deno`Builtins_MapPrototypeSet (1 samples, 0.03%)</title><rect x="9.3077%" y="901" width="0.0291%" height="15" fill="rgb(206,64,50)" fg:x="320" fg:w="1"/><text x="9.5577%" y="911.50"></text></g><g><title>0x110017aa8 (3 samples, 0.09%)</title><rect x="9.3368%" y="917" width="0.0873%" height="15" fill="rgb(234,36,40)" fg:x="321" fg:w="3"/><text x="9.5868%" y="927.50"></text></g><g><title>deno`Builtins_CreateTypedArray (3 samples, 0.09%)</title><rect x="9.3368%" y="901" width="0.0873%" height="15" fill="rgb(213,64,8)" fg:x="321" fg:w="3"/><text x="9.5868%" y="911.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (2 samples, 0.06%)</title><rect x="9.3659%" y="885" width="0.0582%" height="15" fill="rgb(210,75,36)" fg:x="322" fg:w="2"/><text x="9.6159%" y="895.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (2 samples, 0.06%)</title><rect x="9.3659%" y="869" width="0.0582%" height="15" fill="rgb(229,88,21)" fg:x="322" fg:w="2"/><text x="9.6159%" y="879.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (1 samples, 0.03%)</title><rect x="9.3950%" y="853" width="0.0291%" height="15" fill="rgb(252,204,47)" fg:x="323" fg:w="1"/><text x="9.6450%" y="863.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="9.3950%" y="837" width="0.0291%" height="15" fill="rgb(208,77,27)" fg:x="323" fg:w="1"/><text x="9.6450%" y="847.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.03%)</title><rect x="9.3950%" y="821" width="0.0291%" height="15" fill="rgb(221,76,26)" fg:x="323" fg:w="1"/><text x="9.6450%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="9.3950%" y="805" width="0.0291%" height="15" fill="rgb(225,139,18)" fg:x="323" fg:w="1"/><text x="9.6450%" y="815.50"></text></g><g><title>0x11000d1fc (1 samples, 0.03%)</title><rect x="9.4241%" y="901" width="0.0291%" height="15" fill="rgb(230,137,11)" fg:x="324" fg:w="1"/><text x="9.6741%" y="911.50"></text></g><g><title>0x11000d4cc (1 samples, 0.03%)</title><rect x="9.4532%" y="901" width="0.0291%" height="15" fill="rgb(212,28,1)" fg:x="325" fg:w="1"/><text x="9.7032%" y="911.50"></text></g><g><title>deno`Builtins_CallApiCallback (1 samples, 0.03%)</title><rect x="9.4532%" y="885" width="0.0291%" height="15" fill="rgb(248,164,17)" fg:x="325" fg:w="1"/><text x="9.7032%" y="895.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (1 samples, 0.03%)</title><rect x="9.4532%" y="869" width="0.0291%" height="15" fill="rgb(222,171,42)" fg:x="325" fg:w="1"/><text x="9.7032%" y="879.50"></text></g><g><title>0x11000d824 (1 samples, 0.03%)</title><rect x="9.4823%" y="901" width="0.0291%" height="15" fill="rgb(243,84,45)" fg:x="326" fg:w="1"/><text x="9.7323%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="9.5113%" y="837" width="0.0291%" height="15" fill="rgb(252,49,23)" fg:x="327" fg:w="1"/><text x="9.7613%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="9.5113%" y="821" width="0.0291%" height="15" fill="rgb(215,19,7)" fg:x="327" fg:w="1"/><text x="9.7613%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="9.5113%" y="805" width="0.0291%" height="15" fill="rgb(238,81,41)" fg:x="327" fg:w="1"/><text x="9.7613%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="9.5113%" y="789" width="0.0291%" height="15" fill="rgb(210,199,37)" fg:x="327" fg:w="1"/><text x="9.7613%" y="799.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.06%)</title><rect x="9.5113%" y="853" width="0.0582%" height="15" fill="rgb(244,192,49)" fg:x="327" fg:w="2"/><text x="9.7613%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="9.5404%" y="837" width="0.0291%" height="15" fill="rgb(226,211,11)" fg:x="328" fg:w="1"/><text x="9.7904%" y="847.50"></text></g><g><title>0x11000c240 (15 samples, 0.44%)</title><rect x="9.1623%" y="933" width="0.4363%" height="15" fill="rgb(236,162,54)" fg:x="315" fg:w="15"/><text x="9.4123%" y="943.50"></text></g><g><title>0x110017aec (6 samples, 0.17%)</title><rect x="9.4241%" y="917" width="0.1745%" height="15" fill="rgb(220,229,9)" fg:x="324" fg:w="6"/><text x="9.6741%" y="927.50"></text></g><g><title>0x11001234c (3 samples, 0.09%)</title><rect x="9.5113%" y="901" width="0.0873%" height="15" fill="rgb(250,87,22)" fg:x="327" fg:w="3"/><text x="9.7613%" y="911.50"></text></g><g><title>deno`Builtins_CallApiCallback (3 samples, 0.09%)</title><rect x="9.5113%" y="885" width="0.0873%" height="15" fill="rgb(239,43,17)" fg:x="327" fg:w="3"/><text x="9.7613%" y="895.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.09%)</title><rect x="9.5113%" y="869" width="0.0873%" height="15" fill="rgb(231,177,25)" fg:x="327" fg:w="3"/><text x="9.7613%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="9.5695%" y="853" width="0.0291%" height="15" fill="rgb(219,179,1)" fg:x="329" fg:w="1"/><text x="9.8195%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="9.5695%" y="837" width="0.0291%" height="15" fill="rgb(238,219,53)" fg:x="329" fg:w="1"/><text x="9.8195%" y="847.50"></text></g><g><title>0x11000c390 (1 samples, 0.03%)</title><rect x="9.5986%" y="933" width="0.0291%" height="15" fill="rgb(232,167,36)" fg:x="330" fg:w="1"/><text x="9.8486%" y="943.50"></text></g><g><title>deno`Builtins_PromiseAll (1 samples, 0.03%)</title><rect x="9.5986%" y="917" width="0.0291%" height="15" fill="rgb(244,19,51)" fg:x="330" fg:w="1"/><text x="9.8486%" y="927.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="9.6859%" y="869" width="0.0291%" height="15" fill="rgb(224,6,22)" fg:x="333" fg:w="1"/><text x="9.9359%" y="879.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.03%)</title><rect x="9.7150%" y="837" width="0.0291%" height="15" fill="rgb(224,145,5)" fg:x="334" fg:w="1"/><text x="9.9650%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="9.7150%" y="821" width="0.0291%" height="15" fill="rgb(234,130,49)" fg:x="334" fg:w="1"/><text x="9.9650%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="9.7150%" y="805" width="0.0291%" height="15" fill="rgb(254,6,2)" fg:x="334" fg:w="1"/><text x="9.9650%" y="815.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObjectFromMap(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (1 samples, 0.03%)</title><rect x="9.7440%" y="837" width="0.0291%" height="15" fill="rgb(208,96,46)" fg:x="335" fg:w="1"/><text x="9.9940%" y="847.50"></text></g><g><title>deno`v8::internal::Heap::AllocateExternalBackingStore(std::__1::function&lt;void* (1 samples, 0.03%)</title><rect x="9.7731%" y="837" width="0.0291%" height="15" fill="rgb(239,3,39)" fg:x="336" fg:w="1"/><text x="10.0231%" y="847.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (4 samples, 0.12%)</title><rect x="9.7150%" y="853" width="0.1163%" height="15" fill="rgb(233,210,1)" fg:x="334" fg:w="4"/><text x="9.9650%" y="863.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Attach(std::__1::shared_ptr (1 samples, 0.03%)</title><rect x="9.8022%" y="837" width="0.0291%" height="15" fill="rgb(244,137,37)" fg:x="337" fg:w="1"/><text x="10.0522%" y="847.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (1 samples, 0.03%)</title><rect x="9.8022%" y="821" width="0.0291%" height="15" fill="rgb(240,136,2)" fg:x="337" fg:w="1"/><text x="10.0522%" y="831.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (1 samples, 0.03%)</title><rect x="9.8022%" y="805" width="0.0291%" height="15" fill="rgb(239,18,37)" fg:x="337" fg:w="1"/><text x="10.0522%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="9.8022%" y="789" width="0.0291%" height="15" fill="rgb(218,185,22)" fg:x="337" fg:w="1"/><text x="10.0522%" y="799.50"></text></g><g><title>0x11001328c (8 samples, 0.23%)</title><rect x="9.6277%" y="933" width="0.2327%" height="15" fill="rgb(225,218,4)" fg:x="331" fg:w="8"/><text x="9.8777%" y="943.50"></text></g><g><title>deno`Builtins_CreateTypedArray (8 samples, 0.23%)</title><rect x="9.6277%" y="917" width="0.2327%" height="15" fill="rgb(230,182,32)" fg:x="331" fg:w="8"/><text x="9.8777%" y="927.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (6 samples, 0.17%)</title><rect x="9.6859%" y="901" width="0.1745%" height="15" fill="rgb(242,56,43)" fg:x="333" fg:w="6"/><text x="9.9359%" y="911.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (6 samples, 0.17%)</title><rect x="9.6859%" y="885" width="0.1745%" height="15" fill="rgb(233,99,24)" fg:x="333" fg:w="6"/><text x="9.9359%" y="895.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (5 samples, 0.15%)</title><rect x="9.7150%" y="869" width="0.1454%" height="15" fill="rgb(234,209,42)" fg:x="334" fg:w="5"/><text x="9.9650%" y="879.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::Append (1 samples, 0.03%)</title><rect x="9.8313%" y="853" width="0.0291%" height="15" fill="rgb(227,7,12)" fg:x="338" fg:w="1"/><text x="10.0813%" y="863.50"></text></g><g><title>0x1100132c8 (1 samples, 0.03%)</title><rect x="9.8604%" y="933" width="0.0291%" height="15" fill="rgb(245,203,43)" fg:x="339" fg:w="1"/><text x="10.1104%" y="943.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (1 samples, 0.03%)</title><rect x="9.9186%" y="821" width="0.0291%" height="15" fill="rgb(238,205,33)" fg:x="341" fg:w="1"/><text x="10.1686%" y="831.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8_uninit (1 samples, 0.03%)</title><rect x="9.9186%" y="805" width="0.0291%" height="15" fill="rgb(231,56,7)" fg:x="341" fg:w="1"/><text x="10.1686%" y="815.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="9.9186%" y="789" width="0.0291%" height="15" fill="rgb(244,186,29)" fg:x="341" fg:w="1"/><text x="10.1686%" y="799.50"></text></g><g><title>0x11001048c (3 samples, 0.09%)</title><rect x="9.8895%" y="901" width="0.0873%" height="15" fill="rgb(234,111,31)" fg:x="340" fg:w="3"/><text x="10.1395%" y="911.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (3 samples, 0.09%)</title><rect x="9.8895%" y="885" width="0.0873%" height="15" fill="rgb(241,149,10)" fg:x="340" fg:w="3"/><text x="10.1395%" y="895.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.09%)</title><rect x="9.8895%" y="869" width="0.0873%" height="15" fill="rgb(249,206,44)" fg:x="340" fg:w="3"/><text x="10.1395%" y="879.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (2 samples, 0.06%)</title><rect x="9.9186%" y="853" width="0.0582%" height="15" fill="rgb(251,153,30)" fg:x="341" fg:w="2"/><text x="10.1686%" y="863.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (2 samples, 0.06%)</title><rect x="9.9186%" y="837" width="0.0582%" height="15" fill="rgb(239,152,38)" fg:x="341" fg:w="2"/><text x="10.1686%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="9.9476%" y="821" width="0.0291%" height="15" fill="rgb(249,139,47)" fg:x="342" fg:w="1"/><text x="10.1976%" y="831.50"></text></g><g><title>0x11000a350 (4 samples, 0.12%)</title><rect x="9.8895%" y="917" width="0.1163%" height="15" fill="rgb(244,64,35)" fg:x="340" fg:w="4"/><text x="10.1395%" y="927.50"></text></g><g><title>0x110010718 (1 samples, 0.03%)</title><rect x="9.9767%" y="901" width="0.0291%" height="15" fill="rgb(216,46,15)" fg:x="343" fg:w="1"/><text x="10.2267%" y="911.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (1 samples, 0.03%)</title><rect x="9.9767%" y="885" width="0.0291%" height="15" fill="rgb(250,74,19)" fg:x="343" fg:w="1"/><text x="10.2267%" y="895.50"></text></g><g><title>deno`tokio::runtime::blocking::pool::Spawner::spawn (1 samples, 0.03%)</title><rect x="10.0349%" y="853" width="0.0291%" height="15" fill="rgb(249,42,33)" fg:x="345" fg:w="1"/><text x="10.2849%" y="863.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.06%)</title><rect x="10.0349%" y="869" width="0.0582%" height="15" fill="rgb(242,149,17)" fg:x="345" fg:w="2"/><text x="10.2849%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="10.0640%" y="853" width="0.0291%" height="15" fill="rgb(244,29,21)" fg:x="346" fg:w="1"/><text x="10.3140%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="10.0931%" y="853" width="0.0291%" height="15" fill="rgb(220,130,37)" fg:x="347" fg:w="1"/><text x="10.3431%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="10.0931%" y="837" width="0.0291%" height="15" fill="rgb(211,67,2)" fg:x="347" fg:w="1"/><text x="10.3431%" y="847.50"></text></g><g><title>0x11000d4cc (5 samples, 0.15%)</title><rect x="10.0058%" y="917" width="0.1454%" height="15" fill="rgb(235,68,52)" fg:x="344" fg:w="5"/><text x="10.2558%" y="927.50"></text></g><g><title>deno`Builtins_CallApiCallback (5 samples, 0.15%)</title><rect x="10.0058%" y="901" width="0.1454%" height="15" fill="rgb(246,142,3)" fg:x="344" fg:w="5"/><text x="10.2558%" y="911.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (5 samples, 0.15%)</title><rect x="10.0058%" y="885" width="0.1454%" height="15" fill="rgb(241,25,7)" fg:x="344" fg:w="5"/><text x="10.2558%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="10.0931%" y="869" width="0.0582%" height="15" fill="rgb(242,119,39)" fg:x="347" fg:w="2"/><text x="10.3431%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="10.1222%" y="853" width="0.0291%" height="15" fill="rgb(241,98,45)" fg:x="348" fg:w="1"/><text x="10.3722%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="10.1222%" y="837" width="0.0291%" height="15" fill="rgb(254,28,30)" fg:x="348" fg:w="1"/><text x="10.3722%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="10.1222%" y="821" width="0.0291%" height="15" fill="rgb(241,142,54)" fg:x="348" fg:w="1"/><text x="10.3722%" y="831.50"></text></g><g><title>deno`&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="10.3258%" y="853" width="0.0291%" height="15" fill="rgb(222,85,15)" fg:x="355" fg:w="1"/><text x="10.5758%" y="863.50"></text></g><g><title>deno`deno_runtime::ops::fs::open_helper (2 samples, 0.06%)</title><rect x="10.3549%" y="853" width="0.0582%" height="15" fill="rgb(210,85,47)" fg:x="356" fg:w="2"/><text x="10.6049%" y="863.50"></text></g><g><title>deno`std::path::Path::to_path_buf (2 samples, 0.06%)</title><rect x="10.3549%" y="837" width="0.0582%" height="15" fill="rgb(224,206,25)" fg:x="356" fg:w="2"/><text x="10.6049%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="10.3549%" y="821" width="0.0582%" height="15" fill="rgb(243,201,19)" fg:x="356" fg:w="2"/><text x="10.6049%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="10.3549%" y="805" width="0.0582%" height="15" fill="rgb(236,59,4)" fg:x="356" fg:w="2"/><text x="10.6049%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="10.3549%" y="789" width="0.0582%" height="15" fill="rgb(254,179,45)" fg:x="356" fg:w="2"/><text x="10.6049%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="10.3839%" y="773" width="0.0291%" height="15" fill="rgb(226,14,10)" fg:x="357" fg:w="1"/><text x="10.6339%" y="783.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.17%)</title><rect x="10.2967%" y="869" width="0.1745%" height="15" fill="rgb(244,27,41)" fg:x="354" fg:w="6"/><text x="10.5467%" y="879.50"></text></g><g><title>deno`tokio::runtime::blocking::pool::Spawner::spawn (2 samples, 0.06%)</title><rect x="10.4130%" y="853" width="0.0582%" height="15" fill="rgb(235,35,32)" fg:x="358" fg:w="2"/><text x="10.6630%" y="863.50"></text></g><g><title>deno`parking_lot::raw_mutex::RawMutex::unlock_slow (2 samples, 0.06%)</title><rect x="10.4130%" y="837" width="0.0582%" height="15" fill="rgb(218,68,31)" fg:x="358" fg:w="2"/><text x="10.6630%" y="847.50"></text></g><g><title>deno`&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (2 samples, 0.06%)</title><rect x="10.4130%" y="821" width="0.0582%" height="15" fill="rgb(207,120,37)" fg:x="358" fg:w="2"/><text x="10.6630%" y="831.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.06%)</title><rect x="10.4130%" y="805" width="0.0582%" height="15" fill="rgb(227,98,0)" fg:x="358" fg:w="2"/><text x="10.6630%" y="815.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (1 samples, 0.03%)</title><rect x="10.4712%" y="869" width="0.0291%" height="15" fill="rgb(207,7,3)" fg:x="360" fg:w="1"/><text x="10.7212%" y="879.50"></text></g><g><title>deno`v8::String::WriteUtf8 (2 samples, 0.06%)</title><rect x="10.5003%" y="837" width="0.0582%" height="15" fill="rgb(206,98,19)" fg:x="361" fg:w="2"/><text x="10.7503%" y="847.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8_uninit (3 samples, 0.09%)</title><rect x="10.5003%" y="853" width="0.0873%" height="15" fill="rgb(217,5,26)" fg:x="361" fg:w="3"/><text x="10.7503%" y="863.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="10.5585%" y="837" width="0.0291%" height="15" fill="rgb(235,190,38)" fg:x="363" fg:w="1"/><text x="10.8085%" y="847.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (5 samples, 0.15%)</title><rect x="10.5003%" y="869" width="0.1454%" height="15" fill="rgb(247,86,24)" fg:x="361" fg:w="5"/><text x="10.7503%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="10.5876%" y="853" width="0.0582%" height="15" fill="rgb(205,101,16)" fg:x="364" fg:w="2"/><text x="10.8376%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="10.5876%" y="837" width="0.0582%" height="15" fill="rgb(246,168,33)" fg:x="364" fg:w="2"/><text x="10.8376%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.06%)</title><rect x="10.5876%" y="821" width="0.0582%" height="15" fill="rgb(231,114,1)" fg:x="364" fg:w="2"/><text x="10.8376%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="10.6166%" y="805" width="0.0291%" height="15" fill="rgb(207,184,53)" fg:x="365" fg:w="1"/><text x="10.8666%" y="815.50"></text></g><g><title>deno`v8::isolate::Isolate::get_annex_arc (1 samples, 0.03%)</title><rect x="10.6457%" y="869" width="0.0291%" height="15" fill="rgb(224,95,51)" fg:x="366" fg:w="1"/><text x="10.8957%" y="879.50"></text></g><g><title>deno`v8__Global__New (1 samples, 0.03%)</title><rect x="10.6748%" y="869" width="0.0291%" height="15" fill="rgb(212,188,45)" fg:x="367" fg:w="1"/><text x="10.9248%" y="879.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.03%)</title><rect x="10.6748%" y="853" width="0.0291%" height="15" fill="rgb(223,154,38)" fg:x="367" fg:w="1"/><text x="10.9248%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="10.7039%" y="869" width="0.0582%" height="15" fill="rgb(251,22,52)" fg:x="368" fg:w="2"/><text x="10.9539%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="10.7039%" y="853" width="0.0582%" height="15" fill="rgb(229,209,22)" fg:x="368" fg:w="2"/><text x="10.9539%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.06%)</title><rect x="10.7039%" y="837" width="0.0582%" height="15" fill="rgb(234,138,34)" fg:x="368" fg:w="2"/><text x="10.9539%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.06%)</title><rect x="10.7039%" y="821" width="0.0582%" height="15" fill="rgb(212,95,11)" fg:x="368" fg:w="2"/><text x="10.9539%" y="831.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (23 samples, 0.67%)</title><rect x="10.1513%" y="885" width="0.6690%" height="15" fill="rgb(240,179,47)" fg:x="349" fg:w="23"/><text x="10.4013%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.06%)</title><rect x="10.7621%" y="869" width="0.0582%" height="15" fill="rgb(240,163,11)" fg:x="370" fg:w="2"/><text x="11.0121%" y="879.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (1 samples, 0.03%)</title><rect x="10.8202%" y="885" width="0.0291%" height="15" fill="rgb(236,37,12)" fg:x="372" fg:w="1"/><text x="11.0702%" y="895.50"></text></g><g><title>0x11001234c (25 samples, 0.73%)</title><rect x="10.1513%" y="917" width="0.7272%" height="15" fill="rgb(232,164,16)" fg:x="349" fg:w="25"/><text x="10.4013%" y="927.50"></text></g><g><title>deno`Builtins_CallApiCallback (25 samples, 0.73%)</title><rect x="10.1513%" y="901" width="0.7272%" height="15" fill="rgb(244,205,15)" fg:x="349" fg:w="25"/><text x="10.4013%" y="911.50"></text></g><g><title>deno`v8__Value__IsNullOrUndefined (1 samples, 0.03%)</title><rect x="10.8493%" y="885" width="0.0291%" height="15" fill="rgb(223,117,47)" fg:x="373" fg:w="1"/><text x="11.0993%" y="895.50"></text></g><g><title>0x110012404 (1 samples, 0.03%)</title><rect x="10.8784%" y="917" width="0.0291%" height="15" fill="rgb(244,107,35)" fg:x="374" fg:w="1"/><text x="11.1284%" y="927.50"></text></g><g><title>deno`Builtins_MapPrototypeSet (1 samples, 0.03%)</title><rect x="10.8784%" y="901" width="0.0291%" height="15" fill="rgb(205,140,8)" fg:x="374" fg:w="1"/><text x="11.1284%" y="911.50"></text></g><g><title>0x110012518 (1 samples, 0.03%)</title><rect x="10.9075%" y="917" width="0.0291%" height="15" fill="rgb(228,84,46)" fg:x="375" fg:w="1"/><text x="11.1575%" y="927.50"></text></g><g><title>0x110012e18 (1 samples, 0.03%)</title><rect x="10.9366%" y="917" width="0.0291%" height="15" fill="rgb(254,188,9)" fg:x="376" fg:w="1"/><text x="11.1866%" y="927.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (1 samples, 0.03%)</title><rect x="10.9366%" y="901" width="0.0291%" height="15" fill="rgb(206,112,54)" fg:x="376" fg:w="1"/><text x="11.1866%" y="911.50"></text></g><g><title>deno`Builtins_CallApiCallback (1 samples, 0.03%)</title><rect x="10.9657%" y="917" width="0.0291%" height="15" fill="rgb(216,84,49)" fg:x="377" fg:w="1"/><text x="11.2157%" y="927.50"></text></g><g><title>0x1100132d0 (39 samples, 1.13%)</title><rect x="9.8895%" y="933" width="1.1344%" height="15" fill="rgb(214,194,35)" fg:x="340" fg:w="39"/><text x="10.1395%" y="943.50"></text></g><g><title>deno`Builtins_LoadIC (1 samples, 0.03%)</title><rect x="10.9948%" y="917" width="0.0291%" height="15" fill="rgb(249,28,3)" fg:x="378" fg:w="1"/><text x="11.2448%" y="927.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (1 samples, 0.03%)</title><rect x="11.0239%" y="917" width="0.0291%" height="15" fill="rgb(222,56,52)" fg:x="379" fg:w="1"/><text x="11.2739%" y="927.50"></text></g><g><title>0x1100133a8 (3 samples, 0.09%)</title><rect x="11.0239%" y="933" width="0.0873%" height="15" fill="rgb(245,217,50)" fg:x="379" fg:w="3"/><text x="11.2739%" y="943.50"></text></g><g><title>deno`Builtins_PromiseAll (2 samples, 0.06%)</title><rect x="11.0529%" y="917" width="0.0582%" height="15" fill="rgb(213,201,24)" fg:x="380" fg:w="2"/><text x="11.3029%" y="927.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.03%)</title><rect x="11.0820%" y="901" width="0.0291%" height="15" fill="rgb(248,116,28)" fg:x="381" fg:w="1"/><text x="11.3320%" y="911.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (1 samples, 0.03%)</title><rect x="11.0820%" y="885" width="0.0291%" height="15" fill="rgb(219,72,43)" fg:x="381" fg:w="1"/><text x="11.3320%" y="895.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (1 samples, 0.03%)</title><rect x="11.0820%" y="869" width="0.0291%" height="15" fill="rgb(209,138,14)" fg:x="381" fg:w="1"/><text x="11.3320%" y="879.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (1 samples, 0.03%)</title><rect x="11.0820%" y="853" width="0.0291%" height="15" fill="rgb(222,18,33)" fg:x="381" fg:w="1"/><text x="11.3320%" y="863.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (1 samples, 0.03%)</title><rect x="11.0820%" y="837" width="0.0291%" height="15" fill="rgb(213,199,7)" fg:x="381" fg:w="1"/><text x="11.3320%" y="847.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (1 samples, 0.03%)</title><rect x="11.0820%" y="821" width="0.0291%" height="15" fill="rgb(250,110,10)" fg:x="381" fg:w="1"/><text x="11.3320%" y="831.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (1 samples, 0.03%)</title><rect x="11.0820%" y="805" width="0.0291%" height="15" fill="rgb(248,123,6)" fg:x="381" fg:w="1"/><text x="11.3320%" y="815.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (1 samples, 0.03%)</title><rect x="11.0820%" y="789" width="0.0291%" height="15" fill="rgb(206,91,31)" fg:x="381" fg:w="1"/><text x="11.3320%" y="799.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (1 samples, 0.03%)</title><rect x="11.0820%" y="773" width="0.0291%" height="15" fill="rgb(211,154,13)" fg:x="381" fg:w="1"/><text x="11.3320%" y="783.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (1 samples, 0.03%)</title><rect x="11.0820%" y="757" width="0.0291%" height="15" fill="rgb(225,148,7)" fg:x="381" fg:w="1"/><text x="11.3320%" y="767.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (1 samples, 0.03%)</title><rect x="11.0820%" y="741" width="0.0291%" height="15" fill="rgb(220,160,43)" fg:x="381" fg:w="1"/><text x="11.3320%" y="751.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (1 samples, 0.03%)</title><rect x="11.0820%" y="725" width="0.0291%" height="15" fill="rgb(213,52,39)" fg:x="381" fg:w="1"/><text x="11.3320%" y="735.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (1 samples, 0.03%)</title><rect x="11.0820%" y="709" width="0.0291%" height="15" fill="rgb(243,137,7)" fg:x="381" fg:w="1"/><text x="11.3320%" y="719.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="11.0820%" y="693" width="0.0291%" height="15" fill="rgb(230,79,13)" fg:x="381" fg:w="1"/><text x="11.3320%" y="703.50"></text></g><g><title>deno`operator new(unsigned long) (2 samples, 0.06%)</title><rect x="11.1402%" y="821" width="0.0582%" height="15" fill="rgb(247,105,23)" fg:x="383" fg:w="2"/><text x="11.3902%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="11.1693%" y="805" width="0.0291%" height="15" fill="rgb(223,179,41)" fg:x="384" fg:w="1"/><text x="11.4193%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="11.1693%" y="789" width="0.0291%" height="15" fill="rgb(218,9,34)" fg:x="384" fg:w="1"/><text x="11.4193%" y="799.50"></text></g><g><title>deno`v8::internal::BackingStore::Allocate (2 samples, 0.06%)</title><rect x="11.1984%" y="821" width="0.0582%" height="15" fill="rgb(222,106,8)" fg:x="385" fg:w="2"/><text x="11.4484%" y="831.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.03%)</title><rect x="11.2275%" y="805" width="0.0291%" height="15" fill="rgb(211,220,0)" fg:x="386" fg:w="1"/><text x="11.4775%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="11.2275%" y="789" width="0.0291%" height="15" fill="rgb(229,52,16)" fg:x="386" fg:w="1"/><text x="11.4775%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="11.2275%" y="773" width="0.0291%" height="15" fill="rgb(212,155,18)" fg:x="386" fg:w="1"/><text x="11.4775%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="11.2275%" y="757" width="0.0291%" height="15" fill="rgb(242,21,14)" fg:x="386" fg:w="1"/><text x="11.4775%" y="767.50"></text></g><g><title>deno`v8::internal::Factory::NewJSObjectFromMap(v8::internal::Handle&lt;v8::internal::Map&gt;, v8::internal::AllocationType, v8::internal::Handle (4 samples, 0.12%)</title><rect x="11.2565%" y="821" width="0.1163%" height="15" fill="rgb(222,19,48)" fg:x="387" fg:w="4"/><text x="11.5065%" y="831.50"></text></g><g><title>deno`v8::internal::Factory::InitializeJSObjectBody (4 samples, 0.12%)</title><rect x="11.2565%" y="805" width="0.1163%" height="15" fill="rgb(232,45,27)" fg:x="387" fg:w="4"/><text x="11.5065%" y="815.50"></text></g><g><title>deno`v8::internal::JSObject::InitializeBody (4 samples, 0.12%)</title><rect x="11.2565%" y="789" width="0.1163%" height="15" fill="rgb(249,103,42)" fg:x="387" fg:w="4"/><text x="11.5065%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="11.3729%" y="773" width="0.0291%" height="15" fill="rgb(246,81,33)" fg:x="391" fg:w="1"/><text x="11.6229%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="11.3729%" y="757" width="0.0291%" height="15" fill="rgb(252,33,42)" fg:x="391" fg:w="1"/><text x="11.6229%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="11.3729%" y="741" width="0.0291%" height="15" fill="rgb(209,212,41)" fg:x="391" fg:w="1"/><text x="11.6229%" y="751.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::Attach(std::__1::shared_ptr (2 samples, 0.06%)</title><rect x="11.3729%" y="821" width="0.0582%" height="15" fill="rgb(207,154,6)" fg:x="391" fg:w="2"/><text x="11.6229%" y="831.50"></text></g><g><title>deno`v8::internal::JSArrayBuffer::EnsureExtension (2 samples, 0.06%)</title><rect x="11.3729%" y="805" width="0.0582%" height="15" fill="rgb(223,64,47)" fg:x="391" fg:w="2"/><text x="11.6229%" y="815.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (2 samples, 0.06%)</title><rect x="11.3729%" y="789" width="0.0582%" height="15" fill="rgb(211,161,38)" fg:x="391" fg:w="2"/><text x="11.6229%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="11.4020%" y="773" width="0.0291%" height="15" fill="rgb(219,138,40)" fg:x="392" fg:w="1"/><text x="11.6520%" y="783.50"></text></g><g><title>0x110010de8 (12 samples, 0.35%)</title><rect x="11.1111%" y="917" width="0.3490%" height="15" fill="rgb(241,228,46)" fg:x="382" fg:w="12"/><text x="11.3611%" y="927.50"></text></g><g><title>deno`Builtins_CreateTypedArray (12 samples, 0.35%)</title><rect x="11.1111%" y="901" width="0.3490%" height="15" fill="rgb(223,209,38)" fg:x="382" fg:w="12"/><text x="11.3611%" y="911.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (11 samples, 0.32%)</title><rect x="11.1402%" y="885" width="0.3200%" height="15" fill="rgb(236,164,45)" fg:x="383" fg:w="11"/><text x="11.3902%" y="895.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (11 samples, 0.32%)</title><rect x="11.1402%" y="869" width="0.3200%" height="15" fill="rgb(231,15,5)" fg:x="383" fg:w="11"/><text x="11.3902%" y="879.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (11 samples, 0.32%)</title><rect x="11.1402%" y="853" width="0.3200%" height="15" fill="rgb(252,35,15)" fg:x="383" fg:w="11"/><text x="11.3902%" y="863.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (11 samples, 0.32%)</title><rect x="11.1402%" y="837" width="0.3200%" height="15" fill="rgb(248,181,18)" fg:x="383" fg:w="11"/><text x="11.3902%" y="847.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (1 samples, 0.03%)</title><rect x="11.4311%" y="821" width="0.0291%" height="15" fill="rgb(233,39,42)" fg:x="393" fg:w="1"/><text x="11.6811%" y="831.50"></text></g><g><title>0x110010f40 (1 samples, 0.03%)</title><rect x="11.4602%" y="917" width="0.0291%" height="15" fill="rgb(238,110,33)" fg:x="394" fg:w="1"/><text x="11.7102%" y="927.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="11.5765%" y="853" width="0.0291%" height="15" fill="rgb(233,195,10)" fg:x="398" fg:w="1"/><text x="11.8265%" y="863.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.09%)</title><rect x="11.5474%" y="869" width="0.0873%" height="15" fill="rgb(254,105,3)" fg:x="397" fg:w="3"/><text x="11.7974%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="11.6056%" y="853" width="0.0291%" height="15" fill="rgb(221,225,9)" fg:x="399" fg:w="1"/><text x="11.8556%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="11.6056%" y="837" width="0.0291%" height="15" fill="rgb(224,227,45)" fg:x="399" fg:w="1"/><text x="11.8556%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="11.6056%" y="821" width="0.0291%" height="15" fill="rgb(229,198,43)" fg:x="399" fg:w="1"/><text x="11.8556%" y="831.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as serde_v8::magic::transl8::FromV8&gt;::from_v8 (1 samples, 0.03%)</title><rect x="11.6347%" y="869" width="0.0291%" height="15" fill="rgb(206,209,35)" fg:x="400" fg:w="1"/><text x="11.8847%" y="879.50"></text></g><g><title>deno`&lt;serde_v8::magic::v8slice::V8Slice as serde_v8::magic::transl8::FromV8&gt;::from_v8 (1 samples, 0.03%)</title><rect x="11.6347%" y="853" width="0.0291%" height="15" fill="rgb(245,195,53)" fg:x="400" fg:w="1"/><text x="11.8847%" y="863.50"></text></g><g><title>deno`serde_v8::magic::v8slice::to_ranged_buffer (1 samples, 0.03%)</title><rect x="11.6347%" y="837" width="0.0291%" height="15" fill="rgb(240,92,26)" fg:x="400" fg:w="1"/><text x="11.8847%" y="847.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="11.6347%" y="821" width="0.0291%" height="15" fill="rgb(207,40,23)" fg:x="400" fg:w="1"/><text x="11.8847%" y="831.50"></text></g><g><title>deno`serde_v8::de::to_utf8 (1 samples, 0.03%)</title><rect x="11.6638%" y="869" width="0.0291%" height="15" fill="rgb(223,111,35)" fg:x="401" fg:w="1"/><text x="11.9138%" y="879.50"></text></g><g><title>deno`v8::string::_&lt;impl v8::data::String&gt;::write_utf8_uninit (1 samples, 0.03%)</title><rect x="11.6638%" y="853" width="0.0291%" height="15" fill="rgb(229,147,28)" fg:x="401" fg:w="1"/><text x="11.9138%" y="863.50"></text></g><g><title>deno`v8::String::WriteUtf8 (1 samples, 0.03%)</title><rect x="11.6638%" y="837" width="0.0291%" height="15" fill="rgb(211,29,28)" fg:x="401" fg:w="1"/><text x="11.9138%" y="847.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_callback_scope_data (1 samples, 0.03%)</title><rect x="11.6928%" y="869" width="0.0291%" height="15" fill="rgb(228,72,33)" fg:x="402" fg:w="1"/><text x="11.9428%" y="879.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (1 samples, 0.03%)</title><rect x="11.7219%" y="869" width="0.0291%" height="15" fill="rgb(205,214,31)" fg:x="403" fg:w="1"/><text x="11.9719%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="11.7801%" y="853" width="0.0291%" height="15" fill="rgb(224,111,15)" fg:x="405" fg:w="1"/><text x="12.0301%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="11.7801%" y="837" width="0.0291%" height="15" fill="rgb(253,21,26)" fg:x="405" fg:w="1"/><text x="12.0301%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.06%)</title><rect x="11.8092%" y="821" width="0.0582%" height="15" fill="rgb(245,139,43)" fg:x="406" fg:w="2"/><text x="12.0592%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.15%)</title><rect x="11.7510%" y="869" width="0.1454%" height="15" fill="rgb(252,170,7)" fg:x="404" fg:w="5"/><text x="12.0010%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.09%)</title><rect x="11.8092%" y="853" width="0.0873%" height="15" fill="rgb(231,118,14)" fg:x="406" fg:w="3"/><text x="12.0592%" y="863.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.09%)</title><rect x="11.8092%" y="837" width="0.0873%" height="15" fill="rgb(238,83,0)" fg:x="406" fg:w="3"/><text x="12.0592%" y="847.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="11.8674%" y="821" width="0.0291%" height="15" fill="rgb(221,39,39)" fg:x="408" fg:w="1"/><text x="12.1174%" y="831.50"></text></g><g><title>0x110011148 (15 samples, 0.44%)</title><rect x="11.4892%" y="917" width="0.4363%" height="15" fill="rgb(222,119,46)" fg:x="395" fg:w="15"/><text x="11.7392%" y="927.50"></text></g><g><title>deno`Builtins_CallApiCallback (15 samples, 0.44%)</title><rect x="11.4892%" y="901" width="0.4363%" height="15" fill="rgb(222,165,49)" fg:x="395" fg:w="15"/><text x="11.7392%" y="911.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (15 samples, 0.44%)</title><rect x="11.4892%" y="885" width="0.4363%" height="15" fill="rgb(219,113,52)" fg:x="395" fg:w="15"/><text x="11.7392%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="11.8965%" y="869" width="0.0291%" height="15" fill="rgb(214,7,15)" fg:x="409" fg:w="1"/><text x="12.1465%" y="879.50"></text></g><g><title>0x1100113d4 (2 samples, 0.06%)</title><rect x="11.9255%" y="917" width="0.0582%" height="15" fill="rgb(235,32,4)" fg:x="410" fg:w="2"/><text x="12.1755%" y="927.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (2 samples, 0.06%)</title><rect x="11.9255%" y="901" width="0.0582%" height="15" fill="rgb(238,90,54)" fg:x="410" fg:w="2"/><text x="12.1755%" y="911.50"></text></g><g><title>0x1100114e8 (1 samples, 0.03%)</title><rect x="11.9837%" y="917" width="0.0291%" height="15" fill="rgb(213,208,19)" fg:x="412" fg:w="1"/><text x="12.2337%" y="927.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (1 samples, 0.03%)</title><rect x="11.9837%" y="901" width="0.0291%" height="15" fill="rgb(233,156,4)" fg:x="412" fg:w="1"/><text x="12.2337%" y="911.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (1 samples, 0.03%)</title><rect x="11.9837%" y="885" width="0.0291%" height="15" fill="rgb(207,194,5)" fg:x="412" fg:w="1"/><text x="12.2337%" y="895.50"></text></g><g><title>0x110011600 (2 samples, 0.06%)</title><rect x="12.0128%" y="917" width="0.0582%" height="15" fill="rgb(206,111,30)" fg:x="413" fg:w="2"/><text x="12.2628%" y="927.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.06%)</title><rect x="12.0128%" y="901" width="0.0582%" height="15" fill="rgb(243,70,54)" fg:x="413" fg:w="2"/><text x="12.2628%" y="911.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.06%)</title><rect x="12.0128%" y="885" width="0.0582%" height="15" fill="rgb(242,28,8)" fg:x="413" fg:w="2"/><text x="12.2628%" y="895.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.06%)</title><rect x="12.0128%" y="869" width="0.0582%" height="15" fill="rgb(219,106,18)" fg:x="413" fg:w="2"/><text x="12.2628%" y="879.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.06%)</title><rect x="12.0128%" y="853" width="0.0582%" height="15" fill="rgb(244,222,10)" fg:x="413" fg:w="2"/><text x="12.2628%" y="863.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.06%)</title><rect x="12.0128%" y="837" width="0.0582%" height="15" fill="rgb(236,179,52)" fg:x="413" fg:w="2"/><text x="12.2628%" y="847.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.06%)</title><rect x="12.0128%" y="821" width="0.0582%" height="15" fill="rgb(213,23,39)" fg:x="413" fg:w="2"/><text x="12.2628%" y="831.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.06%)</title><rect x="12.0128%" y="805" width="0.0582%" height="15" fill="rgb(238,48,10)" fg:x="413" fg:w="2"/><text x="12.2628%" y="815.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.06%)</title><rect x="12.0128%" y="789" width="0.0582%" height="15" fill="rgb(251,196,23)" fg:x="413" fg:w="2"/><text x="12.2628%" y="799.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.06%)</title><rect x="12.0128%" y="773" width="0.0582%" height="15" fill="rgb(250,152,24)" fg:x="413" fg:w="2"/><text x="12.2628%" y="783.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.06%)</title><rect x="12.0128%" y="757" width="0.0582%" height="15" fill="rgb(209,150,17)" fg:x="413" fg:w="2"/><text x="12.2628%" y="767.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.06%)</title><rect x="12.0128%" y="741" width="0.0582%" height="15" fill="rgb(234,202,34)" fg:x="413" fg:w="2"/><text x="12.2628%" y="751.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.06%)</title><rect x="12.0128%" y="725" width="0.0582%" height="15" fill="rgb(253,148,53)" fg:x="413" fg:w="2"/><text x="12.2628%" y="735.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (2 samples, 0.06%)</title><rect x="12.0128%" y="709" width="0.0582%" height="15" fill="rgb(218,129,16)" fg:x="413" fg:w="2"/><text x="12.2628%" y="719.50"></text></g><g><title>0x110011afc (1 samples, 0.03%)</title><rect x="12.0710%" y="917" width="0.0291%" height="15" fill="rgb(216,85,19)" fg:x="415" fg:w="1"/><text x="12.3210%" y="927.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (1 samples, 0.03%)</title><rect x="12.0710%" y="901" width="0.0291%" height="15" fill="rgb(235,228,7)" fg:x="415" fg:w="1"/><text x="12.3210%" y="911.50"></text></g><g><title>0x110017aa8 (1 samples, 0.03%)</title><rect x="12.1001%" y="917" width="0.0291%" height="15" fill="rgb(245,175,0)" fg:x="416" fg:w="1"/><text x="12.3501%" y="927.50"></text></g><g><title>deno`Builtins_CreateTypedArray (1 samples, 0.03%)</title><rect x="12.1001%" y="901" width="0.0291%" height="15" fill="rgb(208,168,36)" fg:x="416" fg:w="1"/><text x="12.3501%" y="911.50"></text></g><g><title>deno`Builtins_JSBuiltinsConstructStub (1 samples, 0.03%)</title><rect x="12.1001%" y="885" width="0.0291%" height="15" fill="rgb(246,171,24)" fg:x="416" fg:w="1"/><text x="12.3501%" y="895.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.03%)</title><rect x="12.1001%" y="869" width="0.0291%" height="15" fill="rgb(215,142,24)" fg:x="416" fg:w="1"/><text x="12.3501%" y="879.50"></text></g><g><title>deno`v8::internal::Builtin_ArrayBufferConstructor (1 samples, 0.03%)</title><rect x="12.1001%" y="853" width="0.0291%" height="15" fill="rgb(250,187,7)" fg:x="416" fg:w="1"/><text x="12.3501%" y="863.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::ConstructBuffer(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::JSReceiver&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="12.1001%" y="837" width="0.0291%" height="15" fill="rgb(228,66,33)" fg:x="416" fg:w="1"/><text x="12.3501%" y="847.50"></text></g><g><title>deno`operator new(unsigned long) (1 samples, 0.03%)</title><rect x="12.1001%" y="821" width="0.0291%" height="15" fill="rgb(234,215,21)" fg:x="416" fg:w="1"/><text x="12.3501%" y="831.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="12.1001%" y="805" width="0.0291%" height="15" fill="rgb(222,191,20)" fg:x="416" fg:w="1"/><text x="12.3501%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="12.1001%" y="789" width="0.0291%" height="15" fill="rgb(245,79,54)" fg:x="416" fg:w="1"/><text x="12.3501%" y="799.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.03%)</title><rect x="12.1291%" y="853" width="0.0291%" height="15" fill="rgb(240,10,37)" fg:x="417" fg:w="1"/><text x="12.3791%" y="863.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (3 samples, 0.09%)</title><rect x="12.1291%" y="869" width="0.0873%" height="15" fill="rgb(214,192,32)" fg:x="417" fg:w="3"/><text x="12.3791%" y="879.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="12.1582%" y="853" width="0.0582%" height="15" fill="rgb(209,36,54)" fg:x="418" fg:w="2"/><text x="12.4082%" y="863.50"></text></g><g><title>0x11001234c (4 samples, 0.12%)</title><rect x="12.1291%" y="901" width="0.1163%" height="15" fill="rgb(220,10,11)" fg:x="417" fg:w="4"/><text x="12.3791%" y="911.50"></text></g><g><title>deno`Builtins_CallApiCallback (4 samples, 0.12%)</title><rect x="12.1291%" y="885" width="0.1163%" height="15" fill="rgb(221,106,17)" fg:x="417" fg:w="4"/><text x="12.3791%" y="895.50"></text></g><g><title>deno`v8__FunctionCallbackInfo__GetArgument (1 samples, 0.03%)</title><rect x="12.2164%" y="869" width="0.0291%" height="15" fill="rgb(251,142,44)" fg:x="420" fg:w="1"/><text x="12.4664%" y="879.50"></text></g><g><title>0x110017aec (5 samples, 0.15%)</title><rect x="12.1291%" y="917" width="0.1454%" height="15" fill="rgb(238,13,15)" fg:x="417" fg:w="5"/><text x="12.3791%" y="927.50"></text></g><g><title>0x11001247c (1 samples, 0.03%)</title><rect x="12.2455%" y="901" width="0.0291%" height="15" fill="rgb(208,107,27)" fg:x="421" fg:w="1"/><text x="12.4955%" y="911.50"></text></g><g><title>0x110016fe4 (41 samples, 1.19%)</title><rect x="11.1111%" y="933" width="1.1926%" height="15" fill="rgb(205,136,37)" fg:x="382" fg:w="41"/><text x="11.3611%" y="943.50"></text></g><g><title>deno`Builtins_CallApiCallback (1 samples, 0.03%)</title><rect x="12.2746%" y="917" width="0.0291%" height="15" fill="rgb(250,205,27)" fg:x="422" fg:w="1"/><text x="12.5246%" y="927.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (1 samples, 0.03%)</title><rect x="12.3328%" y="709" width="0.0291%" height="15" fill="rgb(210,80,43)" fg:x="424" fg:w="1"/><text x="12.5828%" y="719.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (1 samples, 0.03%)</title><rect x="12.3328%" y="693" width="0.0291%" height="15" fill="rgb(247,160,36)" fg:x="424" fg:w="1"/><text x="12.5828%" y="703.50"></text></g><g><title>0x1100170b8 (3 samples, 0.09%)</title><rect x="12.3037%" y="933" width="0.0873%" height="15" fill="rgb(234,13,49)" fg:x="423" fg:w="3"/><text x="12.5537%" y="943.50"></text></g><g><title>deno`Builtins_PromiseAll (3 samples, 0.09%)</title><rect x="12.3037%" y="917" width="0.0873%" height="15" fill="rgb(234,122,0)" fg:x="423" fg:w="3"/><text x="12.5537%" y="927.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.06%)</title><rect x="12.3328%" y="901" width="0.0582%" height="15" fill="rgb(207,146,38)" fg:x="424" fg:w="2"/><text x="12.5828%" y="911.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.06%)</title><rect x="12.3328%" y="885" width="0.0582%" height="15" fill="rgb(207,177,25)" fg:x="424" fg:w="2"/><text x="12.5828%" y="895.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.06%)</title><rect x="12.3328%" y="869" width="0.0582%" height="15" fill="rgb(211,178,42)" fg:x="424" fg:w="2"/><text x="12.5828%" y="879.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.06%)</title><rect x="12.3328%" y="853" width="0.0582%" height="15" fill="rgb(230,69,54)" fg:x="424" fg:w="2"/><text x="12.5828%" y="863.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.06%)</title><rect x="12.3328%" y="837" width="0.0582%" height="15" fill="rgb(214,135,41)" fg:x="424" fg:w="2"/><text x="12.5828%" y="847.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.06%)</title><rect x="12.3328%" y="821" width="0.0582%" height="15" fill="rgb(237,67,25)" fg:x="424" fg:w="2"/><text x="12.5828%" y="831.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.06%)</title><rect x="12.3328%" y="805" width="0.0582%" height="15" fill="rgb(222,189,50)" fg:x="424" fg:w="2"/><text x="12.5828%" y="815.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.06%)</title><rect x="12.3328%" y="789" width="0.0582%" height="15" fill="rgb(245,148,34)" fg:x="424" fg:w="2"/><text x="12.5828%" y="799.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.06%)</title><rect x="12.3328%" y="773" width="0.0582%" height="15" fill="rgb(222,29,6)" fg:x="424" fg:w="2"/><text x="12.5828%" y="783.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.06%)</title><rect x="12.3328%" y="757" width="0.0582%" height="15" fill="rgb(221,189,43)" fg:x="424" fg:w="2"/><text x="12.5828%" y="767.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.06%)</title><rect x="12.3328%" y="741" width="0.0582%" height="15" fill="rgb(207,36,27)" fg:x="424" fg:w="2"/><text x="12.5828%" y="751.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (2 samples, 0.06%)</title><rect x="12.3328%" y="725" width="0.0582%" height="15" fill="rgb(217,90,24)" fg:x="424" fg:w="2"/><text x="12.5828%" y="735.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (1 samples, 0.03%)</title><rect x="12.3618%" y="709" width="0.0291%" height="15" fill="rgb(224,66,35)" fg:x="425" fg:w="1"/><text x="12.6118%" y="719.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="12.3618%" y="693" width="0.0291%" height="15" fill="rgb(221,13,50)" fg:x="425" fg:w="1"/><text x="12.6118%" y="703.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (112 samples, 3.26%)</title><rect x="9.1623%" y="965" width="3.2577%" height="15" fill="rgb(236,68,49)" fg:x="315" fg:w="112"/><text x="9.4123%" y="975.50">den..</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (112 samples, 3.26%)</title><rect x="9.1623%" y="949" width="3.2577%" height="15" fill="rgb(229,146,28)" fg:x="315" fg:w="112"/><text x="9.4123%" y="959.50">den..</text></g><g><title>deno`Builtins_LoadIC (1 samples, 0.03%)</title><rect x="12.3909%" y="933" width="0.0291%" height="15" fill="rgb(225,31,38)" fg:x="426" fg:w="1"/><text x="12.6409%" y="943.50"></text></g><g><title>deno`Builtins_PromiseAllResolveElementClosure (3 samples, 0.09%)</title><rect x="12.4200%" y="965" width="0.0873%" height="15" fill="rgb(250,208,3)" fg:x="427" fg:w="3"/><text x="12.6700%" y="975.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.03%)</title><rect x="12.6818%" y="901" width="0.0291%" height="15" fill="rgb(246,54,23)" fg:x="436" fg:w="1"/><text x="12.9318%" y="911.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.03%)</title><rect x="12.6818%" y="885" width="0.0291%" height="15" fill="rgb(243,76,11)" fg:x="436" fg:w="1"/><text x="12.9318%" y="895.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.03%)</title><rect x="12.6818%" y="869" width="0.0291%" height="15" fill="rgb(245,21,50)" fg:x="436" fg:w="1"/><text x="12.9318%" y="879.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="12.6818%" y="853" width="0.0291%" height="15" fill="rgb(228,9,43)" fg:x="436" fg:w="1"/><text x="12.9318%" y="863.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="12.6818%" y="837" width="0.0291%" height="15" fill="rgb(208,100,47)" fg:x="436" fg:w="1"/><text x="12.9318%" y="847.50"></text></g><g><title>deno`v8::internal::parsing::ParseFunction(v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="12.6818%" y="821" width="0.0291%" height="15" fill="rgb(232,26,8)" fg:x="436" fg:w="1"/><text x="12.9318%" y="831.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::Isolate*, v8::internal::ParseInfo*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="12.6818%" y="805" width="0.0291%" height="15" fill="rgb(216,166,38)" fg:x="436" fg:w="1"/><text x="12.9318%" y="815.50"></text></g><g><title>deno`v8::internal::Parser::DoParseFunction (1 samples, 0.03%)</title><rect x="12.6818%" y="789" width="0.0291%" height="15" fill="rgb(251,202,51)" fg:x="436" fg:w="1"/><text x="12.9318%" y="799.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunctionLiteral(v8::internal::AstRawString const*, v8::internal::Scanner::Location, v8::internal::FunctionNameValidity, v8::internal::FunctionKind, int, v8::internal::FunctionSyntaxKind, v8::internal::LanguageMode, v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="773" width="0.0291%" height="15" fill="rgb(254,216,34)" fg:x="436" fg:w="1"/><text x="12.9318%" y="783.50"></text></g><g><title>deno`v8::internal::Parser::ParseFunction(v8::internal::ScopedList&lt;v8::internal::Statement*, void*&gt;*, v8::internal::AstRawString const*, int, v8::internal::FunctionKind, v8::internal::FunctionSyntaxKind, v8::internal::DeclarationScope*, int*, int*, bool*, int*, int*, v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="757" width="0.0291%" height="15" fill="rgb(251,32,27)" fg:x="436" fg:w="1"/><text x="12.9318%" y="767.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseFunctionBody(v8::internal::ScopedList&lt;v8::internal::Statement*, void*&gt;*, v8::internal::AstRawString const*, int, v8::internal::ParserFormalParameters const&amp;, v8::internal::FunctionKind, v8::internal::FunctionSyntaxKind, v8::internal::ParserBase (1 samples, 0.03%)</title><rect x="12.6818%" y="741" width="0.0291%" height="15" fill="rgb(208,127,28)" fg:x="436" fg:w="1"/><text x="12.9318%" y="751.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseIfStatement(v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="725" width="0.0291%" height="15" fill="rgb(224,137,22)" fg:x="436" fg:w="1"/><text x="12.9318%" y="735.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseBlock(v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="709" width="0.0291%" height="15" fill="rgb(254,70,32)" fg:x="436" fg:w="1"/><text x="12.9318%" y="719.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseForStatement(v8::internal::ZoneList&lt;v8::internal::AstRawString const*&gt;*, v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="693" width="0.0291%" height="15" fill="rgb(229,75,37)" fg:x="436" fg:w="1"/><text x="12.9318%" y="703.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseStandardForLoopWithLexicalDeclarations(int, v8::internal::Statement*, v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ForInfo*, v8::internal::ZoneList&lt;v8::internal::AstRawString const*&gt;*, v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="677" width="0.0291%" height="15" fill="rgb(252,64,23)" fg:x="436" fg:w="1"/><text x="12.9318%" y="687.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseStandardForLoop(int, v8::internal::ZoneList&lt;v8::internal::AstRawString const*&gt;*, v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="661" width="0.0291%" height="15" fill="rgb(232,162,48)" fg:x="436" fg:w="1"/><text x="12.9318%" y="671.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseBlock(v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="645" width="0.0291%" height="15" fill="rgb(246,160,12)" fg:x="436" fg:w="1"/><text x="12.9318%" y="655.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseIfStatement(v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="629" width="0.0291%" height="15" fill="rgb(247,166,0)" fg:x="436" fg:w="1"/><text x="12.9318%" y="639.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseBlock(v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="613" width="0.0291%" height="15" fill="rgb(249,219,21)" fg:x="436" fg:w="1"/><text x="12.9318%" y="623.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseIfStatement(v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="597" width="0.0291%" height="15" fill="rgb(205,209,3)" fg:x="436" fg:w="1"/><text x="12.9318%" y="607.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseBlock(v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="581" width="0.0291%" height="15" fill="rgb(243,44,1)" fg:x="436" fg:w="1"/><text x="12.9318%" y="591.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseExpressionOrLabelledStatement(v8::internal::ZoneList&lt;v8::internal::AstRawString const*&gt;*, v8::internal::ZoneList (1 samples, 0.03%)</title><rect x="12.6818%" y="565" width="0.0291%" height="15" fill="rgb(206,159,16)" fg:x="436" fg:w="1"/><text x="12.9318%" y="575.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseExpressionCoverGrammar (1 samples, 0.03%)</title><rect x="12.6818%" y="549" width="0.0291%" height="15" fill="rgb(244,77,30)" fg:x="436" fg:w="1"/><text x="12.9318%" y="559.50"></text></g><g><title>deno`v8::internal::ParserBase&lt;v8::internal::Parser&gt;::ParseAssignmentExpressionCoverGrammar (1 samples, 0.03%)</title><rect x="12.6818%" y="533" width="0.0291%" height="15" fill="rgb(218,69,12)" fg:x="436" fg:w="1"/><text x="12.9318%" y="543.50"></text></g><g><title>0x11000c640 (2 samples, 0.06%)</title><rect x="12.6818%" y="933" width="0.0582%" height="15" fill="rgb(212,87,7)" fg:x="436" fg:w="2"/><text x="12.9318%" y="943.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.06%)</title><rect x="12.6818%" y="917" width="0.0582%" height="15" fill="rgb(245,114,25)" fg:x="436" fg:w="2"/><text x="12.9318%" y="927.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="12.7109%" y="901" width="0.0291%" height="15" fill="rgb(210,61,42)" fg:x="437" fg:w="1"/><text x="12.9609%" y="911.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="12.7109%" y="885" width="0.0291%" height="15" fill="rgb(211,52,33)" fg:x="437" fg:w="1"/><text x="12.9609%" y="895.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.03%)</title><rect x="12.7109%" y="869" width="0.0291%" height="15" fill="rgb(234,58,33)" fg:x="437" fg:w="1"/><text x="12.9609%" y="879.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (1 samples, 0.03%)</title><rect x="12.7109%" y="853" width="0.0291%" height="15" fill="rgb(220,115,36)" fg:x="437" fg:w="1"/><text x="12.9609%" y="863.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="12.7109%" y="837" width="0.0291%" height="15" fill="rgb(243,153,54)" fg:x="437" fg:w="1"/><text x="12.9609%" y="847.50"></text></g><g><title>deno`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="12.7109%" y="821" width="0.0291%" height="15" fill="rgb(251,47,18)" fg:x="437" fg:w="1"/><text x="12.9609%" y="831.50"></text></g><g><title>0x11000da30 (1 samples, 0.03%)</title><rect x="12.7400%" y="933" width="0.0291%" height="15" fill="rgb(242,102,42)" fg:x="438" fg:w="1"/><text x="12.9900%" y="943.50"></text></g><g><title>deno`Builtins_FulfillPromise (1 samples, 0.03%)</title><rect x="12.7400%" y="917" width="0.0291%" height="15" fill="rgb(234,31,38)" fg:x="438" fg:w="1"/><text x="12.9900%" y="927.50"></text></g><g><title>0x110011eb0 (1 samples, 0.03%)</title><rect x="12.7691%" y="933" width="0.0291%" height="15" fill="rgb(221,117,51)" fg:x="439" fg:w="1"/><text x="13.0191%" y="943.50"></text></g><g><title>0x110012868 (1 samples, 0.03%)</title><rect x="12.7981%" y="933" width="0.0291%" height="15" fill="rgb(212,20,18)" fg:x="440" fg:w="1"/><text x="13.0481%" y="943.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (2 samples, 0.06%)</title><rect x="12.8272%" y="917" width="0.0582%" height="15" fill="rgb(245,133,36)" fg:x="441" fg:w="2"/><text x="13.0772%" y="927.50"></text></g><g><title>0x110012870 (8 samples, 0.23%)</title><rect x="12.8272%" y="933" width="0.2327%" height="15" fill="rgb(212,6,19)" fg:x="441" fg:w="8"/><text x="13.0772%" y="943.50"></text></g><g><title>deno`Builtins_FulfillPromise (6 samples, 0.17%)</title><rect x="12.8854%" y="917" width="0.1745%" height="15" fill="rgb(218,1,36)" fg:x="443" fg:w="6"/><text x="13.1354%" y="927.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (20 samples, 0.58%)</title><rect x="12.5073%" y="949" width="0.5817%" height="15" fill="rgb(246,84,54)" fg:x="430" fg:w="20"/><text x="12.7573%" y="959.50"></text></g><g><title>deno`Builtins_DeoptimizationEntry_Eager (1 samples, 0.03%)</title><rect x="13.0599%" y="933" width="0.0291%" height="15" fill="rgb(242,110,6)" fg:x="449" fg:w="1"/><text x="13.3099%" y="943.50"></text></g><g><title>deno`v8::internal::Deoptimizer::New (1 samples, 0.03%)</title><rect x="13.0599%" y="917" width="0.0291%" height="15" fill="rgb(214,47,5)" fg:x="449" fg:w="1"/><text x="13.3099%" y="927.50"></text></g><g><title>deno`v8::internal::Malloced::operator new (1 samples, 0.03%)</title><rect x="13.0599%" y="901" width="0.0291%" height="15" fill="rgb(218,159,25)" fg:x="449" fg:w="1"/><text x="13.3099%" y="911.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="13.0599%" y="885" width="0.0291%" height="15" fill="rgb(215,211,28)" fg:x="449" fg:w="1"/><text x="13.3099%" y="895.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="13.0599%" y="869" width="0.0291%" height="15" fill="rgb(238,59,32)" fg:x="449" fg:w="1"/><text x="13.3099%" y="879.50"></text></g><g><title>deno`Builtins_PromiseAllResolveElementClosure (2 samples, 0.06%)</title><rect x="13.0890%" y="949" width="0.0582%" height="15" fill="rgb(226,82,3)" fg:x="450" fg:w="2"/><text x="13.3390%" y="959.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (228 samples, 6.63%)</title><rect x="6.5445%" y="1109" width="6.6318%" height="15" fill="rgb(240,164,32)" fg:x="225" fg:w="228"/><text x="6.7945%" y="1119.50">deno`v8::..</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (168 samples, 4.89%)</title><rect x="8.2897%" y="1093" width="4.8866%" height="15" fill="rgb(232,46,7)" fg:x="285" fg:w="168"/><text x="8.5397%" y="1103.50">deno`v..</text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (168 samples, 4.89%)</title><rect x="8.2897%" y="1077" width="4.8866%" height="15" fill="rgb(229,129,53)" fg:x="285" fg:w="168"/><text x="8.5397%" y="1087.50">deno`v..</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (167 samples, 4.86%)</title><rect x="8.3188%" y="1061" width="4.8575%" height="15" fill="rgb(234,188,29)" fg:x="286" fg:w="167"/><text x="8.5688%" y="1071.50">deno`v..</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks (162 samples, 4.71%)</title><rect x="8.4642%" y="1045" width="4.7120%" height="15" fill="rgb(246,141,4)" fg:x="291" fg:w="162"/><text x="8.7142%" y="1055.50">deno`..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (161 samples, 4.68%)</title><rect x="8.4933%" y="1029" width="4.6830%" height="15" fill="rgb(229,23,39)" fg:x="292" fg:w="161"/><text x="8.7433%" y="1039.50">deno`..</text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (161 samples, 4.68%)</title><rect x="8.4933%" y="1013" width="4.6830%" height="15" fill="rgb(206,12,3)" fg:x="292" fg:w="161"/><text x="8.7433%" y="1023.50">deno`..</text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (161 samples, 4.68%)</title><rect x="8.4933%" y="997" width="4.6830%" height="15" fill="rgb(252,226,20)" fg:x="292" fg:w="161"/><text x="8.7433%" y="1007.50">deno`..</text></g><g><title>deno`Builtins_RunMicrotasks (160 samples, 4.65%)</title><rect x="8.5224%" y="981" width="4.6539%" height="15" fill="rgb(216,123,35)" fg:x="293" fg:w="160"/><text x="8.7724%" y="991.50">deno`..</text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (23 samples, 0.67%)</title><rect x="12.5073%" y="965" width="0.6690%" height="15" fill="rgb(212,68,40)" fg:x="430" fg:w="23"/><text x="12.7573%" y="975.50"></text></g><g><title>deno`Builtins_ResolvePromise (1 samples, 0.03%)</title><rect x="13.1472%" y="949" width="0.0291%" height="15" fill="rgb(254,125,32)" fg:x="452" fg:w="1"/><text x="13.3972%" y="959.50"></text></g><g><title>deno`Builtins_FulfillPromise (1 samples, 0.03%)</title><rect x="13.1472%" y="933" width="0.0291%" height="15" fill="rgb(253,97,22)" fg:x="452" fg:w="1"/><text x="13.3972%" y="943.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (1 samples, 0.03%)</title><rect x="13.1763%" y="1109" width="0.0291%" height="15" fill="rgb(241,101,14)" fg:x="453" fg:w="1"/><text x="13.4263%" y="1119.50"></text></g><g><title>deno`v8::base::Mutex::Lock (1 samples, 0.03%)</title><rect x="13.2054%" y="1109" width="0.0291%" height="15" fill="rgb(238,103,29)" fg:x="454" fg:w="1"/><text x="13.4554%" y="1119.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (1 samples, 0.03%)</title><rect x="13.2344%" y="1109" width="0.0291%" height="15" fill="rgb(233,195,47)" fg:x="455" fg:w="1"/><text x="13.4844%" y="1119.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (1 samples, 0.03%)</title><rect x="13.2635%" y="1109" width="0.0291%" height="15" fill="rgb(246,218,30)" fg:x="456" fg:w="1"/><text x="13.5135%" y="1119.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (5 samples, 0.15%)</title><rect x="13.2926%" y="1109" width="0.1454%" height="15" fill="rgb(219,145,47)" fg:x="457" fg:w="5"/><text x="13.5426%" y="1119.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (2 samples, 0.06%)</title><rect x="13.4380%" y="1109" width="0.0582%" height="15" fill="rgb(243,12,26)" fg:x="462" fg:w="2"/><text x="13.6880%" y="1119.50"></text></g><g><title>deno`v8::internal::TimerEventScope&lt;v8::internal::TimerEventExecute&gt;::LogTimerEvent (2 samples, 0.06%)</title><rect x="13.4962%" y="1109" width="0.0582%" height="15" fill="rgb(214,87,16)" fg:x="464" fg:w="2"/><text x="13.7462%" y="1119.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (1 samples, 0.03%)</title><rect x="13.5544%" y="1109" width="0.0291%" height="15" fill="rgb(208,99,42)" fg:x="466" fg:w="1"/><text x="13.8044%" y="1119.50"></text></g><g><title>deno`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.03%)</title><rect x="13.5835%" y="1093" width="0.0291%" height="15" fill="rgb(253,99,2)" fg:x="467" fg:w="1"/><text x="13.8335%" y="1103.50"></text></g><g><title>deno`v8::internal::EvacuateNewSpacePageVisitor&lt;(v8::internal::PageEvacuationMode)1&gt;::Visit (1 samples, 0.03%)</title><rect x="13.6126%" y="869" width="0.0291%" height="15" fill="rgb(220,168,23)" fg:x="468" fg:w="1"/><text x="13.8626%" y="879.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::RecordMigratedSlotVisitor&gt; (1 samples, 0.03%)</title><rect x="13.6126%" y="853" width="0.0291%" height="15" fill="rgb(242,38,24)" fg:x="468" fg:w="1"/><text x="13.8626%" y="863.50"></text></g><g><title>deno`v8::internal::Heap::FinalizeIncrementalMarkingIfComplete (2 samples, 0.06%)</title><rect x="13.6126%" y="1077" width="0.0582%" height="15" fill="rgb(225,182,9)" fg:x="468" fg:w="2"/><text x="13.8626%" y="1087.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.06%)</title><rect x="13.6126%" y="1061" width="0.0582%" height="15" fill="rgb(243,178,37)" fg:x="468" fg:w="2"/><text x="13.8626%" y="1071.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.06%)</title><rect x="13.6126%" y="1045" width="0.0582%" height="15" fill="rgb(232,139,19)" fg:x="468" fg:w="2"/><text x="13.8626%" y="1055.50"></text></g><g><title>deno`v8::internal::Heap::MarkCompact (2 samples, 0.06%)</title><rect x="13.6126%" y="1029" width="0.0582%" height="15" fill="rgb(225,201,24)" fg:x="468" fg:w="2"/><text x="13.8626%" y="1039.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::CollectGarbage (2 samples, 0.06%)</title><rect x="13.6126%" y="1013" width="0.0582%" height="15" fill="rgb(221,47,46)" fg:x="468" fg:w="2"/><text x="13.8626%" y="1023.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::Evacuate (2 samples, 0.06%)</title><rect x="13.6126%" y="997" width="0.0582%" height="15" fill="rgb(249,23,13)" fg:x="468" fg:w="2"/><text x="13.8626%" y="1007.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::EvacuatePagesInParallel (2 samples, 0.06%)</title><rect x="13.6126%" y="981" width="0.0582%" height="15" fill="rgb(219,9,5)" fg:x="468" fg:w="2"/><text x="13.8626%" y="991.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (2 samples, 0.06%)</title><rect x="13.6126%" y="965" width="0.0582%" height="15" fill="rgb(254,171,16)" fg:x="468" fg:w="2"/><text x="13.8626%" y="975.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (2 samples, 0.06%)</title><rect x="13.6126%" y="949" width="0.0582%" height="15" fill="rgb(230,171,20)" fg:x="468" fg:w="2"/><text x="13.8626%" y="959.50"></text></g><g><title>deno`v8::internal::PageEvacuationJob::Run (2 samples, 0.06%)</title><rect x="13.6126%" y="933" width="0.0582%" height="15" fill="rgb(210,71,41)" fg:x="468" fg:w="2"/><text x="13.8626%" y="943.50"></text></g><g><title>deno`v8::internal::Evacuator::EvacuatePage (2 samples, 0.06%)</title><rect x="13.6126%" y="917" width="0.0582%" height="15" fill="rgb(206,173,20)" fg:x="468" fg:w="2"/><text x="13.8626%" y="927.50"></text></g><g><title>deno`v8::internal::FullEvacuator::RawEvacuatePage (2 samples, 0.06%)</title><rect x="13.6126%" y="901" width="0.0582%" height="15" fill="rgb(233,88,34)" fg:x="468" fg:w="2"/><text x="13.8626%" y="911.50"></text></g><g><title>deno`void v8::internal::LiveObjectVisitor::VisitBlackObjectsNoFail&lt;v8::internal::EvacuateNewSpacePageVisitor&lt;(v8::internal::PageEvacuationMode)1&gt;, v8::internal::NonAtomicMarkingState&gt;(v8::internal::MemoryChunk*, v8::internal::NonAtomicMarkingState*, v8::internal::EvacuateNewSpacePageVisitor&lt; (2 samples, 0.06%)</title><rect x="13.6126%" y="885" width="0.0582%" height="15" fill="rgb(223,209,46)" fg:x="468" fg:w="2"/><text x="13.8626%" y="895.50"></text></g><g><title>deno`v8::internal::LiveObjectRange&lt;(v8::internal::LiveObjectIterationMode)0&gt;::iterator::AdvanceToNextValidObject (1 samples, 0.03%)</title><rect x="13.6417%" y="869" width="0.0291%" height="15" fill="rgb(250,43,18)" fg:x="469" fg:w="1"/><text x="13.8917%" y="879.50"></text></g><g><title>deno`v8::internal::MarkCompactCollector::ProcessMarkingWorklist (3 samples, 0.09%)</title><rect x="13.6707%" y="1045" width="0.0873%" height="15" fill="rgb(208,13,10)" fg:x="470" fg:w="3"/><text x="13.9207%" y="1055.50"></text></g><g><title>deno`void v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt;::RecordSlot&lt;v8::internal::CompressedObjectSlot&gt; (1 samples, 0.03%)</title><rect x="13.7289%" y="1029" width="0.0291%" height="15" fill="rgb(212,200,36)" fg:x="472" fg:w="1"/><text x="13.9789%" y="1039.50"></text></g><g><title>deno`v8::internal::MarkingVisitorBase&lt;v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt;, v8::internal::MarkingState&gt;::VisitMapPointer (1 samples, 0.03%)</title><rect x="13.7580%" y="1045" width="0.0291%" height="15" fill="rgb(225,90,30)" fg:x="473" fg:w="1"/><text x="14.0080%" y="1055.50"></text></g><g><title>deno`v8::internal::IncrementalMarkingJob::Task::RunInternal (7 samples, 0.20%)</title><rect x="13.6126%" y="1093" width="0.2036%" height="15" fill="rgb(236,182,39)" fg:x="468" fg:w="7"/><text x="13.8626%" y="1103.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::AdvanceAndFinalizeIfComplete (5 samples, 0.15%)</title><rect x="13.6707%" y="1077" width="0.1454%" height="15" fill="rgb(212,144,35)" fg:x="470" fg:w="5"/><text x="13.9207%" y="1087.50"></text></g><g><title>deno`v8::internal::IncrementalMarking::Step (5 samples, 0.15%)</title><rect x="13.6707%" y="1061" width="0.1454%" height="15" fill="rgb(228,63,44)" fg:x="470" fg:w="5"/><text x="13.9207%" y="1071.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::MainMarkingVisitor&lt;v8::internal::MarkingState&gt; &gt;(v8::internal::Map, v8::internal::HeapObject, int, int, v8::internal::MainMarkingVisitor (1 samples, 0.03%)</title><rect x="13.7871%" y="1045" width="0.0291%" height="15" fill="rgb(228,109,6)" fg:x="474" fg:w="1"/><text x="14.0371%" y="1055.50"></text></g><g><title>deno`v8::internal::GCTracer::UpdateStatistics (2 samples, 0.06%)</title><rect x="13.8162%" y="1061" width="0.0582%" height="15" fill="rgb(238,117,24)" fg:x="475" fg:w="2"/><text x="14.0662%" y="1071.50"></text></g><g><title>deno`v8::internal::GCTracer::Print (2 samples, 0.06%)</title><rect x="13.8162%" y="1045" width="0.0582%" height="15" fill="rgb(242,26,26)" fg:x="475" fg:w="2"/><text x="14.0662%" y="1055.50"></text></g><g><title>deno`v8::internal::GCTracer::Output (2 samples, 0.06%)</title><rect x="13.8162%" y="1029" width="0.0582%" height="15" fill="rgb(221,92,48)" fg:x="475" fg:w="2"/><text x="14.0662%" y="1039.50"></text></g><g><title>deno`v8::base::OS::VSNPrintF (2 samples, 0.06%)</title><rect x="13.8162%" y="1013" width="0.0582%" height="15" fill="rgb(209,209,32)" fg:x="475" fg:w="2"/><text x="14.0662%" y="1023.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (2 samples, 0.06%)</title><rect x="13.8162%" y="997" width="0.0582%" height="15" fill="rgb(221,70,22)" fg:x="475" fg:w="2"/><text x="14.0662%" y="1007.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (2 samples, 0.06%)</title><rect x="13.8162%" y="981" width="0.0582%" height="15" fill="rgb(248,145,5)" fg:x="475" fg:w="2"/><text x="14.0662%" y="991.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (3 samples, 0.09%)</title><rect x="14.0198%" y="949" width="0.0873%" height="15" fill="rgb(226,116,26)" fg:x="482" fg:w="3"/><text x="14.2698%" y="959.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (1 samples, 0.03%)</title><rect x="14.1070%" y="949" width="0.0291%" height="15" fill="rgb(244,5,17)" fg:x="485" fg:w="1"/><text x="14.3570%" y="959.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="14.1070%" y="933" width="0.0291%" height="15" fill="rgb(252,159,33)" fg:x="485" fg:w="1"/><text x="14.3570%" y="943.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.03%)</title><rect x="14.1070%" y="917" width="0.0291%" height="15" fill="rgb(206,71,0)" fg:x="485" fg:w="1"/><text x="14.3570%" y="927.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (1 samples, 0.03%)</title><rect x="14.1361%" y="949" width="0.0291%" height="15" fill="rgb(233,118,54)" fg:x="486" fg:w="1"/><text x="14.3861%" y="959.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="14.1361%" y="933" width="0.0291%" height="15" fill="rgb(234,83,48)" fg:x="486" fg:w="1"/><text x="14.3861%" y="943.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.03%)</title><rect x="14.1361%" y="917" width="0.0291%" height="15" fill="rgb(228,3,54)" fg:x="486" fg:w="1"/><text x="14.3861%" y="927.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (12 samples, 0.35%)</title><rect x="13.8743%" y="965" width="0.3490%" height="15" fill="rgb(226,155,13)" fg:x="477" fg:w="12"/><text x="14.1243%" y="975.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (2 samples, 0.06%)</title><rect x="14.1652%" y="949" width="0.0582%" height="15" fill="rgb(241,28,37)" fg:x="487" fg:w="2"/><text x="14.4152%" y="959.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.06%)</title><rect x="14.1652%" y="933" width="0.0582%" height="15" fill="rgb(233,93,10)" fg:x="487" fg:w="2"/><text x="14.4152%" y="943.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (2 samples, 0.06%)</title><rect x="14.2234%" y="965" width="0.0582%" height="15" fill="rgb(225,113,19)" fg:x="489" fg:w="2"/><text x="14.4734%" y="975.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (15 samples, 0.44%)</title><rect x="13.8743%" y="981" width="0.4363%" height="15" fill="rgb(241,2,18)" fg:x="477" fg:w="15"/><text x="14.1243%" y="991.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (1 samples, 0.03%)</title><rect x="14.2816%" y="965" width="0.0291%" height="15" fill="rgb(228,207,21)" fg:x="491" fg:w="1"/><text x="14.5316%" y="975.50"></text></g><g><title>deno`v8::internal::ScavengeJob::Task::RunInternal (18 samples, 0.52%)</title><rect x="13.8162%" y="1093" width="0.5236%" height="15" fill="rgb(213,211,35)" fg:x="475" fg:w="18"/><text x="14.0662%" y="1103.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (18 samples, 0.52%)</title><rect x="13.8162%" y="1077" width="0.5236%" height="15" fill="rgb(209,83,10)" fg:x="475" fg:w="18"/><text x="14.0662%" y="1087.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (16 samples, 0.47%)</title><rect x="13.8743%" y="1061" width="0.4654%" height="15" fill="rgb(209,164,1)" fg:x="477" fg:w="16"/><text x="14.1243%" y="1071.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (16 samples, 0.47%)</title><rect x="13.8743%" y="1045" width="0.4654%" height="15" fill="rgb(213,184,43)" fg:x="477" fg:w="16"/><text x="14.1243%" y="1055.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (16 samples, 0.47%)</title><rect x="13.8743%" y="1029" width="0.4654%" height="15" fill="rgb(231,61,34)" fg:x="477" fg:w="16"/><text x="14.1243%" y="1039.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (16 samples, 0.47%)</title><rect x="13.8743%" y="1013" width="0.4654%" height="15" fill="rgb(235,75,3)" fg:x="477" fg:w="16"/><text x="14.1243%" y="1023.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (16 samples, 0.47%)</title><rect x="13.8743%" y="997" width="0.4654%" height="15" fill="rgb(220,106,47)" fg:x="477" fg:w="16"/><text x="14.1243%" y="1007.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::PostTask(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (1 samples, 0.03%)</title><rect x="14.3106%" y="981" width="0.0291%" height="15" fill="rgb(210,196,33)" fg:x="492" fg:w="1"/><text x="14.5606%" y="991.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::Append(std::__1::unique_ptr&lt;v8::Task, std::__1::default_delete (1 samples, 0.03%)</title><rect x="14.3106%" y="965" width="0.0291%" height="15" fill="rgb(229,154,42)" fg:x="492" fg:w="1"/><text x="14.5606%" y="975.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.03%)</title><rect x="14.3106%" y="949" width="0.0291%" height="15" fill="rgb(228,114,26)" fg:x="492" fg:w="1"/><text x="14.5606%" y="959.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (11 samples, 0.32%)</title><rect x="14.3397%" y="1093" width="0.3200%" height="15" fill="rgb(208,144,1)" fg:x="493" fg:w="11"/><text x="14.5897%" y="1103.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::MoveExpiredDelayedTasks(v8::base::LockGuard&lt;v8::base::Mutex,  (11 samples, 0.32%)</title><rect x="14.3397%" y="1077" width="0.3200%" height="15" fill="rgb(239,112,37)" fg:x="493" fg:w="11"/><text x="14.5897%" y="1087.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromDelayedQueueLocked(v8::base::LockGuard&lt;v8::base::Mutex,  (11 samples, 0.32%)</title><rect x="14.3397%" y="1061" width="0.3200%" height="15" fill="rgb(210,96,50)" fg:x="493" fg:w="11"/><text x="14.5897%" y="1071.50"></text></g><g><title>deno`v8::platform::(anonymous namespace)::DefaultTimeFunction (11 samples, 0.32%)</title><rect x="14.3397%" y="1045" width="0.3200%" height="15" fill="rgb(222,178,2)" fg:x="493" fg:w="11"/><text x="14.5897%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (11 samples, 0.32%)</title><rect x="14.3397%" y="1029" width="0.3200%" height="15" fill="rgb(226,74,18)" fg:x="493" fg:w="11"/><text x="14.5897%" y="1039.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (38 samples, 1.11%)</title><rect x="13.5835%" y="1109" width="1.1053%" height="15" fill="rgb(225,67,54)" fg:x="467" fg:w="38"/><text x="13.8335%" y="1119.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="14.6597%" y="1093" width="0.0291%" height="15" fill="rgb(251,92,32)" fg:x="504" fg:w="1"/><text x="14.9097%" y="1103.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (1 samples, 0.03%)</title><rect x="14.6888%" y="1109" width="0.0291%" height="15" fill="rgb(228,149,22)" fg:x="505" fg:w="1"/><text x="14.9388%" y="1119.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (2 samples, 0.06%)</title><rect x="14.7179%" y="1109" width="0.0582%" height="15" fill="rgb(243,54,13)" fg:x="506" fg:w="2"/><text x="14.9679%" y="1119.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (1 samples, 0.03%)</title><rect x="14.7760%" y="1109" width="0.0291%" height="15" fill="rgb(243,180,28)" fg:x="508" fg:w="1"/><text x="15.0260%" y="1119.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (1 samples, 0.03%)</title><rect x="14.7760%" y="1093" width="0.0291%" height="15" fill="rgb(208,167,24)" fg:x="508" fg:w="1"/><text x="15.0260%" y="1103.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (1 samples, 0.03%)</title><rect x="14.8051%" y="1109" width="0.0291%" height="15" fill="rgb(245,73,45)" fg:x="509" fg:w="1"/><text x="15.0551%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`kevent (2 samples, 0.06%)</title><rect x="14.8342%" y="1109" width="0.0582%" height="15" fill="rgb(237,203,48)" fg:x="510" fg:w="2"/><text x="15.0842%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="14.8924%" y="1093" width="0.0291%" height="15" fill="rgb(211,197,16)" fg:x="512" fg:w="1"/><text x="15.1424%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="14.8924%" y="1109" width="0.0582%" height="15" fill="rgb(243,99,51)" fg:x="512" fg:w="2"/><text x="15.1424%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="14.9215%" y="1093" width="0.0291%" height="15" fill="rgb(215,123,29)" fg:x="513" fg:w="1"/><text x="15.1715%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.03%)</title><rect x="14.9215%" y="1077" width="0.0291%" height="15" fill="rgb(239,186,37)" fg:x="513" fg:w="1"/><text x="15.1715%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="14.9215%" y="1061" width="0.0291%" height="15" fill="rgb(252,136,39)" fg:x="513" fg:w="1"/><text x="15.1715%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="14.9506%" y="1109" width="0.0291%" height="15" fill="rgb(223,213,32)" fg:x="514" fg:w="1"/><text x="15.2006%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="14.9796%" y="1109" width="0.0291%" height="15" fill="rgb(233,115,5)" fg:x="515" fg:w="1"/><text x="15.2296%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="15.0669%" y="1093" width="0.0291%" height="15" fill="rgb(207,226,44)" fg:x="518" fg:w="1"/><text x="15.3169%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="15.0960%" y="1093" width="0.0291%" height="15" fill="rgb(208,126,0)" fg:x="519" fg:w="1"/><text x="15.3460%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.23%)</title><rect x="15.0087%" y="1109" width="0.2327%" height="15" fill="rgb(244,66,21)" fg:x="516" fg:w="8"/><text x="15.2587%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.12%)</title><rect x="15.1251%" y="1093" width="0.1163%" height="15" fill="rgb(222,97,12)" fg:x="520" fg:w="4"/><text x="15.3751%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.06%)</title><rect x="15.1832%" y="1077" width="0.0582%" height="15" fill="rgb(219,213,19)" fg:x="522" fg:w="2"/><text x="15.4332%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`tiny_finalize_region (1 samples, 0.03%)</title><rect x="15.4741%" y="1077" width="0.0291%" height="15" fill="rgb(252,169,30)" fg:x="532" fg:w="1"/><text x="15.7241%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="15.4741%" y="1061" width="0.0291%" height="15" fill="rgb(206,32,51)" fg:x="532" fg:w="1"/><text x="15.7241%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1 samples, 0.03%)</title><rect x="15.5032%" y="1077" width="0.0291%" height="15" fill="rgb(250,172,42)" fg:x="533" fg:w="1"/><text x="15.7532%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.09%)</title><rect x="15.5323%" y="1077" width="0.0873%" height="15" fill="rgb(209,34,43)" fg:x="534" fg:w="3"/><text x="15.7823%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="15.6195%" y="1077" width="0.0291%" height="15" fill="rgb(223,11,35)" fg:x="537" fg:w="1"/><text x="15.8695%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.03%)</title><rect x="15.6486%" y="1077" width="0.0291%" height="15" fill="rgb(251,219,26)" fg:x="538" fg:w="1"/><text x="15.8986%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="15.6486%" y="1061" width="0.0291%" height="15" fill="rgb(231,119,3)" fg:x="538" fg:w="1"/><text x="15.8986%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (19 samples, 0.55%)</title><rect x="15.2414%" y="1109" width="0.5526%" height="15" fill="rgb(216,97,11)" fg:x="524" fg:w="19"/><text x="15.4914%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.52%)</title><rect x="15.2705%" y="1093" width="0.5236%" height="15" fill="rgb(223,59,9)" fg:x="525" fg:w="18"/><text x="15.5205%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (4 samples, 0.12%)</title><rect x="15.6777%" y="1077" width="0.1163%" height="15" fill="rgb(233,93,31)" fg:x="539" fg:w="4"/><text x="15.9277%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.12%)</title><rect x="15.6777%" y="1061" width="0.1163%" height="15" fill="rgb(239,81,33)" fg:x="539" fg:w="4"/><text x="15.9277%" y="1071.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="15.7941%" y="1109" width="0.0291%" height="15" fill="rgb(213,120,34)" fg:x="543" fg:w="1"/><text x="16.0441%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="15.8232%" y="1109" width="0.0291%" height="15" fill="rgb(243,49,53)" fg:x="544" fg:w="1"/><text x="16.0732%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.03%)</title><rect x="15.8522%" y="1109" width="0.0291%" height="15" fill="rgb(247,216,33)" fg:x="545" fg:w="1"/><text x="16.1022%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.06%)</title><rect x="15.8813%" y="1109" width="0.0582%" height="15" fill="rgb(226,26,14)" fg:x="546" fg:w="2"/><text x="16.1313%" y="1119.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (496 samples, 14.43%)</title><rect x="1.5416%" y="1125" width="14.4270%" height="15" fill="rgb(215,49,53)" fg:x="53" fg:w="496"/><text x="1.7916%" y="1135.50">deno`deno_core::runtim..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="15.9395%" y="1109" width="0.0291%" height="15" fill="rgb(245,162,40)" fg:x="548" fg:w="1"/><text x="16.1895%" y="1119.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (2 samples, 0.06%)</title><rect x="15.9686%" y="1125" width="0.0582%" height="15" fill="rgb(229,68,17)" fg:x="549" fg:w="2"/><text x="16.2186%" y="1135.50"></text></g><g><title>deno`deno_napi::init::_{{closure}} (1 samples, 0.03%)</title><rect x="16.0268%" y="1125" width="0.0291%" height="15" fill="rgb(213,182,10)" fg:x="551" fg:w="1"/><text x="16.2768%" y="1135.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 0.03%)</title><rect x="16.0558%" y="1125" width="0.0291%" height="15" fill="rgb(245,125,30)" fg:x="552" fg:w="1"/><text x="16.3058%" y="1135.50"></text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (1 samples, 0.03%)</title><rect x="16.0849%" y="1125" width="0.0291%" height="15" fill="rgb(232,202,2)" fg:x="553" fg:w="1"/><text x="16.3349%" y="1135.50"></text></g><g><title>deno`v8::Isolate::PerformMicrotaskCheckpoint (1 samples, 0.03%)</title><rect x="16.1140%" y="1125" width="0.0291%" height="15" fill="rgb(237,140,51)" fg:x="554" fg:w="1"/><text x="16.3640%" y="1135.50"></text></g><g><title>deno`v8::TryCatch::Exception (1 samples, 0.03%)</title><rect x="16.1431%" y="1125" width="0.0291%" height="15" fill="rgb(236,157,25)" fg:x="555" fg:w="1"/><text x="16.3931%" y="1135.50"></text></g><g><title>deno`v8::Value::IsTrue (3 samples, 0.09%)</title><rect x="16.1722%" y="1125" width="0.0873%" height="15" fill="rgb(219,209,0)" fg:x="556" fg:w="3"/><text x="16.4222%" y="1135.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (1 samples, 0.03%)</title><rect x="16.2595%" y="1125" width="0.0291%" height="15" fill="rgb(240,116,54)" fg:x="559" fg:w="1"/><text x="16.5095%" y="1135.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (2 samples, 0.06%)</title><rect x="16.2885%" y="1125" width="0.0582%" height="15" fill="rgb(216,10,36)" fg:x="560" fg:w="2"/><text x="16.5385%" y="1135.50"></text></g><g><title>deno`v8::platform::PumpMessageLoop (3 samples, 0.09%)</title><rect x="16.3467%" y="1125" width="0.0873%" height="15" fill="rgb(222,72,44)" fg:x="562" fg:w="3"/><text x="16.5967%" y="1135.50"></text></g><g><title>deno`v8::scope::data::ScopeData::get_current_context (1 samples, 0.03%)</title><rect x="16.4340%" y="1125" width="0.0291%" height="15" fill="rgb(232,159,9)" fg:x="565" fg:w="1"/><text x="16.6840%" y="1135.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (1 samples, 0.03%)</title><rect x="16.4631%" y="1125" width="0.0291%" height="15" fill="rgb(210,39,32)" fg:x="566" fg:w="1"/><text x="16.7131%" y="1135.50"></text></g><g><title>deno`v8__Data__EQ (1 samples, 0.03%)</title><rect x="16.4921%" y="1125" width="0.0291%" height="15" fill="rgb(216,194,45)" fg:x="567" fg:w="1"/><text x="16.7421%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="16.5212%" y="1125" width="0.0291%" height="15" fill="rgb(218,18,35)" fg:x="568" fg:w="1"/><text x="16.7712%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="16.5503%" y="1125" width="0.0291%" height="15" fill="rgb(207,83,51)" fg:x="569" fg:w="1"/><text x="16.8003%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="16.5794%" y="1125" width="0.0291%" height="15" fill="rgb(225,63,43)" fg:x="570" fg:w="1"/><text x="16.8294%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="16.6085%" y="1125" width="0.0291%" height="15" fill="rgb(207,57,36)" fg:x="571" fg:w="1"/><text x="16.8585%" y="1135.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (547 samples, 15.91%)</title><rect x="0.7853%" y="1141" width="15.9104%" height="15" fill="rgb(216,99,33)" fg:x="27" fg:w="547"/><text x="1.0353%" y="1151.50">deno`&lt;core::future::from..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.06%)</title><rect x="16.6376%" y="1125" width="0.0582%" height="15" fill="rgb(225,42,16)" fg:x="572" fg:w="2"/><text x="16.8876%" y="1135.50"></text></g><g><title>deno`OUTLINED_FUNCTION_25128 (2 samples, 0.06%)</title><rect x="16.6958%" y="1141" width="0.0582%" height="15" fill="rgb(220,201,45)" fg:x="574" fg:w="2"/><text x="16.9458%" y="1151.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (1 samples, 0.03%)</title><rect x="16.7539%" y="1141" width="0.0291%" height="15" fill="rgb(225,33,4)" fg:x="576" fg:w="1"/><text x="17.0039%" y="1151.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="997" width="0.0291%" height="15" fill="rgb(224,33,50)" fg:x="577" fg:w="1"/><text x="17.0330%" y="1007.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="16.7830%" y="981" width="0.0291%" height="15" fill="rgb(246,198,51)" fg:x="577" fg:w="1"/><text x="17.0330%" y="991.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="965" width="0.0291%" height="15" fill="rgb(205,22,4)" fg:x="577" fg:w="1"/><text x="17.0330%" y="975.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="949" width="0.0291%" height="15" fill="rgb(206,3,8)" fg:x="577" fg:w="1"/><text x="17.0330%" y="959.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="933" width="0.0291%" height="15" fill="rgb(251,23,15)" fg:x="577" fg:w="1"/><text x="17.0330%" y="943.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="16.7830%" y="917" width="0.0291%" height="15" fill="rgb(252,88,28)" fg:x="577" fg:w="1"/><text x="17.0330%" y="927.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="901" width="0.0291%" height="15" fill="rgb(212,127,14)" fg:x="577" fg:w="1"/><text x="17.0330%" y="911.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="885" width="0.0291%" height="15" fill="rgb(247,145,37)" fg:x="577" fg:w="1"/><text x="17.0330%" y="895.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="869" width="0.0291%" height="15" fill="rgb(209,117,53)" fg:x="577" fg:w="1"/><text x="17.0330%" y="879.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="16.7830%" y="853" width="0.0291%" height="15" fill="rgb(212,90,42)" fg:x="577" fg:w="1"/><text x="17.0330%" y="863.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="837" width="0.0291%" height="15" fill="rgb(218,164,37)" fg:x="577" fg:w="1"/><text x="17.0330%" y="847.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="821" width="0.0291%" height="15" fill="rgb(246,65,34)" fg:x="577" fg:w="1"/><text x="17.0330%" y="831.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="805" width="0.0291%" height="15" fill="rgb(231,100,33)" fg:x="577" fg:w="1"/><text x="17.0330%" y="815.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHandle&lt;v8::internal::Isolate&gt; &gt;(unsigned char, v8::internal::SlotAccessorForHandle (1 samples, 0.03%)</title><rect x="16.7830%" y="789" width="0.0291%" height="15" fill="rgb(228,126,14)" fg:x="577" fg:w="1"/><text x="17.0330%" y="799.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="773" width="0.0291%" height="15" fill="rgb(215,173,21)" fg:x="577" fg:w="1"/><text x="17.0330%" y="783.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="757" width="0.0291%" height="15" fill="rgb(210,6,40)" fg:x="577" fg:w="1"/><text x="17.0330%" y="767.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="741" width="0.0291%" height="15" fill="rgb(212,48,18)" fg:x="577" fg:w="1"/><text x="17.0330%" y="751.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="725" width="0.0291%" height="15" fill="rgb(230,214,11)" fg:x="577" fg:w="1"/><text x="17.0330%" y="735.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="709" width="0.0291%" height="15" fill="rgb(254,105,39)" fg:x="577" fg:w="1"/><text x="17.0330%" y="719.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="693" width="0.0291%" height="15" fill="rgb(245,158,5)" fg:x="577" fg:w="1"/><text x="17.0330%" y="703.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="677" width="0.0291%" height="15" fill="rgb(249,208,11)" fg:x="577" fg:w="1"/><text x="17.0330%" y="687.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="661" width="0.0291%" height="15" fill="rgb(210,39,28)" fg:x="577" fg:w="1"/><text x="17.0330%" y="671.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="645" width="0.0291%" height="15" fill="rgb(211,56,53)" fg:x="577" fg:w="1"/><text x="17.0330%" y="655.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="629" width="0.0291%" height="15" fill="rgb(226,201,30)" fg:x="577" fg:w="1"/><text x="17.0330%" y="639.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="613" width="0.0291%" height="15" fill="rgb(239,101,34)" fg:x="577" fg:w="1"/><text x="17.0330%" y="623.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="597" width="0.0291%" height="15" fill="rgb(226,209,5)" fg:x="577" fg:w="1"/><text x="17.0330%" y="607.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="581" width="0.0291%" height="15" fill="rgb(250,105,47)" fg:x="577" fg:w="1"/><text x="17.0330%" y="591.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="565" width="0.0291%" height="15" fill="rgb(230,72,3)" fg:x="577" fg:w="1"/><text x="17.0330%" y="575.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="549" width="0.0291%" height="15" fill="rgb(232,218,39)" fg:x="577" fg:w="1"/><text x="17.0330%" y="559.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="533" width="0.0291%" height="15" fill="rgb(248,166,6)" fg:x="577" fg:w="1"/><text x="17.0330%" y="543.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="517" width="0.0291%" height="15" fill="rgb(247,89,20)" fg:x="577" fg:w="1"/><text x="17.0330%" y="527.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="501" width="0.0291%" height="15" fill="rgb(248,130,54)" fg:x="577" fg:w="1"/><text x="17.0330%" y="511.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="485" width="0.0291%" height="15" fill="rgb(234,196,4)" fg:x="577" fg:w="1"/><text x="17.0330%" y="495.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="469" width="0.0291%" height="15" fill="rgb(250,143,31)" fg:x="577" fg:w="1"/><text x="17.0330%" y="479.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="453" width="0.0291%" height="15" fill="rgb(211,110,34)" fg:x="577" fg:w="1"/><text x="17.0330%" y="463.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="437" width="0.0291%" height="15" fill="rgb(215,124,48)" fg:x="577" fg:w="1"/><text x="17.0330%" y="447.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="421" width="0.0291%" height="15" fill="rgb(216,46,13)" fg:x="577" fg:w="1"/><text x="17.0330%" y="431.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="405" width="0.0291%" height="15" fill="rgb(205,184,25)" fg:x="577" fg:w="1"/><text x="17.0330%" y="415.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="389" width="0.0291%" height="15" fill="rgb(228,1,10)" fg:x="577" fg:w="1"/><text x="17.0330%" y="399.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="373" width="0.0291%" height="15" fill="rgb(213,116,27)" fg:x="577" fg:w="1"/><text x="17.0330%" y="383.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="357" width="0.0291%" height="15" fill="rgb(241,95,50)" fg:x="577" fg:w="1"/><text x="17.0330%" y="367.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="341" width="0.0291%" height="15" fill="rgb(238,48,32)" fg:x="577" fg:w="1"/><text x="17.0330%" y="351.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="325" width="0.0291%" height="15" fill="rgb(235,113,49)" fg:x="577" fg:w="1"/><text x="17.0330%" y="335.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="309" width="0.0291%" height="15" fill="rgb(205,127,43)" fg:x="577" fg:w="1"/><text x="17.0330%" y="319.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="293" width="0.0291%" height="15" fill="rgb(250,162,2)" fg:x="577" fg:w="1"/><text x="17.0330%" y="303.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="277" width="0.0291%" height="15" fill="rgb(220,13,41)" fg:x="577" fg:w="1"/><text x="17.0330%" y="287.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="261" width="0.0291%" height="15" fill="rgb(249,221,25)" fg:x="577" fg:w="1"/><text x="17.0330%" y="271.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="245" width="0.0291%" height="15" fill="rgb(215,208,19)" fg:x="577" fg:w="1"/><text x="17.0330%" y="255.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="229" width="0.0291%" height="15" fill="rgb(236,175,2)" fg:x="577" fg:w="1"/><text x="17.0330%" y="239.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="213" width="0.0291%" height="15" fill="rgb(241,52,2)" fg:x="577" fg:w="1"/><text x="17.0330%" y="223.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="197" width="0.0291%" height="15" fill="rgb(248,140,14)" fg:x="577" fg:w="1"/><text x="17.0330%" y="207.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="181" width="0.0291%" height="15" fill="rgb(253,22,42)" fg:x="577" fg:w="1"/><text x="17.0330%" y="191.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="165" width="0.0291%" height="15" fill="rgb(234,61,47)" fg:x="577" fg:w="1"/><text x="17.0330%" y="175.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="149" width="0.0291%" height="15" fill="rgb(208,226,15)" fg:x="577" fg:w="1"/><text x="17.0330%" y="159.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="133" width="0.0291%" height="15" fill="rgb(217,221,4)" fg:x="577" fg:w="1"/><text x="17.0330%" y="143.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="117" width="0.0291%" height="15" fill="rgb(212,174,34)" fg:x="577" fg:w="1"/><text x="17.0330%" y="127.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="101" width="0.0291%" height="15" fill="rgb(253,83,4)" fg:x="577" fg:w="1"/><text x="17.0330%" y="111.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="85" width="0.0291%" height="15" fill="rgb(250,195,49)" fg:x="577" fg:w="1"/><text x="17.0330%" y="95.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="16.7830%" y="69" width="0.0291%" height="15" fill="rgb(241,192,25)" fg:x="577" fg:w="1"/><text x="17.0330%" y="79.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="16.7830%" y="53" width="0.0291%" height="15" fill="rgb(208,124,10)" fg:x="577" fg:w="1"/><text x="17.0330%" y="63.50"></text></g><g><title>deno`DYLD-STUB$$bzero (1 samples, 0.03%)</title><rect x="16.7830%" y="37" width="0.0291%" height="15" fill="rgb(222,33,0)" fg:x="577" fg:w="1"/><text x="17.0330%" y="47.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.06%)</title><rect x="16.7830%" y="1109" width="0.0582%" height="15" fill="rgb(234,209,28)" fg:x="577" fg:w="2"/><text x="17.0330%" y="1119.50"></text></g><g><title>deno`v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal&lt;v8::ObjectTemplate&gt;, v8::MaybeLocal (2 samples, 0.06%)</title><rect x="16.7830%" y="1093" width="0.0582%" height="15" fill="rgb(224,11,23)" fg:x="577" fg:w="2"/><text x="17.0330%" y="1103.50"></text></g><g><title>deno`v8::internal::Bootstrapper::CreateEnvironment(v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.06%)</title><rect x="16.7830%" y="1077" width="0.0582%" height="15" fill="rgb(232,99,1)" fg:x="577" fg:w="2"/><text x="17.0330%" y="1087.50"></text></g><g><title>deno`v8::internal::Genesis::Genesis(v8::internal::Isolate*, v8::internal::MaybeHandle&lt;v8::internal::JSGlobalProxy&gt;, v8::Local (2 samples, 0.06%)</title><rect x="16.7830%" y="1061" width="0.0582%" height="15" fill="rgb(237,95,45)" fg:x="577" fg:w="2"/><text x="17.0330%" y="1071.50"></text></g><g><title>deno`v8::internal::Snapshot::NewContextFromSnapshot(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.06%)</title><rect x="16.7830%" y="1045" width="0.0582%" height="15" fill="rgb(208,109,11)" fg:x="577" fg:w="2"/><text x="17.0330%" y="1055.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::DeserializeContext(v8::internal::Isolate*, v8::internal::SnapshotData const*, bool, v8::internal::Handle (2 samples, 0.06%)</title><rect x="16.7830%" y="1029" width="0.0582%" height="15" fill="rgb(216,190,48)" fg:x="577" fg:w="2"/><text x="17.0330%" y="1039.50"></text></g><g><title>deno`v8::internal::ContextDeserializer::Deserialize(v8::internal::Isolate*, v8::internal::Handle (2 samples, 0.06%)</title><rect x="16.7830%" y="1013" width="0.0582%" height="15" fill="rgb(251,171,36)" fg:x="577" fg:w="2"/><text x="17.0330%" y="1023.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.03%)</title><rect x="16.8121%" y="997" width="0.0291%" height="15" fill="rgb(230,62,22)" fg:x="578" fg:w="1"/><text x="17.0621%" y="1007.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.03%)</title><rect x="16.8121%" y="981" width="0.0291%" height="15" fill="rgb(225,114,35)" fg:x="578" fg:w="1"/><text x="17.0621%" y="991.50"></text></g><g><title>deno`v8::internal::DescriptorArray::Sort (1 samples, 0.03%)</title><rect x="16.8121%" y="965" width="0.0291%" height="15" fill="rgb(215,118,42)" fg:x="578" fg:w="1"/><text x="17.0621%" y="975.50"></text></g><g><title>deno`v8::internal::Checksum(v8::base::Vector (6 samples, 0.17%)</title><rect x="16.8412%" y="1077" width="0.1745%" height="15" fill="rgb(243,119,21)" fg:x="579" fg:w="6"/><text x="17.0912%" y="1087.50"></text></g><g><title>deno`v8::internal::ReadOnlyHeap::SetUp (1 samples, 0.03%)</title><rect x="17.0157%" y="1029" width="0.0291%" height="15" fill="rgb(252,177,53)" fg:x="585" fg:w="1"/><text x="17.2657%" y="1039.50"></text></g><g><title>deno`v8::internal::ReadOnlyDeserializer::DeserializeIntoIsolate (1 samples, 0.03%)</title><rect x="17.0157%" y="1013" width="0.0291%" height="15" fill="rgb(237,209,29)" fg:x="585" fg:w="1"/><text x="17.2657%" y="1023.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::Rehash (1 samples, 0.03%)</title><rect x="17.0157%" y="997" width="0.0291%" height="15" fill="rgb(212,65,23)" fg:x="585" fg:w="1"/><text x="17.2657%" y="1007.50"></text></g><g><title>deno`void v8::internal::HeapObject::RehashBasedOnMap&lt;v8::internal::Isolate&gt; (1 samples, 0.03%)</title><rect x="17.0157%" y="981" width="0.0291%" height="15" fill="rgb(230,222,46)" fg:x="585" fg:w="1"/><text x="17.2657%" y="991.50"></text></g><g><title>deno`v8::internal::String::ComputeAndSetRawHash (1 samples, 0.03%)</title><rect x="17.0157%" y="965" width="0.0291%" height="15" fill="rgb(215,135,32)" fg:x="585" fg:w="1"/><text x="17.2657%" y="975.50"></text></g><g><title>deno`unsigned int v8::internal::StringHasher::HashSequentialString&lt;unsigned char&gt; (1 samples, 0.03%)</title><rect x="17.0157%" y="949" width="0.0291%" height="15" fill="rgb(246,101,22)" fg:x="585" fg:w="1"/><text x="17.2657%" y="959.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (10 samples, 0.29%)</title><rect x="16.7830%" y="1125" width="0.2909%" height="15" fill="rgb(206,107,13)" fg:x="577" fg:w="10"/><text x="17.0330%" y="1135.50"></text></g><g><title>deno`v8::Isolate::New (8 samples, 0.23%)</title><rect x="16.8412%" y="1109" width="0.2327%" height="15" fill="rgb(250,100,44)" fg:x="579" fg:w="8"/><text x="17.0912%" y="1119.50"></text></g><g><title>deno`v8::Isolate::Initialize (8 samples, 0.23%)</title><rect x="16.8412%" y="1093" width="0.2327%" height="15" fill="rgb(231,147,38)" fg:x="579" fg:w="8"/><text x="17.0912%" y="1103.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.06%)</title><rect x="17.0157%" y="1077" width="0.0582%" height="15" fill="rgb(229,8,40)" fg:x="585" fg:w="2"/><text x="17.2657%" y="1087.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.06%)</title><rect x="17.0157%" y="1061" width="0.0582%" height="15" fill="rgb(221,135,30)" fg:x="585" fg:w="2"/><text x="17.2657%" y="1071.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.06%)</title><rect x="17.0157%" y="1045" width="0.0582%" height="15" fill="rgb(249,193,18)" fg:x="585" fg:w="2"/><text x="17.2657%" y="1055.50"></text></g><g><title>deno`v8::internal::StartupDeserializer::DeserializeIntoIsolate (1 samples, 0.03%)</title><rect x="17.0448%" y="1029" width="0.0291%" height="15" fill="rgb(209,133,39)" fg:x="586" fg:w="1"/><text x="17.2948%" y="1039.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (1 samples, 0.03%)</title><rect x="17.0448%" y="1013" width="0.0291%" height="15" fill="rgb(232,100,14)" fg:x="586" fg:w="1"/><text x="17.2948%" y="1023.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::VisitRootPointers (1 samples, 0.03%)</title><rect x="17.0448%" y="997" width="0.0291%" height="15" fill="rgb(224,185,1)" fg:x="586" fg:w="1"/><text x="17.2948%" y="1007.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForRootSlots&gt; (1 samples, 0.03%)</title><rect x="17.0448%" y="981" width="0.0291%" height="15" fill="rgb(223,139,8)" fg:x="586" fg:w="1"/><text x="17.2948%" y="991.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="17.0448%" y="965" width="0.0291%" height="15" fill="rgb(232,213,38)" fg:x="586" fg:w="1"/><text x="17.2948%" y="975.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="17.0448%" y="949" width="0.0291%" height="15" fill="rgb(207,94,22)" fg:x="586" fg:w="1"/><text x="17.2948%" y="959.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="17.0448%" y="933" width="0.0291%" height="15" fill="rgb(219,183,54)" fg:x="586" fg:w="1"/><text x="17.2948%" y="943.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="17.0448%" y="917" width="0.0291%" height="15" fill="rgb(216,185,54)" fg:x="586" fg:w="1"/><text x="17.2948%" y="927.50"></text></g><g><title>deno`v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadObject (1 samples, 0.03%)</title><rect x="17.0448%" y="901" width="0.0291%" height="15" fill="rgb(254,217,39)" fg:x="586" fg:w="1"/><text x="17.2948%" y="911.50"></text></g><g><title>deno`int v8::internal::Deserializer&lt;v8::internal::Isolate&gt;::ReadSingleBytecodeData&lt;v8::internal::SlotAccessorForHeapObject&gt; (1 samples, 0.03%)</title><rect x="17.0448%" y="885" width="0.0291%" height="15" fill="rgb(240,178,23)" fg:x="586" fg:w="1"/><text x="17.2948%" y="895.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::execute_script (1 samples, 0.03%)</title><rect x="17.0739%" y="1125" width="0.0291%" height="15" fill="rgb(218,11,47)" fg:x="587" fg:w="1"/><text x="17.3239%" y="1135.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::execute_script (1 samples, 0.03%)</title><rect x="17.0739%" y="1109" width="0.0291%" height="15" fill="rgb(218,51,51)" fg:x="587" fg:w="1"/><text x="17.3239%" y="1119.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::execute_script (1 samples, 0.03%)</title><rect x="17.0739%" y="1093" width="0.0291%" height="15" fill="rgb(238,126,27)" fg:x="587" fg:w="1"/><text x="17.3239%" y="1103.50"></text></g><g><title>deno`v8::Script::Run(v8::Local&lt;v8::Context&gt;, v8::Local (1 samples, 0.03%)</title><rect x="17.0739%" y="1077" width="0.0291%" height="15" fill="rgb(249,202,22)" fg:x="587" fg:w="1"/><text x="17.3239%" y="1087.50"></text></g><g><title>deno`v8::internal::Execution::CallScript(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::JSFunction&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle (1 samples, 0.03%)</title><rect x="17.0739%" y="1061" width="0.0291%" height="15" fill="rgb(254,195,49)" fg:x="587" fg:w="1"/><text x="17.3239%" y="1071.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (1 samples, 0.03%)</title><rect x="17.0739%" y="1045" width="0.0291%" height="15" fill="rgb(208,123,14)" fg:x="587" fg:w="1"/><text x="17.3239%" y="1055.50"></text></g><g><title>deno`Builtins_JSEntry (1 samples, 0.03%)</title><rect x="17.0739%" y="1029" width="0.0291%" height="15" fill="rgb(224,200,8)" fg:x="587" fg:w="1"/><text x="17.3239%" y="1039.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (1 samples, 0.03%)</title><rect x="17.0739%" y="1013" width="0.0291%" height="15" fill="rgb(217,61,36)" fg:x="587" fg:w="1"/><text x="17.3239%" y="1023.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="17.0739%" y="997" width="0.0291%" height="15" fill="rgb(206,35,45)" fg:x="587" fg:w="1"/><text x="17.3239%" y="1007.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="17.0739%" y="981" width="0.0291%" height="15" fill="rgb(217,65,33)" fg:x="587" fg:w="1"/><text x="17.3239%" y="991.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="17.0739%" y="965" width="0.0291%" height="15" fill="rgb(222,158,48)" fg:x="587" fg:w="1"/><text x="17.3239%" y="975.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="17.0739%" y="949" width="0.0291%" height="15" fill="rgb(254,2,54)" fg:x="587" fg:w="1"/><text x="17.3239%" y="959.50"></text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (1 samples, 0.03%)</title><rect x="17.0739%" y="933" width="0.0291%" height="15" fill="rgb(250,143,38)" fg:x="587" fg:w="1"/><text x="17.3239%" y="943.50"></text></g><g><title>deno`Builtins_CompileLazy (1 samples, 0.03%)</title><rect x="17.0739%" y="917" width="0.0291%" height="15" fill="rgb(248,25,0)" fg:x="587" fg:w="1"/><text x="17.3239%" y="927.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (1 samples, 0.03%)</title><rect x="17.0739%" y="901" width="0.0291%" height="15" fill="rgb(206,152,27)" fg:x="587" fg:w="1"/><text x="17.3239%" y="911.50"></text></g><g><title>deno`v8::internal::Runtime_CompileLazy (1 samples, 0.03%)</title><rect x="17.0739%" y="885" width="0.0291%" height="15" fill="rgb(240,77,30)" fg:x="587" fg:w="1"/><text x="17.3239%" y="895.50"></text></g><g><title>deno`v8::internal::Compiler::Compile(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="17.0739%" y="869" width="0.0291%" height="15" fill="rgb(231,5,3)" fg:x="587" fg:w="1"/><text x="17.3239%" y="879.50"></text></g><g><title>deno`v8::internal::baseline::BaselineBatchCompiler::CompileBatch(v8::internal::Handle (1 samples, 0.03%)</title><rect x="17.0739%" y="853" width="0.0291%" height="15" fill="rgb(207,226,32)" fg:x="587" fg:w="1"/><text x="17.3239%" y="863.50"></text></g><g><title>deno`v8::internal::Compiler::CompileBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="17.0739%" y="837" width="0.0291%" height="15" fill="rgb(222,207,47)" fg:x="587" fg:w="1"/><text x="17.3239%" y="847.50"></text></g><g><title>deno`v8::internal::Compiler::CompileSharedWithBaseline(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="17.0739%" y="821" width="0.0291%" height="15" fill="rgb(229,115,45)" fg:x="587" fg:w="1"/><text x="17.3239%" y="831.50"></text></g><g><title>deno`v8::internal::GenerateBaselineCode(v8::internal::Isolate*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="17.0739%" y="805" width="0.0291%" height="15" fill="rgb(224,191,6)" fg:x="587" fg:w="1"/><text x="17.3239%" y="815.50"></text></g><g><title>deno`v8::internal::baseline::BaselineCompiler::GenerateCode (1 samples, 0.03%)</title><rect x="17.0739%" y="789" width="0.0291%" height="15" fill="rgb(230,227,24)" fg:x="587" fg:w="1"/><text x="17.3239%" y="799.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (565 samples, 16.43%)</title><rect x="0.6981%" y="1189" width="16.4340%" height="15" fill="rgb(228,80,19)" fg:x="24" fg:w="565"/><text x="0.9481%" y="1199.50">deno`&lt;core::future::from_..</text></g><g><title>deno`deno::run_command::_{{closure}} (563 samples, 16.38%)</title><rect x="0.7563%" y="1173" width="16.3758%" height="15" fill="rgb(247,229,0)" fg:x="26" fg:w="563"/><text x="1.0063%" y="1183.50">deno`deno::run_command::_..</text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (562 samples, 16.35%)</title><rect x="0.7853%" y="1157" width="16.3467%" height="15" fill="rgb(237,194,15)" fg:x="27" fg:w="562"/><text x="1.0353%" y="1167.50">deno`&lt;core::future::from_..</text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (12 samples, 0.35%)</title><rect x="16.7830%" y="1141" width="0.3490%" height="15" fill="rgb(219,203,20)" fg:x="577" fg:w="12"/><text x="17.0330%" y="1151.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.03%)</title><rect x="17.1030%" y="1125" width="0.0291%" height="15" fill="rgb(234,128,8)" fg:x="588" fg:w="1"/><text x="17.3530%" y="1135.50"></text></g><g><title>deno`once_cell::imp::initialize_or_wait (1 samples, 0.03%)</title><rect x="17.1030%" y="1109" width="0.0291%" height="15" fill="rgb(248,202,8)" fg:x="588" fg:w="1"/><text x="17.3530%" y="1119.50"></text></g><g><title>deno`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.03%)</title><rect x="17.1030%" y="1093" width="0.0291%" height="15" fill="rgb(206,104,37)" fg:x="588" fg:w="1"/><text x="17.3530%" y="1103.50"></text></g><g><title>deno`deno_runtime::js::CLI_SNAPSHOT::_{{closure}} (1 samples, 0.03%)</title><rect x="17.1030%" y="1077" width="0.0291%" height="15" fill="rgb(223,8,27)" fg:x="588" fg:w="1"/><text x="17.3530%" y="1087.50"></text></g><g><title>deno`LZ4_decompress_safe (1 samples, 0.03%)</title><rect x="17.1030%" y="1061" width="0.0291%" height="15" fill="rgb(216,217,28)" fg:x="588" fg:w="1"/><text x="17.3530%" y="1071.50"></text></g><g><title>deno`OUTLINED_FUNCTION_16618 (2 samples, 0.06%)</title><rect x="17.1321%" y="1189" width="0.0582%" height="15" fill="rgb(249,199,1)" fg:x="589" fg:w="2"/><text x="17.3821%" y="1199.50"></text></g><g><title>deno`OUTLINED_FUNCTION_21688 (1 samples, 0.03%)</title><rect x="17.1902%" y="1189" width="0.0291%" height="15" fill="rgb(240,85,17)" fg:x="591" fg:w="1"/><text x="17.4402%" y="1199.50"></text></g><g><title>deno`OUTLINED_FUNCTION_7041 (1 samples, 0.03%)</title><rect x="17.2193%" y="1189" width="0.0291%" height="15" fill="rgb(206,108,45)" fg:x="592" fg:w="1"/><text x="17.4693%" y="1199.50"></text></g><g><title>deno`deno::main::_{{closure}} (571 samples, 16.61%)</title><rect x="0.6690%" y="1205" width="16.6085%" height="15" fill="rgb(245,210,41)" fg:x="23" fg:w="571"/><text x="0.9190%" y="1215.50">deno`deno::main::_{{closur..</text></g><g><title>deno`deno::args::flags::flags_from_vec (1 samples, 0.03%)</title><rect x="17.2484%" y="1189" width="0.0291%" height="15" fill="rgb(206,13,37)" fg:x="593" fg:w="1"/><text x="17.4984%" y="1199.50"></text></g><g><title>deno`clap::build::command::App::new (1 samples, 0.03%)</title><rect x="17.2484%" y="1173" width="0.0291%" height="15" fill="rgb(250,61,18)" fg:x="593" fg:w="1"/><text x="17.4984%" y="1183.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (578 samples, 16.81%)</title><rect x="0.4945%" y="1221" width="16.8121%" height="15" fill="rgb(235,172,48)" fg:x="17" fg:w="578"/><text x="0.7445%" y="1231.50">deno`&lt;core::future::from_g..</text></g><g><title>deno`tokio::util::wake::drop_arc_raw (1 samples, 0.03%)</title><rect x="17.2775%" y="1205" width="0.0291%" height="15" fill="rgb(249,201,17)" fg:x="594" fg:w="1"/><text x="17.5275%" y="1215.50"></text></g><g><title>deno`OUTLINED_FUNCTION_18760 (1 samples, 0.03%)</title><rect x="17.3066%" y="1221" width="0.0291%" height="15" fill="rgb(219,208,6)" fg:x="595" fg:w="1"/><text x="17.5566%" y="1231.50"></text></g><g><title>deno`OUTLINED_FUNCTION_35728 (1 samples, 0.03%)</title><rect x="17.3357%" y="1221" width="0.0291%" height="15" fill="rgb(248,31,23)" fg:x="596" fg:w="1"/><text x="17.5857%" y="1231.50"></text></g><g><title>deno`OUTLINED_FUNCTION_124 (5 samples, 0.15%)</title><rect x="17.5102%" y="1189" width="0.1454%" height="15" fill="rgb(245,15,42)" fg:x="602" fg:w="5"/><text x="17.7602%" y="1199.50"></text></g><g><title>deno`mio::poll::Poll::poll (1 samples, 0.03%)</title><rect x="17.6847%" y="1173" width="0.0291%" height="15" fill="rgb(222,217,39)" fg:x="608" fg:w="1"/><text x="17.9347%" y="1183.50"></text></g><g><title>deno`tokio::runtime::io::Driver::turn (129 samples, 3.75%)</title><rect x="17.6556%" y="1189" width="3.7522%" height="15" fill="rgb(210,219,27)" fg:x="607" fg:w="129"/><text x="17.9056%" y="1199.50">deno..</text></g><g><title>libsystem_kernel.dylib`kevent (127 samples, 3.69%)</title><rect x="17.7138%" y="1173" width="3.6940%" height="15" fill="rgb(252,166,36)" fg:x="609" fg:w="127"/><text x="17.9638%" y="1183.50">libs..</text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (2 samples, 0.06%)</title><rect x="21.4078%" y="1189" width="0.0582%" height="15" fill="rgb(245,132,34)" fg:x="736" fg:w="2"/><text x="21.6578%" y="1199.50"></text></g><g><title>deno`tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.06%)</title><rect x="21.4078%" y="1173" width="0.0582%" height="15" fill="rgb(236,54,3)" fg:x="736" fg:w="2"/><text x="21.6578%" y="1183.50"></text></g><g><title>deno`tokio::signal::unix::driver::noop (1 samples, 0.03%)</title><rect x="21.4660%" y="1189" width="0.0291%" height="15" fill="rgb(241,173,43)" fg:x="738" fg:w="1"/><text x="21.7160%" y="1199.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (142 samples, 4.13%)</title><rect x="17.4229%" y="1205" width="4.1303%" height="15" fill="rgb(215,190,9)" fg:x="599" fg:w="142"/><text x="17.6729%" y="1215.50">deno`..</text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (2 samples, 0.06%)</title><rect x="21.4951%" y="1189" width="0.0582%" height="15" fill="rgb(242,101,16)" fg:x="739" fg:w="2"/><text x="21.7451%" y="1199.50"></text></g><g><title>deno`tokio::time::driver::wheel::Wheel::next_expiration (1 samples, 0.03%)</title><rect x="21.5241%" y="1173" width="0.0291%" height="15" fill="rgb(223,190,21)" fg:x="740" fg:w="1"/><text x="21.7741%" y="1183.50"></text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (1 samples, 0.03%)</title><rect x="21.5532%" y="1205" width="0.0291%" height="15" fill="rgb(215,228,25)" fg:x="741" fg:w="1"/><text x="21.8032%" y="1215.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Context::park (150 samples, 4.36%)</title><rect x="17.3647%" y="1221" width="4.3630%" height="15" fill="rgb(225,36,22)" fg:x="597" fg:w="150"/><text x="17.6147%" y="1231.50">deno`..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (5 samples, 0.15%)</title><rect x="21.5823%" y="1205" width="0.1454%" height="15" fill="rgb(251,106,46)" fg:x="742" fg:w="5"/><text x="21.8323%" y="1215.50"></text></g><g><title>deno`tokio::runtime::scheduler::current_thread::Spawner::pop (1 samples, 0.03%)</title><rect x="21.7277%" y="1221" width="0.0291%" height="15" fill="rgb(208,90,1)" fg:x="747" fg:w="1"/><text x="21.9777%" y="1231.50"></text></g><g><title>deno`tokio::task::local::CURRENT::__getit (3 samples, 0.09%)</title><rect x="21.7568%" y="1221" width="0.0873%" height="15" fill="rgb(243,10,4)" fg:x="748" fg:w="3"/><text x="22.0068%" y="1231.50"></text></g><g><title>deno`tokio::task::local::LocalSet::tick (2 samples, 0.06%)</title><rect x="21.8441%" y="1221" width="0.0582%" height="15" fill="rgb(212,137,27)" fg:x="751" fg:w="2"/><text x="22.0941%" y="1231.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="21.9023%" y="1221" width="0.0291%" height="15" fill="rgb(231,220,49)" fg:x="753" fg:w="1"/><text x="22.1523%" y="1231.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (748 samples, 21.76%)</title><rect x="0.2618%" y="1237" width="21.7568%" height="15" fill="rgb(237,96,20)" fg:x="9" fg:w="748"/><text x="0.5118%" y="1247.50">deno`deno_runtime::tokio_util::run..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.09%)</title><rect x="21.9314%" y="1221" width="0.0873%" height="15" fill="rgb(239,229,30)" fg:x="754" fg:w="3"/><text x="22.1814%" y="1231.50"></text></g><g><title>dyld`start (758 samples, 22.05%)</title><rect x="0.0000%" y="1301" width="22.0477%" height="15" fill="rgb(219,65,33)" fg:x="0" fg:w="758"/><text x="0.2500%" y="1311.50">dyld`start</text></g><g><title>deno`main (758 samples, 22.05%)</title><rect x="0.0000%" y="1285" width="22.0477%" height="15" fill="rgb(243,134,7)" fg:x="0" fg:w="758"/><text x="0.2500%" y="1295.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (758 samples, 22.05%)</title><rect x="0.0000%" y="1269" width="22.0477%" height="15" fill="rgb(216,177,54)" fg:x="0" fg:w="758"/><text x="0.2500%" y="1279.50">deno`std::sys_common::backtrace::__..</text></g><g><title>deno`deno::main (758 samples, 22.05%)</title><rect x="0.0000%" y="1253" width="22.0477%" height="15" fill="rgb(211,160,20)" fg:x="0" fg:w="758"/><text x="0.2500%" y="1263.50">deno`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="22.0186%" y="1237" width="0.0291%" height="15" fill="rgb(239,85,39)" fg:x="757" fg:w="1"/><text x="22.2686%" y="1247.50"></text></g><g><title>deno`deno_runtime::ops::fs::write_file (1 samples, 0.03%)</title><rect x="22.1640%" y="1221" width="0.0291%" height="15" fill="rgb(232,125,22)" fg:x="762" fg:w="1"/><text x="22.4140%" y="1231.50"></text></g><g><title>deno`parking_lot::condvar::Condvar::wait_until_internal (5 samples, 0.15%)</title><rect x="22.1931%" y="1221" width="0.1454%" height="15" fill="rgb(244,57,34)" fg:x="763" fg:w="5"/><text x="22.4431%" y="1231.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (5 samples, 0.15%)</title><rect x="22.1931%" y="1205" width="0.1454%" height="15" fill="rgb(214,203,32)" fg:x="763" fg:w="5"/><text x="22.4431%" y="1215.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (137 samples, 3.98%)</title><rect x="22.3386%" y="1189" width="3.9849%" height="15" fill="rgb(207,58,43)" fg:x="768" fg:w="137"/><text x="22.5886%" y="1199.50">deno..</text></g><g><title>deno`tokio::util::wake::wake_arc_raw (136 samples, 3.96%)</title><rect x="22.3677%" y="1173" width="3.9558%" height="15" fill="rgb(215,193,15)" fg:x="769" fg:w="136"/><text x="22.6177%" y="1183.50">deno..</text></g><g><title>libsystem_kernel.dylib`kevent (135 samples, 3.93%)</title><rect x="22.3967%" y="1157" width="3.9267%" height="15" fill="rgb(232,15,44)" fg:x="770" fg:w="135"/><text x="22.6467%" y="1167.50">libs..</text></g><g><title>deno`futures_task::waker::wake_by_ref_arc_raw (143 samples, 4.16%)</title><rect x="22.3386%" y="1205" width="4.1594%" height="15" fill="rgb(212,3,48)" fg:x="768" fg:w="143"/><text x="22.5886%" y="1215.50">deno`..</text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (6 samples, 0.17%)</title><rect x="26.3234%" y="1189" width="0.1745%" height="15" fill="rgb(218,128,7)" fg:x="905" fg:w="6"/><text x="26.5734%" y="1199.50"></text></g><g><title>deno`tokio::runtime::task::core::Trailer::wake_join (1 samples, 0.03%)</title><rect x="26.4980%" y="1205" width="0.0291%" height="15" fill="rgb(226,216,39)" fg:x="911" fg:w="1"/><text x="26.7480%" y="1215.50"></text></g><g><title>deno`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (145 samples, 4.22%)</title><rect x="22.3386%" y="1221" width="4.2176%" height="15" fill="rgb(243,47,51)" fg:x="768" fg:w="145"/><text x="22.5886%" y="1231.50">deno`..</text></g><g><title>deno`tokio::runtime::task::state::State::transition_to_terminal (1 samples, 0.03%)</title><rect x="26.5271%" y="1205" width="0.0291%" height="15" fill="rgb(241,183,40)" fg:x="912" fg:w="1"/><text x="26.7771%" y="1215.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="26.6434%" y="1205" width="0.0873%" height="15" fill="rgb(231,217,32)" fg:x="916" fg:w="3"/><text x="26.8934%" y="1215.50"></text></g><g><title>deno`DYLD-STUB$$close (1 samples, 0.03%)</title><rect x="26.7307%" y="1205" width="0.0291%" height="15" fill="rgb(229,61,38)" fg:x="919" fg:w="1"/><text x="26.9807%" y="1215.50"></text></g><g><title>deno`&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (2 samples, 0.06%)</title><rect x="26.9343%" y="1189" width="0.0582%" height="15" fill="rgb(225,210,5)" fg:x="926" fg:w="2"/><text x="27.1843%" y="1199.50"></text></g><g><title>deno`&lt;serde_v8::magic::buffer::ZeroCopyBuf as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="26.9924%" y="1189" width="0.0291%" height="15" fill="rgb(231,79,45)" fg:x="928" fg:w="1"/><text x="27.2424%" y="1199.50"></text></g><g><title>deno`alloc::ffi::c_str::CString::_from_vec_unchecked (2 samples, 0.06%)</title><rect x="27.0797%" y="1157" width="0.0582%" height="15" fill="rgb(224,100,7)" fg:x="931" fg:w="2"/><text x="27.3297%" y="1167.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.03%)</title><rect x="27.1088%" y="1141" width="0.0291%" height="15" fill="rgb(241,198,18)" fg:x="932" fg:w="1"/><text x="27.3588%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.26%)</title><rect x="27.1379%" y="1125" width="0.2618%" height="15" fill="rgb(252,97,53)" fg:x="933" fg:w="9"/><text x="27.3879%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.26%)</title><rect x="27.1379%" y="1109" width="0.2618%" height="15" fill="rgb(220,88,7)" fg:x="933" fg:w="9"/><text x="27.3879%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.32%)</title><rect x="27.1379%" y="1157" width="0.3200%" height="15" fill="rgb(213,176,14)" fg:x="933" fg:w="11"/><text x="27.3879%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.32%)</title><rect x="27.1379%" y="1141" width="0.3200%" height="15" fill="rgb(246,73,7)" fg:x="933" fg:w="11"/><text x="27.3879%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.06%)</title><rect x="27.3997%" y="1125" width="0.0582%" height="15" fill="rgb(245,64,36)" fg:x="942" fg:w="2"/><text x="27.6497%" y="1135.50"></text></g><g><title>deno`&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (15 samples, 0.44%)</title><rect x="27.0506%" y="1173" width="0.4363%" height="15" fill="rgb(245,80,10)" fg:x="930" fg:w="15"/><text x="27.3006%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="27.4578%" y="1157" width="0.0291%" height="15" fill="rgb(232,107,50)" fg:x="944" fg:w="1"/><text x="27.7078%" y="1167.50"></text></g><g><title>deno`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="27.4869%" y="1173" width="0.0291%" height="15" fill="rgb(253,3,0)" fg:x="945" fg:w="1"/><text x="27.7369%" y="1183.50"></text></g><g><title>deno`__rust_alloc (1 samples, 0.03%)</title><rect x="27.5160%" y="1173" width="0.0291%" height="15" fill="rgb(212,99,53)" fg:x="946" fg:w="1"/><text x="27.7660%" y="1183.50"></text></g><g><title>libsystem_kernel.dylib`__open (1,504 samples, 43.75%)</title><rect x="27.6033%" y="1157" width="43.7464%" height="15" fill="rgb(249,111,54)" fg:x="949" fg:w="1504"/><text x="27.8533%" y="1167.50">libsystem_kernel.dylib`__open</text></g><g><title>deno`std::sys::unix::fs::File::open_c (1,507 samples, 43.83%)</title><rect x="27.5451%" y="1173" width="43.8336%" height="15" fill="rgb(249,55,30)" fg:x="947" fg:w="1507"/><text x="27.7951%" y="1183.50">deno`std::sys::unix::fs::File::open_c</text></g><g><title>libsystem_kernel.dylib`open (1 samples, 0.03%)</title><rect x="71.3496%" y="1157" width="0.0291%" height="15" fill="rgb(237,47,42)" fg:x="2453" fg:w="1"/><text x="71.5996%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`open (2 samples, 0.06%)</title><rect x="71.3787%" y="1173" width="0.0582%" height="15" fill="rgb(211,20,18)" fg:x="2454" fg:w="2"/><text x="71.6287%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="71.4369%" y="1173" width="0.0582%" height="15" fill="rgb(231,203,46)" fg:x="2456" fg:w="2"/><text x="71.6869%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="71.4951%" y="1173" width="0.0582%" height="15" fill="rgb(237,142,3)" fg:x="2458" fg:w="2"/><text x="71.7451%" y="1183.50"></text></g><g><title>deno`std::fs::OpenOptions::_open (1,532 samples, 44.56%)</title><rect x="27.0215%" y="1189" width="44.5608%" height="15" fill="rgb(241,107,1)" fg:x="929" fg:w="1532"/><text x="27.2715%" y="1199.50">deno`std::fs::OpenOptions::_open</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="71.5532%" y="1173" width="0.0291%" height="15" fill="rgb(229,83,13)" fg:x="2460" fg:w="1"/><text x="71.8032%" y="1183.50"></text></g><g><title>deno`DYLD-STUB$$write (1 samples, 0.03%)</title><rect x="71.6114%" y="1173" width="0.0291%" height="15" fill="rgb(241,91,40)" fg:x="2462" fg:w="1"/><text x="71.8614%" y="1183.50"></text></g><g><title>deno`std::io::Write::write_all (69 samples, 2.01%)</title><rect x="71.5823%" y="1189" width="2.0070%" height="15" fill="rgb(225,3,45)" fg:x="2461" fg:w="69"/><text x="71.8323%" y="1199.50">d..</text></g><g><title>libsystem_kernel.dylib`write (67 samples, 1.95%)</title><rect x="71.6405%" y="1173" width="1.9488%" height="15" fill="rgb(244,223,14)" fg:x="2463" fg:w="67"/><text x="71.8905%" y="1183.50">l..</text></g><g><title>deno`std__shared_ptr__v8__BackingStore__reset (3 samples, 0.09%)</title><rect x="73.5893%" y="1189" width="0.0873%" height="15" fill="rgb(224,124,37)" fg:x="2530" fg:w="3"/><text x="73.8393%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="73.6766%" y="1189" width="0.0291%" height="15" fill="rgb(251,171,30)" fg:x="2533" fg:w="1"/><text x="73.9266%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="73.7056%" y="1189" width="0.0582%" height="15" fill="rgb(236,46,54)" fg:x="2534" fg:w="2"/><text x="73.9556%" y="1199.50"></text></g><g><title>deno`deno_runtime::ops::fs::write_file (1,617 samples, 47.03%)</title><rect x="26.7597%" y="1205" width="47.0332%" height="15" fill="rgb(245,213,5)" fg:x="920" fg:w="1617"/><text x="27.0097%" y="1215.50">deno`deno_runtime::ops::fs::write_file</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="73.7638%" y="1189" width="0.0291%" height="15" fill="rgb(230,144,27)" fg:x="2536" fg:w="1"/><text x="74.0138%" y="1199.50"></text></g><g><title>deno`std__shared_ptr__v8__BackingStore__reset (1 samples, 0.03%)</title><rect x="73.7929%" y="1205" width="0.0291%" height="15" fill="rgb(220,86,6)" fg:x="2537" fg:w="1"/><text x="74.0429%" y="1215.50"></text></g><g><title>libsystem_kernel.dylib`close (621 samples, 18.06%)</title><rect x="73.8220%" y="1205" width="18.0628%" height="15" fill="rgb(240,20,13)" fg:x="2538" fg:w="621"/><text x="74.0720%" y="1215.50">libsystem_kernel.dylib`close</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="91.8848%" y="1189" width="0.0291%" height="15" fill="rgb(217,89,34)" fg:x="3159" fg:w="1"/><text x="92.1348%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="91.8848%" y="1205" width="0.0873%" height="15" fill="rgb(229,13,5)" fg:x="3159" fg:w="3"/><text x="92.1348%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="91.9139%" y="1189" width="0.0582%" height="15" fill="rgb(244,67,35)" fg:x="3160" fg:w="2"/><text x="92.1639%" y="1199.50"></text></g><g><title>deno`tokio::runtime::task::raw::poll (2,250 samples, 65.45%)</title><rect x="26.5561%" y="1221" width="65.4450%" height="15" fill="rgb(221,40,2)" fg:x="913" fg:w="2250"/><text x="26.8061%" y="1231.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.03%)</title><rect x="91.9721%" y="1205" width="0.0291%" height="15" fill="rgb(237,157,21)" fg:x="3162" fg:w="1"/><text x="92.2221%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.06%)</title><rect x="92.0012%" y="1221" width="0.0582%" height="15" fill="rgb(222,94,11)" fg:x="3163" fg:w="2"/><text x="92.2512%" y="1231.50"></text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (2,408 samples, 70.04%)</title><rect x="22.0477%" y="1237" width="70.0407%" height="15" fill="rgb(249,113,6)" fg:x="758" fg:w="2408"/><text x="22.2977%" y="1247.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.03%)</title><rect x="92.0593%" y="1221" width="0.0291%" height="15" fill="rgb(238,137,36)" fg:x="3165" fg:w="1"/><text x="92.3093%" y="1231.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (2,410 samples, 70.10%)</title><rect x="22.0477%" y="1269" width="70.0989%" height="15" fill="rgb(210,102,26)" fg:x="758" fg:w="2410"/><text x="22.2977%" y="1279.50">deno`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (2,410 samples, 70.10%)</title><rect x="22.0477%" y="1253" width="70.0989%" height="15" fill="rgb(218,30,30)" fg:x="758" fg:w="2410"/><text x="22.2977%" y="1263.50">deno`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>deno`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.06%)</title><rect x="92.0884%" y="1237" width="0.0582%" height="15" fill="rgb(214,67,26)" fg:x="3166" fg:w="2"/><text x="92.3384%" y="1247.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AssembleCode (1 samples, 0.03%)</title><rect x="92.1466%" y="1173" width="0.0291%" height="15" fill="rgb(251,9,53)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleCode (1 samples, 0.03%)</title><rect x="92.1466%" y="1157" width="0.0291%" height="15" fill="rgb(228,204,25)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleInstruction (1 samples, 0.03%)</title><rect x="92.1466%" y="1141" width="0.0291%" height="15" fill="rgb(207,153,8)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GapResolver::Resolve (1 samples, 0.03%)</title><rect x="92.1466%" y="1125" width="0.0291%" height="15" fill="rgb(242,9,16)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove (1 samples, 0.03%)</title><rect x="92.1466%" y="1109" width="0.0291%" height="15" fill="rgb(217,211,10)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleMove(v8::internal::compiler::InstructionOperand*, v8::internal::compiler::InstructionOperand*)::$_0::operator() (1 samples, 0.03%)</title><rect x="92.1466%" y="1093" width="0.0291%" height="15" fill="rgb(219,228,52)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1103.50"></text></g><g><title>deno`v8::internal::TurboAssembler::Mov (1 samples, 0.03%)</title><rect x="92.1466%" y="1077" width="0.0291%" height="15" fill="rgb(231,92,29)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1087.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.03%)</title><rect x="92.1466%" y="1061" width="0.0291%" height="15" fill="rgb(232,8,23)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1071.50"></text></g><g><title>deno`v8::internal::Assembler::ldr (1 samples, 0.03%)</title><rect x="92.1466%" y="1045" width="0.0291%" height="15" fill="rgb(216,211,34)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1055.50"></text></g><g><title>deno`v8::internal::Assembler::RecordRelocInfo (1 samples, 0.03%)</title><rect x="92.1466%" y="1029" width="0.0291%" height="15" fill="rgb(236,151,0)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1039.50"></text></g><g><title>deno`std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;v8::internal::Handle&lt;v8::internal::HeapObject&gt;, unsigned long&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::Handle&lt;v8::internal::HeapObject&gt;, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::Handle&lt;v8::internal::HeapObject&gt;, std::__1::__hash_value_type&lt;v8::internal::Handle&lt;v8::internal::HeapObject&gt;, unsigned long&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;::hash, v8::internal::Handle&lt;v8::internal::HeapObject&gt;::equal_to, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::Handle&lt;v8::internal::HeapObject&gt;, std::__1::__hash_value_type&lt;v8::internal::Handle&lt;v8::internal::HeapObject&gt;, unsigned long&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;::equal_to, v8::internal::Handle&lt;v8::internal::HeapObject&gt;::hash, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::Handle&lt;v8::internal::HeapObject&gt;, unsigned long&gt; &gt; &gt;::find&lt;v8::internal::Handle&lt;v8::internal::HeapObject&gt; &gt; (1 samples, 0.03%)</title><rect x="92.1466%" y="1013" width="0.0291%" height="15" fill="rgb(209,168,3)" fg:x="3168" fg:w="1"/><text x="92.3966%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::CheckpointElimination::ReduceCheckpoint (1 samples, 0.03%)</title><rect x="92.1757%" y="1077" width="0.0291%" height="15" fill="rgb(208,129,28)" fg:x="3169" fg:w="1"/><text x="92.4257%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::CommonOperatorReducer::ReducePhi (1 samples, 0.03%)</title><rect x="92.2048%" y="1077" width="0.0291%" height="15" fill="rgb(229,78,22)" fg:x="3170" fg:w="1"/><text x="92.4548%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Revisit (1 samples, 0.03%)</title><rect x="92.2048%" y="1061" width="0.0291%" height="15" fill="rgb(228,187,13)" fg:x="3170" fg:w="1"/><text x="92.4548%" y="1071.50"></text></g><g><title>deno`std::__1::deque&lt;v8::internal::compiler::Node*, v8::internal::RecyclingZoneAllocator&lt;v8::internal::compiler::Node*&gt; &gt;::__add_back_capacity (1 samples, 0.03%)</title><rect x="92.2048%" y="1045" width="0.0291%" height="15" fill="rgb(240,119,24)" fg:x="3170" fg:w="1"/><text x="92.4548%" y="1055.50"></text></g><g><title>deno`v8::internal::Zone::NewExpand (1 samples, 0.03%)</title><rect x="92.2048%" y="1029" width="0.0291%" height="15" fill="rgb(209,194,42)" fg:x="3170" fg:w="1"/><text x="92.4548%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::JSCallReducer::ReduceJSCall (1 samples, 0.03%)</title><rect x="92.2339%" y="1077" width="0.0291%" height="15" fill="rgb(247,200,46)" fg:x="3171" fg:w="1"/><text x="92.4839%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::JSCallReducer::ReducePromisePrototypeThen (1 samples, 0.03%)</title><rect x="92.2339%" y="1061" width="0.0291%" height="15" fill="rgb(218,76,16)" fg:x="3171" fg:w="1"/><text x="92.4839%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (4 samples, 0.12%)</title><rect x="92.1757%" y="1109" width="0.1163%" height="15" fill="rgb(225,21,48)" fg:x="3169" fg:w="4"/><text x="92.4257%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (4 samples, 0.12%)</title><rect x="92.1757%" y="1093" width="0.1163%" height="15" fill="rgb(239,223,50)" fg:x="3169" fg:w="4"/><text x="92.4257%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReduceJSLoadNamed (1 samples, 0.03%)</title><rect x="92.2629%" y="1077" width="0.0291%" height="15" fill="rgb(244,45,21)" fg:x="3172" fg:w="1"/><text x="92.5129%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReducePropertyAccess(v8::internal::compiler::Node*, v8::internal::compiler::Node*, v8::base::Optional (1 samples, 0.03%)</title><rect x="92.2629%" y="1061" width="0.0291%" height="15" fill="rgb(232,33,43)" fg:x="3172" fg:w="1"/><text x="92.5129%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::JSNativeContextSpecialization::ReduceNamedAccess (1 samples, 0.03%)</title><rect x="92.2629%" y="1045" width="0.0291%" height="15" fill="rgb(209,8,3)" fg:x="3172" fg:w="1"/><text x="92.5129%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::PropertyAccessBuilder::TryBuildNumberCheck(v8::internal::compiler::JSHeapBroker*, v8::internal::ZoneVector (1 samples, 0.03%)</title><rect x="92.2629%" y="1029" width="0.0291%" height="15" fill="rgb(214,25,53)" fg:x="3172" fg:w="1"/><text x="92.5129%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Replace (1 samples, 0.03%)</title><rect x="92.2920%" y="1109" width="0.0291%" height="15" fill="rgb(254,186,54)" fg:x="3173" fg:w="1"/><text x="92.5420%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (6 samples, 0.17%)</title><rect x="92.1757%" y="1173" width="0.1745%" height="15" fill="rgb(208,174,49)" fg:x="3169" fg:w="6"/><text x="92.4257%" y="1183.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (6 samples, 0.17%)</title><rect x="92.1757%" y="1157" width="0.1745%" height="15" fill="rgb(233,191,51)" fg:x="3169" fg:w="6"/><text x="92.4257%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (6 samples, 0.17%)</title><rect x="92.1757%" y="1141" width="0.1745%" height="15" fill="rgb(222,134,10)" fg:x="3169" fg:w="6"/><text x="92.4257%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (6 samples, 0.17%)</title><rect x="92.1757%" y="1125" width="0.1745%" height="15" fill="rgb(230,226,20)" fg:x="3169" fg:w="6"/><text x="92.4257%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::Finalize (1 samples, 0.03%)</title><rect x="92.3211%" y="1109" width="0.0291%" height="15" fill="rgb(251,111,25)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::JSInliningHeuristic::InlineCandidate (1 samples, 0.03%)</title><rect x="92.3211%" y="1093" width="0.0291%" height="15" fill="rgb(224,40,46)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::JSInliner::ReduceJSCall (1 samples, 0.03%)</title><rect x="92.3211%" y="1077" width="0.0291%" height="15" fill="rgb(236,108,47)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::BuildGraphFromBytecode(v8::internal::compiler::JSHeapBroker*, v8::internal::Zone*, v8::internal::compiler::SharedFunctionInfoRef const&amp;, v8::internal::compiler::FeedbackCellRef const&amp;, v8::internal::BytecodeOffset, v8::internal::compiler::JSGraph*, v8::internal::compiler::CallFrequency const&amp;, v8::internal::compiler::SourcePositionTable*, v8::internal::compiler::NodeOriginTable*, int, v8::internal::CodeKind, v8::base::Flags (1 samples, 0.03%)</title><rect x="92.3211%" y="1061" width="0.0291%" height="15" fill="rgb(234,93,0)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::CreateGraph (1 samples, 0.03%)</title><rect x="92.3211%" y="1045" width="0.0291%" height="15" fill="rgb(224,213,32)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitBytecodes (1 samples, 0.03%)</title><rect x="92.3211%" y="1029" width="0.0291%" height="15" fill="rgb(251,11,48)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::VisitThrowReferenceErrorIfHole (1 samples, 0.03%)</title><rect x="92.3211%" y="1013" width="0.0291%" height="15" fill="rgb(236,173,5)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="1023.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::BuildHoleCheckAndThrow (1 samples, 0.03%)</title><rect x="92.3211%" y="997" width="0.0291%" height="15" fill="rgb(230,95,12)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="1007.50"></text></g><g><title>deno`v8::internal::compiler::BytecodeGraphBuilder::MakeNode (1 samples, 0.03%)</title><rect x="92.3211%" y="981" width="0.0291%" height="15" fill="rgb(232,209,1)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="991.50"></text></g><g><title>deno`v8::internal::compiler::Graph::NewNode (1 samples, 0.03%)</title><rect x="92.3211%" y="965" width="0.0291%" height="15" fill="rgb(232,6,1)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="975.50"></text></g><g><title>deno`v8::internal::compiler::Node* v8::internal::compiler::Node::NewImpl&lt;v8::internal::compiler::Node*&gt; (1 samples, 0.03%)</title><rect x="92.3211%" y="949" width="0.0291%" height="15" fill="rgb(210,224,50)" fg:x="3174" fg:w="1"/><text x="92.5711%" y="959.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::VisitInputs (1 samples, 0.03%)</title><rect x="92.3502%" y="1093" width="0.0291%" height="15" fill="rgb(228,127,35)" fg:x="3175" fg:w="1"/><text x="92.6002%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::IncrementUnscheduledUseCount (1 samples, 0.03%)</title><rect x="92.3502%" y="1077" width="0.0291%" height="15" fill="rgb(245,102,45)" fg:x="3175" fg:w="1"/><text x="92.6002%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::PrepareUses (2 samples, 0.06%)</title><rect x="92.3502%" y="1125" width="0.0582%" height="15" fill="rgb(214,1,49)" fg:x="3175" fg:w="2"/><text x="92.6002%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::PrepareUsesVisitor::Run (2 samples, 0.06%)</title><rect x="92.3502%" y="1109" width="0.0582%" height="15" fill="rgb(226,163,40)" fg:x="3175" fg:w="2"/><text x="92.6002%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::IncrementUnscheduledUseCount (1 samples, 0.03%)</title><rect x="92.3793%" y="1093" width="0.0291%" height="15" fill="rgb(239,212,28)" fg:x="3176" fg:w="1"/><text x="92.6293%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ScheduleNode (1 samples, 0.03%)</title><rect x="92.4084%" y="1093" width="0.0291%" height="15" fill="rgb(220,20,13)" fg:x="3177" fg:w="1"/><text x="92.6584%" y="1103.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (4 samples, 0.12%)</title><rect x="92.3502%" y="1157" width="0.1163%" height="15" fill="rgb(210,164,35)" fg:x="3175" fg:w="4"/><text x="92.6002%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (4 samples, 0.12%)</title><rect x="92.3502%" y="1141" width="0.1163%" height="15" fill="rgb(248,109,41)" fg:x="3175" fg:w="4"/><text x="92.6002%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (2 samples, 0.06%)</title><rect x="92.4084%" y="1125" width="0.0582%" height="15" fill="rgb(238,23,50)" fg:x="3177" fg:w="2"/><text x="92.6584%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (2 samples, 0.06%)</title><rect x="92.4084%" y="1109" width="0.0582%" height="15" fill="rgb(211,48,49)" fg:x="3177" fg:w="2"/><text x="92.6584%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::UpdatePlacement (1 samples, 0.03%)</title><rect x="92.4375%" y="1093" width="0.0291%" height="15" fill="rgb(223,36,21)" fg:x="3178" fg:w="1"/><text x="92.6875%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::DecrementUnscheduledUseCount (1 samples, 0.03%)</title><rect x="92.4375%" y="1077" width="0.0291%" height="15" fill="rgb(207,123,46)" fg:x="3178" fg:w="1"/><text x="92.6875%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ControlFlowOptimizationPhase&gt; (1 samples, 0.03%)</title><rect x="92.4666%" y="1157" width="0.0291%" height="15" fill="rgb(240,218,32)" fg:x="3179" fg:w="1"/><text x="92.7166%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::ControlFlowOptimizationPhase::Run (1 samples, 0.03%)</title><rect x="92.4666%" y="1141" width="0.0291%" height="15" fill="rgb(252,5,43)" fg:x="3179" fg:w="1"/><text x="92.7166%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::ControlFlowOptimizer::Optimize (1 samples, 0.03%)</title><rect x="92.4666%" y="1125" width="0.0291%" height="15" fill="rgb(252,84,19)" fg:x="3179" fg:w="1"/><text x="92.7166%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::ControlFlowOptimizer::VisitNode (1 samples, 0.03%)</title><rect x="92.4666%" y="1109" width="0.0291%" height="15" fill="rgb(243,152,39)" fg:x="3179" fg:w="1"/><text x="92.7166%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::IsControlEdge (1 samples, 0.03%)</title><rect x="92.4666%" y="1093" width="0.0291%" height="15" fill="rgb(234,160,15)" fg:x="3179" fg:w="1"/><text x="92.7166%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasFrameStateInput (1 samples, 0.03%)</title><rect x="92.4666%" y="1077" width="0.0291%" height="15" fill="rgb(237,34,20)" fg:x="3179" fg:w="1"/><text x="92.7166%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyGraphTrimmingPhase&gt; (1 samples, 0.03%)</title><rect x="92.4956%" y="1157" width="0.0291%" height="15" fill="rgb(229,97,13)" fg:x="3180" fg:w="1"/><text x="92.7456%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::EarlyGraphTrimmingPhase::Run (1 samples, 0.03%)</title><rect x="92.4956%" y="1141" width="0.0291%" height="15" fill="rgb(234,71,50)" fg:x="3180" fg:w="1"/><text x="92.7456%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (1 samples, 0.03%)</title><rect x="92.4956%" y="1125" width="0.0291%" height="15" fill="rgb(253,155,4)" fg:x="3180" fg:w="1"/><text x="92.7456%" y="1135.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (1 samples, 0.03%)</title><rect x="92.5247%" y="1157" width="0.0291%" height="15" fill="rgb(222,185,37)" fg:x="3181" fg:w="1"/><text x="92.7747%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::EarlyOptimizationPhase::Run (1 samples, 0.03%)</title><rect x="92.5247%" y="1141" width="0.0291%" height="15" fill="rgb(251,177,13)" fg:x="3181" fg:w="1"/><text x="92.7747%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.03%)</title><rect x="92.5247%" y="1125" width="0.0291%" height="15" fill="rgb(250,179,40)" fg:x="3181" fg:w="1"/><text x="92.7747%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.03%)</title><rect x="92.5247%" y="1109" width="0.0291%" height="15" fill="rgb(242,44,2)" fg:x="3181" fg:w="1"/><text x="92.7747%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.03%)</title><rect x="92.5247%" y="1093" width="0.0291%" height="15" fill="rgb(216,177,13)" fg:x="3181" fg:w="1"/><text x="92.7747%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.06%)</title><rect x="92.5538%" y="1125" width="0.0582%" height="15" fill="rgb(216,106,43)" fg:x="3182" fg:w="2"/><text x="92.8038%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.06%)</title><rect x="92.5538%" y="1109" width="0.0582%" height="15" fill="rgb(216,183,2)" fg:x="3182" fg:w="2"/><text x="92.8038%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.03%)</title><rect x="92.5829%" y="1093" width="0.0291%" height="15" fill="rgb(249,75,3)" fg:x="3183" fg:w="1"/><text x="92.8329%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::CommonOperatorReducer::ReduceMerge (1 samples, 0.03%)</title><rect x="92.5829%" y="1077" width="0.0291%" height="15" fill="rgb(219,67,39)" fg:x="3183" fg:w="1"/><text x="92.8329%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (3 samples, 0.09%)</title><rect x="92.5538%" y="1157" width="0.0873%" height="15" fill="rgb(253,228,2)" fg:x="3182" fg:w="3"/><text x="92.8038%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (3 samples, 0.09%)</title><rect x="92.5538%" y="1141" width="0.0873%" height="15" fill="rgb(235,138,27)" fg:x="3182" fg:w="3"/><text x="92.8038%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (1 samples, 0.03%)</title><rect x="92.6120%" y="1125" width="0.0291%" height="15" fill="rgb(236,97,51)" fg:x="3184" fg:w="1"/><text x="92.8620%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ScheduleLate (1 samples, 0.03%)</title><rect x="92.6120%" y="1109" width="0.0291%" height="15" fill="rgb(240,80,30)" fg:x="3184" fg:w="1"/><text x="92.8620%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::ProcessQueue (1 samples, 0.03%)</title><rect x="92.6120%" y="1093" width="0.0291%" height="15" fill="rgb(230,178,19)" fg:x="3184" fg:w="1"/><text x="92.8620%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::ScheduleLateNodeVisitor::VisitNode (1 samples, 0.03%)</title><rect x="92.6120%" y="1077" width="0.0291%" height="15" fill="rgb(210,190,27)" fg:x="3184" fg:w="1"/><text x="92.8620%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::GetCommonDominator (1 samples, 0.03%)</title><rect x="92.6120%" y="1061" width="0.0291%" height="15" fill="rgb(222,107,31)" fg:x="3184" fg:w="1"/><text x="92.8620%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisTracker::Scope::~Scope (1 samples, 0.03%)</title><rect x="92.6411%" y="1093" width="0.0291%" height="15" fill="rgb(216,127,34)" fg:x="3185" fg:w="1"/><text x="92.8911%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::operator==(v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash (1 samples, 0.03%)</title><rect x="92.6411%" y="1077" width="0.0291%" height="15" fill="rgb(234,116,52)" fg:x="3185" fg:w="1"/><text x="92.8911%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::double_iterator::operator++ (1 samples, 0.03%)</title><rect x="92.6411%" y="1061" width="0.0291%" height="15" fill="rgb(222,124,15)" fg:x="3185" fg:w="1"/><text x="92.8911%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::iterator::operator++ (1 samples, 0.03%)</title><rect x="92.6411%" y="1045" width="0.0291%" height="15" fill="rgb(231,179,28)" fg:x="3185" fg:w="1"/><text x="92.8911%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::SparseSidetable&lt;v8::internal::compiler::VariableTracker::State&gt;::Get (1 samples, 0.03%)</title><rect x="92.6702%" y="1093" width="0.0291%" height="15" fill="rgb(226,93,45)" fg:x="3186" fg:w="1"/><text x="92.9202%" y="1103.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (3 samples, 0.09%)</title><rect x="92.6411%" y="1157" width="0.0873%" height="15" fill="rgb(215,8,51)" fg:x="3185" fg:w="3"/><text x="92.8911%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (3 samples, 0.09%)</title><rect x="92.6411%" y="1141" width="0.0873%" height="15" fill="rgb(223,106,5)" fg:x="3185" fg:w="3"/><text x="92.8911%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::EffectGraphReducer::ReduceFrom (3 samples, 0.09%)</title><rect x="92.6411%" y="1125" width="0.0873%" height="15" fill="rgb(250,191,5)" fg:x="3185" fg:w="3"/><text x="92.8911%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysis::Reduce (3 samples, 0.09%)</title><rect x="92.6411%" y="1109" width="0.0873%" height="15" fill="rgb(242,132,44)" fg:x="3185" fg:w="3"/><text x="92.8911%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::VariableTracker::MergeInputs (1 samples, 0.03%)</title><rect x="92.6992%" y="1093" width="0.0291%" height="15" fill="rgb(251,152,29)" fg:x="3187" fg:w="1"/><text x="92.9492%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::VariableTracker::State::Get (1 samples, 0.03%)</title><rect x="92.6992%" y="1077" width="0.0291%" height="15" fill="rgb(218,179,5)" fg:x="3187" fg:w="1"/><text x="92.9492%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (1 samples, 0.03%)</title><rect x="92.7283%" y="1157" width="0.0291%" height="15" fill="rgb(227,67,19)" fg:x="3188" fg:w="1"/><text x="92.9783%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (1 samples, 0.03%)</title><rect x="92.7283%" y="1141" width="0.0291%" height="15" fill="rgb(233,119,31)" fg:x="3188" fg:w="1"/><text x="92.9783%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.03%)</title><rect x="92.7283%" y="1125" width="0.0291%" height="15" fill="rgb(241,120,22)" fg:x="3188" fg:w="1"/><text x="92.9783%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.03%)</title><rect x="92.7283%" y="1109" width="0.0291%" height="15" fill="rgb(224,102,30)" fg:x="3188" fg:w="1"/><text x="92.9783%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.03%)</title><rect x="92.7283%" y="1093" width="0.0291%" height="15" fill="rgb(210,164,37)" fg:x="3188" fg:w="1"/><text x="92.9783%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (1 samples, 0.03%)</title><rect x="92.7283%" y="1077" width="0.0291%" height="15" fill="rgb(226,191,16)" fg:x="3188" fg:w="1"/><text x="92.9783%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Grow (1 samples, 0.03%)</title><rect x="92.7283%" y="1061" width="0.0291%" height="15" fill="rgb(214,40,45)" fg:x="3188" fg:w="1"/><text x="92.9783%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::HashCode (1 samples, 0.03%)</title><rect x="92.7283%" y="1045" width="0.0291%" height="15" fill="rgb(244,29,26)" fg:x="3188" fg:w="1"/><text x="92.9783%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.03%)</title><rect x="92.7574%" y="1093" width="0.0291%" height="15" fill="rgb(216,16,5)" fg:x="3189" fg:w="1"/><text x="93.0074%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::TypedOptimization::Reduce (1 samples, 0.03%)</title><rect x="92.7574%" y="1077" width="0.0291%" height="15" fill="rgb(249,76,35)" fg:x="3189" fg:w="1"/><text x="93.0074%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (2 samples, 0.06%)</title><rect x="92.7574%" y="1157" width="0.0582%" height="15" fill="rgb(207,11,44)" fg:x="3189" fg:w="2"/><text x="93.0074%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (2 samples, 0.06%)</title><rect x="92.7574%" y="1141" width="0.0582%" height="15" fill="rgb(228,190,49)" fg:x="3189" fg:w="2"/><text x="93.0074%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.06%)</title><rect x="92.7574%" y="1125" width="0.0582%" height="15" fill="rgb(214,173,12)" fg:x="3189" fg:w="2"/><text x="93.0074%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.06%)</title><rect x="92.7574%" y="1109" width="0.0582%" height="15" fill="rgb(218,26,35)" fg:x="3189" fg:w="2"/><text x="93.0074%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::LoadElimination::ReduceLoadField (1 samples, 0.03%)</title><rect x="92.7865%" y="1093" width="0.0291%" height="15" fill="rgb(220,200,19)" fg:x="3190" fg:w="1"/><text x="93.0365%" y="1103.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoopPeelingPhase&gt; (1 samples, 0.03%)</title><rect x="92.8156%" y="1157" width="0.0291%" height="15" fill="rgb(239,95,49)" fg:x="3191" fg:w="1"/><text x="93.0656%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::LoopPeelingPhase::Run (1 samples, 0.03%)</title><rect x="92.8156%" y="1141" width="0.0291%" height="15" fill="rgb(235,85,53)" fg:x="3191" fg:w="1"/><text x="93.0656%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::LoopPeeler::EliminateLoopExits (1 samples, 0.03%)</title><rect x="92.8156%" y="1125" width="0.0291%" height="15" fill="rgb(233,133,31)" fg:x="3191" fg:w="1"/><text x="93.0656%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.03%)</title><rect x="92.8447%" y="1109" width="0.0291%" height="15" fill="rgb(218,25,20)" fg:x="3192" fg:w="1"/><text x="93.0947%" y="1119.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MachineOperatorOptimizationPhase&gt; (2 samples, 0.06%)</title><rect x="92.8447%" y="1157" width="0.0582%" height="15" fill="rgb(252,210,38)" fg:x="3192" fg:w="2"/><text x="93.0947%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::MachineOperatorOptimizationPhase::Run (2 samples, 0.06%)</title><rect x="92.8447%" y="1141" width="0.0582%" height="15" fill="rgb(242,134,21)" fg:x="3192" fg:w="2"/><text x="93.0947%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.06%)</title><rect x="92.8447%" y="1125" width="0.0582%" height="15" fill="rgb(213,28,48)" fg:x="3192" fg:w="2"/><text x="93.0947%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Replace (1 samples, 0.03%)</title><rect x="92.8738%" y="1109" width="0.0291%" height="15" fill="rgb(250,196,2)" fg:x="3193" fg:w="1"/><text x="93.1238%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunLowerPhase (1 samples, 0.03%)</title><rect x="92.9029%" y="1109" width="0.0291%" height="15" fill="rgb(227,5,17)" fg:x="3194" fg:w="1"/><text x="93.1529%" y="1119.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::VisitNode&lt;(v8::internal::compiler::Phase)2&gt; (1 samples, 0.03%)</title><rect x="92.9029%" y="1093" width="0.0291%" height="15" fill="rgb(221,226,24)" fg:x="3194" fg:w="1"/><text x="93.1529%" y="1103.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::SimplifiedLoweringPhase, v8::internal::compiler::Linkage*&amp;&gt; (2 samples, 0.06%)</title><rect x="92.9029%" y="1157" width="0.0582%" height="15" fill="rgb(211,5,48)" fg:x="3194" fg:w="2"/><text x="93.1529%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLoweringPhase::Run (2 samples, 0.06%)</title><rect x="92.9029%" y="1141" width="0.0582%" height="15" fill="rgb(219,150,6)" fg:x="3194" fg:w="2"/><text x="93.1529%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::SimplifiedLowering::LowerAllNodes (2 samples, 0.06%)</title><rect x="92.9029%" y="1125" width="0.0582%" height="15" fill="rgb(251,46,16)" fg:x="3194" fg:w="2"/><text x="93.1529%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::RepresentationSelector::RunPropagatePhase (1 samples, 0.03%)</title><rect x="92.9319%" y="1109" width="0.0291%" height="15" fill="rgb(220,204,40)" fg:x="3195" fg:w="1"/><text x="93.1819%" y="1119.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::VisitNode&lt;(v8::internal::compiler::Phase)0&gt; (1 samples, 0.03%)</title><rect x="92.9319%" y="1093" width="0.0291%" height="15" fill="rgb(211,85,2)" fg:x="3195" fg:w="1"/><text x="93.1819%" y="1103.50"></text></g><g><title>deno`void v8::internal::compiler::RepresentationSelector::EnqueueInput&lt;(v8::internal::compiler::Phase)0&gt; (1 samples, 0.03%)</title><rect x="92.9319%" y="1077" width="0.0291%" height="15" fill="rgb(229,17,7)" fg:x="3195" fg:w="1"/><text x="93.1819%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TypedLoweringPhase&gt; (1 samples, 0.03%)</title><rect x="92.9610%" y="1157" width="0.0291%" height="15" fill="rgb(239,72,28)" fg:x="3196" fg:w="1"/><text x="93.2110%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::TypedLoweringPhase::Run (1 samples, 0.03%)</title><rect x="92.9610%" y="1141" width="0.0291%" height="15" fill="rgb(230,47,54)" fg:x="3196" fg:w="1"/><text x="93.2110%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.03%)</title><rect x="92.9610%" y="1125" width="0.0291%" height="15" fill="rgb(214,50,8)" fg:x="3196" fg:w="1"/><text x="93.2110%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.03%)</title><rect x="92.9610%" y="1109" width="0.0291%" height="15" fill="rgb(216,198,43)" fg:x="3196" fg:w="1"/><text x="93.2110%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.03%)</title><rect x="92.9610%" y="1093" width="0.0291%" height="15" fill="rgb(234,20,35)" fg:x="3196" fg:w="1"/><text x="93.2110%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::JSCreateLowering::ReduceJSCreateBlockContext (1 samples, 0.03%)</title><rect x="92.9610%" y="1077" width="0.0291%" height="15" fill="rgb(254,45,19)" fg:x="3196" fg:w="1"/><text x="93.2110%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReplaceWithValue (1 samples, 0.03%)</title><rect x="92.9610%" y="1061" width="0.0291%" height="15" fill="rgb(219,14,44)" fg:x="3196" fg:w="1"/><text x="93.2110%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::NodeProperties::IsControlEdge (1 samples, 0.03%)</title><rect x="92.9610%" y="1045" width="0.0291%" height="15" fill="rgb(217,220,26)" fg:x="3196" fg:w="1"/><text x="93.2110%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::OperatorProperties::HasFrameStateInput (1 samples, 0.03%)</title><rect x="92.9610%" y="1029" width="0.0291%" height="15" fill="rgb(213,158,28)" fg:x="3196" fg:w="1"/><text x="93.2110%" y="1039.50"></text></g><g><title>deno`v8::internal::compiler::LoopVariableOptimizer::Run (1 samples, 0.03%)</title><rect x="92.9901%" y="1125" width="0.0291%" height="15" fill="rgb(252,51,52)" fg:x="3197" fg:w="1"/><text x="93.2401%" y="1135.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TyperPhase, v8::internal::compiler::Typer*&gt; (3 samples, 0.09%)</title><rect x="92.9901%" y="1157" width="0.0873%" height="15" fill="rgb(246,89,16)" fg:x="3197" fg:w="3"/><text x="93.2401%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::TyperPhase::Run (3 samples, 0.09%)</title><rect x="92.9901%" y="1141" width="0.0873%" height="15" fill="rgb(216,158,49)" fg:x="3197" fg:w="3"/><text x="93.2401%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Run(v8::internal::ZoneVector (2 samples, 0.06%)</title><rect x="93.0192%" y="1125" width="0.0582%" height="15" fill="rgb(236,107,19)" fg:x="3198" fg:w="2"/><text x="93.2692%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.06%)</title><rect x="93.0192%" y="1109" width="0.0582%" height="15" fill="rgb(228,185,30)" fg:x="3198" fg:w="2"/><text x="93.2692%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.06%)</title><rect x="93.0192%" y="1093" width="0.0582%" height="15" fill="rgb(246,134,8)" fg:x="3198" fg:w="2"/><text x="93.2692%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (1 samples, 0.03%)</title><rect x="93.0483%" y="1077" width="0.0291%" height="15" fill="rgb(214,143,50)" fg:x="3199" fg:w="1"/><text x="93.2983%" y="1087.50"></text></g><g><title>deno`v8::internal::compiler::Typer::Visitor::Reduce (1 samples, 0.03%)</title><rect x="93.0483%" y="1061" width="0.0291%" height="15" fill="rgb(228,75,8)" fg:x="3199" fg:w="1"/><text x="93.2983%" y="1071.50"></text></g><g><title>deno`v8::internal::compiler::Type::Constant(v8::internal::compiler::JSHeapBroker*, v8::internal::Handle (1 samples, 0.03%)</title><rect x="93.0483%" y="1045" width="0.0291%" height="15" fill="rgb(207,175,4)" fg:x="3199" fg:w="1"/><text x="93.2983%" y="1055.50"></text></g><g><title>deno`v8::internal::compiler::ObjectData::IsHeapNumber (1 samples, 0.03%)</title><rect x="93.0483%" y="1029" width="0.0291%" height="15" fill="rgb(205,108,24)" fg:x="3199" fg:w="1"/><text x="93.2983%" y="1039.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InstructionSelectionPhase, v8::internal::compiler::Linkage*&amp;&gt; (1 samples, 0.03%)</title><rect x="93.0774%" y="1141" width="0.0291%" height="15" fill="rgb(244,120,49)" fg:x="3200" fg:w="1"/><text x="93.3274%" y="1151.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelectionPhase::Run (1 samples, 0.03%)</title><rect x="93.0774%" y="1125" width="0.0291%" height="15" fill="rgb(223,47,38)" fg:x="3200" fg:w="1"/><text x="93.3274%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::SelectInstructions (1 samples, 0.03%)</title><rect x="93.0774%" y="1109" width="0.0291%" height="15" fill="rgb(229,179,11)" fg:x="3200" fg:w="1"/><text x="93.3274%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::InstructionSelector::VisitBlock (1 samples, 0.03%)</title><rect x="93.0774%" y="1093" width="0.0291%" height="15" fill="rgb(231,122,1)" fg:x="3200" fg:w="1"/><text x="93.3274%" y="1103.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateFPRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (1 samples, 0.03%)</title><rect x="93.1065%" y="1125" width="0.0291%" height="15" fill="rgb(245,119,9)" fg:x="3201" fg:w="1"/><text x="93.3565%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (1 samples, 0.03%)</title><rect x="93.1065%" y="1109" width="0.0291%" height="15" fill="rgb(241,163,25)" fg:x="3201" fg:w="1"/><text x="93.3565%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges (1 samples, 0.03%)</title><rect x="93.1065%" y="1093" width="0.0291%" height="15" fill="rgb(217,214,3)" fg:x="3201" fg:w="1"/><text x="93.3565%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::UpdateDeferredFixedRanges(v8::internal::compiler::TopTierRegisterAllocationData::SpillMode, v8::internal::compiler::InstructionBlock*)::$_3::operator() (1 samples, 0.03%)</title><rect x="93.1065%" y="1077" width="0.0291%" height="15" fill="rgb(240,86,28)" fg:x="3201" fg:w="1"/><text x="93.3565%" y="1087.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (1 samples, 0.03%)</title><rect x="93.1355%" y="1125" width="0.0291%" height="15" fill="rgb(215,47,9)" fg:x="3202" fg:w="1"/><text x="93.3855%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (1 samples, 0.03%)</title><rect x="93.1355%" y="1109" width="0.0291%" height="15" fill="rgb(252,25,45)" fg:x="3202" fg:w="1"/><text x="93.3855%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::FindFreeRegistersForRange(v8::internal::compiler::LiveRange*, v8::base::Vector (1 samples, 0.03%)</title><rect x="93.1355%" y="1093" width="0.0291%" height="15" fill="rgb(251,164,9)" fg:x="3202" fg:w="1"/><text x="93.3855%" y="1103.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::MeetRegisterConstraintsPhase&gt; (2 samples, 0.06%)</title><rect x="93.1646%" y="1125" width="0.0582%" height="15" fill="rgb(233,194,0)" fg:x="3203" fg:w="2"/><text x="93.4146%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::ConstraintBuilder::MeetRegisterConstraints (2 samples, 0.06%)</title><rect x="93.1646%" y="1109" width="0.0582%" height="15" fill="rgb(249,111,24)" fg:x="3203" fg:w="2"/><text x="93.4146%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::ConstraintBuilder::MeetConstraintsBefore (2 samples, 0.06%)</title><rect x="93.1646%" y="1093" width="0.0582%" height="15" fill="rgb(250,223,3)" fg:x="3203" fg:w="2"/><text x="93.4146%" y="1103.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (38 samples, 1.11%)</title><rect x="92.1466%" y="1237" width="1.1053%" height="15" fill="rgb(236,178,37)" fg:x="3168" fg:w="38"/><text x="92.3966%" y="1247.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (38 samples, 1.11%)</title><rect x="92.1466%" y="1221" width="1.1053%" height="15" fill="rgb(241,158,50)" fg:x="3168" fg:w="38"/><text x="92.3966%" y="1231.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (38 samples, 1.11%)</title><rect x="92.1466%" y="1205" width="1.1053%" height="15" fill="rgb(213,121,41)" fg:x="3168" fg:w="38"/><text x="92.3966%" y="1215.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (38 samples, 1.11%)</title><rect x="92.1466%" y="1189" width="1.1053%" height="15" fill="rgb(240,92,3)" fg:x="3168" fg:w="38"/><text x="92.3966%" y="1199.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (31 samples, 0.90%)</title><rect x="92.3502%" y="1173" width="0.9017%" height="15" fill="rgb(205,123,3)" fg:x="3175" fg:w="31"/><text x="92.6002%" y="1183.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (6 samples, 0.17%)</title><rect x="93.0774%" y="1157" width="0.1745%" height="15" fill="rgb(205,97,47)" fg:x="3200" fg:w="6"/><text x="93.3274%" y="1167.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (5 samples, 0.15%)</title><rect x="93.1065%" y="1141" width="0.1454%" height="15" fill="rgb(247,152,14)" fg:x="3201" fg:w="5"/><text x="93.3565%" y="1151.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::OptimizeMovesPhase&gt; (1 samples, 0.03%)</title><rect x="93.2228%" y="1125" width="0.0291%" height="15" fill="rgb(248,195,53)" fg:x="3205" fg:w="1"/><text x="93.4728%" y="1135.50"></text></g><g><title>deno`v8::internal::compiler::MoveOptimizer::Run (1 samples, 0.03%)</title><rect x="93.2228%" y="1109" width="0.0291%" height="15" fill="rgb(226,201,16)" fg:x="3205" fg:w="1"/><text x="93.4728%" y="1119.50"></text></g><g><title>deno`v8::internal::compiler::MoveOptimizer::MigrateMoves (1 samples, 0.03%)</title><rect x="93.2228%" y="1093" width="0.0291%" height="15" fill="rgb(205,98,0)" fg:x="3205" fg:w="1"/><text x="93.4728%" y="1103.50"></text></g><g><title>deno`v8::internal::compiler::MoveOptimizer::CompressMoves(v8::internal::compiler::ParallelMove*, v8::internal::ZoneVector (1 samples, 0.03%)</title><rect x="93.2228%" y="1077" width="0.0291%" height="15" fill="rgb(214,191,48)" fg:x="3205" fg:w="1"/><text x="93.4728%" y="1087.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitorUtility::VisitJSObjectSubclass&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::JSFunction, v8::internal::JSFunction::BodyDescriptor&gt; (1 samples, 0.03%)</title><rect x="93.2519%" y="1205" width="0.0291%" height="15" fill="rgb(237,112,39)" fg:x="3206" fg:w="1"/><text x="93.5019%" y="1215.50"></text></g><g><title>deno`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, v8::internal::BasicMemoryChunk::Hasher, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, v8::internal::BasicMemoryChunk::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt; &gt; &gt;::__emplace_unique_key_args&lt;v8::internal::MemoryChunk*, std::__1::piecewise_construct_t const&amp;, std::__1::tuple (1 samples, 0.03%)</title><rect x="93.2810%" y="1205" width="0.0291%" height="15" fill="rgb(247,203,27)" fg:x="3207" fg:w="1"/><text x="93.5310%" y="1215.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitor::VisitLeftTrimmableArray&lt;v8::internal::FixedArray&gt; (6 samples, 0.17%)</title><rect x="93.5137%" y="1189" width="0.1745%" height="15" fill="rgb(235,124,28)" fg:x="3215" fg:w="6"/><text x="93.7637%" y="1199.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (5 samples, 0.15%)</title><rect x="93.5428%" y="1173" width="0.1454%" height="15" fill="rgb(208,207,46)" fg:x="3216" fg:w="5"/><text x="93.7928%" y="1183.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="93.6591%" y="1157" width="0.0291%" height="15" fill="rgb(234,176,4)" fg:x="3220" fg:w="1"/><text x="93.9091%" y="1167.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitorUtility::VisitJSObjectSubclass&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::JSArrayBuffer, v8::internal::JSArrayBuffer::BodyDescriptor&gt; (1 samples, 0.03%)</title><rect x="93.6882%" y="1189" width="0.0291%" height="15" fill="rgb(230,133,28)" fg:x="3221" fg:w="1"/><text x="93.9382%" y="1199.50"></text></g><g><title>deno`v8::internal::ConcurrentMarkingVisitor::ShouldVisit (1 samples, 0.03%)</title><rect x="93.6882%" y="1173" width="0.0291%" height="15" fill="rgb(211,137,40)" fg:x="3221" fg:w="1"/><text x="93.9382%" y="1183.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitorUtility::VisitJSObjectSubclass&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::JSExternalObject, v8::internal::JSExternalObject::BodyDescriptor&gt; (1 samples, 0.03%)</title><rect x="93.7173%" y="1189" width="0.0291%" height="15" fill="rgb(254,35,13)" fg:x="3222" fg:w="1"/><text x="93.9673%" y="1199.50"></text></g><g><title>deno`v8::internal::ConcurrentMarkingVisitor::ShouldVisit (1 samples, 0.03%)</title><rect x="93.7173%" y="1173" width="0.0291%" height="15" fill="rgb(225,49,51)" fg:x="3222" fg:w="1"/><text x="93.9673%" y="1183.50"></text></g><g><title>deno`v8::internal::ConcurrentMarkingVisitor::ShouldVisit (5 samples, 0.15%)</title><rect x="93.7464%" y="1173" width="0.1454%" height="15" fill="rgb(251,10,15)" fg:x="3223" fg:w="5"/><text x="93.9964%" y="1183.50"></text></g><g><title>deno`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, v8::internal::BasicMemoryChunk::Hasher, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, v8::internal::BasicMemoryChunk::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt; &gt; &gt;::__emplace_unique_key_args&lt;v8::internal::MemoryChunk*, std::__1::piecewise_construct_t const&amp;, std::__1::tuple (2 samples, 0.06%)</title><rect x="93.8336%" y="1157" width="0.0582%" height="15" fill="rgb(228,207,15)" fg:x="3226" fg:w="2"/><text x="94.0836%" y="1167.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (1 samples, 0.03%)</title><rect x="93.8918%" y="1173" width="0.0291%" height="15" fill="rgb(241,99,19)" fg:x="3228" fg:w="1"/><text x="94.1418%" y="1183.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitorUtility::VisitJSObjectSubclass&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::JSFunction, v8::internal::JSFunction::BodyDescriptor&gt; (8 samples, 0.23%)</title><rect x="93.7464%" y="1189" width="0.2327%" height="15" fill="rgb(207,104,49)" fg:x="3223" fg:w="8"/><text x="93.9964%" y="1199.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ConcurrentMarkingVisitor&gt; (2 samples, 0.06%)</title><rect x="93.9209%" y="1173" width="0.0582%" height="15" fill="rgb(234,99,18)" fg:x="3229" fg:w="2"/><text x="94.1709%" y="1183.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (2 samples, 0.06%)</title><rect x="93.9209%" y="1157" width="0.0582%" height="15" fill="rgb(213,191,49)" fg:x="3229" fg:w="2"/><text x="94.1709%" y="1167.50"></text></g><g><title>deno`v8::internal::ConcurrentMarkingVisitor::ShouldVisit (1 samples, 0.03%)</title><rect x="93.9791%" y="1173" width="0.0291%" height="15" fill="rgb(210,226,19)" fg:x="3231" fg:w="1"/><text x="94.2291%" y="1183.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointer&lt;v8::internal::ConcurrentMarkingVisitor&gt; (1 samples, 0.03%)</title><rect x="94.0081%" y="1173" width="0.0291%" height="15" fill="rgb(229,97,18)" fg:x="3232" fg:w="1"/><text x="94.2581%" y="1183.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitorUtility::VisitJSObjectSubclass&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::JSObject, v8::internal::JSObject::BodyDescriptor&gt; (3 samples, 0.09%)</title><rect x="93.9791%" y="1189" width="0.0873%" height="15" fill="rgb(211,167,15)" fg:x="3231" fg:w="3"/><text x="94.2291%" y="1199.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (1 samples, 0.03%)</title><rect x="94.0372%" y="1173" width="0.0291%" height="15" fill="rgb(210,169,34)" fg:x="3233" fg:w="1"/><text x="94.2872%" y="1183.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::ConcurrentMarkingVisitor&gt; (3 samples, 0.09%)</title><rect x="94.0663%" y="1173" width="0.0873%" height="15" fill="rgb(241,121,31)" fg:x="3234" fg:w="3"/><text x="94.3163%" y="1183.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="94.1245%" y="1157" width="0.0291%" height="15" fill="rgb(232,40,11)" fg:x="3236" fg:w="1"/><text x="94.3745%" y="1167.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitorUtility::VisitJSObjectSubclass&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::JSObject, v8::internal::JSObject::FastBodyDescriptor&gt; (4 samples, 0.12%)</title><rect x="94.0663%" y="1189" width="0.1163%" height="15" fill="rgb(205,86,26)" fg:x="3234" fg:w="4"/><text x="94.3163%" y="1199.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedHeapObjectSlot&gt; (1 samples, 0.03%)</title><rect x="94.1536%" y="1173" width="0.0291%" height="15" fill="rgb(231,126,28)" fg:x="3237" fg:w="1"/><text x="94.4036%" y="1183.50"></text></g><g><title>deno`int v8::internal::ConcurrentMarkingVisitorUtility::VisitJSObjectSubclass&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::JSTypedArray, v8::internal::JSTypedArray::BodyDescriptor&gt; (1 samples, 0.03%)</title><rect x="94.1827%" y="1189" width="0.0291%" height="15" fill="rgb(219,221,18)" fg:x="3238" fg:w="1"/><text x="94.4327%" y="1199.50"></text></g><g><title>deno`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::__unordered_map_hasher&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, v8::internal::BasicMemoryChunk::Hasher, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, true&gt;, std::__1::__unordered_map_equal&lt;v8::internal::MemoryChunk*, std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt;, std::__1::equal_to&lt;v8::internal::MemoryChunk*&gt;, v8::internal::BasicMemoryChunk::Hasher, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;v8::internal::MemoryChunk*, v8::internal::MemoryChunkData&gt; &gt; &gt;::__emplace_unique_key_args&lt;v8::internal::MemoryChunk*, std::__1::piecewise_construct_t const&amp;, std::__1::tuple (1 samples, 0.03%)</title><rect x="94.2118%" y="1189" width="0.0291%" height="15" fill="rgb(211,40,0)" fg:x="3239" fg:w="1"/><text x="94.4618%" y="1199.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateMaybeWeakPointer&lt;v8::internal::MarkingVisitorBase&lt;v8::internal::ConcurrentMarkingVisitor, v8::internal::ConcurrentMarkingState&gt; &gt;(v8::internal::HeapObject, int, v8::internal::MarkingVisitorBase (1 samples, 0.03%)</title><rect x="94.2408%" y="1189" width="0.0291%" height="15" fill="rgb(239,85,43)" fg:x="3240" fg:w="1"/><text x="94.4908%" y="1199.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::RunMajor(v8::JobDelegate*, v8::base::EnumSet (34 samples, 0.99%)</title><rect x="93.3101%" y="1205" width="0.9889%" height="15" fill="rgb(231,55,21)" fg:x="3208" fg:w="34"/><text x="93.5601%" y="1215.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.03%)</title><rect x="94.2699%" y="1189" width="0.0291%" height="15" fill="rgb(225,184,43)" fg:x="3241" fg:w="1"/><text x="94.5199%" y="1199.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.03%)</title><rect x="94.2699%" y="1173" width="0.0291%" height="15" fill="rgb(251,158,41)" fg:x="3241" fg:w="1"/><text x="94.5199%" y="1183.50"></text></g><g><title>deno`v8::internal::ConcurrentMarking::JobTaskMajor::Run (37 samples, 1.08%)</title><rect x="93.2519%" y="1221" width="1.0762%" height="15" fill="rgb(234,159,37)" fg:x="3206" fg:w="37"/><text x="93.5019%" y="1231.50"></text></g><g><title>deno`void v8::internal::ConcurrentMarkingVisitor::RecordSlot&lt;v8::internal::CompressedObjectSlot&gt; (1 samples, 0.03%)</title><rect x="94.2990%" y="1205" width="0.0291%" height="15" fill="rgb(216,204,22)" fg:x="3242" fg:w="1"/><text x="94.5490%" y="1215.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.03%)</title><rect x="94.3281%" y="1141" width="0.0291%" height="15" fill="rgb(214,17,3)" fg:x="3243" fg:w="1"/><text x="94.5781%" y="1151.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::Unmapper::UnmapFreeMemoryJob::Run (2 samples, 0.06%)</title><rect x="94.3281%" y="1221" width="0.0582%" height="15" fill="rgb(212,111,17)" fg:x="3243" fg:w="2"/><text x="94.5781%" y="1231.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::Unmapper::PerformFreeMemoryOnQueuedChunks (2 samples, 0.06%)</title><rect x="94.3281%" y="1205" width="0.0582%" height="15" fill="rgb(221,157,24)" fg:x="3243" fg:w="2"/><text x="94.5781%" y="1215.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::PerformFreeMemory (2 samples, 0.06%)</title><rect x="94.3281%" y="1189" width="0.0582%" height="15" fill="rgb(252,16,13)" fg:x="3243" fg:w="2"/><text x="94.5781%" y="1199.50"></text></g><g><title>deno`v8::internal::VirtualMemory::Free (2 samples, 0.06%)</title><rect x="94.3281%" y="1173" width="0.0582%" height="15" fill="rgb(221,62,2)" fg:x="3243" fg:w="2"/><text x="94.5781%" y="1183.50"></text></g><g><title>deno`v8::base::BoundedPageAllocator::FreePages (2 samples, 0.06%)</title><rect x="94.3281%" y="1157" width="0.0582%" height="15" fill="rgb(247,87,22)" fg:x="3243" fg:w="2"/><text x="94.5781%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="94.3572%" y="1141" width="0.0291%" height="15" fill="rgb(215,73,9)" fg:x="3244" fg:w="1"/><text x="94.6072%" y="1151.50"></text></g><g><title>deno`auto v8::internal::BodyDescriptorApply&lt;v8::internal::CallIterateBody, v8::internal::Map&amp;, v8::internal::HeapObject&amp;, int&amp;, v8::internal::RecordMigratedSlotVisitor*&amp;&gt; (2 samples, 0.06%)</title><rect x="94.4444%" y="1141" width="0.0582%" height="15" fill="rgb(207,175,33)" fg:x="3247" fg:w="2"/><text x="94.6944%" y="1151.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (1 samples, 0.03%)</title><rect x="94.5026%" y="1141" width="0.0291%" height="15" fill="rgb(243,129,54)" fg:x="3249" fg:w="1"/><text x="94.7526%" y="1151.50"></text></g><g><title>deno`v8::internal::RecordMigratedSlotVisitor::RecordMigratedSlot (4 samples, 0.12%)</title><rect x="94.5317%" y="1141" width="0.1163%" height="15" fill="rgb(227,119,45)" fg:x="3250" fg:w="4"/><text x="94.7817%" y="1151.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::RecordMigratedSlotVisitor&gt; (2 samples, 0.06%)</title><rect x="94.6481%" y="1141" width="0.0582%" height="15" fill="rgb(205,109,36)" fg:x="3254" fg:w="2"/><text x="94.8981%" y="1151.50"></text></g><g><title>deno`v8::internal::RecordMigratedSlotVisitor::RecordMigratedSlot (1 samples, 0.03%)</title><rect x="94.6771%" y="1125" width="0.0291%" height="15" fill="rgb(205,6,39)" fg:x="3255" fg:w="1"/><text x="94.9271%" y="1135.50"></text></g><g><title>deno`void v8::internal::CallIterateBody::apply&lt;v8::internal::FixedArray::BodyDescriptor, v8::internal::RecordMigratedSlotVisitor&gt; (1 samples, 0.03%)</title><rect x="94.7062%" y="1141" width="0.0291%" height="15" fill="rgb(221,32,16)" fg:x="3256" fg:w="1"/><text x="94.9562%" y="1151.50"></text></g><g><title>deno`v8::internal::EvacuateNewSpacePageVisitor&lt;(v8::internal::PageEvacuationMode)1&gt;::Visit (12 samples, 0.35%)</title><rect x="94.4154%" y="1157" width="0.3490%" height="15" fill="rgb(228,144,50)" fg:x="3246" fg:w="12"/><text x="94.6654%" y="1167.50"></text></g><g><title>deno`void v8::internal::CallIterateBody::apply&lt;v8::internal::JSArrayBuffer::BodyDescriptor, v8::internal::RecordMigratedSlotVisitor&gt; (1 samples, 0.03%)</title><rect x="94.7353%" y="1141" width="0.0291%" height="15" fill="rgb(229,201,53)" fg:x="3257" fg:w="1"/><text x="94.9853%" y="1151.50"></text></g><g><title>deno`v8::internal::RecordMigratedSlotVisitor::RecordMigratedSlot (1 samples, 0.03%)</title><rect x="94.7353%" y="1125" width="0.0291%" height="15" fill="rgb(249,153,27)" fg:x="3257" fg:w="1"/><text x="94.9853%" y="1135.50"></text></g><g><title>deno`v8::internal::PageEvacuationJob::Run (14 samples, 0.41%)</title><rect x="94.3863%" y="1221" width="0.4072%" height="15" fill="rgb(227,106,25)" fg:x="3245" fg:w="14"/><text x="94.6363%" y="1231.50"></text></g><g><title>deno`v8::internal::Evacuator::EvacuatePage (14 samples, 0.41%)</title><rect x="94.3863%" y="1205" width="0.4072%" height="15" fill="rgb(230,65,29)" fg:x="3245" fg:w="14"/><text x="94.6363%" y="1215.50"></text></g><g><title>deno`v8::internal::FullEvacuator::RawEvacuatePage (14 samples, 0.41%)</title><rect x="94.3863%" y="1189" width="0.4072%" height="15" fill="rgb(221,57,46)" fg:x="3245" fg:w="14"/><text x="94.6363%" y="1199.50"></text></g><g><title>deno`void v8::internal::LiveObjectVisitor::VisitBlackObjectsNoFail&lt;v8::internal::EvacuateNewSpacePageVisitor&lt;(v8::internal::PageEvacuationMode)1&gt;, v8::internal::NonAtomicMarkingState&gt;(v8::internal::MemoryChunk*, v8::internal::NonAtomicMarkingState*, v8::internal::EvacuateNewSpacePageVisitor&lt; (14 samples, 0.41%)</title><rect x="94.3863%" y="1173" width="0.4072%" height="15" fill="rgb(229,161,17)" fg:x="3245" fg:w="14"/><text x="94.6363%" y="1183.50"></text></g><g><title>deno`v8::internal::LiveObjectRange&lt;(v8::internal::LiveObjectIterationMode)0&gt;::iterator::AdvanceToNextValidObject (1 samples, 0.03%)</title><rect x="94.7644%" y="1157" width="0.0291%" height="15" fill="rgb(222,213,11)" fg:x="3258" fg:w="1"/><text x="95.0144%" y="1167.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.03%)</title><rect x="94.7935%" y="1189" width="0.0291%" height="15" fill="rgb(235,35,13)" fg:x="3259" fg:w="1"/><text x="95.0435%" y="1199.50"></text></g><g><title>deno`v8::internal::IterateAndScavengePromotedObjectsVisitor::VisitPointers (1 samples, 0.03%)</title><rect x="95.8406%" y="1157" width="0.0291%" height="15" fill="rgb(233,158,34)" fg:x="3295" fg:w="1"/><text x="96.0906%" y="1167.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::ShouldBePromoted (1 samples, 0.03%)</title><rect x="95.8988%" y="1141" width="0.0291%" height="15" fill="rgb(215,151,48)" fg:x="3297" fg:w="1"/><text x="96.1488%" y="1151.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.03%)</title><rect x="96.0151%" y="1125" width="0.0291%" height="15" fill="rgb(229,84,14)" fg:x="3301" fg:w="1"/><text x="96.2651%" y="1135.50"></text></g><g><title>deno`auto v8::internal::BodyDescriptorApply&lt;v8::internal::CallIterateBody, v8::internal::Map&amp;, v8::internal::HeapObject&amp;, int&amp;, v8::internal::IterateAndScavengePromotedObjectsVisitor*&amp;&gt; (9 samples, 0.26%)</title><rect x="95.8115%" y="1173" width="0.2618%" height="15" fill="rgb(229,68,14)" fg:x="3294" fg:w="9"/><text x="96.0615%" y="1183.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (7 samples, 0.20%)</title><rect x="95.8697%" y="1157" width="0.2036%" height="15" fill="rgb(243,106,26)" fg:x="3296" fg:w="7"/><text x="96.1197%" y="1167.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (5 samples, 0.15%)</title><rect x="95.9279%" y="1141" width="0.1454%" height="15" fill="rgb(206,45,38)" fg:x="3298" fg:w="5"/><text x="96.1779%" y="1151.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::RawRefillLabMain (1 samples, 0.03%)</title><rect x="96.0442%" y="1125" width="0.0291%" height="15" fill="rgb(226,6,15)" fg:x="3302" fg:w="1"/><text x="96.2942%" y="1135.50"></text></g><g><title>deno`v8::internal::CompactionSpace::TryExpandImpl (1 samples, 0.03%)</title><rect x="96.0442%" y="1109" width="0.0291%" height="15" fill="rgb(232,22,54)" fg:x="3302" fg:w="1"/><text x="96.2942%" y="1119.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::TryExpandImpl (1 samples, 0.03%)</title><rect x="96.0442%" y="1093" width="0.0291%" height="15" fill="rgb(229,222,32)" fg:x="3302" fg:w="1"/><text x="96.2942%" y="1103.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (1 samples, 0.03%)</title><rect x="96.0442%" y="1077" width="0.0291%" height="15" fill="rgb(228,62,29)" fg:x="3302" fg:w="1"/><text x="96.2942%" y="1087.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (1 samples, 0.03%)</title><rect x="96.0442%" y="1061" width="0.0291%" height="15" fill="rgb(251,103,34)" fg:x="3302" fg:w="1"/><text x="96.2942%" y="1071.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (1 samples, 0.03%)</title><rect x="96.0442%" y="1045" width="0.0291%" height="15" fill="rgb(233,12,30)" fg:x="3302" fg:w="1"/><text x="96.2942%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.03%)</title><rect x="96.0442%" y="1029" width="0.0291%" height="15" fill="rgb(238,52,0)" fg:x="3302" fg:w="1"/><text x="96.2942%" y="1039.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (1 samples, 0.03%)</title><rect x="96.0733%" y="1173" width="0.0291%" height="15" fill="rgb(223,98,5)" fg:x="3303" fg:w="1"/><text x="96.3233%" y="1183.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.03%)</title><rect x="96.1024%" y="1173" width="0.0291%" height="15" fill="rgb(228,75,37)" fg:x="3304" fg:w="1"/><text x="96.3524%" y="1183.50"></text></g><g><title>deno`v8::internal::JSObject::GetHeaderSize (2 samples, 0.06%)</title><rect x="96.1315%" y="1173" width="0.0582%" height="15" fill="rgb(205,115,49)" fg:x="3305" fg:w="2"/><text x="96.3815%" y="1183.50"></text></g><g><title>deno`v8::internal::ScavengeVisitor::VisitPointers (1 samples, 0.03%)</title><rect x="96.1896%" y="1173" width="0.0291%" height="15" fill="rgb(250,154,43)" fg:x="3307" fg:w="1"/><text x="96.4396%" y="1183.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::GetMaxConcurrency (1 samples, 0.03%)</title><rect x="96.2187%" y="1173" width="0.0291%" height="15" fill="rgb(226,43,29)" fg:x="3308" fg:w="1"/><text x="96.4687%" y="1183.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (1 samples, 0.03%)</title><rect x="96.8586%" y="1157" width="0.0291%" height="15" fill="rgb(249,228,39)" fg:x="3330" fg:w="1"/><text x="97.1086%" y="1167.50"></text></g><g><title>deno`v8::internal::Heap::GetFillToAlign (3 samples, 0.09%)</title><rect x="96.8877%" y="1157" width="0.0873%" height="15" fill="rgb(216,79,43)" fg:x="3331" fg:w="3"/><text x="97.1377%" y="1167.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (26 samples, 0.76%)</title><rect x="96.2478%" y="1173" width="0.7563%" height="15" fill="rgb(228,95,12)" fg:x="3309" fg:w="26"/><text x="96.4978%" y="1183.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.03%)</title><rect x="96.9750%" y="1157" width="0.0291%" height="15" fill="rgb(249,221,15)" fg:x="3334" fg:w="1"/><text x="97.2250%" y="1167.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="97.0332%" y="1157" width="0.0291%" height="15" fill="rgb(233,34,13)" fg:x="3336" fg:w="1"/><text x="97.2832%" y="1167.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.03%)</title><rect x="97.0332%" y="1141" width="0.0291%" height="15" fill="rgb(214,103,39)" fg:x="3336" fg:w="1"/><text x="97.2832%" y="1151.50"></text></g><g><title>deno`v8::platform::DefaultJobState::NotifyConcurrencyIncrease (3 samples, 0.09%)</title><rect x="97.0041%" y="1173" width="0.0873%" height="15" fill="rgb(251,126,39)" fg:x="3335" fg:w="3"/><text x="97.2541%" y="1183.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="97.0622%" y="1157" width="0.0291%" height="15" fill="rgb(214,216,36)" fg:x="3337" fg:w="1"/><text x="97.3122%" y="1167.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (1 samples, 0.03%)</title><rect x="97.1786%" y="1157" width="0.0291%" height="15" fill="rgb(220,221,8)" fg:x="3341" fg:w="1"/><text x="97.4286%" y="1167.50"></text></g><g><title>deno`v8::internal::SemiSpaceNewSpace::ShouldBePromoted (1 samples, 0.03%)</title><rect x="97.2077%" y="1157" width="0.0291%" height="15" fill="rgb(240,216,3)" fg:x="3342" fg:w="1"/><text x="97.4577%" y="1167.50"></text></g><g><title>deno`heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;::Local::PublishPushSegment (1 samples, 0.03%)</title><rect x="97.4985%" y="1141" width="0.0291%" height="15" fill="rgb(232,218,17)" fg:x="3352" fg:w="1"/><text x="97.7485%" y="1151.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.03%)</title><rect x="97.4985%" y="1125" width="0.0291%" height="15" fill="rgb(229,163,45)" fg:x="3352" fg:w="1"/><text x="97.7485%" y="1135.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (2 samples, 0.06%)</title><rect x="97.5276%" y="1141" width="0.0582%" height="15" fill="rgb(231,110,42)" fg:x="3353" fg:w="2"/><text x="97.7776%" y="1151.50"></text></g><g><title>deno`v8::internal::Heap::GetFillToAlign (1 samples, 0.03%)</title><rect x="97.5858%" y="1141" width="0.0291%" height="15" fill="rgb(208,170,48)" fg:x="3355" fg:w="1"/><text x="97.8358%" y="1151.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (19 samples, 0.55%)</title><rect x="97.0913%" y="1173" width="0.5526%" height="15" fill="rgb(239,116,25)" fg:x="3338" fg:w="19"/><text x="97.3413%" y="1183.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (14 samples, 0.41%)</title><rect x="97.2368%" y="1157" width="0.4072%" height="15" fill="rgb(219,200,50)" fg:x="3343" fg:w="14"/><text x="97.4868%" y="1167.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.03%)</title><rect x="97.6149%" y="1141" width="0.0291%" height="15" fill="rgb(245,200,0)" fg:x="3356" fg:w="1"/><text x="97.8649%" y="1151.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (3 samples, 0.09%)</title><rect x="97.8767%" y="1157" width="0.0873%" height="15" fill="rgb(245,119,33)" fg:x="3365" fg:w="3"/><text x="98.1267%" y="1167.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (1 samples, 0.03%)</title><rect x="97.9348%" y="1141" width="0.0291%" height="15" fill="rgb(231,125,12)" fg:x="3367" fg:w="1"/><text x="98.1848%" y="1151.50"></text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IteratePointers&lt;v8::internal::IterateAndScavengePromotedObjectsVisitor&gt; (12 samples, 0.35%)</title><rect x="97.6440%" y="1173" width="0.3490%" height="15" fill="rgb(216,96,41)" fg:x="3357" fg:w="12"/><text x="97.8940%" y="1183.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="97.9639%" y="1157" width="0.0291%" height="15" fill="rgb(248,43,45)" fg:x="3368" fg:w="1"/><text x="98.2139%" y="1167.50"></text></g><g><title>deno`void v8::internal::JSFunction::BodyDescriptor::IterateBody&lt;v8::internal::ScavengeVisitor&gt; (6 samples, 0.17%)</title><rect x="97.9930%" y="1173" width="0.1745%" height="15" fill="rgb(217,222,7)" fg:x="3369" fg:w="6"/><text x="98.2430%" y="1183.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (4 samples, 0.12%)</title><rect x="98.0512%" y="1157" width="0.1163%" height="15" fill="rgb(233,28,6)" fg:x="3371" fg:w="4"/><text x="98.3012%" y="1167.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="98.1675%" y="1173" width="0.0582%" height="15" fill="rgb(231,218,15)" fg:x="3375" fg:w="2"/><text x="98.4175%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="98.1966%" y="1157" width="0.0291%" height="15" fill="rgb(226,171,48)" fg:x="3376" fg:w="1"/><text x="98.4466%" y="1167.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="98.2257%" y="1173" width="0.0291%" height="15" fill="rgb(235,201,9)" fg:x="3377" fg:w="1"/><text x="98.4757%" y="1183.50"></text></g><g><title>deno`v8::internal::Scavenger::Process (120 samples, 3.49%)</title><rect x="94.8226%" y="1189" width="3.4904%" height="15" fill="rgb(217,80,15)" fg:x="3260" fg:w="120"/><text x="95.0726%" y="1199.50">den..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (2 samples, 0.06%)</title><rect x="98.2548%" y="1173" width="0.0582%" height="15" fill="rgb(219,152,8)" fg:x="3378" fg:w="2"/><text x="98.5048%" y="1183.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (2 samples, 0.06%)</title><rect x="98.2548%" y="1157" width="0.0582%" height="15" fill="rgb(243,107,38)" fg:x="3378" fg:w="2"/><text x="98.5048%" y="1167.50"></text></g><g><title>deno`v8::internal::InvalidatedSlotsFilter::IsValid (1 samples, 0.03%)</title><rect x="98.4584%" y="1173" width="0.0291%" height="15" fill="rgb(231,17,5)" fg:x="3385" fg:w="1"/><text x="98.7084%" y="1183.50"></text></g><g><title>deno`heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;::Local::PublishPushSegment (1 samples, 0.03%)</title><rect x="98.9529%" y="1157" width="0.0291%" height="15" fill="rgb(209,25,54)" fg:x="3402" fg:w="1"/><text x="99.2029%" y="1167.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="98.9529%" y="1141" width="0.0291%" height="15" fill="rgb(219,0,2)" fg:x="3402" fg:w="1"/><text x="99.2029%" y="1151.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.03%)</title><rect x="98.9529%" y="1125" width="0.0291%" height="15" fill="rgb(246,9,5)" fg:x="3402" fg:w="1"/><text x="99.2029%" y="1135.50"></text></g><g><title>deno`v8::internal::EvacuationAllocator::AllocateInLAB (1 samples, 0.03%)</title><rect x="98.9820%" y="1157" width="0.0291%" height="15" fill="rgb(226,159,4)" fg:x="3403" fg:w="1"/><text x="99.2320%" y="1167.50"></text></g><g><title>deno`v8::internal::Heap::GetFillToAlign (1 samples, 0.03%)</title><rect x="99.0111%" y="1157" width="0.0291%" height="15" fill="rgb(219,175,34)" fg:x="3404" fg:w="1"/><text x="99.2611%" y="1167.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (26 samples, 0.76%)</title><rect x="98.3130%" y="1189" width="0.7563%" height="15" fill="rgb(236,10,46)" fg:x="3380" fg:w="26"/><text x="98.5630%" y="1199.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (20 samples, 0.58%)</title><rect x="98.4875%" y="1173" width="0.5817%" height="15" fill="rgb(240,211,16)" fg:x="3386" fg:w="20"/><text x="98.7375%" y="1183.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::RawRefillLabMain (1 samples, 0.03%)</title><rect x="99.0401%" y="1157" width="0.0291%" height="15" fill="rgb(205,3,43)" fg:x="3405" fg:w="1"/><text x="99.2901%" y="1167.50"></text></g><g><title>deno`v8::internal::CompactionSpace::TryExpandImpl (1 samples, 0.03%)</title><rect x="99.0401%" y="1141" width="0.0291%" height="15" fill="rgb(245,7,22)" fg:x="3405" fg:w="1"/><text x="99.2901%" y="1151.50"></text></g><g><title>deno`v8::internal::PagedSpaceBase::TryExpandImpl (1 samples, 0.03%)</title><rect x="99.0401%" y="1125" width="0.0291%" height="15" fill="rgb(239,132,32)" fg:x="3405" fg:w="1"/><text x="99.2901%" y="1135.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocatePage (1 samples, 0.03%)</title><rect x="99.0401%" y="1109" width="0.0291%" height="15" fill="rgb(228,202,34)" fg:x="3405" fg:w="1"/><text x="99.2901%" y="1119.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateUninitializedChunk (1 samples, 0.03%)</title><rect x="99.0401%" y="1093" width="0.0291%" height="15" fill="rgb(254,200,22)" fg:x="3405" fg:w="1"/><text x="99.2901%" y="1103.50"></text></g><g><title>deno`v8::internal::MemoryAllocator::AllocateAlignedMemory (1 samples, 0.03%)</title><rect x="99.0401%" y="1077" width="0.0291%" height="15" fill="rgb(219,10,39)" fg:x="3405" fg:w="1"/><text x="99.2901%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="99.0401%" y="1061" width="0.0291%" height="15" fill="rgb(226,210,39)" fg:x="3405" fg:w="1"/><text x="99.2901%" y="1071.50"></text></g><g><title>deno`v8::internal::SlotCallbackResult v8::internal::Scavenger::ScavengeObject&lt;v8::internal::CompressedHeapObjectSlot&gt; (4 samples, 0.12%)</title><rect x="99.0692%" y="1189" width="0.1163%" height="15" fill="rgb(208,219,16)" fg:x="3406" fg:w="4"/><text x="99.3192%" y="1199.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::Run (155 samples, 4.51%)</title><rect x="94.7935%" y="1221" width="4.5084%" height="15" fill="rgb(216,158,51)" fg:x="3259" fg:w="155"/><text x="95.0435%" y="1231.50">deno`..</text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (155 samples, 4.51%)</title><rect x="94.7935%" y="1205" width="4.5084%" height="15" fill="rgb(233,14,44)" fg:x="3259" fg:w="155"/><text x="95.0435%" y="1215.50">deno`..</text></g><g><title>deno`void v8::internal::BodyDescriptorBase::IterateJSObjectBodyImpl&lt;v8::internal::ScavengeVisitor&gt; (4 samples, 0.12%)</title><rect x="99.1856%" y="1189" width="0.1163%" height="15" fill="rgb(237,97,39)" fg:x="3410" fg:w="4"/><text x="99.4356%" y="1199.50"></text></g><g><title>deno`v8::internal::LiveObjectRange&lt;(v8::internal::LiveObjectIterationMode)0&gt;::iterator::AdvanceToNextValidObject (1 samples, 0.03%)</title><rect x="99.3019%" y="1173" width="0.0291%" height="15" fill="rgb(218,198,43)" fg:x="3414" fg:w="1"/><text x="99.5519%" y="1183.50"></text></g><g><title>deno`v8::internal::HeapObject::SizeFromMap (2 samples, 0.06%)</title><rect x="99.3601%" y="1157" width="0.0582%" height="15" fill="rgb(231,104,20)" fg:x="3416" fg:w="2"/><text x="99.6101%" y="1167.50"></text></g><g><title>deno`v8::internal::Sweeper::RawSweep(v8::internal::Page*, v8::internal::FreeSpaceTreatmentMode, v8::internal::Sweeper::SweepingMode, v8::base::LockGuard&lt;v8::base::Mutex, (v8::base::NullBehavior)0&gt; const&amp;, std::__1::unordered_map&lt;v8::internal::AllocationSite, unsigned long, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, std::__1::allocator&lt;std::__1::pair (8 samples, 0.23%)</title><rect x="99.3310%" y="1173" width="0.2327%" height="15" fill="rgb(254,36,13)" fg:x="3415" fg:w="8"/><text x="99.5810%" y="1183.50"></text></g><g><title>deno`v8::internal::LiveObjectRange&lt;(v8::internal::LiveObjectIterationMode)0&gt;::iterator::AdvanceToNextValidObject (5 samples, 0.15%)</title><rect x="99.4183%" y="1157" width="0.1454%" height="15" fill="rgb(248,14,50)" fg:x="3418" fg:w="5"/><text x="99.6683%" y="1167.50"></text></g><g><title>deno`v8::platform::DefaultJobWorker::Run (218 samples, 6.34%)</title><rect x="93.2519%" y="1237" width="6.3409%" height="15" fill="rgb(217,107,29)" fg:x="3206" fg:w="218"/><text x="93.5019%" y="1247.50">deno`v8:..</text></g><g><title>deno`v8::internal::Sweeper::SweeperJob::Run (10 samples, 0.29%)</title><rect x="99.3019%" y="1221" width="0.2909%" height="15" fill="rgb(251,169,33)" fg:x="3414" fg:w="10"/><text x="99.5519%" y="1231.50"></text></g><g><title>deno`v8::internal::Sweeper::SweeperJob::RunImpl (10 samples, 0.29%)</title><rect x="99.3019%" y="1205" width="0.2909%" height="15" fill="rgb(217,108,32)" fg:x="3414" fg:w="10"/><text x="99.5519%" y="1215.50"></text></g><g><title>deno`v8::internal::Sweeper::ParallelSweepPage(v8::internal::Page*, v8::internal::AllocationSpace, std::__1::unordered_map&lt;v8::internal::AllocationSite, unsigned long, v8::internal::Object::Hasher, std::__1::equal_to&lt;v8::internal::AllocationSite&gt;, std::__1::allocator&lt;std::__1::pair (10 samples, 0.29%)</title><rect x="99.3019%" y="1189" width="0.2909%" height="15" fill="rgb(219,66,42)" fg:x="3414" fg:w="10"/><text x="99.5519%" y="1199.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="99.5637%" y="1173" width="0.0291%" height="15" fill="rgb(206,180,7)" fg:x="3423" fg:w="1"/><text x="99.8137%" y="1183.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (1 samples, 0.03%)</title><rect x="99.5928%" y="1237" width="0.0291%" height="15" fill="rgb(208,226,31)" fg:x="3424" fg:w="1"/><text x="99.8428%" y="1247.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.03%)</title><rect x="99.5928%" y="1221" width="0.0291%" height="15" fill="rgb(218,26,49)" fg:x="3424" fg:w="1"/><text x="99.8428%" y="1231.50"></text></g><g><title>deno`std::__1::__shared_weak_count::__release_weak (1 samples, 0.03%)</title><rect x="99.6219%" y="1221" width="0.0291%" height="15" fill="rgb(233,197,48)" fg:x="3425" fg:w="1"/><text x="99.8719%" y="1231.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::SweepingJob::SweepFull (2 samples, 0.06%)</title><rect x="99.6510%" y="1221" width="0.0582%" height="15" fill="rgb(252,181,51)" fg:x="3426" fg:w="2"/><text x="99.9010%" y="1231.50"></text></g><g><title>deno`std::__1::__shared_ptr_pointer&lt;v8::internal::BackingStore*, std::__1::default_delete&lt;v8::internal::BackingStore&gt;, std::__1::allocator&lt;v8::internal::BackingStore&gt; &gt;::__on_zero_shared (1 samples, 0.03%)</title><rect x="99.6800%" y="1205" width="0.0291%" height="15" fill="rgb(253,90,19)" fg:x="3427" fg:w="1"/><text x="99.9300%" y="1215.50"></text></g><g><title>deno`v8::internal::BackingStore::~BackingStore (1 samples, 0.03%)</title><rect x="99.6800%" y="1189" width="0.0291%" height="15" fill="rgb(215,171,30)" fg:x="3427" fg:w="1"/><text x="99.9300%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="99.6800%" y="1173" width="0.0291%" height="15" fill="rgb(214,222,9)" fg:x="3427" fg:w="1"/><text x="99.9300%" y="1183.50"></text></g><g><title>deno`std::__1::__shared_ptr_pointer&lt;v8::internal::BackingStore*, std::__1::default_delete&lt;v8::internal::BackingStore&gt;, std::__1::allocator&lt;v8::internal::BackingStore&gt; &gt;::__on_zero_shared (1 samples, 0.03%)</title><rect x="99.7382%" y="1205" width="0.0291%" height="15" fill="rgb(223,3,22)" fg:x="3429" fg:w="1"/><text x="99.9882%" y="1215.50"></text></g><g><title>deno`v8::internal::BackingStore::~BackingStore (1 samples, 0.03%)</title><rect x="99.7382%" y="1189" width="0.0291%" height="15" fill="rgb(225,196,46)" fg:x="3429" fg:w="1"/><text x="99.9882%" y="1199.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="99.7382%" y="1173" width="0.0291%" height="15" fill="rgb(209,110,37)" fg:x="3429" fg:w="1"/><text x="99.9882%" y="1183.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.12%)</title><rect x="99.7673%" y="1205" width="0.1163%" height="15" fill="rgb(249,89,12)" fg:x="3430" fg:w="4"/><text x="100.0173%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="99.8546%" y="1189" width="0.0291%" height="15" fill="rgb(226,27,33)" fg:x="3433" fg:w="1"/><text x="100.1046%" y="1199.50"></text></g><g><title>deno`v8::internal::ArrayBufferSweeper::SweepingJob::SweepYoung (8 samples, 0.23%)</title><rect x="99.7091%" y="1221" width="0.2327%" height="15" fill="rgb(213,82,22)" fg:x="3428" fg:w="8"/><text x="99.9591%" y="1231.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.06%)</title><rect x="99.8837%" y="1205" width="0.0582%" height="15" fill="rgb(248,140,0)" fg:x="3434" fg:w="2"/><text x="100.1337%" y="1215.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="99.9418%" y="1221" width="0.0291%" height="15" fill="rgb(228,106,3)" fg:x="3436" fg:w="1"/><text x="100.1918%" y="1231.50"></text></g><g><title>all (3,438 samples, 100%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(209,23,37)" fg:x="0" fg:w="3438"/><text x="0.2500%" y="1327.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (2,680 samples, 77.95%)</title><rect x="22.0477%" y="1301" width="77.9523%" height="15" fill="rgb(241,93,50)" fg:x="758" fg:w="2680"/><text x="22.2977%" y="1311.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (2,680 samples, 77.95%)</title><rect x="22.0477%" y="1285" width="77.9523%" height="15" fill="rgb(253,46,43)" fg:x="758" fg:w="2680"/><text x="22.2977%" y="1295.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>deno`v8::base::ThreadEntry (270 samples, 7.85%)</title><rect x="92.1466%" y="1269" width="7.8534%" height="15" fill="rgb(226,206,43)" fg:x="3168" fg:w="270"/><text x="92.3966%" y="1279.50">deno`v8::ba..</text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (270 samples, 7.85%)</title><rect x="92.1466%" y="1253" width="7.8534%" height="15" fill="rgb(217,54,7)" fg:x="3168" fg:w="270"/><text x="92.3966%" y="1263.50">deno`v8::pl..</text></g><g><title>deno`void std::__1::__function::__policy_invoker&lt;void ()&gt;::__call_impl&lt;std::__1::__function::__default_alloc_func&lt;v8::internal::ArrayBufferSweeper::RequestSweep(v8::internal::ArrayBufferSweeper::SweepingType)::$_0, void ()&gt; &gt; (13 samples, 0.38%)</title><rect x="99.6219%" y="1237" width="0.3781%" height="15" fill="rgb(223,5,52)" fg:x="3425" fg:w="13"/><text x="99.8719%" y="1247.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="99.9709%" y="1221" width="0.0291%" height="15" fill="rgb(206,52,46)" fg:x="3437" fg:w="1"/><text x="100.2209%" y="1231.50"></text></g></svg></svg>