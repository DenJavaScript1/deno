<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="693.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="15336"><g><title>deno`OUTLINED_FUNCTION_19080 (3 samples, 0.02%)</title><rect x="0.0065%" y="581" width="0.0196%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2565%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_242 (2 samples, 0.01%)</title><rect x="0.0391%" y="581" width="0.0130%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="2"/><text x="0.2891%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_3562 (4 samples, 0.03%)</title><rect x="0.0522%" y="581" width="0.0261%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="4"/><text x="0.3022%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_5851 (7 samples, 0.05%)</title><rect x="0.0848%" y="581" width="0.0456%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="7"/><text x="0.3348%" y="591.50"></text></g><g><title>deno`OUTLINED_FUNCTION_8286 (2 samples, 0.01%)</title><rect x="0.1369%" y="581" width="0.0130%" height="15" fill="rgb(208,68,35)" fg:x="21" fg:w="2"/><text x="0.3869%" y="591.50"></text></g><g><title>deno`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (3 samples, 0.02%)</title><rect x="0.1565%" y="581" width="0.0196%" height="15" fill="rgb(232,128,0)" fg:x="24" fg:w="3"/><text x="0.4065%" y="591.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::task::poll::Poll&lt;core::result::Result&lt;i32,anyhow::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="0.1826%" y="581" width="0.0130%" height="15" fill="rgb(207,160,47)" fg:x="28" fg:w="2"/><text x="0.4326%" y="591.50"></text></g><g><title>deno`&lt;tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set::Reset as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="0.3260%" y="549" width="0.0326%" height="15" fill="rgb(228,23,34)" fg:x="50" fg:w="5"/><text x="0.5760%" y="559.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.03%)</title><rect x="0.3260%" y="533" width="0.0326%" height="15" fill="rgb(218,30,26)" fg:x="50" fg:w="5"/><text x="0.5760%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_15813 (3 samples, 0.02%)</title><rect x="0.3717%" y="549" width="0.0196%" height="15" fill="rgb(220,122,19)" fg:x="57" fg:w="3"/><text x="0.6217%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9225 (6 samples, 0.04%)</title><rect x="0.3912%" y="549" width="0.0391%" height="15" fill="rgb(250,228,42)" fg:x="60" fg:w="6"/><text x="0.6412%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_10843 (6 samples, 0.04%)</title><rect x="0.5021%" y="517" width="0.0391%" height="15" fill="rgb(240,193,28)" fg:x="77" fg:w="6"/><text x="0.7521%" y="527.50"></text></g><g><title>deno`OUTLINED_FUNCTION_222 (3 samples, 0.02%)</title><rect x="0.5477%" y="517" width="0.0196%" height="15" fill="rgb(216,20,37)" fg:x="84" fg:w="3"/><text x="0.7977%" y="527.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="0.6977%" y="453" width="0.0130%" height="15" fill="rgb(206,188,39)" fg:x="107" fg:w="2"/><text x="0.9477%" y="463.50"></text></g><g><title>deno`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="0.7107%" y="453" width="0.0130%" height="15" fill="rgb(217,207,13)" fg:x="109" fg:w="2"/><text x="0.9607%" y="463.50"></text></g><g><title>deno`OUTLINED_FUNCTION_24903 (2 samples, 0.01%)</title><rect x="0.7303%" y="453" width="0.0130%" height="15" fill="rgb(231,73,38)" fg:x="112" fg:w="2"/><text x="0.9803%" y="463.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="0.7499%" y="453" width="0.0130%" height="15" fill="rgb(225,20,46)" fg:x="115" fg:w="2"/><text x="0.9999%" y="463.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (4 samples, 0.03%)</title><rect x="0.7825%" y="453" width="0.0261%" height="15" fill="rgb(210,31,41)" fg:x="120" fg:w="4"/><text x="1.0325%" y="463.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (2 samples, 0.01%)</title><rect x="1.1411%" y="421" width="0.0130%" height="15" fill="rgb(221,200,47)" fg:x="175" fg:w="2"/><text x="1.3911%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="1.1607%" y="421" width="0.0326%" height="15" fill="rgb(226,26,5)" fg:x="178" fg:w="5"/><text x="1.4107%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="1.1802%" y="405" width="0.0130%" height="15" fill="rgb(249,33,26)" fg:x="181" fg:w="2"/><text x="1.4302%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="1.1933%" y="421" width="0.0130%" height="15" fill="rgb(235,183,28)" fg:x="183" fg:w="2"/><text x="1.4433%" y="431.50"></text></g><g><title>deno`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.10%)</title><rect x="1.1150%" y="437" width="0.0978%" height="15" fill="rgb(221,5,38)" fg:x="171" fg:w="15"/><text x="1.3650%" y="447.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;deno_flash::op_flash_next_async::call::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="1.2976%" y="421" width="0.0130%" height="15" fill="rgb(247,18,42)" fg:x="199" fg:w="2"/><text x="1.5476%" y="431.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;deno_core::async_cancel::internal::Node&gt; (4 samples, 0.03%)</title><rect x="1.3106%" y="421" width="0.0261%" height="15" fill="rgb(241,131,45)" fg:x="201" fg:w="4"/><text x="1.5606%" y="431.50"></text></g><g><title>deno`&lt;deno_core::async_cancel::internal::Node as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="1.3172%" y="405" width="0.0196%" height="15" fill="rgb(249,31,29)" fg:x="202" fg:w="3"/><text x="1.5672%" y="415.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (9 samples, 0.06%)</title><rect x="1.3432%" y="421" width="0.0587%" height="15" fill="rgb(225,111,53)" fg:x="206" fg:w="9"/><text x="1.5932%" y="431.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (4 samples, 0.03%)</title><rect x="1.4019%" y="421" width="0.0261%" height="15" fill="rgb(238,160,17)" fg:x="215" fg:w="4"/><text x="1.6519%" y="431.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 0.23%)</title><rect x="1.2128%" y="437" width="0.2282%" height="15" fill="rgb(214,148,48)" fg:x="186" fg:w="35"/><text x="1.4628%" y="447.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (2 samples, 0.01%)</title><rect x="1.4280%" y="421" width="0.0130%" height="15" fill="rgb(232,36,49)" fg:x="219" fg:w="2"/><text x="1.6780%" y="431.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (4 samples, 0.03%)</title><rect x="1.4606%" y="437" width="0.0261%" height="15" fill="rgb(209,103,24)" fg:x="224" fg:w="4"/><text x="1.7106%" y="447.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (4 samples, 0.03%)</title><rect x="1.4606%" y="421" width="0.0261%" height="15" fill="rgb(229,88,8)" fg:x="224" fg:w="4"/><text x="1.7106%" y="431.50"></text></g><g><title>deno`&lt;v8::scope::HandleScope&lt;()&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="1.4867%" y="437" width="0.0130%" height="15" fill="rgb(213,181,19)" fg:x="228" fg:w="2"/><text x="1.7367%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.09%)</title><rect x="1.5323%" y="405" width="0.0913%" height="15" fill="rgb(254,191,54)" fg:x="235" fg:w="14"/><text x="1.7823%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.07%)</title><rect x="1.5519%" y="389" width="0.0717%" height="15" fill="rgb(241,83,37)" fg:x="238" fg:w="11"/><text x="1.8019%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.07%)</title><rect x="1.5519%" y="373" width="0.0717%" height="15" fill="rgb(233,36,39)" fg:x="238" fg:w="11"/><text x="1.8019%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.06%)</title><rect x="1.5649%" y="357" width="0.0587%" height="15" fill="rgb(226,3,54)" fg:x="240" fg:w="9"/><text x="1.8149%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="1.6106%" y="341" width="0.0130%" height="15" fill="rgb(245,192,40)" fg:x="247" fg:w="2"/><text x="1.8606%" y="351.50"></text></g><g><title>deno`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.12%)</title><rect x="1.5258%" y="437" width="0.1239%" height="15" fill="rgb(238,167,29)" fg:x="234" fg:w="19"/><text x="1.7758%" y="447.50"></text></g><g><title>deno`alloc::raw_vec::finish_grow (18 samples, 0.12%)</title><rect x="1.5323%" y="421" width="0.1174%" height="15" fill="rgb(232,182,51)" fg:x="235" fg:w="18"/><text x="1.7823%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="1.6236%" y="405" width="0.0261%" height="15" fill="rgb(231,60,39)" fg:x="249" fg:w="4"/><text x="1.8736%" y="415.50"></text></g><g><title>deno`alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (3 samples, 0.02%)</title><rect x="1.6562%" y="437" width="0.0196%" height="15" fill="rgb(208,69,12)" fg:x="254" fg:w="3"/><text x="1.9062%" y="447.50"></text></g><g><title>deno`core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.03%)</title><rect x="1.6758%" y="437" width="0.0326%" height="15" fill="rgb(235,93,37)" fg:x="257" fg:w="5"/><text x="1.9258%" y="447.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (4 samples, 0.03%)</title><rect x="1.7084%" y="437" width="0.0261%" height="15" fill="rgb(213,116,39)" fg:x="262" fg:w="4"/><text x="1.9584%" y="447.50"></text></g><g><title>deno`OUTLINED_FUNCTION_10260 (3 samples, 0.02%)</title><rect x="1.8062%" y="421" width="0.0196%" height="15" fill="rgb(222,207,29)" fg:x="277" fg:w="3"/><text x="2.0562%" y="431.50"></text></g><g><title>deno`OUTLINED_FUNCTION_1153 (2 samples, 0.01%)</title><rect x="1.8258%" y="421" width="0.0130%" height="15" fill="rgb(206,96,30)" fg:x="280" fg:w="2"/><text x="2.0758%" y="431.50"></text></g><g><title>deno`deno_core::inspector::JsRuntimeInspector::poll_sessions (17 samples, 0.11%)</title><rect x="1.7540%" y="437" width="0.1109%" height="15" fill="rgb(218,138,4)" fg:x="269" fg:w="17"/><text x="2.0040%" y="447.50"></text></g><g><title>deno`futures_task::waker::drop_arc_raw (2 samples, 0.01%)</title><rect x="1.8519%" y="421" width="0.0130%" height="15" fill="rgb(250,191,14)" fg:x="284" fg:w="2"/><text x="2.1019%" y="431.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (5 samples, 0.03%)</title><rect x="1.8649%" y="437" width="0.0326%" height="15" fill="rgb(239,60,40)" fg:x="286" fg:w="5"/><text x="2.1149%" y="447.50"></text></g><g><title>deno`deno_core::runtime::JsRealm::state (5 samples, 0.03%)</title><rect x="1.9692%" y="421" width="0.0326%" height="15" fill="rgb(206,27,48)" fg:x="302" fg:w="5"/><text x="2.2192%" y="431.50"></text></g><g><title>deno`v8::context::_&lt;impl v8::data::Context&gt;::get_annex_mut (3 samples, 0.02%)</title><rect x="1.9823%" y="405" width="0.0196%" height="15" fill="rgb(225,35,8)" fg:x="304" fg:w="3"/><text x="2.2323%" y="415.50"></text></g><g><title>deno`v8::internal::wasm::GetWasmEngine (2 samples, 0.01%)</title><rect x="2.0149%" y="421" width="0.0130%" height="15" fill="rgb(250,213,24)" fg:x="309" fg:w="2"/><text x="2.2649%" y="431.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::event_loop_pending_state (21 samples, 0.14%)</title><rect x="1.9040%" y="437" width="0.1369%" height="15" fill="rgb(247,123,22)" fg:x="292" fg:w="21"/><text x="2.1540%" y="447.50"></text></g><g><title>deno`v8::HandleScope::~HandleScope (3 samples, 0.02%)</title><rect x="2.0931%" y="373" width="0.0196%" height="15" fill="rgb(231,138,38)" fg:x="321" fg:w="3"/><text x="2.3431%" y="383.50"></text></g><g><title>deno`v8::internal::HandleScope::DeleteExtensions (2 samples, 0.01%)</title><rect x="2.0996%" y="357" width="0.0130%" height="15" fill="rgb(231,145,46)" fg:x="322" fg:w="2"/><text x="2.3496%" y="367.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (4 samples, 0.03%)</title><rect x="2.0931%" y="389" width="0.0261%" height="15" fill="rgb(251,118,11)" fg:x="321" fg:w="4"/><text x="2.3431%" y="399.50"></text></g><g><title>deno`&lt;v8::isolate::Isolate as v8::scope::getter::GetScopeData&gt;::get_scope_data_mut (11 samples, 0.07%)</title><rect x="2.0540%" y="421" width="0.0717%" height="15" fill="rgb(217,147,25)" fg:x="315" fg:w="11"/><text x="2.3040%" y="431.50"></text></g><g><title>deno`v8::scope::data::ScopeData::try_exit_scope (9 samples, 0.06%)</title><rect x="2.0670%" y="405" width="0.0587%" height="15" fill="rgb(247,81,37)" fg:x="317" fg:w="9"/><text x="2.3170%" y="415.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (2 samples, 0.01%)</title><rect x="2.1779%" y="405" width="0.0130%" height="15" fill="rgb(209,12,38)" fg:x="334" fg:w="2"/><text x="2.4279%" y="415.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (2 samples, 0.01%)</title><rect x="2.1909%" y="405" width="0.0130%" height="15" fill="rgb(227,1,9)" fg:x="336" fg:w="2"/><text x="2.4409%" y="415.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::global_realm (17 samples, 0.11%)</title><rect x="2.1257%" y="421" width="0.1109%" height="15" fill="rgb(248,47,43)" fg:x="326" fg:w="17"/><text x="2.3757%" y="431.50"></text></g><g><title>deno`v8__Global__New (4 samples, 0.03%)</title><rect x="2.2105%" y="405" width="0.0261%" height="15" fill="rgb(221,10,30)" fg:x="339" fg:w="4"/><text x="2.4605%" y="415.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (3 samples, 0.02%)</title><rect x="2.2170%" y="389" width="0.0196%" height="15" fill="rgb(210,229,1)" fg:x="340" fg:w="3"/><text x="2.4670%" y="399.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (3 samples, 0.02%)</title><rect x="2.2431%" y="421" width="0.0196%" height="15" fill="rgb(222,148,37)" fg:x="344" fg:w="3"/><text x="2.4931%" y="431.50"></text></g><g><title>deno`v8::Context::Enter (4 samples, 0.03%)</title><rect x="2.2822%" y="405" width="0.0261%" height="15" fill="rgb(234,67,33)" fg:x="350" fg:w="4"/><text x="2.5322%" y="415.50"></text></g><g><title>deno`v8::HandleScope::CreateHandle (7 samples, 0.05%)</title><rect x="2.3083%" y="405" width="0.0456%" height="15" fill="rgb(247,98,35)" fg:x="354" fg:w="7"/><text x="2.5583%" y="415.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (5 samples, 0.03%)</title><rect x="2.3213%" y="389" width="0.0326%" height="15" fill="rgb(247,138,52)" fg:x="356" fg:w="5"/><text x="2.5713%" y="399.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (17 samples, 0.11%)</title><rect x="2.2626%" y="421" width="0.1109%" height="15" fill="rgb(213,79,30)" fg:x="347" fg:w="17"/><text x="2.5126%" y="431.50"></text></g><g><title>deno`v8::internal::HandleScope::Extend (2 samples, 0.01%)</title><rect x="2.3605%" y="405" width="0.0130%" height="15" fill="rgb(246,177,23)" fg:x="362" fg:w="2"/><text x="2.6105%" y="415.50"></text></g><g><title>deno`v8__Isolate__GetData (2 samples, 0.01%)</title><rect x="2.3800%" y="421" width="0.0130%" height="15" fill="rgb(230,62,27)" fg:x="365" fg:w="2"/><text x="2.6300%" y="431.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::handle_scope (54 samples, 0.35%)</title><rect x="2.0475%" y="437" width="0.3521%" height="15" fill="rgb(216,154,8)" fg:x="314" fg:w="54"/><text x="2.2975%" y="447.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;deno_core::ops::OpState&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="2.4191%" y="421" width="0.0196%" height="15" fill="rgb(244,35,45)" fg:x="371" fg:w="3"/><text x="2.6691%" y="431.50"></text></g><g><title>deno`deno_core::gotham_state::GothamState::borrow_mut (3 samples, 0.02%)</title><rect x="2.4387%" y="421" width="0.0196%" height="15" fill="rgb(251,115,12)" fg:x="374" fg:w="3"/><text x="2.6887%" y="431.50"></text></g><g><title>deno`deno_ffi::init::_{{closure}} (10 samples, 0.07%)</title><rect x="2.3996%" y="437" width="0.0652%" height="15" fill="rgb(240,54,50)" fg:x="368" fg:w="10"/><text x="2.6496%" y="447.50"></text></g><g><title>deno`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (2 samples, 0.01%)</title><rect x="2.4648%" y="437" width="0.0130%" height="15" fill="rgb(233,84,52)" fg:x="378" fg:w="2"/><text x="2.7148%" y="447.50"></text></g><g><title>deno`futures_core::task::__internal::atomic_waker::AtomicWaker::register (20 samples, 0.13%)</title><rect x="2.4778%" y="437" width="0.1304%" height="15" fill="rgb(207,117,47)" fg:x="380" fg:w="20"/><text x="2.7278%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="2.6148%" y="421" width="0.0391%" height="15" fill="rgb(249,43,39)" fg:x="401" fg:w="6"/><text x="2.8648%" y="431.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (11 samples, 0.07%)</title><rect x="2.6082%" y="437" width="0.0717%" height="15" fill="rgb(209,38,44)" fg:x="400" fg:w="11"/><text x="2.8582%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.03%)</title><rect x="2.6539%" y="421" width="0.0261%" height="15" fill="rgb(236,212,23)" fg:x="407" fg:w="4"/><text x="2.9039%" y="431.50"></text></g><g><title>deno`tokio::util::wake::drop_arc_raw (2 samples, 0.01%)</title><rect x="2.6865%" y="437" width="0.0130%" height="15" fill="rgb(242,79,21)" fg:x="412" fg:w="2"/><text x="2.9365%" y="447.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (87 samples, 0.57%)</title><rect x="2.6995%" y="437" width="0.5673%" height="15" fill="rgb(211,96,35)" fg:x="414" fg:w="87"/><text x="2.9495%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`kevent (85 samples, 0.55%)</title><rect x="2.7126%" y="421" width="0.5543%" height="15" fill="rgb(253,215,40)" fg:x="416" fg:w="85"/><text x="2.9626%" y="431.50"></text></g><g><title>deno`v8::CallDepthScope&lt;true&gt;::CallDepthScope(v8::internal::Isolate*, v8::Local (7 samples, 0.05%)</title><rect x="3.2994%" y="421" width="0.0456%" height="15" fill="rgb(211,81,21)" fg:x="506" fg:w="7"/><text x="3.5494%" y="431.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (2 samples, 0.01%)</title><rect x="3.3320%" y="405" width="0.0130%" height="15" fill="rgb(208,190,38)" fg:x="511" fg:w="2"/><text x="3.5820%" y="415.50"></text></g><g><title>deno`v8::EscapableHandleScope::EscapableHandleScope (5 samples, 0.03%)</title><rect x="3.3451%" y="421" width="0.0326%" height="15" fill="rgb(235,213,38)" fg:x="513" fg:w="5"/><text x="3.5951%" y="431.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (2 samples, 0.01%)</title><rect x="3.3777%" y="421" width="0.0130%" height="15" fill="rgb(237,122,38)" fg:x="518" fg:w="2"/><text x="3.6277%" y="431.50"></text></g><g><title>0x130063c20 (5 samples, 0.03%)</title><rect x="3.5081%" y="373" width="0.0326%" height="15" fill="rgb(244,218,35)" fg:x="538" fg:w="5"/><text x="3.7581%" y="383.50"></text></g><g><title>0x130064040 (9 samples, 0.06%)</title><rect x="3.5407%" y="373" width="0.0587%" height="15" fill="rgb(240,68,47)" fg:x="543" fg:w="9"/><text x="3.7907%" y="383.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsAny (4 samples, 0.03%)</title><rect x="3.6189%" y="373" width="0.0261%" height="15" fill="rgb(210,16,53)" fg:x="555" fg:w="4"/><text x="3.8689%" y="383.50"></text></g><g><title>0x130063c94 (2 samples, 0.01%)</title><rect x="3.6841%" y="357" width="0.0130%" height="15" fill="rgb(235,124,12)" fg:x="565" fg:w="2"/><text x="3.9341%" y="367.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (4 samples, 0.03%)</title><rect x="3.7298%" y="309" width="0.0261%" height="15" fill="rgb(224,169,11)" fg:x="572" fg:w="4"/><text x="3.9798%" y="319.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (10 samples, 0.07%)</title><rect x="3.7037%" y="341" width="0.0652%" height="15" fill="rgb(250,166,2)" fg:x="568" fg:w="10"/><text x="3.9537%" y="351.50"></text></g><g><title>deno`Builtins_ResolvePromise (6 samples, 0.04%)</title><rect x="3.7298%" y="325" width="0.0391%" height="15" fill="rgb(242,216,29)" fg:x="572" fg:w="6"/><text x="3.9798%" y="335.50"></text></g><g><title>deno`Builtins_FulfillPromise (2 samples, 0.01%)</title><rect x="3.7559%" y="309" width="0.0130%" height="15" fill="rgb(230,116,27)" fg:x="576" fg:w="2"/><text x="4.0059%" y="319.50"></text></g><g><title>0x130063e3c (12 samples, 0.08%)</title><rect x="3.7037%" y="357" width="0.0782%" height="15" fill="rgb(228,99,48)" fg:x="568" fg:w="12"/><text x="3.9537%" y="367.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.01%)</title><rect x="3.7689%" y="341" width="0.0130%" height="15" fill="rgb(253,11,6)" fg:x="578" fg:w="2"/><text x="4.0189%" y="351.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNotNullOrUndefined (6 samples, 0.04%)</title><rect x="3.7820%" y="357" width="0.0391%" height="15" fill="rgb(247,143,39)" fg:x="580" fg:w="6"/><text x="4.0320%" y="367.50"></text></g><g><title>deno`Builtins_JSEntry (55 samples, 0.36%)</title><rect x="3.4885%" y="389" width="0.3586%" height="15" fill="rgb(236,97,10)" fg:x="535" fg:w="55"/><text x="3.7385%" y="399.50"></text></g><g><title>deno`Builtins_JSEntryTrampoline (30 samples, 0.20%)</title><rect x="3.6515%" y="373" width="0.1956%" height="15" fill="rgb(233,208,19)" fg:x="560" fg:w="30"/><text x="3.9015%" y="383.50"></text></g><g><title>deno`Builtins_PromiseCapabilityDefaultResolve (3 samples, 0.02%)</title><rect x="3.8276%" y="357" width="0.0196%" height="15" fill="rgb(216,164,2)" fg:x="587" fg:w="3"/><text x="4.0776%" y="367.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (72 samples, 0.47%)</title><rect x="3.3907%" y="405" width="0.4695%" height="15" fill="rgb(220,129,5)" fg:x="520" fg:w="72"/><text x="3.6407%" y="415.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (2 samples, 0.01%)</title><rect x="3.8472%" y="389" width="0.0130%" height="15" fill="rgb(242,17,10)" fg:x="590" fg:w="2"/><text x="4.0972%" y="399.50"></text></g><g><title>deno`v8::internal::AllowJavascriptExecution::IsAllowed (4 samples, 0.03%)</title><rect x="3.8602%" y="405" width="0.0261%" height="15" fill="rgb(242,107,0)" fg:x="592" fg:w="4"/><text x="4.1102%" y="415.50"></text></g><g><title>deno`v8::internal::Builtins::code_handle (4 samples, 0.03%)</title><rect x="3.8863%" y="405" width="0.0261%" height="15" fill="rgb(251,28,31)" fg:x="596" fg:w="4"/><text x="4.1363%" y="415.50"></text></g><g><title>deno`v8::internal::SaveContext::SaveContext (2 samples, 0.01%)</title><rect x="3.9124%" y="405" width="0.0130%" height="15" fill="rgb(233,223,10)" fg:x="600" fg:w="2"/><text x="4.1624%" y="415.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (85 samples, 0.55%)</title><rect x="3.3907%" y="421" width="0.5543%" height="15" fill="rgb(215,21,27)" fg:x="520" fg:w="85"/><text x="3.6407%" y="431.50"></text></g><g><title>deno`v8::internal::ScopeInfo::is_script_scope (3 samples, 0.02%)</title><rect x="3.9254%" y="405" width="0.0196%" height="15" fill="rgb(232,23,21)" fg:x="602" fg:w="3"/><text x="4.1754%" y="415.50"></text></g><g><title>deno`v8::internal::InterruptsScope::InterruptsScope (5 samples, 0.03%)</title><rect x="3.9450%" y="421" width="0.0326%" height="15" fill="rgb(244,5,23)" fg:x="605" fg:w="5"/><text x="4.1950%" y="431.50"></text></g><g><title>deno`v8::internal::Heap::ClearKeptObjects (2 samples, 0.01%)</title><rect x="3.9841%" y="405" width="0.0130%" height="15" fill="rgb(226,81,46)" fg:x="611" fg:w="2"/><text x="4.2341%" y="415.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (2 samples, 0.01%)</title><rect x="4.2971%" y="293" width="0.0130%" height="15" fill="rgb(247,70,30)" fg:x="659" fg:w="2"/><text x="4.5471%" y="303.50"></text></g><g><title>deno`Builtins_CallFunction_ReceiverIsNullOrUndefined (8 samples, 0.05%)</title><rect x="4.3101%" y="293" width="0.0522%" height="15" fill="rgb(212,68,19)" fg:x="661" fg:w="8"/><text x="4.5601%" y="303.50"></text></g><g><title>deno`Builtins_Call_ReceiverIsNullOrUndefined (2 samples, 0.01%)</title><rect x="4.3623%" y="293" width="0.0130%" height="15" fill="rgb(240,187,13)" fg:x="669" fg:w="2"/><text x="4.6123%" y="303.50"></text></g><g><title>0x13004deb4 (3 samples, 0.02%)</title><rect x="4.5188%" y="261" width="0.0196%" height="15" fill="rgb(223,113,26)" fg:x="693" fg:w="3"/><text x="4.7688%" y="271.50"></text></g><g><title>0x13004af60 (3 samples, 0.02%)</title><rect x="4.5188%" y="245" width="0.0196%" height="15" fill="rgb(206,192,2)" fg:x="693" fg:w="3"/><text x="4.7688%" y="255.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (2 samples, 0.01%)</title><rect x="4.5253%" y="229" width="0.0130%" height="15" fill="rgb(241,108,4)" fg:x="694" fg:w="2"/><text x="4.7753%" y="239.50"></text></g><g><title>0x130050b88 (4 samples, 0.03%)</title><rect x="4.5449%" y="261" width="0.0261%" height="15" fill="rgb(247,173,49)" fg:x="697" fg:w="4"/><text x="4.7949%" y="271.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (3 samples, 0.02%)</title><rect x="4.5514%" y="245" width="0.0196%" height="15" fill="rgb(224,114,35)" fg:x="698" fg:w="3"/><text x="4.8014%" y="255.50"></text></g><g><title>deno`unsigned long v8::internal::StringTable::Data::TryStringToIndexOrLookupExisting&lt;unsigned char&gt; (2 samples, 0.01%)</title><rect x="4.5579%" y="229" width="0.0130%" height="15" fill="rgb(245,159,27)" fg:x="699" fg:w="2"/><text x="4.8079%" y="239.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (9 samples, 0.06%)</title><rect x="4.5709%" y="181" width="0.0587%" height="15" fill="rgb(245,172,44)" fg:x="701" fg:w="9"/><text x="4.8209%" y="191.50"></text></g><g><title>deno`deno_flash::flash_respond (9 samples, 0.06%)</title><rect x="4.5709%" y="165" width="0.0587%" height="15" fill="rgb(236,23,11)" fg:x="701" fg:w="9"/><text x="4.8209%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (9 samples, 0.06%)</title><rect x="4.5709%" y="149" width="0.0587%" height="15" fill="rgb(205,117,38)" fg:x="701" fg:w="9"/><text x="4.8209%" y="159.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (10 samples, 0.07%)</title><rect x="4.5709%" y="229" width="0.0652%" height="15" fill="rgb(237,72,25)" fg:x="701" fg:w="10"/><text x="4.8209%" y="239.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (10 samples, 0.07%)</title><rect x="4.5709%" y="213" width="0.0652%" height="15" fill="rgb(244,70,9)" fg:x="701" fg:w="10"/><text x="4.8209%" y="223.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (10 samples, 0.07%)</title><rect x="4.5709%" y="197" width="0.0652%" height="15" fill="rgb(217,125,39)" fg:x="701" fg:w="10"/><text x="4.8209%" y="207.50"></text></g><g><title>0x13004b77c (11 samples, 0.07%)</title><rect x="4.5709%" y="245" width="0.0717%" height="15" fill="rgb(235,36,10)" fg:x="701" fg:w="11"/><text x="4.8209%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (5 samples, 0.03%)</title><rect x="4.6427%" y="213" width="0.0326%" height="15" fill="rgb(251,123,47)" fg:x="712" fg:w="5"/><text x="4.8927%" y="223.50"></text></g><g><title>0x13005102c (17 samples, 0.11%)</title><rect x="4.5709%" y="261" width="0.1109%" height="15" fill="rgb(221,13,13)" fg:x="701" fg:w="17"/><text x="4.8209%" y="271.50"></text></g><g><title>0x13005fb58 (6 samples, 0.04%)</title><rect x="4.6427%" y="245" width="0.0391%" height="15" fill="rgb(238,131,9)" fg:x="712" fg:w="6"/><text x="4.8927%" y="255.50"></text></g><g><title>deno`deno_flash::flash_respond (6 samples, 0.04%)</title><rect x="4.6427%" y="229" width="0.0391%" height="15" fill="rgb(211,50,8)" fg:x="712" fg:w="6"/><text x="4.8927%" y="239.50"></text></g><g><title>0x130055bc0 (3 samples, 0.02%)</title><rect x="4.6818%" y="261" width="0.0196%" height="15" fill="rgb(245,182,24)" fg:x="718" fg:w="3"/><text x="4.9318%" y="271.50"></text></g><g><title>0x130056420 (2 samples, 0.01%)</title><rect x="4.7079%" y="261" width="0.0130%" height="15" fill="rgb(242,14,37)" fg:x="722" fg:w="2"/><text x="4.9579%" y="271.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.02%)</title><rect x="4.7470%" y="229" width="0.0196%" height="15" fill="rgb(246,228,12)" fg:x="728" fg:w="3"/><text x="4.9970%" y="239.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.02%)</title><rect x="4.7731%" y="213" width="0.0196%" height="15" fill="rgb(213,55,15)" fg:x="732" fg:w="3"/><text x="5.0231%" y="223.50"></text></g><g><title>deno`deno_flash::op_flash_next_fast (11 samples, 0.07%)</title><rect x="4.7274%" y="245" width="0.0717%" height="15" fill="rgb(209,9,3)" fg:x="725" fg:w="11"/><text x="4.9774%" y="255.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (4 samples, 0.03%)</title><rect x="4.7731%" y="229" width="0.0261%" height="15" fill="rgb(230,59,30)" fg:x="732" fg:w="4"/><text x="5.0231%" y="239.50"></text></g><g><title>0x130056ed0 (12 samples, 0.08%)</title><rect x="4.7274%" y="261" width="0.0782%" height="15" fill="rgb(209,121,21)" fg:x="725" fg:w="12"/><text x="4.9774%" y="271.50"></text></g><g><title>0x130055c2c (2 samples, 0.01%)</title><rect x="4.8252%" y="245" width="0.0130%" height="15" fill="rgb(220,109,13)" fg:x="740" fg:w="2"/><text x="5.0752%" y="255.50"></text></g><g><title>deno`Builtins_ToString (2 samples, 0.01%)</title><rect x="4.8252%" y="229" width="0.0130%" height="15" fill="rgb(232,18,1)" fg:x="740" fg:w="2"/><text x="5.0752%" y="239.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (4 samples, 0.03%)</title><rect x="4.8513%" y="245" width="0.0261%" height="15" fill="rgb(215,41,42)" fg:x="744" fg:w="4"/><text x="5.1013%" y="255.50"></text></g><g><title>0x130057608 (11 samples, 0.07%)</title><rect x="4.8252%" y="261" width="0.0717%" height="15" fill="rgb(224,123,36)" fg:x="740" fg:w="11"/><text x="5.0752%" y="271.50"></text></g><g><title>deno`Builtins_ToString (3 samples, 0.02%)</title><rect x="4.8774%" y="245" width="0.0196%" height="15" fill="rgb(240,125,3)" fg:x="748" fg:w="3"/><text x="5.1274%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (236 samples, 1.54%)</title><rect x="4.9165%" y="229" width="1.5389%" height="15" fill="rgb(205,98,50)" fg:x="754" fg:w="236"/><text x="5.1665%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="6.4554%" y="229" width="0.0130%" height="15" fill="rgb(205,185,37)" fg:x="990" fg:w="2"/><text x="6.7054%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="6.4945%" y="213" width="0.0130%" height="15" fill="rgb(238,207,15)" fg:x="996" fg:w="2"/><text x="6.7445%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.07%)</title><rect x="6.4684%" y="229" width="0.0652%" height="15" fill="rgb(213,199,42)" fg:x="992" fg:w="10"/><text x="6.7184%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="6.5141%" y="213" width="0.0196%" height="15" fill="rgb(235,201,11)" fg:x="999" fg:w="3"/><text x="6.7641%" y="223.50"></text></g><g><title>deno`deno_flash::flash_respond (251 samples, 1.64%)</title><rect x="4.9035%" y="245" width="1.6367%" height="15" fill="rgb(207,46,11)" fg:x="752" fg:w="251"/><text x="5.1535%" y="255.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.01%)</title><rect x="6.5402%" y="245" width="0.0130%" height="15" fill="rgb(241,35,35)" fg:x="1003" fg:w="2"/><text x="6.7902%" y="255.50"></text></g><g><title>0x130057804 (255 samples, 1.66%)</title><rect x="4.8970%" y="261" width="1.6628%" height="15" fill="rgb(243,32,47)" fg:x="751" fg:w="255"/><text x="5.1470%" y="271.50"></text></g><g><title>0x1300579f8 (3 samples, 0.02%)</title><rect x="6.5597%" y="261" width="0.0196%" height="15" fill="rgb(247,202,23)" fg:x="1006" fg:w="3"/><text x="6.8097%" y="271.50"></text></g><g><title>0x130058384 (2 samples, 0.01%)</title><rect x="6.5923%" y="261" width="0.0130%" height="15" fill="rgb(219,102,11)" fg:x="1011" fg:w="2"/><text x="6.8423%" y="271.50"></text></g><g><title>0x130058414 (5 samples, 0.03%)</title><rect x="6.6054%" y="261" width="0.0326%" height="15" fill="rgb(243,110,44)" fg:x="1013" fg:w="5"/><text x="6.8554%" y="271.50"></text></g><g><title>0x130058644 (3 samples, 0.02%)</title><rect x="6.6445%" y="261" width="0.0196%" height="15" fill="rgb(222,74,54)" fg:x="1019" fg:w="3"/><text x="6.8945%" y="271.50"></text></g><g><title>0x130058718 (3 samples, 0.02%)</title><rect x="6.6706%" y="261" width="0.0196%" height="15" fill="rgb(216,99,12)" fg:x="1023" fg:w="3"/><text x="6.9206%" y="271.50"></text></g><g><title>0x130058a94 (10 samples, 0.07%)</title><rect x="6.6967%" y="261" width="0.0652%" height="15" fill="rgb(226,22,26)" fg:x="1027" fg:w="10"/><text x="6.9467%" y="271.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (10 samples, 0.07%)</title><rect x="6.6967%" y="245" width="0.0652%" height="15" fill="rgb(217,163,10)" fg:x="1027" fg:w="10"/><text x="6.9467%" y="255.50"></text></g><g><title>deno`Builtins_ResolvePromise (5 samples, 0.03%)</title><rect x="6.7293%" y="229" width="0.0326%" height="15" fill="rgb(213,25,53)" fg:x="1032" fg:w="5"/><text x="6.9793%" y="239.50"></text></g><g><title>deno`Builtins_GetProperty (4 samples, 0.03%)</title><rect x="6.7358%" y="213" width="0.0261%" height="15" fill="rgb(252,105,26)" fg:x="1033" fg:w="4"/><text x="6.9858%" y="223.50"></text></g><g><title>deno`unsigned int v8::internal::StringHasher::HashSequentialString&lt;unsigned char&gt; (12 samples, 0.08%)</title><rect x="6.7619%" y="245" width="0.0782%" height="15" fill="rgb(220,39,43)" fg:x="1037" fg:w="12"/><text x="7.0119%" y="255.50"></text></g><g><title>deno`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="6.8727%" y="229" width="0.0130%" height="15" fill="rgb(229,68,48)" fg:x="1054" fg:w="2"/><text x="7.1227%" y="239.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (9 samples, 0.06%)</title><rect x="6.8988%" y="229" width="0.0587%" height="15" fill="rgb(252,8,32)" fg:x="1058" fg:w="9"/><text x="7.1488%" y="239.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (6 samples, 0.04%)</title><rect x="6.9184%" y="213" width="0.0391%" height="15" fill="rgb(223,20,43)" fg:x="1061" fg:w="6"/><text x="7.1684%" y="223.50"></text></g><g><title>deno`unsigned long v8::internal::StringTable::Data::TryStringToIndexOrLookupExisting&lt;unsigned char&gt; (23 samples, 0.15%)</title><rect x="6.8401%" y="245" width="0.1500%" height="15" fill="rgb(229,81,49)" fg:x="1049" fg:w="23"/><text x="7.0901%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="6.9770%" y="229" width="0.0130%" height="15" fill="rgb(236,28,36)" fg:x="1070" fg:w="2"/><text x="7.2270%" y="239.50"></text></g><g><title>0x130058e2c (36 samples, 0.23%)</title><rect x="6.7619%" y="261" width="0.2347%" height="15" fill="rgb(249,185,26)" fg:x="1037" fg:w="36"/><text x="7.0119%" y="271.50"></text></g><g><title>0x13005dc80 (2 samples, 0.01%)</title><rect x="7.0097%" y="261" width="0.0130%" height="15" fill="rgb(249,174,33)" fg:x="1075" fg:w="2"/><text x="7.2597%" y="271.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="7.0618%" y="213" width="0.0130%" height="15" fill="rgb(233,201,37)" fg:x="1083" fg:w="2"/><text x="7.3118%" y="223.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.05%)</title><rect x="7.0423%" y="229" width="0.0456%" height="15" fill="rgb(221,78,26)" fg:x="1080" fg:w="7"/><text x="7.2923%" y="239.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="7.0749%" y="213" width="0.0130%" height="15" fill="rgb(250,127,30)" fg:x="1085" fg:w="2"/><text x="7.3249%" y="223.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (2 samples, 0.01%)</title><rect x="7.0879%" y="229" width="0.0130%" height="15" fill="rgb(230,49,44)" fg:x="1087" fg:w="2"/><text x="7.3379%" y="239.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (17 samples, 0.11%)</title><rect x="7.1009%" y="229" width="0.1109%" height="15" fill="rgb(229,67,23)" fg:x="1089" fg:w="17"/><text x="7.3509%" y="239.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (8 samples, 0.05%)</title><rect x="7.1596%" y="213" width="0.0522%" height="15" fill="rgb(249,83,47)" fg:x="1098" fg:w="8"/><text x="7.4096%" y="223.50"></text></g><g><title>deno`deno_flash::op_flash_next_fast (30 samples, 0.20%)</title><rect x="7.0292%" y="245" width="0.1956%" height="15" fill="rgb(215,43,3)" fg:x="1078" fg:w="30"/><text x="7.2792%" y="255.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (2 samples, 0.01%)</title><rect x="7.2118%" y="229" width="0.0130%" height="15" fill="rgb(238,154,13)" fg:x="1106" fg:w="2"/><text x="7.4618%" y="239.50"></text></g><g><title>0x130060308 (31 samples, 0.20%)</title><rect x="7.0292%" y="261" width="0.2021%" height="15" fill="rgb(219,56,2)" fg:x="1078" fg:w="31"/><text x="7.2792%" y="271.50"></text></g><g><title>0x130055c2c (2 samples, 0.01%)</title><rect x="7.2574%" y="245" width="0.0130%" height="15" fill="rgb(233,0,4)" fg:x="1113" fg:w="2"/><text x="7.5074%" y="255.50"></text></g><g><title>deno`Builtins_ToString (2 samples, 0.01%)</title><rect x="7.2574%" y="229" width="0.0130%" height="15" fill="rgb(235,30,7)" fg:x="1113" fg:w="2"/><text x="7.5074%" y="239.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (10 samples, 0.07%)</title><rect x="7.2966%" y="245" width="0.0652%" height="15" fill="rgb(250,79,13)" fg:x="1119" fg:w="10"/><text x="7.5466%" y="255.50"></text></g><g><title>0x130060a40 (17 samples, 0.11%)</title><rect x="7.2574%" y="261" width="0.1109%" height="15" fill="rgb(211,146,34)" fg:x="1113" fg:w="17"/><text x="7.5074%" y="271.50"></text></g><g><title>deno`unsigned int v8::internal::StringHasher::HashSequentialString&lt;unsigned char&gt; (41 samples, 0.27%)</title><rect x="7.4009%" y="229" width="0.2673%" height="15" fill="rgb(228,22,38)" fg:x="1135" fg:w="41"/><text x="7.6509%" y="239.50"></text></g><g><title>deno`operator new(unsigned long) (5 samples, 0.03%)</title><rect x="7.6813%" y="213" width="0.0326%" height="15" fill="rgb(235,168,5)" fg:x="1178" fg:w="5"/><text x="7.9313%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="7.6813%" y="197" width="0.0326%" height="15" fill="rgb(221,155,16)" fg:x="1178" fg:w="5"/><text x="7.9313%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="7.6943%" y="181" width="0.0196%" height="15" fill="rgb(215,215,53)" fg:x="1180" fg:w="3"/><text x="7.9443%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="7.7008%" y="165" width="0.0130%" height="15" fill="rgb(223,4,10)" fg:x="1181" fg:w="2"/><text x="7.9508%" y="175.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::SetInternalizedReference (6 samples, 0.04%)</title><rect x="7.7139%" y="213" width="0.0391%" height="15" fill="rgb(234,103,6)" fg:x="1183" fg:w="6"/><text x="7.9639%" y="223.50"></text></g><g><title>deno`void v8::internal::String::MakeThin&lt;v8::internal::Isolate&gt; (4 samples, 0.03%)</title><rect x="7.7269%" y="197" width="0.0261%" height="15" fill="rgb(227,97,0)" fg:x="1185" fg:w="4"/><text x="7.9769%" y="207.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (7 samples, 0.05%)</title><rect x="7.8052%" y="197" width="0.0456%" height="15" fill="rgb(234,150,53)" fg:x="1197" fg:w="7"/><text x="8.0552%" y="207.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (16 samples, 0.10%)</title><rect x="7.7530%" y="213" width="0.1043%" height="15" fill="rgb(228,201,54)" fg:x="1189" fg:w="16"/><text x="8.0030%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="7.8573%" y="213" width="0.0261%" height="15" fill="rgb(222,22,37)" fg:x="1205" fg:w="4"/><text x="8.1073%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="7.8704%" y="197" width="0.0130%" height="15" fill="rgb(237,53,32)" fg:x="1207" fg:w="2"/><text x="8.1204%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.05%)</title><rect x="7.8834%" y="213" width="0.0456%" height="15" fill="rgb(233,25,53)" fg:x="1209" fg:w="7"/><text x="8.1334%" y="223.50"></text></g><g><title>deno`unsigned long v8::internal::StringTable::Data::TryStringToIndexOrLookupExisting&lt;unsigned char&gt; (41 samples, 0.27%)</title><rect x="7.6682%" y="229" width="0.2673%" height="15" fill="rgb(210,40,34)" fg:x="1176" fg:w="41"/><text x="7.9182%" y="239.50"></text></g><g><title>0x130060a84 (90 samples, 0.59%)</title><rect x="7.3683%" y="261" width="0.5869%" height="15" fill="rgb(241,220,44)" fg:x="1130" fg:w="90"/><text x="7.6183%" y="271.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (90 samples, 0.59%)</title><rect x="7.3683%" y="245" width="0.5869%" height="15" fill="rgb(235,28,35)" fg:x="1130" fg:w="90"/><text x="7.6183%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="7.9421%" y="229" width="0.0130%" height="15" fill="rgb(210,56,17)" fg:x="1218" fg:w="2"/><text x="8.1921%" y="239.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (3 samples, 0.02%)</title><rect x="7.9812%" y="229" width="0.0196%" height="15" fill="rgb(224,130,29)" fg:x="1224" fg:w="3"/><text x="8.2312%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (461 samples, 3.01%)</title><rect x="8.0073%" y="229" width="3.0060%" height="15" fill="rgb(235,212,8)" fg:x="1228" fg:w="461"/><text x="8.2573%" y="239.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.01%)</title><rect x="11.0459%" y="213" width="0.0130%" height="15" fill="rgb(223,33,50)" fg:x="1694" fg:w="2"/><text x="11.2959%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.05%)</title><rect x="11.0133%" y="229" width="0.0522%" height="15" fill="rgb(219,149,13)" fg:x="1689" fg:w="8"/><text x="11.2633%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.03%)</title><rect x="11.1176%" y="213" width="0.0326%" height="15" fill="rgb(250,156,29)" fg:x="1705" fg:w="5"/><text x="11.3676%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (15 samples, 0.10%)</title><rect x="11.0655%" y="229" width="0.0978%" height="15" fill="rgb(216,193,19)" fg:x="1697" fg:w="15"/><text x="11.3155%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="11.1502%" y="213" width="0.0130%" height="15" fill="rgb(216,135,14)" fg:x="1710" fg:w="2"/><text x="11.4002%" y="223.50"></text></g><g><title>deno`deno_flash::flash_respond (492 samples, 3.21%)</title><rect x="7.9747%" y="245" width="3.2081%" height="15" fill="rgb(241,47,5)" fg:x="1223" fg:w="492"/><text x="8.2247%" y="255.50">den..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.01%)</title><rect x="11.1828%" y="245" width="0.0130%" height="15" fill="rgb(233,42,35)" fg:x="1715" fg:w="2"/><text x="11.4328%" y="255.50"></text></g><g><title>0x130060c8c (499 samples, 3.25%)</title><rect x="7.9617%" y="261" width="3.2538%" height="15" fill="rgb(231,13,6)" fg:x="1221" fg:w="499"/><text x="8.2117%" y="271.50">0x1..</text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (7 samples, 0.05%)</title><rect x="11.2154%" y="229" width="0.0456%" height="15" fill="rgb(207,181,40)" fg:x="1720" fg:w="7"/><text x="11.4654%" y="239.50"></text></g><g><title>0x130061218 (8 samples, 0.05%)</title><rect x="11.2154%" y="261" width="0.0522%" height="15" fill="rgb(254,173,49)" fg:x="1720" fg:w="8"/><text x="11.4654%" y="271.50"></text></g><g><title>deno`Builtins_CallApiCallback (8 samples, 0.05%)</title><rect x="11.2154%" y="245" width="0.0522%" height="15" fill="rgb(221,1,38)" fg:x="1720" fg:w="8"/><text x="11.4654%" y="255.50"></text></g><g><title>0x130061c3c (2 samples, 0.01%)</title><rect x="11.2806%" y="261" width="0.0130%" height="15" fill="rgb(206,124,46)" fg:x="1730" fg:w="2"/><text x="11.5306%" y="271.50"></text></g><g><title>0x130061df4 (2 samples, 0.01%)</title><rect x="11.3067%" y="261" width="0.0130%" height="15" fill="rgb(249,21,11)" fg:x="1734" fg:w="2"/><text x="11.5567%" y="271.50"></text></g><g><title>deno`Builtins_FastNewObject (9 samples, 0.06%)</title><rect x="11.3263%" y="245" width="0.0587%" height="15" fill="rgb(222,201,40)" fg:x="1737" fg:w="9"/><text x="11.5763%" y="255.50"></text></g><g><title>deno`Builtins_JSConstructStubGeneric (2 samples, 0.01%)</title><rect x="11.3850%" y="245" width="0.0130%" height="15" fill="rgb(235,61,29)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="255.50"></text></g><g><title>deno`Builtins_FastNewObject (2 samples, 0.01%)</title><rect x="11.3850%" y="229" width="0.0130%" height="15" fill="rgb(219,207,3)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="239.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="11.3850%" y="213" width="0.0130%" height="15" fill="rgb(222,56,46)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="223.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="11.3850%" y="197" width="0.0130%" height="15" fill="rgb(239,76,54)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="207.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="11.3850%" y="181" width="0.0130%" height="15" fill="rgb(231,124,27)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="191.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="11.3850%" y="165" width="0.0130%" height="15" fill="rgb(249,195,6)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="175.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="11.3850%" y="149" width="0.0130%" height="15" fill="rgb(237,174,47)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="11.3850%" y="133" width="0.0130%" height="15" fill="rgb(206,201,31)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="11.3850%" y="117" width="0.0130%" height="15" fill="rgb(231,57,52)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="127.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="11.3850%" y="101" width="0.0130%" height="15" fill="rgb(248,177,22)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="111.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="11.3850%" y="85" width="0.0130%" height="15" fill="rgb(215,211,37)" fg:x="1746" fg:w="2"/><text x="11.6350%" y="95.50"></text></g><g><title>0x13005e844 (6 samples, 0.04%)</title><rect x="11.4241%" y="229" width="0.0391%" height="15" fill="rgb(241,128,51)" fg:x="1752" fg:w="6"/><text x="11.6741%" y="239.50"></text></g><g><title>deno`Builtins_GrowFastSmiOrObjectElements (3 samples, 0.02%)</title><rect x="11.5023%" y="229" width="0.0196%" height="15" fill="rgb(227,165,31)" fg:x="1764" fg:w="3"/><text x="11.7523%" y="239.50"></text></g><g><title>0x130061f2c (31 samples, 0.20%)</title><rect x="11.3263%" y="261" width="0.2021%" height="15" fill="rgb(228,167,24)" fg:x="1737" fg:w="31"/><text x="11.5763%" y="271.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (20 samples, 0.13%)</title><rect x="11.3980%" y="245" width="0.1304%" height="15" fill="rgb(228,143,12)" fg:x="1748" fg:w="20"/><text x="11.6480%" y="255.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (3 samples, 0.02%)</title><rect x="11.5610%" y="229" width="0.0196%" height="15" fill="rgb(249,149,8)" fg:x="1773" fg:w="3"/><text x="11.8110%" y="239.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (21 samples, 0.14%)</title><rect x="11.5284%" y="245" width="0.1369%" height="15" fill="rgb(243,35,44)" fg:x="1768" fg:w="21"/><text x="11.7784%" y="255.50"></text></g><g><title>deno`Builtins_ResolvePromise (13 samples, 0.08%)</title><rect x="11.5806%" y="229" width="0.0848%" height="15" fill="rgb(246,89,9)" fg:x="1776" fg:w="13"/><text x="11.8306%" y="239.50"></text></g><g><title>deno`Builtins_GetProperty (11 samples, 0.07%)</title><rect x="11.5936%" y="213" width="0.0717%" height="15" fill="rgb(233,213,13)" fg:x="1778" fg:w="11"/><text x="11.8436%" y="223.50"></text></g><g><title>0x130061f40 (23 samples, 0.15%)</title><rect x="11.5284%" y="261" width="0.1500%" height="15" fill="rgb(233,141,41)" fg:x="1768" fg:w="23"/><text x="11.7784%" y="271.50"></text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.01%)</title><rect x="11.6654%" y="245" width="0.0130%" height="15" fill="rgb(239,167,4)" fg:x="1789" fg:w="2"/><text x="11.9154%" y="255.50"></text></g><g><title>0x13006300c (3 samples, 0.02%)</title><rect x="11.6849%" y="261" width="0.0196%" height="15" fill="rgb(209,217,16)" fg:x="1792" fg:w="3"/><text x="11.9349%" y="271.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (3 samples, 0.02%)</title><rect x="11.6849%" y="245" width="0.0196%" height="15" fill="rgb(219,88,35)" fg:x="1792" fg:w="3"/><text x="11.9349%" y="255.50"></text></g><g><title>0x130064b78 (2 samples, 0.01%)</title><rect x="11.7240%" y="261" width="0.0130%" height="15" fill="rgb(220,193,23)" fg:x="1798" fg:w="2"/><text x="11.9740%" y="271.50"></text></g><g><title>0x130064c4c (3 samples, 0.02%)</title><rect x="11.7436%" y="261" width="0.0196%" height="15" fill="rgb(230,90,52)" fg:x="1801" fg:w="3"/><text x="11.9936%" y="271.50"></text></g><g><title>0x130065080 (2 samples, 0.01%)</title><rect x="11.7827%" y="261" width="0.0130%" height="15" fill="rgb(252,106,19)" fg:x="1807" fg:w="2"/><text x="12.0327%" y="271.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.05%)</title><rect x="12.1609%" y="213" width="0.0522%" height="15" fill="rgb(206,74,20)" fg:x="1865" fg:w="8"/><text x="12.4109%" y="223.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (46 samples, 0.30%)</title><rect x="11.9718%" y="229" width="0.2999%" height="15" fill="rgb(230,138,44)" fg:x="1836" fg:w="46"/><text x="12.2218%" y="239.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (9 samples, 0.06%)</title><rect x="12.2131%" y="213" width="0.0587%" height="15" fill="rgb(235,182,43)" fg:x="1873" fg:w="9"/><text x="12.4631%" y="223.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (6 samples, 0.04%)</title><rect x="12.2718%" y="229" width="0.0391%" height="15" fill="rgb(242,16,51)" fg:x="1882" fg:w="6"/><text x="12.5218%" y="239.50"></text></g><g><title>deno`&lt;(tokio::sync::batch_semaphore::Semaphore,usize) as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (4 samples, 0.03%)</title><rect x="12.5782%" y="213" width="0.0261%" height="15" fill="rgb(248,9,4)" fg:x="1929" fg:w="4"/><text x="12.8282%" y="223.50"></text></g><g><title>deno`tokio::sync::batch_semaphore::Semaphore::add_permits_locked (21 samples, 0.14%)</title><rect x="12.6043%" y="213" width="0.1369%" height="15" fill="rgb(210,31,22)" fg:x="1933" fg:w="21"/><text x="12.8543%" y="223.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (97 samples, 0.63%)</title><rect x="12.3109%" y="229" width="0.6325%" height="15" fill="rgb(239,54,39)" fg:x="1888" fg:w="97"/><text x="12.5609%" y="239.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (31 samples, 0.20%)</title><rect x="12.7413%" y="213" width="0.2021%" height="15" fill="rgb(230,99,41)" fg:x="1954" fg:w="31"/><text x="12.9913%" y="223.50"></text></g><g><title>deno`deno_flash::op_flash_next_fast (182 samples, 1.19%)</title><rect x="11.8023%" y="245" width="1.1868%" height="15" fill="rgb(253,106,12)" fg:x="1810" fg:w="182"/><text x="12.0523%" y="255.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (7 samples, 0.05%)</title><rect x="12.9434%" y="229" width="0.0456%" height="15" fill="rgb(213,46,41)" fg:x="1985" fg:w="7"/><text x="13.1934%" y="239.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.03%)</title><rect x="12.9890%" y="245" width="0.0261%" height="15" fill="rgb(215,133,35)" fg:x="1992" fg:w="4"/><text x="13.2390%" y="255.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (9 samples, 0.06%)</title><rect x="13.0151%" y="245" width="0.0587%" height="15" fill="rgb(213,28,5)" fg:x="1996" fg:w="9"/><text x="13.2651%" y="255.50"></text></g><g><title>0x130065130 (196 samples, 1.28%)</title><rect x="11.8023%" y="261" width="1.2780%" height="15" fill="rgb(215,77,49)" fg:x="1810" fg:w="196"/><text x="12.0523%" y="271.50"></text></g><g><title>0x1300651d8 (4 samples, 0.03%)</title><rect x="13.1064%" y="261" width="0.0261%" height="15" fill="rgb(248,100,22)" fg:x="2010" fg:w="4"/><text x="13.3564%" y="271.50"></text></g><g><title>0x1300651e4 (5 samples, 0.03%)</title><rect x="13.1325%" y="261" width="0.0326%" height="15" fill="rgb(208,67,9)" fg:x="2014" fg:w="5"/><text x="13.3825%" y="271.50"></text></g><g><title>0x1300652e0 (2 samples, 0.01%)</title><rect x="13.1781%" y="261" width="0.0130%" height="15" fill="rgb(219,133,21)" fg:x="2021" fg:w="2"/><text x="13.4281%" y="271.50"></text></g><g><title>0x130065364 (2 samples, 0.01%)</title><rect x="13.2238%" y="261" width="0.0130%" height="15" fill="rgb(246,46,29)" fg:x="2028" fg:w="2"/><text x="13.4738%" y="271.50"></text></g><g><title>0x130065398 (2 samples, 0.01%)</title><rect x="13.2368%" y="261" width="0.0130%" height="15" fill="rgb(246,185,52)" fg:x="2030" fg:w="2"/><text x="13.4868%" y="271.50"></text></g><g><title>0x1300653f0 (2 samples, 0.01%)</title><rect x="13.2694%" y="261" width="0.0130%" height="15" fill="rgb(252,136,11)" fg:x="2035" fg:w="2"/><text x="13.5194%" y="271.50"></text></g><g><title>0x1300655b8 (2 samples, 0.01%)</title><rect x="13.2890%" y="261" width="0.0130%" height="15" fill="rgb(219,138,53)" fg:x="2038" fg:w="2"/><text x="13.5390%" y="271.50"></text></g><g><title>0x1300655f4 (2 samples, 0.01%)</title><rect x="13.3020%" y="261" width="0.0130%" height="15" fill="rgb(211,51,23)" fg:x="2040" fg:w="2"/><text x="13.5520%" y="271.50"></text></g><g><title>0x1300655f8 (2 samples, 0.01%)</title><rect x="13.3151%" y="261" width="0.0130%" height="15" fill="rgb(247,221,28)" fg:x="2042" fg:w="2"/><text x="13.5651%" y="271.50"></text></g><g><title>0x130065614 (3 samples, 0.02%)</title><rect x="13.3281%" y="261" width="0.0196%" height="15" fill="rgb(251,222,45)" fg:x="2044" fg:w="3"/><text x="13.5781%" y="271.50"></text></g><g><title>0x130065670 (3 samples, 0.02%)</title><rect x="13.3607%" y="261" width="0.0196%" height="15" fill="rgb(217,162,53)" fg:x="2049" fg:w="3"/><text x="13.6107%" y="271.50"></text></g><g><title>0x13006569c (2 samples, 0.01%)</title><rect x="13.3803%" y="261" width="0.0130%" height="15" fill="rgb(229,93,14)" fg:x="2052" fg:w="2"/><text x="13.6303%" y="271.50"></text></g><g><title>0x130065760 (5 samples, 0.03%)</title><rect x="13.4064%" y="261" width="0.0326%" height="15" fill="rgb(209,67,49)" fg:x="2056" fg:w="5"/><text x="13.6564%" y="271.50"></text></g><g><title>0x130055bf0 (2 samples, 0.01%)</title><rect x="13.4716%" y="245" width="0.0130%" height="15" fill="rgb(213,87,29)" fg:x="2066" fg:w="2"/><text x="13.7216%" y="255.50"></text></g><g><title>0x130055c2c (12 samples, 0.08%)</title><rect x="13.4911%" y="245" width="0.0782%" height="15" fill="rgb(205,151,52)" fg:x="2069" fg:w="12"/><text x="13.7411%" y="255.50"></text></g><g><title>deno`Builtins_ToString (9 samples, 0.06%)</title><rect x="13.5107%" y="229" width="0.0587%" height="15" fill="rgb(253,215,39)" fg:x="2072" fg:w="9"/><text x="13.7607%" y="239.50"></text></g><g><title>0x130055c78 (2 samples, 0.01%)</title><rect x="13.5694%" y="245" width="0.0130%" height="15" fill="rgb(221,220,41)" fg:x="2081" fg:w="2"/><text x="13.8194%" y="255.50"></text></g><g><title>0x130055c9c (2 samples, 0.01%)</title><rect x="13.5889%" y="245" width="0.0130%" height="15" fill="rgb(218,133,21)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="255.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (2 samples, 0.01%)</title><rect x="13.5889%" y="229" width="0.0130%" height="15" fill="rgb(221,193,43)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="239.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="13.5889%" y="213" width="0.0130%" height="15" fill="rgb(240,128,52)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="223.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="13.5889%" y="197" width="0.0130%" height="15" fill="rgb(253,114,12)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="207.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="13.5889%" y="181" width="0.0130%" height="15" fill="rgb(215,223,47)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="191.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="13.5889%" y="165" width="0.0130%" height="15" fill="rgb(248,225,23)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="175.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="13.5889%" y="149" width="0.0130%" height="15" fill="rgb(250,108,0)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="13.5889%" y="133" width="0.0130%" height="15" fill="rgb(228,208,7)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="13.5889%" y="117" width="0.0130%" height="15" fill="rgb(244,45,10)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="127.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="13.5889%" y="101" width="0.0130%" height="15" fill="rgb(207,125,25)" fg:x="2084" fg:w="2"/><text x="13.8389%" y="111.50"></text></g><g><title>0x130055ca0 (4 samples, 0.03%)</title><rect x="13.6020%" y="245" width="0.0261%" height="15" fill="rgb(210,195,18)" fg:x="2086" fg:w="4"/><text x="13.8520%" y="255.50"></text></g><g><title>0x130055cf4 (4 samples, 0.03%)</title><rect x="13.6346%" y="245" width="0.0261%" height="15" fill="rgb(249,80,12)" fg:x="2091" fg:w="4"/><text x="13.8846%" y="255.50"></text></g><g><title>deno`Builtins_ToString (4 samples, 0.03%)</title><rect x="13.6346%" y="229" width="0.0261%" height="15" fill="rgb(221,65,9)" fg:x="2091" fg:w="4"/><text x="13.8846%" y="239.50"></text></g><g><title>0x130055d6c (2 samples, 0.01%)</title><rect x="13.6802%" y="245" width="0.0130%" height="15" fill="rgb(235,49,36)" fg:x="2098" fg:w="2"/><text x="13.9302%" y="255.50"></text></g><g><title>deno`Builtins_ToString (2 samples, 0.01%)</title><rect x="13.6802%" y="229" width="0.0130%" height="15" fill="rgb(225,32,20)" fg:x="2098" fg:w="2"/><text x="13.9302%" y="239.50"></text></g><g><title>0x130055dc0 (2 samples, 0.01%)</title><rect x="13.7063%" y="245" width="0.0130%" height="15" fill="rgb(215,141,46)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="255.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (2 samples, 0.01%)</title><rect x="13.7063%" y="229" width="0.0130%" height="15" fill="rgb(250,160,47)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="239.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="13.7063%" y="213" width="0.0130%" height="15" fill="rgb(216,222,40)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="223.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="13.7063%" y="197" width="0.0130%" height="15" fill="rgb(234,217,39)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="207.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="13.7063%" y="181" width="0.0130%" height="15" fill="rgb(207,178,40)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="191.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="13.7063%" y="165" width="0.0130%" height="15" fill="rgb(221,136,13)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="175.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="13.7063%" y="149" width="0.0130%" height="15" fill="rgb(249,199,10)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="13.7063%" y="133" width="0.0130%" height="15" fill="rgb(249,222,13)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="13.7063%" y="117" width="0.0130%" height="15" fill="rgb(244,185,38)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="127.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="13.7063%" y="101" width="0.0130%" height="15" fill="rgb(236,202,9)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="111.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="13.7063%" y="85" width="0.0130%" height="15" fill="rgb(250,229,37)" fg:x="2102" fg:w="2"/><text x="13.9563%" y="95.50"></text></g><g><title>0x130055f04 (6 samples, 0.04%)</title><rect x="13.7520%" y="245" width="0.0391%" height="15" fill="rgb(206,174,23)" fg:x="2109" fg:w="6"/><text x="14.0020%" y="255.50"></text></g><g><title>deno`Builtins_ToString (5 samples, 0.03%)</title><rect x="13.7585%" y="229" width="0.0326%" height="15" fill="rgb(211,33,43)" fg:x="2110" fg:w="5"/><text x="14.0085%" y="239.50"></text></g><g><title>0x130055fbc (4 samples, 0.03%)</title><rect x="13.8172%" y="245" width="0.0261%" height="15" fill="rgb(245,58,50)" fg:x="2119" fg:w="4"/><text x="14.0672%" y="255.50"></text></g><g><title>0x130056590 (2 samples, 0.01%)</title><rect x="13.9085%" y="245" width="0.0130%" height="15" fill="rgb(244,68,36)" fg:x="2133" fg:w="2"/><text x="14.1585%" y="255.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="13.9085%" y="229" width="0.0130%" height="15" fill="rgb(232,229,15)" fg:x="2133" fg:w="2"/><text x="14.1585%" y="239.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="13.9085%" y="213" width="0.0130%" height="15" fill="rgb(254,30,23)" fg:x="2133" fg:w="2"/><text x="14.1585%" y="223.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="13.9085%" y="197" width="0.0130%" height="15" fill="rgb(235,160,14)" fg:x="2133" fg:w="2"/><text x="14.1585%" y="207.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="13.9085%" y="181" width="0.0130%" height="15" fill="rgb(212,155,44)" fg:x="2133" fg:w="2"/><text x="14.1585%" y="191.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="13.9085%" y="165" width="0.0130%" height="15" fill="rgb(226,2,50)" fg:x="2133" fg:w="2"/><text x="14.1585%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="13.9085%" y="149" width="0.0130%" height="15" fill="rgb(234,177,6)" fg:x="2133" fg:w="2"/><text x="14.1585%" y="159.50"></text></g><g><title>deno`Builtins_NumberToString (9 samples, 0.06%)</title><rect x="13.9215%" y="245" width="0.0587%" height="15" fill="rgb(217,24,9)" fg:x="2135" fg:w="9"/><text x="14.1715%" y="255.50"></text></g><g><title>deno`Builtins_StringAdd_CheckNone (104 samples, 0.68%)</title><rect x="13.9802%" y="245" width="0.6781%" height="15" fill="rgb(220,13,46)" fg:x="2144" fg:w="104"/><text x="14.2302%" y="255.50"></text></g><g><title>0x130065848 (188 samples, 1.23%)</title><rect x="13.4716%" y="261" width="1.2259%" height="15" fill="rgb(239,221,27)" fg:x="2066" fg:w="188"/><text x="13.7216%" y="271.50"></text></g><g><title>deno`Builtins_ToString (6 samples, 0.04%)</title><rect x="14.6583%" y="245" width="0.0391%" height="15" fill="rgb(222,198,25)" fg:x="2248" fg:w="6"/><text x="14.9083%" y="255.50"></text></g><g><title>0x130065870 (2 samples, 0.01%)</title><rect x="14.6974%" y="261" width="0.0130%" height="15" fill="rgb(211,99,13)" fg:x="2254" fg:w="2"/><text x="14.9474%" y="271.50"></text></g><g><title>deno`bool v8::internal::String::IsEqualTo&lt;(v8::internal::String::EqualityType)2, unsigned char&gt;(v8::base::Vector (4 samples, 0.03%)</title><rect x="14.8148%" y="229" width="0.0261%" height="15" fill="rgb(232,111,31)" fg:x="2272" fg:w="4"/><text x="15.0648%" y="239.50"></text></g><g><title>deno`operator new(unsigned long) (2 samples, 0.01%)</title><rect x="14.8474%" y="229" width="0.0130%" height="15" fill="rgb(245,82,37)" fg:x="2277" fg:w="2"/><text x="15.0974%" y="239.50"></text></g><g><title>deno`operator new[](unsigned long) (2 samples, 0.01%)</title><rect x="14.8605%" y="229" width="0.0130%" height="15" fill="rgb(227,149,46)" fg:x="2279" fg:w="2"/><text x="15.1105%" y="239.50"></text></g><g><title>deno`unsigned int v8::internal::StringHasher::HashSequentialString&lt;unsigned char&gt; (343 samples, 2.24%)</title><rect x="14.8735%" y="229" width="2.2366%" height="15" fill="rgb(218,36,50)" fg:x="2281" fg:w="343"/><text x="15.1235%" y="239.50">d..</text></g><g><title>deno`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="17.4231%" y="213" width="0.0130%" height="15" fill="rgb(226,80,48)" fg:x="2672" fg:w="2"/><text x="17.6731%" y="223.50"></text></g><g><title>deno`DYLD-STUB$$memmove (2 samples, 0.01%)</title><rect x="17.4361%" y="213" width="0.0130%" height="15" fill="rgb(238,224,15)" fg:x="2674" fg:w="2"/><text x="17.6861%" y="223.50"></text></g><g><title>deno`bool v8::internal::String::IsEqualTo&lt;(v8::internal::String::EqualityType)2, unsigned char&gt;(v8::base::Vector (12 samples, 0.08%)</title><rect x="17.4491%" y="213" width="0.0782%" height="15" fill="rgb(241,136,10)" fg:x="2676" fg:w="12"/><text x="17.6991%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.16%)</title><rect x="17.5274%" y="197" width="0.1565%" height="15" fill="rgb(208,32,45)" fg:x="2688" fg:w="24"/><text x="17.7774%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.08%)</title><rect x="17.5991%" y="181" width="0.0848%" height="15" fill="rgb(207,135,9)" fg:x="2699" fg:w="13"/><text x="17.8491%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.07%)</title><rect x="17.6122%" y="165" width="0.0717%" height="15" fill="rgb(206,86,44)" fg:x="2701" fg:w="11"/><text x="17.8622%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.05%)</title><rect x="17.6382%" y="149" width="0.0456%" height="15" fill="rgb(245,177,15)" fg:x="2705" fg:w="7"/><text x="17.8882%" y="159.50"></text></g><g><title>deno`operator new(unsigned long) (25 samples, 0.16%)</title><rect x="17.5274%" y="213" width="0.1630%" height="15" fill="rgb(206,64,50)" fg:x="2688" fg:w="25"/><text x="17.7774%" y="223.50"></text></g><g><title>deno`v8::internal::Heap::IsLargeObject (5 samples, 0.03%)</title><rect x="17.7230%" y="197" width="0.0326%" height="15" fill="rgb(234,36,40)" fg:x="2718" fg:w="5"/><text x="17.9730%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::UpdateInvalidatedObjectSize (2 samples, 0.01%)</title><rect x="17.7621%" y="181" width="0.0130%" height="15" fill="rgb(213,64,8)" fg:x="2724" fg:w="2"/><text x="18.0121%" y="191.50"></text></g><g><title>deno`v8::internal::LocalHeap::Current (3 samples, 0.02%)</title><rect x="17.7752%" y="181" width="0.0196%" height="15" fill="rgb(210,75,36)" fg:x="2726" fg:w="3"/><text x="18.0252%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::NotifyObjectSizeChange (9 samples, 0.06%)</title><rect x="17.7556%" y="197" width="0.0587%" height="15" fill="rgb(229,88,21)" fg:x="2723" fg:w="9"/><text x="18.0056%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="17.7947%" y="181" width="0.0196%" height="15" fill="rgb(252,204,47)" fg:x="2729" fg:w="3"/><text x="18.0447%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::UpdateInvalidatedObjectSize (2 samples, 0.01%)</title><rect x="17.8143%" y="197" width="0.0130%" height="15" fill="rgb(208,77,27)" fg:x="2732" fg:w="2"/><text x="18.0643%" y="207.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::SetInternalizedReference (37 samples, 0.24%)</title><rect x="17.6904%" y="213" width="0.2413%" height="15" fill="rgb(221,76,26)" fg:x="2713" fg:w="37"/><text x="17.9404%" y="223.50"></text></g><g><title>deno`void v8::internal::String::MakeThin&lt;v8::internal::Isolate&gt; (15 samples, 0.10%)</title><rect x="17.8339%" y="197" width="0.0978%" height="15" fill="rgb(225,139,18)" fg:x="2735" fg:w="15"/><text x="18.0839%" y="207.50"></text></g><g><title>deno`v8::internal::Heap::NotifyObjectSizeChange (4 samples, 0.03%)</title><rect x="17.9317%" y="213" width="0.0261%" height="15" fill="rgb(230,137,11)" fg:x="2750" fg:w="4"/><text x="18.1817%" y="223.50"></text></g><g><title>deno`DYLD-STUB$$memmove (2 samples, 0.01%)</title><rect x="18.2447%" y="197" width="0.0130%" height="15" fill="rgb(212,28,1)" fg:x="2798" fg:w="2"/><text x="18.4947%" y="207.50"></text></g><g><title>deno`unsigned short v8::internal::StringShape::DispatchToSpecificTypeWithoutCast&lt;unsigned short v8::internal::StringShape::DispatchToSpecificType&lt;v8::internal::String::GetImpl(int, v8::internal::PtrComprCageBase, v8::internal::SharedStringAccessGuardIfNeeded const&amp;) const::StringGetDispatcher, unsigned short, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt;(v8::internal::String, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;)::CastingDispatcher, unsigned short, v8::internal::String&amp;, int&amp;, v8::internal::PtrComprCageBase&amp;, v8::internal::SharedStringAccessGuardIfNeeded const&amp;&gt; (4 samples, 0.03%)</title><rect x="18.6620%" y="181" width="0.0261%" height="15" fill="rgb(248,164,17)" fg:x="2862" fg:w="4"/><text x="18.9120%" y="191.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (78 samples, 0.51%)</title><rect x="18.2577%" y="197" width="0.5086%" height="15" fill="rgb(222,171,42)" fg:x="2800" fg:w="78"/><text x="18.5077%" y="207.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (12 samples, 0.08%)</title><rect x="18.6881%" y="181" width="0.0782%" height="15" fill="rgb(243,84,45)" fg:x="2866" fg:w="12"/><text x="18.9381%" y="191.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (129 samples, 0.84%)</title><rect x="17.9643%" y="213" width="0.8412%" height="15" fill="rgb(252,49,23)" fg:x="2755" fg:w="129"/><text x="18.2143%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.04%)</title><rect x="18.7663%" y="197" width="0.0391%" height="15" fill="rgb(215,19,7)" fg:x="2878" fg:w="6"/><text x="19.0163%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="18.8054%" y="213" width="0.0326%" height="15" fill="rgb(238,81,41)" fg:x="2884" fg:w="5"/><text x="19.0554%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.10%)</title><rect x="18.8380%" y="213" width="0.1043%" height="15" fill="rgb(210,199,37)" fg:x="2889" fg:w="16"/><text x="19.0880%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.05%)</title><rect x="18.8967%" y="197" width="0.0456%" height="15" fill="rgb(244,192,49)" fg:x="2898" fg:w="7"/><text x="19.1467%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="18.9424%" y="213" width="0.0130%" height="15" fill="rgb(226,211,11)" fg:x="2905" fg:w="2"/><text x="19.1924%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="18.9554%" y="213" width="0.0130%" height="15" fill="rgb(236,162,54)" fg:x="2907" fg:w="2"/><text x="19.2054%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.03%)</title><rect x="18.9684%" y="213" width="0.0326%" height="15" fill="rgb(220,229,9)" fg:x="2909" fg:w="5"/><text x="19.2184%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.02%)</title><rect x="19.0010%" y="213" width="0.0196%" height="15" fill="rgb(250,87,22)" fg:x="2914" fg:w="3"/><text x="19.2510%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (72 samples, 0.47%)</title><rect x="19.0206%" y="213" width="0.4695%" height="15" fill="rgb(239,43,17)" fg:x="2917" fg:w="72"/><text x="19.2706%" y="223.50"></text></g><g><title>deno`unsigned long v8::internal::StringTable::Data::TryStringToIndexOrLookupExisting&lt;unsigned char&gt; (374 samples, 2.44%)</title><rect x="17.1101%" y="229" width="2.4387%" height="15" fill="rgb(231,177,25)" fg:x="2624" fg:w="374"/><text x="17.3601%" y="239.50">de..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.06%)</title><rect x="19.4901%" y="213" width="0.0587%" height="15" fill="rgb(219,179,1)" fg:x="2989" fg:w="9"/><text x="19.7401%" y="223.50"></text></g><g><title>deno`void v8::internal::String::WriteToFlat&lt;unsigned char&gt; (4 samples, 0.03%)</title><rect x="19.5488%" y="229" width="0.0261%" height="15" fill="rgb(238,219,53)" fg:x="2998" fg:w="4"/><text x="19.7988%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.03%)</title><rect x="19.5814%" y="229" width="0.0261%" height="15" fill="rgb(232,167,36)" fg:x="3003" fg:w="4"/><text x="19.8314%" y="239.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (750 samples, 4.89%)</title><rect x="14.7300%" y="245" width="4.8905%" height="15" fill="rgb(244,19,51)" fg:x="2259" fg:w="750"/><text x="14.9800%" y="255.50">deno`B..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.01%)</title><rect x="19.6075%" y="229" width="0.0130%" height="15" fill="rgb(224,6,22)" fg:x="3007" fg:w="2"/><text x="19.8575%" y="239.50"></text></g><g><title>deno`unsigned long v8::internal::StringTable::Data::TryStringToIndexOrLookupExisting&lt;unsigned char&gt; (4 samples, 0.03%)</title><rect x="19.6205%" y="245" width="0.0261%" height="15" fill="rgb(224,145,5)" fg:x="3009" fg:w="4"/><text x="19.8705%" y="255.50"></text></g><g><title>0x13006588c (763 samples, 4.98%)</title><rect x="14.7105%" y="261" width="4.9752%" height="15" fill="rgb(234,130,49)" fg:x="2256" fg:w="763"/><text x="14.9605%" y="271.50">0x1300..</text></g><g><title>deno`v8::internal::StringTable::TryStringToIndexOrLookupExisting (6 samples, 0.04%)</title><rect x="19.6466%" y="245" width="0.0391%" height="15" fill="rgb(254,6,2)" fg:x="3013" fg:w="6"/><text x="19.8966%" y="255.50"></text></g><g><title>0x1300658fc (13 samples, 0.08%)</title><rect x="19.6922%" y="261" width="0.0848%" height="15" fill="rgb(208,96,46)" fg:x="3020" fg:w="13"/><text x="19.9422%" y="271.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (13 samples, 0.08%)</title><rect x="19.6922%" y="245" width="0.0848%" height="15" fill="rgb(239,3,39)" fg:x="3020" fg:w="13"/><text x="19.9422%" y="255.50"></text></g><g><title>0x13006597c (2 samples, 0.01%)</title><rect x="19.7900%" y="261" width="0.0130%" height="15" fill="rgb(233,210,1)" fg:x="3035" fg:w="2"/><text x="20.0400%" y="271.50"></text></g><g><title>0x130065a88 (4 samples, 0.03%)</title><rect x="19.8226%" y="261" width="0.0261%" height="15" fill="rgb(244,137,37)" fg:x="3040" fg:w="4"/><text x="20.0726%" y="271.50"></text></g><g><title>deno`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="19.8618%" y="245" width="0.0196%" height="15" fill="rgb(240,136,2)" fg:x="3046" fg:w="3"/><text x="20.1118%" y="255.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (4 samples, 0.03%)</title><rect x="19.9596%" y="229" width="0.0261%" height="15" fill="rgb(239,18,37)" fg:x="3061" fg:w="4"/><text x="20.2096%" y="239.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="20.0443%" y="213" width="0.0130%" height="15" fill="rgb(218,185,22)" fg:x="3074" fg:w="2"/><text x="20.2943%" y="223.50"></text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (17 samples, 0.11%)</title><rect x="19.9857%" y="229" width="0.1109%" height="15" fill="rgb(225,218,4)" fg:x="3065" fg:w="17"/><text x="20.2357%" y="239.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="20.0574%" y="213" width="0.0391%" height="15" fill="rgb(230,182,32)" fg:x="3076" fg:w="6"/><text x="20.3074%" y="223.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__sendto (7 samples, 0.05%)</title><rect x="20.0965%" y="229" width="0.0456%" height="15" fill="rgb(242,56,43)" fg:x="3082" fg:w="7"/><text x="20.3465%" y="239.50"></text></g><g><title>libsystem_c.dylib`send (4 samples, 0.03%)</title><rect x="20.1421%" y="229" width="0.0261%" height="15" fill="rgb(233,99,24)" fg:x="3089" fg:w="4"/><text x="20.3921%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (4,032 samples, 26.29%)</title><rect x="20.1682%" y="229" width="26.2911%" height="15" fill="rgb(234,209,42)" fg:x="3093" fg:w="4032"/><text x="20.4182%" y="239.50">libsystem_kernel.dylib`__sendto</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.01%)</title><rect x="46.6158%" y="213" width="0.0130%" height="15" fill="rgb(227,7,12)" fg:x="7149" fg:w="2"/><text x="46.8658%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.03%)</title><rect x="46.6288%" y="213" width="0.0326%" height="15" fill="rgb(245,203,43)" fg:x="7151" fg:w="5"/><text x="46.8788%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (4 samples, 0.03%)</title><rect x="46.6615%" y="213" width="0.0261%" height="15" fill="rgb(238,205,33)" fg:x="7156" fg:w="4"/><text x="46.9115%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.38%)</title><rect x="46.4658%" y="229" width="0.3847%" height="15" fill="rgb(231,56,7)" fg:x="7126" fg:w="59"/><text x="46.7158%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (25 samples, 0.16%)</title><rect x="46.6875%" y="213" width="0.1630%" height="15" fill="rgb(244,186,29)" fg:x="7160" fg:w="25"/><text x="46.9375%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.05%)</title><rect x="46.8049%" y="197" width="0.0456%" height="15" fill="rgb(234,111,31)" fg:x="7178" fg:w="7"/><text x="47.0549%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (6 samples, 0.04%)</title><rect x="47.4961%" y="213" width="0.0391%" height="15" fill="rgb(241,149,10)" fg:x="7284" fg:w="6"/><text x="47.7461%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (27 samples, 0.18%)</title><rect x="47.5352%" y="213" width="0.1761%" height="15" fill="rgb(249,206,44)" fg:x="7290" fg:w="27"/><text x="47.7852%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (5 samples, 0.03%)</title><rect x="47.7113%" y="213" width="0.0326%" height="15" fill="rgb(251,153,30)" fg:x="7317" fg:w="5"/><text x="47.9613%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (4 samples, 0.03%)</title><rect x="47.7439%" y="213" width="0.0261%" height="15" fill="rgb(239,152,38)" fg:x="7322" fg:w="4"/><text x="47.9939%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (26 samples, 0.17%)</title><rect x="47.7700%" y="213" width="0.1695%" height="15" fill="rgb(249,139,47)" fg:x="7326" fg:w="26"/><text x="48.0200%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (168 samples, 1.10%)</title><rect x="46.8505%" y="229" width="1.0955%" height="15" fill="rgb(244,64,35)" fg:x="7185" fg:w="168"/><text x="47.1005%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.01%)</title><rect x="47.9460%" y="229" width="0.0130%" height="15" fill="rgb(216,46,15)" fg:x="7353" fg:w="2"/><text x="48.1960%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="47.9591%" y="229" width="0.0130%" height="15" fill="rgb(250,74,19)" fg:x="7355" fg:w="2"/><text x="48.2091%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.04%)</title><rect x="47.9721%" y="229" width="0.0391%" height="15" fill="rgb(249,42,33)" fg:x="7357" fg:w="6"/><text x="48.2221%" y="239.50"></text></g><g><title>deno`deno_flash::flash_respond (4,316 samples, 28.14%)</title><rect x="19.8813%" y="245" width="28.1429%" height="15" fill="rgb(242,149,17)" fg:x="3049" fg:w="4316"/><text x="20.1313%" y="255.50">deno`deno_flash::flash_respond</text></g><g><title>deno`std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (3 samples, 0.02%)</title><rect x="48.0308%" y="245" width="0.0196%" height="15" fill="rgb(244,29,21)" fg:x="7366" fg:w="3"/><text x="48.2808%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.05%)</title><rect x="48.0569%" y="245" width="0.0456%" height="15" fill="rgb(220,130,37)" fg:x="7370" fg:w="7"/><text x="48.3069%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.05%)</title><rect x="48.1025%" y="245" width="0.0456%" height="15" fill="rgb(211,67,2)" fg:x="7377" fg:w="7"/><text x="48.3525%" y="255.50"></text></g><g><title>0x130065a90 (4,343 samples, 28.32%)</title><rect x="19.8487%" y="261" width="28.3190%" height="15" fill="rgb(235,68,52)" fg:x="3044" fg:w="4343"/><text x="20.0987%" y="271.50">0x130065a90</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.02%)</title><rect x="48.1481%" y="245" width="0.0196%" height="15" fill="rgb(246,142,3)" fg:x="7384" fg:w="3"/><text x="48.3981%" y="255.50"></text></g><g><title>deno`Builtins_KeyedLoadIC (2 samples, 0.01%)</title><rect x="48.2199%" y="229" width="0.0130%" height="15" fill="rgb(241,25,7)" fg:x="7395" fg:w="2"/><text x="48.4699%" y="239.50"></text></g><g><title>0x13005ddb8 (6 samples, 0.04%)</title><rect x="48.2199%" y="245" width="0.0391%" height="15" fill="rgb(242,119,39)" fg:x="7395" fg:w="6"/><text x="48.4699%" y="255.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (4 samples, 0.03%)</title><rect x="48.2329%" y="229" width="0.0261%" height="15" fill="rgb(241,98,45)" fg:x="7397" fg:w="4"/><text x="48.4829%" y="239.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (2 samples, 0.01%)</title><rect x="48.2786%" y="197" width="0.0130%" height="15" fill="rgb(254,28,30)" fg:x="7404" fg:w="2"/><text x="48.5286%" y="207.50"></text></g><g><title>deno`v8::internal::FunctionCallbackArguments::FunctionCallbackArguments (2 samples, 0.01%)</title><rect x="48.2916%" y="197" width="0.0130%" height="15" fill="rgb(241,142,54)" fg:x="7406" fg:w="2"/><text x="48.5416%" y="207.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (2 samples, 0.01%)</title><rect x="48.4611%" y="149" width="0.0130%" height="15" fill="rgb(222,85,15)" fg:x="7432" fg:w="2"/><text x="48.7111%" y="159.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (12 samples, 0.08%)</title><rect x="48.4742%" y="149" width="0.0782%" height="15" fill="rgb(210,85,47)" fg:x="7434" fg:w="12"/><text x="48.7242%" y="159.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.18%)</title><rect x="48.3829%" y="165" width="0.1761%" height="15" fill="rgb(224,206,25)" fg:x="7420" fg:w="27"/><text x="48.6329%" y="175.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.01%)</title><rect x="48.5655%" y="165" width="0.0130%" height="15" fill="rgb(243,201,19)" fg:x="7448" fg:w="2"/><text x="48.8155%" y="175.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::state (2 samples, 0.01%)</title><rect x="48.5785%" y="165" width="0.0130%" height="15" fill="rgb(236,59,4)" fg:x="7450" fg:w="2"/><text x="48.8285%" y="175.50"></text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (6 samples, 0.04%)</title><rect x="48.5915%" y="165" width="0.0391%" height="15" fill="rgb(254,179,45)" fg:x="7452" fg:w="6"/><text x="48.8415%" y="175.50"></text></g><g><title>deno`v8::scope::HandleScope::get_current_context (3 samples, 0.02%)</title><rect x="48.6502%" y="165" width="0.0196%" height="15" fill="rgb(226,14,10)" fg:x="7461" fg:w="3"/><text x="48.9002%" y="175.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (3 samples, 0.02%)</title><rect x="48.6763%" y="165" width="0.0196%" height="15" fill="rgb(244,27,41)" fg:x="7465" fg:w="3"/><text x="48.9263%" y="175.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;v8::scope::data::ScopeTypeSpecificData&gt; (2 samples, 0.01%)</title><rect x="48.6828%" y="149" width="0.0130%" height="15" fill="rgb(235,35,32)" fg:x="7466" fg:w="2"/><text x="48.9328%" y="159.50"></text></g><g><title>deno`v8__Isolate__GetData (2 samples, 0.01%)</title><rect x="48.6959%" y="165" width="0.0130%" height="15" fill="rgb(218,68,31)" fg:x="7468" fg:w="2"/><text x="48.9459%" y="175.50"></text></g><g><title>deno`&lt;extern &quot;C&quot; fn(A0) .&gt; R as v8::support::CFnFrom&lt;F&gt;&gt;::mapping::c_fn (57 samples, 0.37%)</title><rect x="48.3503%" y="181" width="0.3717%" height="15" fill="rgb(207,120,37)" fg:x="7415" fg:w="57"/><text x="48.6003%" y="191.50"></text></g><g><title>deno`v8::External::Value (4 samples, 0.03%)</title><rect x="48.7285%" y="181" width="0.0261%" height="15" fill="rgb(227,98,0)" fg:x="7473" fg:w="4"/><text x="48.9785%" y="191.50"></text></g><g><title>deno`v8::internal::ExternalCallbackScope::ExternalCallbackScope (3 samples, 0.02%)</title><rect x="48.7741%" y="181" width="0.0196%" height="15" fill="rgb(207,7,3)" fg:x="7480" fg:w="3"/><text x="49.0241%" y="191.50"></text></g><g><title>deno`v8::scope::HandleScope::get_current_context (3 samples, 0.02%)</title><rect x="48.7937%" y="181" width="0.0196%" height="15" fill="rgb(206,98,19)" fg:x="7483" fg:w="3"/><text x="49.0437%" y="191.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (85 samples, 0.55%)</title><rect x="48.2720%" y="213" width="0.5543%" height="15" fill="rgb(217,5,26)" fg:x="7403" fg:w="85"/><text x="48.5220%" y="223.50"></text></g><g><title>deno`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (80 samples, 0.52%)</title><rect x="48.3046%" y="197" width="0.5216%" height="15" fill="rgb(235,190,38)" fg:x="7408" fg:w="80"/><text x="48.5546%" y="207.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (88 samples, 0.57%)</title><rect x="48.2590%" y="229" width="0.5738%" height="15" fill="rgb(247,86,24)" fg:x="7401" fg:w="88"/><text x="48.5090%" y="239.50"></text></g><g><title>0x13005ddec (91 samples, 0.59%)</title><rect x="48.2590%" y="245" width="0.5934%" height="15" fill="rgb(205,101,16)" fg:x="7401" fg:w="91"/><text x="48.5090%" y="255.50"></text></g><g><title>deno`v8::internal::Builtin_HandleApiCall (3 samples, 0.02%)</title><rect x="48.8328%" y="229" width="0.0196%" height="15" fill="rgb(246,168,33)" fg:x="7489" fg:w="3"/><text x="49.0828%" y="239.50"></text></g><g><title>0x13005e4f8 (2 samples, 0.01%)</title><rect x="48.8850%" y="245" width="0.0130%" height="15" fill="rgb(231,114,1)" fg:x="7497" fg:w="2"/><text x="49.1350%" y="255.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (2 samples, 0.01%)</title><rect x="48.8850%" y="229" width="0.0130%" height="15" fill="rgb(207,184,53)" fg:x="7497" fg:w="2"/><text x="49.1350%" y="239.50"></text></g><g><title>deno`Builtins_CallForwardVarargs (5 samples, 0.03%)</title><rect x="48.8980%" y="245" width="0.0326%" height="15" fill="rgb(224,95,51)" fg:x="7499" fg:w="5"/><text x="49.1480%" y="255.50"></text></g><g><title>0x130065efc (112 samples, 0.73%)</title><rect x="48.2134%" y="261" width="0.7303%" height="15" fill="rgb(212,188,45)" fg:x="7394" fg:w="112"/><text x="48.4634%" y="271.50"></text></g><g><title>0x130065f10 (3 samples, 0.02%)</title><rect x="48.9437%" y="261" width="0.0196%" height="15" fill="rgb(223,154,38)" fg:x="7506" fg:w="3"/><text x="49.1937%" y="271.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitUncaught (3 samples, 0.02%)</title><rect x="48.9437%" y="245" width="0.0196%" height="15" fill="rgb(251,22,52)" fg:x="7506" fg:w="3"/><text x="49.1937%" y="255.50"></text></g><g><title>0x13006646c (2 samples, 0.01%)</title><rect x="48.9697%" y="261" width="0.0130%" height="15" fill="rgb(229,209,22)" fg:x="7510" fg:w="2"/><text x="49.2197%" y="271.50"></text></g><g><title>0x1300664d4 (2 samples, 0.01%)</title><rect x="48.9893%" y="261" width="0.0130%" height="15" fill="rgb(234,138,34)" fg:x="7513" fg:w="2"/><text x="49.2393%" y="271.50"></text></g><g><title>0x130066550 (3 samples, 0.02%)</title><rect x="49.0023%" y="261" width="0.0196%" height="15" fill="rgb(212,95,11)" fg:x="7515" fg:w="3"/><text x="49.2523%" y="271.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="49.0480%" y="229" width="0.0326%" height="15" fill="rgb(240,179,47)" fg:x="7522" fg:w="5"/><text x="49.2980%" y="239.50"></text></g><g><title>deno`deno_flash::op_flash_get_method_fast (18 samples, 0.12%)</title><rect x="49.0415%" y="245" width="0.1174%" height="15" fill="rgb(240,163,11)" fg:x="7521" fg:w="18"/><text x="49.2915%" y="255.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (12 samples, 0.08%)</title><rect x="49.0806%" y="229" width="0.0782%" height="15" fill="rgb(236,37,12)" fg:x="7527" fg:w="12"/><text x="49.3306%" y="239.50"></text></g><g><title>0x130066564 (23 samples, 0.15%)</title><rect x="49.0350%" y="261" width="0.1500%" height="15" fill="rgb(232,164,16)" fg:x="7520" fg:w="23"/><text x="49.2850%" y="271.50"></text></g><g><title>deno`v8__Object__GetAlignedPointerFromInternalField (4 samples, 0.03%)</title><rect x="49.1588%" y="245" width="0.0261%" height="15" fill="rgb(244,205,15)" fg:x="7539" fg:w="4"/><text x="49.4088%" y="255.50"></text></g><g><title>0x13006666c (2 samples, 0.01%)</title><rect x="49.2110%" y="261" width="0.0130%" height="15" fill="rgb(223,117,47)" fg:x="7547" fg:w="2"/><text x="49.4610%" y="271.50"></text></g><g><title>0x1300666ac (4 samples, 0.03%)</title><rect x="49.2306%" y="261" width="0.0261%" height="15" fill="rgb(244,107,35)" fg:x="7550" fg:w="4"/><text x="49.4806%" y="271.50"></text></g><g><title>0x1300666e4 (2 samples, 0.01%)</title><rect x="49.2567%" y="261" width="0.0130%" height="15" fill="rgb(205,140,8)" fg:x="7554" fg:w="2"/><text x="49.5067%" y="271.50"></text></g><g><title>0x13006671c (8 samples, 0.05%)</title><rect x="49.2697%" y="261" width="0.0522%" height="15" fill="rgb(228,84,46)" fg:x="7556" fg:w="8"/><text x="49.5197%" y="271.50"></text></g><g><title>0x130066728 (3 samples, 0.02%)</title><rect x="49.3219%" y="261" width="0.0196%" height="15" fill="rgb(254,188,9)" fg:x="7564" fg:w="3"/><text x="49.5719%" y="271.50"></text></g><g><title>0x13006679c (2 samples, 0.01%)</title><rect x="49.3545%" y="261" width="0.0130%" height="15" fill="rgb(206,112,54)" fg:x="7569" fg:w="2"/><text x="49.6045%" y="271.50"></text></g><g><title>0x130066820 (6 samples, 0.04%)</title><rect x="49.3675%" y="261" width="0.0391%" height="15" fill="rgb(216,84,49)" fg:x="7571" fg:w="6"/><text x="49.6175%" y="271.50"></text></g><g><title>0x13005e728 (2 samples, 0.01%)</title><rect x="49.4262%" y="245" width="0.0130%" height="15" fill="rgb(214,194,35)" fg:x="7580" fg:w="2"/><text x="49.6762%" y="255.50"></text></g><g><title>0x13005eca4 (2 samples, 0.01%)</title><rect x="49.4392%" y="245" width="0.0130%" height="15" fill="rgb(249,28,3)" fg:x="7582" fg:w="2"/><text x="49.6892%" y="255.50"></text></g><g><title>deno`Builtins_FastNewObject (47 samples, 0.31%)</title><rect x="49.4523%" y="245" width="0.3065%" height="15" fill="rgb(222,56,52)" fg:x="7584" fg:w="47"/><text x="49.7023%" y="255.50"></text></g><g><title>deno`Builtins_JSConstructStubGeneric (3 samples, 0.02%)</title><rect x="49.7587%" y="245" width="0.0196%" height="15" fill="rgb(245,217,50)" fg:x="7631" fg:w="3"/><text x="50.0087%" y="255.50"></text></g><g><title>0x13005af80 (4 samples, 0.03%)</title><rect x="49.9674%" y="229" width="0.0261%" height="15" fill="rgb(213,201,24)" fg:x="7663" fg:w="4"/><text x="50.2174%" y="239.50"></text></g><g><title>0x13005e750 (2 samples, 0.01%)</title><rect x="50.0065%" y="229" width="0.0130%" height="15" fill="rgb(248,116,28)" fg:x="7669" fg:w="2"/><text x="50.2565%" y="239.50"></text></g><g><title>0x13005e83c (2 samples, 0.01%)</title><rect x="50.0391%" y="229" width="0.0130%" height="15" fill="rgb(219,72,43)" fg:x="7674" fg:w="2"/><text x="50.2891%" y="239.50"></text></g><g><title>0x13005afb4 (2 samples, 0.01%)</title><rect x="50.0522%" y="213" width="0.0130%" height="15" fill="rgb(209,138,14)" fg:x="7676" fg:w="2"/><text x="50.3022%" y="223.50"></text></g><g><title>0x13005b084 (6 samples, 0.04%)</title><rect x="50.0717%" y="213" width="0.0391%" height="15" fill="rgb(222,18,33)" fg:x="7679" fg:w="6"/><text x="50.3217%" y="223.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (6 samples, 0.04%)</title><rect x="50.0717%" y="197" width="0.0391%" height="15" fill="rgb(213,199,7)" fg:x="7679" fg:w="6"/><text x="50.3217%" y="207.50"></text></g><g><title>0x13005b0bc (7 samples, 0.05%)</title><rect x="50.1109%" y="213" width="0.0456%" height="15" fill="rgb(250,110,10)" fg:x="7685" fg:w="7"/><text x="50.3609%" y="223.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (7 samples, 0.05%)</title><rect x="50.1109%" y="197" width="0.0456%" height="15" fill="rgb(248,123,6)" fg:x="7685" fg:w="7"/><text x="50.3609%" y="207.50"></text></g><g><title>0x13005b0ec (2 samples, 0.01%)</title><rect x="50.1565%" y="213" width="0.0130%" height="15" fill="rgb(206,91,31)" fg:x="7692" fg:w="2"/><text x="50.4065%" y="223.50"></text></g><g><title>0x13005b0f4 (4 samples, 0.03%)</title><rect x="50.1695%" y="213" width="0.0261%" height="15" fill="rgb(211,154,13)" fg:x="7694" fg:w="4"/><text x="50.4195%" y="223.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (4 samples, 0.03%)</title><rect x="50.1695%" y="197" width="0.0261%" height="15" fill="rgb(225,148,7)" fg:x="7694" fg:w="4"/><text x="50.4195%" y="207.50"></text></g><g><title>0x13005b12c (8 samples, 0.05%)</title><rect x="50.1956%" y="213" width="0.0522%" height="15" fill="rgb(220,160,43)" fg:x="7698" fg:w="8"/><text x="50.4456%" y="223.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (7 samples, 0.05%)</title><rect x="50.2021%" y="197" width="0.0456%" height="15" fill="rgb(213,52,39)" fg:x="7699" fg:w="7"/><text x="50.4521%" y="207.50"></text></g><g><title>deno`Builtins_LoadIC (7 samples, 0.05%)</title><rect x="50.2739%" y="213" width="0.0456%" height="15" fill="rgb(243,137,7)" fg:x="7710" fg:w="7"/><text x="50.5239%" y="223.50"></text></g><g><title>0x13005e844 (50 samples, 0.33%)</title><rect x="50.0522%" y="229" width="0.3260%" height="15" fill="rgb(230,79,13)" fg:x="7676" fg:w="50"/><text x="50.3022%" y="239.50"></text></g><g><title>deno`Builtins_ObjectPrototypeIsPrototypeOf (9 samples, 0.06%)</title><rect x="50.3195%" y="213" width="0.0587%" height="15" fill="rgb(247,105,23)" fg:x="7717" fg:w="9"/><text x="50.5695%" y="223.50"></text></g><g><title>0x13005e944 (2 samples, 0.01%)</title><rect x="50.3847%" y="229" width="0.0130%" height="15" fill="rgb(223,179,41)" fg:x="7727" fg:w="2"/><text x="50.6347%" y="239.50"></text></g><g><title>0x13005e9cc (2 samples, 0.01%)</title><rect x="50.4108%" y="229" width="0.0130%" height="15" fill="rgb(218,9,34)" fg:x="7731" fg:w="2"/><text x="50.6608%" y="239.50"></text></g><g><title>0x13005e9fc (3 samples, 0.02%)</title><rect x="50.4238%" y="229" width="0.0196%" height="15" fill="rgb(222,106,8)" fg:x="7733" fg:w="3"/><text x="50.6738%" y="239.50"></text></g><g><title>0x13005eaac (2 samples, 0.01%)</title><rect x="50.4564%" y="229" width="0.0130%" height="15" fill="rgb(211,220,0)" fg:x="7738" fg:w="2"/><text x="50.7064%" y="239.50"></text></g><g><title>0x13005ad1c (19 samples, 0.12%)</title><rect x="50.4760%" y="213" width="0.1239%" height="15" fill="rgb(229,52,16)" fg:x="7741" fg:w="19"/><text x="50.7260%" y="223.50"></text></g><g><title>0x13005ad48 (2 samples, 0.01%)</title><rect x="50.5999%" y="213" width="0.0130%" height="15" fill="rgb(212,155,18)" fg:x="7760" fg:w="2"/><text x="50.8499%" y="223.50"></text></g><g><title>0x13005ae20 (6 samples, 0.04%)</title><rect x="50.6260%" y="213" width="0.0391%" height="15" fill="rgb(242,21,14)" fg:x="7764" fg:w="6"/><text x="50.8760%" y="223.50"></text></g><g><title>0x13005ae24 (2 samples, 0.01%)</title><rect x="50.6651%" y="213" width="0.0130%" height="15" fill="rgb(222,19,48)" fg:x="7770" fg:w="2"/><text x="50.9151%" y="223.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="50.6781%" y="165" width="0.0130%" height="15" fill="rgb(232,45,27)" fg:x="7772" fg:w="2"/><text x="50.9281%" y="175.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="50.6781%" y="149" width="0.0130%" height="15" fill="rgb(249,103,42)" fg:x="7772" fg:w="2"/><text x="50.9281%" y="159.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="50.6781%" y="133" width="0.0130%" height="15" fill="rgb(246,81,33)" fg:x="7772" fg:w="2"/><text x="50.9281%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="50.6781%" y="117" width="0.0130%" height="15" fill="rgb(252,33,42)" fg:x="7772" fg:w="2"/><text x="50.9281%" y="127.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="50.6781%" y="101" width="0.0130%" height="15" fill="rgb(209,212,41)" fg:x="7772" fg:w="2"/><text x="50.9281%" y="111.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="50.6781%" y="85" width="0.0130%" height="15" fill="rgb(207,154,6)" fg:x="7772" fg:w="2"/><text x="50.9281%" y="95.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="50.6781%" y="69" width="0.0130%" height="15" fill="rgb(223,64,47)" fg:x="7772" fg:w="2"/><text x="50.9281%" y="79.50"></text></g><g><title>0x13005ae98 (3 samples, 0.02%)</title><rect x="50.6781%" y="213" width="0.0196%" height="15" fill="rgb(211,161,38)" fg:x="7772" fg:w="3"/><text x="50.9281%" y="223.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="50.6781%" y="197" width="0.0196%" height="15" fill="rgb(219,138,40)" fg:x="7772" fg:w="3"/><text x="50.9281%" y="207.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.02%)</title><rect x="50.6781%" y="181" width="0.0196%" height="15" fill="rgb(241,228,46)" fg:x="7772" fg:w="3"/><text x="50.9281%" y="191.50"></text></g><g><title>0x13005eab4 (39 samples, 0.25%)</title><rect x="50.4695%" y="229" width="0.2543%" height="15" fill="rgb(223,209,38)" fg:x="7740" fg:w="39"/><text x="50.7195%" y="239.50"></text></g><g><title>deno`Builtins_SameValueNumbersOnly (3 samples, 0.02%)</title><rect x="50.7042%" y="213" width="0.0196%" height="15" fill="rgb(236,164,45)" fg:x="7776" fg:w="3"/><text x="50.9542%" y="223.50"></text></g><g><title>0x13005ebbc (4 samples, 0.03%)</title><rect x="50.7499%" y="229" width="0.0261%" height="15" fill="rgb(231,15,5)" fg:x="7783" fg:w="4"/><text x="50.9999%" y="239.50"></text></g><g><title>0x13005ec28 (2 samples, 0.01%)</title><rect x="50.7890%" y="229" width="0.0130%" height="15" fill="rgb(252,35,15)" fg:x="7789" fg:w="2"/><text x="51.0390%" y="239.50"></text></g><g><title>0x13005ed18 (2 samples, 0.01%)</title><rect x="50.8151%" y="229" width="0.0130%" height="15" fill="rgb(248,181,18)" fg:x="7793" fg:w="2"/><text x="51.0651%" y="239.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="50.8151%" y="213" width="0.0130%" height="15" fill="rgb(233,39,42)" fg:x="7793" fg:w="2"/><text x="51.0651%" y="223.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="50.8151%" y="197" width="0.0130%" height="15" fill="rgb(238,110,33)" fg:x="7793" fg:w="2"/><text x="51.0651%" y="207.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="50.8151%" y="181" width="0.0130%" height="15" fill="rgb(233,195,10)" fg:x="7793" fg:w="2"/><text x="51.0651%" y="191.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="50.8151%" y="165" width="0.0130%" height="15" fill="rgb(254,105,3)" fg:x="7793" fg:w="2"/><text x="51.0651%" y="175.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="50.8151%" y="149" width="0.0130%" height="15" fill="rgb(221,225,9)" fg:x="7793" fg:w="2"/><text x="51.0651%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="50.8151%" y="133" width="0.0130%" height="15" fill="rgb(224,227,45)" fg:x="7793" fg:w="2"/><text x="51.0651%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="50.8151%" y="117" width="0.0130%" height="15" fill="rgb(229,198,43)" fg:x="7793" fg:w="2"/><text x="51.0651%" y="127.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="50.8151%" y="101" width="0.0130%" height="15" fill="rgb(206,209,35)" fg:x="7793" fg:w="2"/><text x="51.0651%" y="111.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (2 samples, 0.01%)</title><rect x="50.8542%" y="53" width="0.0130%" height="15" fill="rgb(245,195,53)" fg:x="7799" fg:w="2"/><text x="51.1042%" y="63.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.01%)</title><rect x="50.8542%" y="37" width="0.0130%" height="15" fill="rgb(240,92,26)" fg:x="7799" fg:w="2"/><text x="51.1042%" y="47.50"></text></g><g><title>0x13005ed78 (6 samples, 0.04%)</title><rect x="50.8346%" y="229" width="0.0391%" height="15" fill="rgb(207,40,23)" fg:x="7796" fg:w="6"/><text x="51.0846%" y="239.50"></text></g><g><title>deno`Builtins_GrowFastSmiOrObjectElements (3 samples, 0.02%)</title><rect x="50.8542%" y="213" width="0.0196%" height="15" fill="rgb(223,111,35)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="223.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (3 samples, 0.02%)</title><rect x="50.8542%" y="197" width="0.0196%" height="15" fill="rgb(229,147,28)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="207.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (3 samples, 0.02%)</title><rect x="50.8542%" y="181" width="0.0196%" height="15" fill="rgb(211,29,28)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="191.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (3 samples, 0.02%)</title><rect x="50.8542%" y="165" width="0.0196%" height="15" fill="rgb(228,72,33)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="175.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (3 samples, 0.02%)</title><rect x="50.8542%" y="149" width="0.0196%" height="15" fill="rgb(205,214,31)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="159.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (3 samples, 0.02%)</title><rect x="50.8542%" y="133" width="0.0196%" height="15" fill="rgb(224,111,15)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (3 samples, 0.02%)</title><rect x="50.8542%" y="117" width="0.0196%" height="15" fill="rgb(253,21,26)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="127.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (3 samples, 0.02%)</title><rect x="50.8542%" y="101" width="0.0196%" height="15" fill="rgb(245,139,43)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="111.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (3 samples, 0.02%)</title><rect x="50.8542%" y="85" width="0.0196%" height="15" fill="rgb(252,170,7)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="95.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (3 samples, 0.02%)</title><rect x="50.8542%" y="69" width="0.0196%" height="15" fill="rgb(231,118,14)" fg:x="7799" fg:w="3"/><text x="51.1042%" y="79.50"></text></g><g><title>deno`Builtins_GrowFastSmiOrObjectElements (17 samples, 0.11%)</title><rect x="50.8738%" y="229" width="0.1109%" height="15" fill="rgb(238,83,0)" fg:x="7802" fg:w="17"/><text x="51.1238%" y="239.50"></text></g><g><title>deno`Builtins_LoadIC (32 samples, 0.21%)</title><rect x="50.9846%" y="229" width="0.2087%" height="15" fill="rgb(221,39,39)" fg:x="7819" fg:w="32"/><text x="51.2346%" y="239.50"></text></g><g><title>deno`Builtins_LoadICTrampoline (6 samples, 0.04%)</title><rect x="51.1933%" y="229" width="0.0391%" height="15" fill="rgb(222,119,46)" fg:x="7851" fg:w="6"/><text x="51.4433%" y="239.50"></text></g><g><title>deno`construct_stub_create_deopt_addr (225 samples, 1.47%)</title><rect x="49.7783%" y="245" width="1.4671%" height="15" fill="rgb(222,165,49)" fg:x="7634" fg:w="225"/><text x="50.0283%" y="255.50"></text></g><g><title>deno`Builtins_SameValueNumbersOnly (2 samples, 0.01%)</title><rect x="51.2324%" y="229" width="0.0130%" height="15" fill="rgb(219,113,52)" fg:x="7857" fg:w="2"/><text x="51.4824%" y="239.50"></text></g><g><title>0x130066850 (282 samples, 1.84%)</title><rect x="49.4131%" y="261" width="1.8388%" height="15" fill="rgb(214,7,15)" fg:x="7578" fg:w="282"/><text x="49.6631%" y="271.50">0..</text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (2 samples, 0.01%)</title><rect x="51.4085%" y="69" width="0.0130%" height="15" fill="rgb(235,32,4)" fg:x="7884" fg:w="2"/><text x="51.6585%" y="79.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (3 samples, 0.02%)</title><rect x="51.4085%" y="85" width="0.0196%" height="15" fill="rgb(238,90,54)" fg:x="7884" fg:w="3"/><text x="51.6585%" y="95.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (4 samples, 0.03%)</title><rect x="51.4085%" y="101" width="0.0261%" height="15" fill="rgb(213,208,19)" fg:x="7884" fg:w="4"/><text x="51.6585%" y="111.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (5 samples, 0.03%)</title><rect x="51.4085%" y="229" width="0.0326%" height="15" fill="rgb(233,156,4)" fg:x="7884" fg:w="5"/><text x="51.6585%" y="239.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (5 samples, 0.03%)</title><rect x="51.4085%" y="213" width="0.0326%" height="15" fill="rgb(207,194,5)" fg:x="7884" fg:w="5"/><text x="51.6585%" y="223.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (5 samples, 0.03%)</title><rect x="51.4085%" y="197" width="0.0326%" height="15" fill="rgb(206,111,30)" fg:x="7884" fg:w="5"/><text x="51.6585%" y="207.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (5 samples, 0.03%)</title><rect x="51.4085%" y="181" width="0.0326%" height="15" fill="rgb(243,70,54)" fg:x="7884" fg:w="5"/><text x="51.6585%" y="191.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (5 samples, 0.03%)</title><rect x="51.4085%" y="165" width="0.0326%" height="15" fill="rgb(242,28,8)" fg:x="7884" fg:w="5"/><text x="51.6585%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (5 samples, 0.03%)</title><rect x="51.4085%" y="149" width="0.0326%" height="15" fill="rgb(219,106,18)" fg:x="7884" fg:w="5"/><text x="51.6585%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (5 samples, 0.03%)</title><rect x="51.4085%" y="133" width="0.0326%" height="15" fill="rgb(244,222,10)" fg:x="7884" fg:w="5"/><text x="51.6585%" y="143.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (5 samples, 0.03%)</title><rect x="51.4085%" y="117" width="0.0326%" height="15" fill="rgb(236,179,52)" fg:x="7884" fg:w="5"/><text x="51.6585%" y="127.50"></text></g><g><title>deno`Builtins_EnqueueMicrotask (4 samples, 0.03%)</title><rect x="51.4411%" y="229" width="0.0261%" height="15" fill="rgb(213,23,39)" fg:x="7889" fg:w="4"/><text x="51.6911%" y="239.50"></text></g><g><title>deno`Builtins_PerformPromiseThen (7 samples, 0.05%)</title><rect x="51.4802%" y="229" width="0.0456%" height="15" fill="rgb(238,48,10)" fg:x="7895" fg:w="7"/><text x="51.7302%" y="239.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="51.5128%" y="213" width="0.0130%" height="15" fill="rgb(251,196,23)" fg:x="7900" fg:w="2"/><text x="51.7628%" y="223.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="51.5128%" y="197" width="0.0130%" height="15" fill="rgb(250,152,24)" fg:x="7900" fg:w="2"/><text x="51.7628%" y="207.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="51.5128%" y="181" width="0.0130%" height="15" fill="rgb(209,150,17)" fg:x="7900" fg:w="2"/><text x="51.7628%" y="191.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="51.5128%" y="165" width="0.0130%" height="15" fill="rgb(234,202,34)" fg:x="7900" fg:w="2"/><text x="51.7628%" y="175.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="51.5128%" y="149" width="0.0130%" height="15" fill="rgb(253,148,53)" fg:x="7900" fg:w="2"/><text x="51.7628%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="51.5128%" y="133" width="0.0130%" height="15" fill="rgb(218,129,16)" fg:x="7900" fg:w="2"/><text x="51.7628%" y="143.50"></text></g><g><title>deno`Builtins_FulfillPromise (3 samples, 0.02%)</title><rect x="51.5454%" y="213" width="0.0196%" height="15" fill="rgb(216,85,19)" fg:x="7905" fg:w="3"/><text x="51.7954%" y="223.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (88 samples, 0.57%)</title><rect x="51.2520%" y="245" width="0.5738%" height="15" fill="rgb(235,228,7)" fg:x="7860" fg:w="88"/><text x="51.5020%" y="255.50"></text></g><g><title>deno`Builtins_ResolvePromise (46 samples, 0.30%)</title><rect x="51.5258%" y="229" width="0.2999%" height="15" fill="rgb(245,175,0)" fg:x="7902" fg:w="46"/><text x="51.7758%" y="239.50"></text></g><g><title>deno`Builtins_GetProperty (40 samples, 0.26%)</title><rect x="51.5649%" y="213" width="0.2608%" height="15" fill="rgb(208,168,36)" fg:x="7908" fg:w="40"/><text x="51.8149%" y="223.50"></text></g><g><title>0x130066864 (99 samples, 0.65%)</title><rect x="51.2520%" y="261" width="0.6455%" height="15" fill="rgb(246,171,24)" fg:x="7860" fg:w="99"/><text x="51.5020%" y="271.50"></text></g><g><title>deno`Builtins_ResolvePromise (10 samples, 0.07%)</title><rect x="51.8323%" y="245" width="0.0652%" height="15" fill="rgb(215,142,24)" fg:x="7949" fg:w="10"/><text x="52.0823%" y="255.50"></text></g><g><title>0x130066888 (2 samples, 0.01%)</title><rect x="51.9040%" y="261" width="0.0130%" height="15" fill="rgb(250,187,7)" fg:x="7960" fg:w="2"/><text x="52.1540%" y="271.50"></text></g><g><title>0x1300668dc (2 samples, 0.01%)</title><rect x="51.9301%" y="261" width="0.0130%" height="15" fill="rgb(228,66,33)" fg:x="7964" fg:w="2"/><text x="52.1801%" y="271.50"></text></g><g><title>0x130066ac0 (2 samples, 0.01%)</title><rect x="51.9757%" y="261" width="0.0130%" height="15" fill="rgb(234,215,21)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="271.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (2 samples, 0.01%)</title><rect x="51.9757%" y="245" width="0.0130%" height="15" fill="rgb(222,191,20)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="255.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (2 samples, 0.01%)</title><rect x="51.9757%" y="229" width="0.0130%" height="15" fill="rgb(245,79,54)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="239.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (2 samples, 0.01%)</title><rect x="51.9757%" y="213" width="0.0130%" height="15" fill="rgb(240,10,37)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (2 samples, 0.01%)</title><rect x="51.9757%" y="197" width="0.0130%" height="15" fill="rgb(214,192,32)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="207.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (2 samples, 0.01%)</title><rect x="51.9757%" y="181" width="0.0130%" height="15" fill="rgb(209,36,54)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (2 samples, 0.01%)</title><rect x="51.9757%" y="165" width="0.0130%" height="15" fill="rgb(220,10,11)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (2 samples, 0.01%)</title><rect x="51.9757%" y="149" width="0.0130%" height="15" fill="rgb(221,106,17)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (2 samples, 0.01%)</title><rect x="51.9757%" y="133" width="0.0130%" height="15" fill="rgb(251,142,44)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="143.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (2 samples, 0.01%)</title><rect x="51.9757%" y="117" width="0.0130%" height="15" fill="rgb(238,13,15)" fg:x="7971" fg:w="2"/><text x="52.2257%" y="127.50"></text></g><g><title>deno`v8::internal::Scavenger::ScavengePage (2 samples, 0.01%)</title><rect x="52.0083%" y="53" width="0.0130%" height="15" fill="rgb(208,107,27)" fg:x="7976" fg:w="2"/><text x="52.2583%" y="63.50"></text></g><g><title>deno`v8::platform::DefaultJobHandle::Join (4 samples, 0.03%)</title><rect x="52.0018%" y="101" width="0.0261%" height="15" fill="rgb(205,136,37)" fg:x="7975" fg:w="4"/><text x="52.2518%" y="111.50"></text></g><g><title>deno`v8::platform::DefaultJobState::Join (4 samples, 0.03%)</title><rect x="52.0018%" y="85" width="0.0261%" height="15" fill="rgb(250,205,27)" fg:x="7975" fg:w="4"/><text x="52.2518%" y="95.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::JobTask::ProcessItems (4 samples, 0.03%)</title><rect x="52.0018%" y="69" width="0.0261%" height="15" fill="rgb(210,80,43)" fg:x="7975" fg:w="4"/><text x="52.2518%" y="79.50"></text></g><g><title>0x13006735c (7 samples, 0.05%)</title><rect x="51.9888%" y="261" width="0.0456%" height="15" fill="rgb(247,160,36)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="271.50"></text></g><g><title>deno`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit (7 samples, 0.05%)</title><rect x="51.9888%" y="245" width="0.0456%" height="15" fill="rgb(234,13,49)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="255.50"></text></g><g><title>deno`v8::internal::Runtime_AllocateInYoungGeneration (7 samples, 0.05%)</title><rect x="51.9888%" y="229" width="0.0456%" height="15" fill="rgb(234,122,0)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="239.50"></text></g><g><title>deno`v8::internal::Factory::NewFillerObject (7 samples, 0.05%)</title><rect x="51.9888%" y="213" width="0.0456%" height="15" fill="rgb(207,146,38)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="223.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath (7 samples, 0.05%)</title><rect x="51.9888%" y="197" width="0.0456%" height="15" fill="rgb(207,177,25)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="207.50"></text></g><g><title>deno`v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath (7 samples, 0.05%)</title><rect x="51.9888%" y="181" width="0.0456%" height="15" fill="rgb(211,178,42)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="191.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (7 samples, 0.05%)</title><rect x="51.9888%" y="165" width="0.0456%" height="15" fill="rgb(230,69,54)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="175.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (7 samples, 0.05%)</title><rect x="51.9888%" y="149" width="0.0456%" height="15" fill="rgb(214,135,41)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="159.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (7 samples, 0.05%)</title><rect x="51.9888%" y="133" width="0.0456%" height="15" fill="rgb(237,67,25)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="143.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (7 samples, 0.05%)</title><rect x="51.9888%" y="117" width="0.0456%" height="15" fill="rgb(222,189,50)" fg:x="7973" fg:w="7"/><text x="52.2388%" y="127.50"></text></g><g><title>0x130067584 (5 samples, 0.03%)</title><rect x="52.0409%" y="261" width="0.0326%" height="15" fill="rgb(245,148,34)" fg:x="7981" fg:w="5"/><text x="52.2909%" y="271.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (5 samples, 0.03%)</title><rect x="52.0409%" y="245" width="0.0326%" height="15" fill="rgb(222,29,6)" fg:x="7981" fg:w="5"/><text x="52.2909%" y="255.50"></text></g><g><title>0x1300675a8 (3 samples, 0.02%)</title><rect x="52.0801%" y="261" width="0.0196%" height="15" fill="rgb(221,189,43)" fg:x="7987" fg:w="3"/><text x="52.3301%" y="271.50"></text></g><g><title>0x1300675b0 (4 samples, 0.03%)</title><rect x="52.0996%" y="261" width="0.0261%" height="15" fill="rgb(207,36,27)" fg:x="7990" fg:w="4"/><text x="52.3496%" y="271.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (4 samples, 0.03%)</title><rect x="52.0996%" y="245" width="0.0261%" height="15" fill="rgb(217,90,24)" fg:x="7990" fg:w="4"/><text x="52.3496%" y="255.50"></text></g><g><title>0x1300675c0 (2 samples, 0.01%)</title><rect x="52.1322%" y="261" width="0.0130%" height="15" fill="rgb(224,66,35)" fg:x="7995" fg:w="2"/><text x="52.3822%" y="271.50"></text></g><g><title>0x1300675dc (8 samples, 0.05%)</title><rect x="52.1453%" y="261" width="0.0522%" height="15" fill="rgb(221,13,50)" fg:x="7997" fg:w="8"/><text x="52.3953%" y="271.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (8 samples, 0.05%)</title><rect x="52.1453%" y="245" width="0.0522%" height="15" fill="rgb(236,68,49)" fg:x="7997" fg:w="8"/><text x="52.3953%" y="255.50"></text></g><g><title>0x130067644 (3 samples, 0.02%)</title><rect x="52.2105%" y="261" width="0.0196%" height="15" fill="rgb(229,146,28)" fg:x="8007" fg:w="3"/><text x="52.4605%" y="271.50"></text></g><g><title>0x130067660 (8 samples, 0.05%)</title><rect x="52.2366%" y="261" width="0.0522%" height="15" fill="rgb(225,31,38)" fg:x="8011" fg:w="8"/><text x="52.4866%" y="271.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (8 samples, 0.05%)</title><rect x="52.2366%" y="245" width="0.0522%" height="15" fill="rgb(250,208,3)" fg:x="8011" fg:w="8"/><text x="52.4866%" y="255.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitCaught (2 samples, 0.01%)</title><rect x="52.2953%" y="261" width="0.0130%" height="15" fill="rgb(246,54,23)" fg:x="8020" fg:w="2"/><text x="52.5453%" y="271.50"></text></g><g><title>deno`Builtins_KeyedLoadICTrampoline_Megamorphic (6 samples, 0.04%)</title><rect x="52.3474%" y="261" width="0.0391%" height="15" fill="rgb(243,76,11)" fg:x="8028" fg:w="6"/><text x="52.5974%" y="271.50"></text></g><g><title>deno`Builtins_KeyedLoadIC_Megamorphic (2 samples, 0.01%)</title><rect x="52.3865%" y="261" width="0.0130%" height="15" fill="rgb(245,21,50)" fg:x="8034" fg:w="2"/><text x="52.6365%" y="271.50"></text></g><g><title>deno`Builtins_LoadIC (3 samples, 0.02%)</title><rect x="52.3996%" y="261" width="0.0196%" height="15" fill="rgb(228,9,43)" fg:x="8036" fg:w="3"/><text x="52.6496%" y="271.50"></text></g><g><title>deno`Builtins_RecordWriteSaveFP (5 samples, 0.03%)</title><rect x="52.4322%" y="261" width="0.0326%" height="15" fill="rgb(208,100,47)" fg:x="8041" fg:w="5"/><text x="52.6822%" y="271.50"></text></g><g><title>deno`deno_flash::op_flash_next_fast (2 samples, 0.01%)</title><rect x="52.4778%" y="261" width="0.0130%" height="15" fill="rgb(232,26,8)" fg:x="8048" fg:w="2"/><text x="52.7278%" y="271.50"></text></g><g><title>deno`deno_flash::op_flash_respond_fast (2 samples, 0.01%)</title><rect x="52.4909%" y="261" width="0.0130%" height="15" fill="rgb(216,166,38)" fg:x="8050" fg:w="2"/><text x="52.7409%" y="271.50"></text></g><g><title>deno`Builtins_AsyncFunctionAwaitResolveClosure (7,374 samples, 48.08%)</title><rect x="4.4275%" y="277" width="48.0829%" height="15" fill="rgb(251,202,51)" fg:x="679" fg:w="7374"/><text x="4.6775%" y="287.50">deno`Builtins_AsyncFunctionAwaitResolveClosure</text></g><g><title>deno`Builtins_InterpreterEntryTrampoline (2 samples, 0.01%)</title><rect x="52.5104%" y="277" width="0.0130%" height="15" fill="rgb(254,216,34)" fg:x="8053" fg:w="2"/><text x="52.7604%" y="287.50"></text></g><g><title>deno`Builtins_PromiseFulfillReactionJob (7,399 samples, 48.25%)</title><rect x="4.3753%" y="293" width="48.2460%" height="15" fill="rgb(251,32,27)" fg:x="671" fg:w="7399"/><text x="4.6253%" y="303.50">deno`Builtins_PromiseFulfillReactionJob</text></g><g><title>deno`Builtins_ResumeGeneratorTrampoline (12 samples, 0.08%)</title><rect x="52.5430%" y="277" width="0.0782%" height="15" fill="rgb(208,127,28)" fg:x="8058" fg:w="12"/><text x="52.7930%" y="287.50"></text></g><g><title>deno`Builtins_RecordWriteIgnoreFP (8 samples, 0.05%)</title><rect x="52.5691%" y="261" width="0.0522%" height="15" fill="rgb(224,137,22)" fg:x="8062" fg:w="8"/><text x="52.8191%" y="271.50"></text></g><g><title>deno`Builtins_JSRunMicrotasksEntry (7,435 samples, 48.48%)</title><rect x="4.1536%" y="325" width="48.4807%" height="15" fill="rgb(254,70,32)" fg:x="637" fg:w="7435"/><text x="4.4036%" y="335.50">deno`Builtins_JSRunMicrotasksEntry</text></g><g><title>deno`Builtins_RunMicrotasks (7,434 samples, 48.47%)</title><rect x="4.1601%" y="309" width="48.4742%" height="15" fill="rgb(229,75,37)" fg:x="638" fg:w="7434"/><text x="4.4101%" y="319.50">deno`Builtins_RunMicrotasks</text></g><g><title>deno`Builtins_ResolvePromise (2 samples, 0.01%)</title><rect x="52.6213%" y="293" width="0.0130%" height="15" fill="rgb(252,64,23)" fg:x="8070" fg:w="2"/><text x="52.8713%" y="303.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (7,438 samples, 48.50%)</title><rect x="4.1406%" y="341" width="48.5003%" height="15" fill="rgb(232,162,48)" fg:x="635" fg:w="7438"/><text x="4.3906%" y="351.50">deno`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::int..</text></g><g><title>deno`v8::internal::Isolate::UnregisterTryCatchHandler (2 samples, 0.01%)</title><rect x="52.6408%" y="341" width="0.0130%" height="15" fill="rgb(246,160,12)" fg:x="8073" fg:w="2"/><text x="52.8908%" y="351.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (7,463 samples, 48.66%)</title><rect x="3.9971%" y="405" width="48.6633%" height="15" fill="rgb(247,166,0)" fg:x="613" fg:w="7463"/><text x="4.2471%" y="415.50">deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal</text></g><g><title>deno`v8::internal::MicrotaskQueue::RunMicrotasks (7,459 samples, 48.64%)</title><rect x="4.0232%" y="389" width="48.6372%" height="15" fill="rgb(249,219,21)" fg:x="617" fg:w="7459"/><text x="4.2732%" y="399.50">deno`v8::internal::MicrotaskQueue::RunMicrotasks</text></g><g><title>deno`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*, v8::internal::MaybeHandle (7,448 samples, 48.57%)</title><rect x="4.0949%" y="373" width="48.5655%" height="15" fill="rgb(205,209,3)" fg:x="628" fg:w="7448"/><text x="4.3449%" y="383.50">deno`v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::inter..</text></g><g><title>deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isolate*, v8::internal:: (7,446 samples, 48.55%)</title><rect x="4.1080%" y="357" width="48.5524%" height="15" fill="rgb(243,44,1)" fg:x="630" fg:w="7446"/><text x="4.3580%" y="367.50">deno`v8::internal::(anonymous namespace)::InvokeWithTryCatch(v8::internal::Isola..</text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (7,467 samples, 48.69%)</title><rect x="3.9776%" y="421" width="48.6894%" height="15" fill="rgb(206,159,16)" fg:x="610" fg:w="7467"/><text x="4.2276%" y="431.50">deno`v8::internal::Isolate::FireCallCompletedCallbackInternal</text></g><g><title>deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (7,576 samples, 49.40%)</title><rect x="3.2733%" y="437" width="49.4001%" height="15" fill="rgb(244,77,30)" fg:x="502" fg:w="7576"/><text x="3.5233%" y="447.50">deno`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Lo..</text></g><g><title>deno`v8::TryCatch::TryCatch (2 samples, 0.01%)</title><rect x="52.6800%" y="437" width="0.0130%" height="15" fill="rgb(218,69,12)" fg:x="8079" fg:w="2"/><text x="52.9300%" y="447.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (5 samples, 0.03%)</title><rect x="52.6930%" y="437" width="0.0326%" height="15" fill="rgb(212,87,7)" fg:x="8081" fg:w="5"/><text x="52.9430%" y="447.50"></text></g><g><title>deno`v8::function::_&lt;impl v8::data::Function&gt;::call (3 samples, 0.02%)</title><rect x="52.7256%" y="437" width="0.0196%" height="15" fill="rgb(245,114,25)" fg:x="8086" fg:w="3"/><text x="52.9756%" y="447.50"></text></g><g><title>deno`v8::handle::HandleHost::assert_match_isolate (3 samples, 0.02%)</title><rect x="52.7452%" y="437" width="0.0196%" height="15" fill="rgb(210,61,42)" fg:x="8089" fg:w="3"/><text x="52.9952%" y="447.50"></text></g><g><title>deno`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (2 samples, 0.01%)</title><rect x="52.7713%" y="437" width="0.0130%" height="15" fill="rgb(211,52,33)" fg:x="8093" fg:w="2"/><text x="53.0213%" y="447.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Create (4 samples, 0.03%)</title><rect x="52.7843%" y="437" width="0.0261%" height="15" fill="rgb(234,58,33)" fg:x="8095" fg:w="4"/><text x="53.0343%" y="447.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (5 samples, 0.03%)</title><rect x="52.8104%" y="437" width="0.0326%" height="15" fill="rgb(220,115,36)" fg:x="8099" fg:w="5"/><text x="53.0604%" y="447.50"></text></g><g><title>deno`v8::internal::GlobalHandles::MoveGlobal (2 samples, 0.01%)</title><rect x="52.8430%" y="437" width="0.0130%" height="15" fill="rgb(243,153,54)" fg:x="8104" fg:w="2"/><text x="53.0930%" y="447.50"></text></g><g><title>deno`v8::internal::Isolate::FireCallCompletedCallbackInternal (3 samples, 0.02%)</title><rect x="52.8691%" y="437" width="0.0196%" height="15" fill="rgb(251,47,18)" fg:x="8108" fg:w="3"/><text x="53.1191%" y="447.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (2 samples, 0.01%)</title><rect x="52.8886%" y="437" width="0.0130%" height="15" fill="rgb(242,102,42)" fg:x="8111" fg:w="2"/><text x="53.1386%" y="447.50"></text></g><g><title>deno`v8::internal::wasm::WasmEngine::HasRunningCompileJob (3 samples, 0.02%)</title><rect x="52.9082%" y="437" width="0.0196%" height="15" fill="rgb(234,31,38)" fg:x="8114" fg:w="3"/><text x="53.1582%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="52.9278%" y="421" width="0.0196%" height="15" fill="rgb(221,117,51)" fg:x="8117" fg:w="3"/><text x="53.1778%" y="431.50"></text></g><g><title>deno`v8::isolate::Isolate::is_execution_terminating (4 samples, 0.03%)</title><rect x="52.9278%" y="437" width="0.0261%" height="15" fill="rgb(212,20,18)" fg:x="8117" fg:w="4"/><text x="53.1778%" y="447.50"></text></g><g><title>deno`v8::isolate::Isolate::thread_safe_handle (2 samples, 0.01%)</title><rect x="52.9538%" y="437" width="0.0130%" height="15" fill="rgb(245,133,36)" fg:x="8121" fg:w="2"/><text x="53.2038%" y="447.50"></text></g><g><title>deno`v8::number::_&lt;impl v8::data::Integer&gt;::new (2 samples, 0.01%)</title><rect x="52.9669%" y="437" width="0.0130%" height="15" fill="rgb(212,6,19)" fg:x="8123" fg:w="2"/><text x="53.2169%" y="447.50"></text></g><g><title>deno`v8::Integer::New (2 samples, 0.01%)</title><rect x="52.9669%" y="421" width="0.0130%" height="15" fill="rgb(218,1,36)" fg:x="8123" fg:w="2"/><text x="53.2169%" y="431.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (3 samples, 0.02%)</title><rect x="52.9799%" y="437" width="0.0196%" height="15" fill="rgb(246,84,54)" fg:x="8125" fg:w="3"/><text x="53.2299%" y="447.50"></text></g><g><title>deno`v8::internal::(anonymous namespace)::IterateObjectCache(v8::internal::Isolate*, std::__1::vector&lt;v8::internal::Object, std::__1::allocator (11 samples, 0.07%)</title><rect x="53.0777%" y="325" width="0.0717%" height="15" fill="rgb(242,110,6)" fg:x="8140" fg:w="11"/><text x="53.3277%" y="335.50"></text></g><g><title>deno`v8::internal::Heap::IterateRoots(v8::internal::RootVisitor*, v8::base::EnumSet (13 samples, 0.08%)</title><rect x="53.0712%" y="341" width="0.0848%" height="15" fill="rgb(214,47,5)" fg:x="8139" fg:w="13"/><text x="53.3212%" y="351.50"></text></g><g><title>deno`v8::internal::Scavenger::Scavenger(v8::internal::ScavengerCollector*, v8::internal::Heap*, bool, heap::base::Worklist&lt;v8::internal::MemoryChunk*, (unsigned short)64&gt;*, heap::base::Worklist&lt;std::__1::pair&lt;v8::internal::HeapObject, int&gt;, (unsigned short)256&gt;*, v8::internal::Scavenger::PromotionList*, heap::base::Worklist&lt;v8::internal::EphemeronHashTable,  (2 samples, 0.01%)</title><rect x="53.1690%" y="341" width="0.0130%" height="15" fill="rgb(218,159,25)" fg:x="8154" fg:w="2"/><text x="53.4190%" y="351.50"></text></g><g><title>deno`v8::internal::Scavenger::~Scavenger (2 samples, 0.01%)</title><rect x="53.1821%" y="341" width="0.0130%" height="15" fill="rgb(215,211,28)" fg:x="8156" fg:w="2"/><text x="53.4321%" y="351.50"></text></g><g><title>deno`v8::internal::Heap::Scavenge (22 samples, 0.14%)</title><rect x="53.0647%" y="373" width="0.1435%" height="15" fill="rgb(238,59,32)" fg:x="8138" fg:w="22"/><text x="53.3147%" y="383.50"></text></g><g><title>deno`v8::internal::ScavengerCollector::CollectGarbage (22 samples, 0.14%)</title><rect x="53.0647%" y="357" width="0.1435%" height="15" fill="rgb(226,82,3)" fg:x="8138" fg:w="22"/><text x="53.3147%" y="367.50"></text></g><g><title>deno`v8::internal::ScavengeJob::Task::RunInternal (29 samples, 0.19%)</title><rect x="53.0321%" y="421" width="0.1891%" height="15" fill="rgb(240,164,32)" fg:x="8133" fg:w="29"/><text x="53.2821%" y="431.50"></text></g><g><title>deno`v8::internal::Heap::CollectGarbage (29 samples, 0.19%)</title><rect x="53.0321%" y="405" width="0.1891%" height="15" fill="rgb(232,46,7)" fg:x="8133" fg:w="29"/><text x="53.2821%" y="415.50"></text></g><g><title>deno`v8::internal::Heap::PerformGarbageCollection (28 samples, 0.18%)</title><rect x="53.0386%" y="389" width="0.1826%" height="15" fill="rgb(229,129,53)" fg:x="8134" fg:w="28"/><text x="53.2886%" y="399.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::MoveExpiredDelayedTasks(v8::base::LockGuard&lt;v8::base::Mutex, (3 samples, 0.02%)</title><rect x="53.2212%" y="421" width="0.0196%" height="15" fill="rgb(234,188,29)" fg:x="8162" fg:w="3"/><text x="53.4712%" y="431.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::MoveExpiredDelayedTasks(v8::base::LockGuard&lt;v8::base::Mutex,  (17 samples, 0.11%)</title><rect x="53.2407%" y="405" width="0.1109%" height="15" fill="rgb(246,141,4)" fg:x="8165" fg:w="17"/><text x="53.4907%" y="415.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromDelayedQueueLocked(v8::base::LockGuard&lt;v8::base::Mutex,  (17 samples, 0.11%)</title><rect x="53.2407%" y="389" width="0.1109%" height="15" fill="rgb(229,23,39)" fg:x="8165" fg:w="17"/><text x="53.4907%" y="399.50"></text></g><g><title>deno`v8::platform::(anonymous namespace)::DefaultTimeFunction (17 samples, 0.11%)</title><rect x="53.2407%" y="373" width="0.1109%" height="15" fill="rgb(206,12,3)" fg:x="8165" fg:w="17"/><text x="53.4907%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (17 samples, 0.11%)</title><rect x="53.2407%" y="357" width="0.1109%" height="15" fill="rgb(252,226,20)" fg:x="8165" fg:w="17"/><text x="53.4907%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="53.3581%" y="405" width="0.0196%" height="15" fill="rgb(216,123,35)" fg:x="8183" fg:w="3"/><text x="53.6081%" y="415.50"></text></g><g><title>deno`v8::platform::DefaultForegroundTaskRunner::PopTaskFromQueue (22 samples, 0.14%)</title><rect x="53.2407%" y="421" width="0.1435%" height="15" fill="rgb(212,68,40)" fg:x="8165" fg:w="22"/><text x="53.4907%" y="431.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (62 samples, 0.40%)</title><rect x="52.9995%" y="437" width="0.4043%" height="15" fill="rgb(254,125,32)" fg:x="8128" fg:w="62"/><text x="53.2495%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="53.3907%" y="421" width="0.0130%" height="15" fill="rgb(253,97,22)" fg:x="8188" fg:w="2"/><text x="53.6407%" y="431.50"></text></g><g><title>deno`v8::primitives::undefined (2 samples, 0.01%)</title><rect x="53.4038%" y="437" width="0.0130%" height="15" fill="rgb(241,101,14)" fg:x="8190" fg:w="2"/><text x="53.6538%" y="447.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_handle_scope_data_with_context (4 samples, 0.03%)</title><rect x="53.4233%" y="437" width="0.0261%" height="15" fill="rgb(238,103,29)" fg:x="8193" fg:w="4"/><text x="53.6733%" y="447.50"></text></g><g><title>deno`v8::internal::HandleScopeImplementer::EnterContext (2 samples, 0.01%)</title><rect x="53.4364%" y="421" width="0.0130%" height="15" fill="rgb(233,195,47)" fg:x="8195" fg:w="2"/><text x="53.6864%" y="431.50"></text></g><g><title>deno`v8::TryCatch::TryCatch (3 samples, 0.02%)</title><rect x="53.4755%" y="421" width="0.0196%" height="15" fill="rgb(246,218,30)" fg:x="8201" fg:w="3"/><text x="53.7255%" y="431.50"></text></g><g><title>deno`v8::scope::data::ScopeData::new_try_catch_data (11 samples, 0.07%)</title><rect x="53.4494%" y="437" width="0.0717%" height="15" fill="rgb(219,145,47)" fg:x="8197" fg:w="11"/><text x="53.6994%" y="447.50"></text></g><g><title>deno`v8::internal::Isolate::RegisterTryCatchHandler (3 samples, 0.02%)</title><rect x="53.5016%" y="421" width="0.0196%" height="15" fill="rgb(243,12,26)" fg:x="8205" fg:w="3"/><text x="53.7516%" y="431.50"></text></g><g><title>deno`v8::TryCatch::~TryCatch (4 samples, 0.03%)</title><rect x="53.5407%" y="421" width="0.0261%" height="15" fill="rgb(214,87,16)" fg:x="8211" fg:w="4"/><text x="53.7907%" y="431.50"></text></g><g><title>deno`v8::scope::data::ScopeData::notify_scope_dropped (8 samples, 0.05%)</title><rect x="53.5211%" y="437" width="0.0522%" height="15" fill="rgb(208,99,42)" fg:x="8208" fg:w="8"/><text x="53.7711%" y="447.50"></text></g><g><title>deno`v8__Isolate__SetData (3 samples, 0.02%)</title><rect x="53.5798%" y="437" width="0.0196%" height="15" fill="rgb(253,99,2)" fg:x="8217" fg:w="3"/><text x="53.8298%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="53.6124%" y="437" width="0.0196%" height="15" fill="rgb(220,168,23)" fg:x="8222" fg:w="3"/><text x="53.8624%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="53.6189%" y="421" width="0.0130%" height="15" fill="rgb(242,38,24)" fg:x="8223" fg:w="2"/><text x="53.8689%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.01%)</title><rect x="53.6189%" y="405" width="0.0130%" height="15" fill="rgb(225,182,9)" fg:x="8223" fg:w="2"/><text x="53.8689%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.04%)</title><rect x="53.6646%" y="421" width="0.0391%" height="15" fill="rgb(243,178,37)" fg:x="8230" fg:w="6"/><text x="53.9146%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.08%)</title><rect x="53.6320%" y="437" width="0.0782%" height="15" fill="rgb(232,139,19)" fg:x="8225" fg:w="12"/><text x="53.8820%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.08%)</title><rect x="53.7102%" y="437" width="0.0848%" height="15" fill="rgb(225,201,24)" fg:x="8237" fg:w="13"/><text x="53.9602%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.06%)</title><rect x="53.7363%" y="421" width="0.0587%" height="15" fill="rgb(221,47,46)" fg:x="8241" fg:w="9"/><text x="53.9863%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.02%)</title><rect x="53.7950%" y="437" width="0.0196%" height="15" fill="rgb(249,23,13)" fg:x="8250" fg:w="3"/><text x="54.0450%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.03%)</title><rect x="53.8146%" y="437" width="0.0261%" height="15" fill="rgb(219,9,5)" fg:x="8253" fg:w="4"/><text x="54.0646%" y="447.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (8,134 samples, 53.04%)</title><rect x="0.8086%" y="453" width="53.0386%" height="15" fill="rgb(254,171,16)" fg:x="124" fg:w="8134"/><text x="1.0586%" y="463.50">deno`deno_core::runtime::JsRuntime::poll_event_loop</text></g><g><title>deno`futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::release_task (3 samples, 0.02%)</title><rect x="53.8472%" y="453" width="0.0196%" height="15" fill="rgb(230,171,20)" fg:x="8258" fg:w="3"/><text x="54.0972%" y="463.50"></text></g><g><title>deno`v8::internal::GlobalHandles::Destroy (2 samples, 0.01%)</title><rect x="53.9058%" y="453" width="0.0130%" height="15" fill="rgb(210,71,41)" fg:x="8267" fg:w="2"/><text x="54.1558%" y="463.50"></text></g><g><title>deno`v8::internal::MicrotaskQueue::PerformCheckpointInternal (2 samples, 0.01%)</title><rect x="53.9189%" y="453" width="0.0130%" height="15" fill="rgb(206,173,20)" fg:x="8269" fg:w="2"/><text x="54.1689%" y="463.50"></text></g><g><title>deno`v8::isolate::Isolate::is_execution_terminating (2 samples, 0.01%)</title><rect x="53.9319%" y="453" width="0.0130%" height="15" fill="rgb(233,88,34)" fg:x="8271" fg:w="2"/><text x="54.1819%" y="463.50"></text></g><g><title>deno`v8::platform::DefaultPlatform::PumpMessageLoop (4 samples, 0.03%)</title><rect x="53.9450%" y="453" width="0.0261%" height="15" fill="rgb(223,209,46)" fg:x="8273" fg:w="4"/><text x="54.1950%" y="463.50"></text></g><g><title>deno`v8::platform::PumpMessageLoop (7 samples, 0.05%)</title><rect x="53.9710%" y="453" width="0.0456%" height="15" fill="rgb(250,43,18)" fg:x="8277" fg:w="7"/><text x="54.2210%" y="463.50"></text></g><g><title>deno`v8__Data__EQ (2 samples, 0.01%)</title><rect x="54.0297%" y="453" width="0.0130%" height="15" fill="rgb(208,13,10)" fg:x="8286" fg:w="2"/><text x="54.2797%" y="463.50"></text></g><g><title>deno`v8__Isolate__GetData (2 samples, 0.01%)</title><rect x="54.0493%" y="453" width="0.0130%" height="15" fill="rgb(212,200,36)" fg:x="8289" fg:w="2"/><text x="54.2993%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="54.0689%" y="453" width="0.0196%" height="15" fill="rgb(225,90,30)" fg:x="8292" fg:w="3"/><text x="54.3189%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="54.0884%" y="453" width="0.0391%" height="15" fill="rgb(236,182,39)" fg:x="8295" fg:w="6"/><text x="54.3384%" y="463.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,202 samples, 53.48%)</title><rect x="0.6586%" y="469" width="53.4820%" height="15" fill="rgb(212,144,35)" fg:x="101" fg:w="8202"/><text x="0.9086%" y="479.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`OUTLINED_FUNCTION_1549 (2 samples, 0.01%)</title><rect x="54.1406%" y="469" width="0.0130%" height="15" fill="rgb(228,63,44)" fg:x="8303" fg:w="2"/><text x="54.3906%" y="479.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36695 (3 samples, 0.02%)</title><rect x="54.1536%" y="469" width="0.0196%" height="15" fill="rgb(228,109,6)" fg:x="8305" fg:w="3"/><text x="54.4036%" y="479.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,213 samples, 53.55%)</title><rect x="0.6325%" y="485" width="53.5537%" height="15" fill="rgb(238,117,24)" fg:x="97" fg:w="8213"/><text x="0.8825%" y="495.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno_core::runtime::JsRuntime::poll_event_loop (2 samples, 0.01%)</title><rect x="54.1732%" y="469" width="0.0130%" height="15" fill="rgb(242,26,26)" fg:x="8308" fg:w="2"/><text x="54.4232%" y="479.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,221 samples, 53.61%)</title><rect x="0.5934%" y="501" width="53.6059%" height="15" fill="rgb(221,92,48)" fg:x="91" fg:w="8221"/><text x="0.8434%" y="511.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`OUTLINED_FUNCTION_188 (3 samples, 0.02%)</title><rect x="54.1993%" y="501" width="0.0196%" height="15" fill="rgb(209,209,32)" fg:x="8312" fg:w="3"/><text x="54.4493%" y="511.50"></text></g><g><title>deno`OUTLINED_FUNCTION_6704 (3 samples, 0.02%)</title><rect x="54.2188%" y="501" width="0.0196%" height="15" fill="rgb(221,70,22)" fg:x="8315" fg:w="3"/><text x="54.4688%" y="511.50"></text></g><g><title>deno`deno_core::bindings::initialize_context (2 samples, 0.01%)</title><rect x="54.2449%" y="453" width="0.0130%" height="15" fill="rgb(248,145,5)" fg:x="8319" fg:w="2"/><text x="54.4949%" y="463.50"></text></g><g><title>deno`deno_core::runtime::JsRuntime::new (4 samples, 0.03%)</title><rect x="54.2449%" y="469" width="0.0261%" height="15" fill="rgb(226,116,26)" fg:x="8319" fg:w="4"/><text x="54.4949%" y="479.50"></text></g><g><title>deno`v8::Isolate::New (2 samples, 0.01%)</title><rect x="54.2580%" y="453" width="0.0130%" height="15" fill="rgb(244,5,17)" fg:x="8321" fg:w="2"/><text x="54.5080%" y="463.50"></text></g><g><title>deno`v8::Isolate::Initialize (2 samples, 0.01%)</title><rect x="54.2580%" y="437" width="0.0130%" height="15" fill="rgb(252,159,33)" fg:x="8321" fg:w="2"/><text x="54.5080%" y="447.50"></text></g><g><title>deno`v8::internal::Snapshot::Initialize (2 samples, 0.01%)</title><rect x="54.2580%" y="421" width="0.0130%" height="15" fill="rgb(206,71,0)" fg:x="8321" fg:w="2"/><text x="54.5080%" y="431.50"></text></g><g><title>deno`v8::internal::Isolate::InitWithSnapshot (2 samples, 0.01%)</title><rect x="54.2580%" y="405" width="0.0130%" height="15" fill="rgb(233,118,54)" fg:x="8321" fg:w="2"/><text x="54.5080%" y="415.50"></text></g><g><title>deno`v8::internal::Isolate::Init (2 samples, 0.01%)</title><rect x="54.2580%" y="389" width="0.0130%" height="15" fill="rgb(234,83,48)" fg:x="8321" fg:w="2"/><text x="54.5080%" y="399.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,252 samples, 53.81%)</title><rect x="0.4760%" y="533" width="53.8080%" height="15" fill="rgb(228,3,54)" fg:x="73" fg:w="8252"/><text x="0.7260%" y="543.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>deno`deno::run_command::_{{closure}} (8,238 samples, 53.72%)</title><rect x="0.5673%" y="517" width="53.7167%" height="15" fill="rgb(226,155,13)" fg:x="87" fg:w="8238"/><text x="0.8173%" y="527.50">deno`deno::run_command::_{{closure}}</text></g><g><title>deno`deno::worker::create_main_worker (6 samples, 0.04%)</title><rect x="54.2449%" y="501" width="0.0391%" height="15" fill="rgb(241,28,37)" fg:x="8319" fg:w="6"/><text x="54.4949%" y="511.50"></text></g><g><title>deno`deno_runtime::worker::MainWorker::bootstrap_from_options (6 samples, 0.04%)</title><rect x="54.2449%" y="485" width="0.0391%" height="15" fill="rgb(233,93,10)" fg:x="8319" fg:w="6"/><text x="54.4949%" y="495.50"></text></g><g><title>deno`deno::main::_{{closure}} (8,259 samples, 53.85%)</title><rect x="0.4369%" y="549" width="53.8537%" height="15" fill="rgb(225,113,19)" fg:x="67" fg:w="8259"/><text x="0.6869%" y="559.50">deno`deno::main::_{{closure}}</text></g><g><title>deno`tokio::task::local::LocalSet::tick (2 samples, 0.01%)</title><rect x="54.2971%" y="549" width="0.0130%" height="15" fill="rgb(241,2,18)" fg:x="8327" fg:w="2"/><text x="54.5471%" y="559.50"></text></g><g><title>deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,293 samples, 54.08%)</title><rect x="0.2739%" y="565" width="54.0754%" height="15" fill="rgb(228,207,21)" fg:x="42" fg:w="8293"/><text x="0.5239%" y="575.50">deno`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.03%)</title><rect x="54.3232%" y="549" width="0.0261%" height="15" fill="rgb(213,211,35)" fg:x="8331" fg:w="4"/><text x="54.5732%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_988 (2 samples, 0.01%)</title><rect x="54.3753%" y="565" width="0.0130%" height="15" fill="rgb(209,83,10)" fg:x="8339" fg:w="2"/><text x="54.6253%" y="575.50"></text></g><g><title>deno`tokio::io::driver::Driver::turn (252 samples, 1.64%)</title><rect x="54.4797%" y="533" width="1.6432%" height="15" fill="rgb(209,164,1)" fg:x="8355" fg:w="252"/><text x="54.7297%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`kevent (246 samples, 1.60%)</title><rect x="54.5188%" y="517" width="1.6041%" height="15" fill="rgb(213,184,43)" fg:x="8361" fg:w="246"/><text x="54.7688%" y="527.50"></text></g><g><title>deno`tokio::io::driver::registration::Registration::poll_ready (2 samples, 0.01%)</title><rect x="56.1228%" y="533" width="0.0130%" height="15" fill="rgb(231,61,34)" fg:x="8607" fg:w="2"/><text x="56.3728%" y="543.50"></text></g><g><title>deno`tokio::signal::unix::driver::Driver::process (6 samples, 0.04%)</title><rect x="56.1424%" y="533" width="0.0391%" height="15" fill="rgb(235,75,3)" fg:x="8610" fg:w="6"/><text x="56.3924%" y="543.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.04%)</title><rect x="56.1424%" y="517" width="0.0391%" height="15" fill="rgb(220,106,47)" fg:x="8610" fg:w="6"/><text x="56.3924%" y="527.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (3 samples, 0.02%)</title><rect x="56.1946%" y="517" width="0.0196%" height="15" fill="rgb(210,196,33)" fg:x="8618" fg:w="3"/><text x="56.4446%" y="527.50"></text></g><g><title> 32]&gt; (3 samples, 0.02%)</title><rect x="56.1946%" y="501" width="0.0196%" height="15" fill="rgb(229,154,42)" fg:x="8618" fg:w="3"/><text x="56.4446%" y="511.50"></text></g><g><title>deno`tokio::time::driver::Driver&lt;P&gt;::park_internal (273 samples, 1.78%)</title><rect x="54.4405%" y="549" width="1.7801%" height="15" fill="rgb(228,114,26)" fg:x="8349" fg:w="273"/><text x="54.6905%" y="559.50">d..</text></g><g><title>deno`tokio::time::driver::_&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (6 samples, 0.04%)</title><rect x="56.1815%" y="533" width="0.0391%" height="15" fill="rgb(208,144,1)" fg:x="8616" fg:w="6"/><text x="56.4315%" y="543.50"></text></g><g><title>deno`tokio::runtime::basic_scheduler::Context::park (306 samples, 2.00%)</title><rect x="54.3949%" y="565" width="1.9953%" height="15" fill="rgb(239,112,37)" fg:x="8342" fg:w="306"/><text x="54.6449%" y="575.50">d..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (25 samples, 0.16%)</title><rect x="56.2272%" y="549" width="0.1630%" height="15" fill="rgb(210,96,50)" fg:x="8623" fg:w="25"/><text x="56.4772%" y="559.50"></text></g><g><title>deno`tokio::task::local::LocalSet::tick (2 samples, 0.01%)</title><rect x="56.3902%" y="565" width="0.0130%" height="15" fill="rgb(222,178,2)" fg:x="8648" fg:w="2"/><text x="56.6402%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="56.4032%" y="565" width="0.0196%" height="15" fill="rgb(226,74,18)" fg:x="8650" fg:w="3"/><text x="56.6532%" y="575.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.01%)</title><rect x="56.4228%" y="565" width="0.0130%" height="15" fill="rgb(225,67,54)" fg:x="8653" fg:w="2"/><text x="56.6728%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.07%)</title><rect x="56.4358%" y="565" width="0.0717%" height="15" fill="rgb(251,92,32)" fg:x="8655" fg:w="11"/><text x="56.6858%" y="575.50"></text></g><g><title>deno`deno_runtime::tokio_util::run_local (8,641 samples, 56.34%)</title><rect x="0.1956%" y="581" width="56.3445%" height="15" fill="rgb(228,149,22)" fg:x="30" fg:w="8641"/><text x="0.4456%" y="591.50">deno`deno_runtime::tokio_util::run_local</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.03%)</title><rect x="56.5076%" y="565" width="0.0326%" height="15" fill="rgb(243,54,13)" fg:x="8666" fg:w="5"/><text x="56.7576%" y="575.50"></text></g><g><title>dyld`start (8,675 samples, 56.57%)</title><rect x="0.0000%" y="645" width="56.5662%" height="15" fill="rgb(243,180,28)" fg:x="0" fg:w="8675"/><text x="0.2500%" y="655.50">dyld`start</text></g><g><title>deno`main (8,675 samples, 56.57%)</title><rect x="0.0000%" y="629" width="56.5662%" height="15" fill="rgb(208,167,24)" fg:x="0" fg:w="8675"/><text x="0.2500%" y="639.50">deno`main</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (8,675 samples, 56.57%)</title><rect x="0.0000%" y="613" width="56.5662%" height="15" fill="rgb(245,73,45)" fg:x="0" fg:w="8675"/><text x="0.2500%" y="623.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`deno::main (8,675 samples, 56.57%)</title><rect x="0.0000%" y="597" width="56.5662%" height="15" fill="rgb(237,203,48)" fg:x="0" fg:w="8675"/><text x="0.2500%" y="607.50">deno`deno::main</text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.02%)</title><rect x="56.5467%" y="581" width="0.0196%" height="15" fill="rgb(211,197,16)" fg:x="8672" fg:w="3"/><text x="56.7967%" y="591.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="56.5728%" y="549" width="0.0326%" height="15" fill="rgb(243,99,51)" fg:x="8676" fg:w="5"/><text x="56.8228%" y="559.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="56.6054%" y="549" width="0.0196%" height="15" fill="rgb(215,123,29)" fg:x="8681" fg:w="3"/><text x="56.8554%" y="559.50"></text></g><g><title>deno`DYLD-STUB$$calloc (6 samples, 0.04%)</title><rect x="56.6249%" y="549" width="0.0391%" height="15" fill="rgb(239,186,37)" fg:x="8684" fg:w="6"/><text x="56.8749%" y="559.50"></text></g><g><title>deno`DYLD-STUB$$malloc (6 samples, 0.04%)</title><rect x="56.6641%" y="549" width="0.0391%" height="15" fill="rgb(252,136,39)" fg:x="8690" fg:w="6"/><text x="56.9141%" y="559.50"></text></g><g><title>deno`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="56.7032%" y="549" width="0.0130%" height="15" fill="rgb(223,213,32)" fg:x="8696" fg:w="2"/><text x="56.9532%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_136 (2 samples, 0.01%)</title><rect x="56.7162%" y="549" width="0.0130%" height="15" fill="rgb(233,115,5)" fg:x="8698" fg:w="2"/><text x="56.9662%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2839 (3 samples, 0.02%)</title><rect x="56.7293%" y="549" width="0.0196%" height="15" fill="rgb(207,226,44)" fg:x="8700" fg:w="3"/><text x="56.9793%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_546 (4 samples, 0.03%)</title><rect x="56.7488%" y="549" width="0.0261%" height="15" fill="rgb(208,126,0)" fg:x="8703" fg:w="4"/><text x="56.9988%" y="559.50"></text></g><g><title>deno`OUTLINED_FUNCTION_91 (5 samples, 0.03%)</title><rect x="56.7749%" y="549" width="0.0326%" height="15" fill="rgb(244,66,21)" fg:x="8707" fg:w="5"/><text x="57.0249%" y="559.50"></text></g><g><title>deno`__rust_alloc_zeroed (5 samples, 0.03%)</title><rect x="56.8075%" y="549" width="0.0326%" height="15" fill="rgb(222,97,12)" fg:x="8712" fg:w="5"/><text x="57.0575%" y="559.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::NextRequest&gt;::send::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="56.8401%" y="549" width="0.0130%" height="15" fill="rgb(219,213,19)" fg:x="8717" fg:w="2"/><text x="57.0901%" y="559.50"></text></g><g><title>deno`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="58.3725%" y="533" width="0.0196%" height="15" fill="rgb(252,169,30)" fg:x="8952" fg:w="3"/><text x="58.6225%" y="543.50"></text></g><g><title>deno`&lt;deno_flash::Stream as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="58.3985%" y="533" width="0.0196%" height="15" fill="rgb(206,32,51)" fg:x="8956" fg:w="3"/><text x="58.6485%" y="543.50"></text></g><g><title>deno`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.06%)</title><rect x="58.4181%" y="533" width="0.0587%" height="15" fill="rgb(250,172,42)" fg:x="8959" fg:w="9"/><text x="58.6681%" y="543.50"></text></g><g><title>deno`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (45 samples, 0.29%)</title><rect x="58.4833%" y="533" width="0.2934%" height="15" fill="rgb(209,34,43)" fg:x="8969" fg:w="45"/><text x="58.7333%" y="543.50"></text></g><g><title>deno`DYLD-STUB$$kevent (4 samples, 0.03%)</title><rect x="58.7833%" y="533" width="0.0261%" height="15" fill="rgb(223,11,35)" fg:x="9015" fg:w="4"/><text x="59.0333%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_11234 (3 samples, 0.02%)</title><rect x="58.8093%" y="533" width="0.0196%" height="15" fill="rgb(251,219,26)" fg:x="9019" fg:w="3"/><text x="59.0593%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_166 (5 samples, 0.03%)</title><rect x="58.8289%" y="533" width="0.0326%" height="15" fill="rgb(231,119,3)" fg:x="9022" fg:w="5"/><text x="59.0789%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_211 (3 samples, 0.02%)</title><rect x="58.8615%" y="533" width="0.0196%" height="15" fill="rgb(216,97,11)" fg:x="9027" fg:w="3"/><text x="59.1115%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_2565 (5 samples, 0.03%)</title><rect x="58.8941%" y="533" width="0.0326%" height="15" fill="rgb(223,59,9)" fg:x="9032" fg:w="5"/><text x="59.1441%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_27699 (2 samples, 0.01%)</title><rect x="58.9267%" y="533" width="0.0130%" height="15" fill="rgb(233,93,31)" fg:x="9037" fg:w="2"/><text x="59.1767%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_36800 (4 samples, 0.03%)</title><rect x="58.9463%" y="533" width="0.0261%" height="15" fill="rgb(239,81,33)" fg:x="9040" fg:w="4"/><text x="59.1963%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_439 (2 samples, 0.01%)</title><rect x="58.9724%" y="533" width="0.0130%" height="15" fill="rgb(213,120,34)" fg:x="9044" fg:w="2"/><text x="59.2224%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_440 (2 samples, 0.01%)</title><rect x="58.9854%" y="533" width="0.0130%" height="15" fill="rgb(243,49,53)" fg:x="9046" fg:w="2"/><text x="59.2354%" y="543.50"></text></g><g><title>deno`OUTLINED_FUNCTION_8847 (2 samples, 0.01%)</title><rect x="58.9984%" y="533" width="0.0130%" height="15" fill="rgb(247,216,33)" fg:x="9048" fg:w="2"/><text x="59.2484%" y="543.50"></text></g><g><title>deno`core::hash::BuildHasher::hash_one (16 samples, 0.10%)</title><rect x="59.0115%" y="533" width="0.1043%" height="15" fill="rgb(226,26,14)" fg:x="9050" fg:w="16"/><text x="59.2615%" y="543.50"></text></g><g><title>deno`core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tokio::sync::mpsc::bounded::Sender&lt;deno_flash::NextRequest&gt;::send::{{closure}}&gt;&gt; (4 samples, 0.03%)</title><rect x="59.1158%" y="533" width="0.0261%" height="15" fill="rgb(215,49,53)" fg:x="9066" fg:w="4"/><text x="59.3658%" y="543.50"></text></g><g><title>deno`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (92 samples, 0.60%)</title><rect x="59.1549%" y="517" width="0.5999%" height="15" fill="rgb(245,162,40)" fg:x="9072" fg:w="92"/><text x="59.4049%" y="527.50"></text></g><g><title>deno`tokio::util::wake::wake_arc_raw (91 samples, 0.59%)</title><rect x="59.1615%" y="501" width="0.5934%" height="15" fill="rgb(229,68,17)" fg:x="9073" fg:w="91"/><text x="59.4115%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`kevent (90 samples, 0.59%)</title><rect x="59.1680%" y="485" width="0.5869%" height="15" fill="rgb(213,182,10)" fg:x="9074" fg:w="90"/><text x="59.4180%" y="495.50"></text></g><g><title>deno`futures_task::waker::wake_arc_raw (95 samples, 0.62%)</title><rect x="59.1419%" y="533" width="0.6195%" height="15" fill="rgb(245,125,30)" fg:x="9070" fg:w="95"/><text x="59.3919%" y="543.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (14 samples, 0.09%)</title><rect x="59.7613%" y="533" width="0.0913%" height="15" fill="rgb(232,202,2)" fg:x="9165" fg:w="14"/><text x="60.0113%" y="543.50"></text></g><g><title>deno`http::header::name::parse_hdr (9 samples, 0.06%)</title><rect x="59.8526%" y="533" width="0.0587%" height="15" fill="rgb(237,140,51)" fg:x="9179" fg:w="9"/><text x="60.1026%" y="543.50"></text></g><g><title>deno`&lt;httparse::iter::Bytes as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.31%)</title><rect x="59.9896%" y="517" width="0.3065%" height="15" fill="rgb(236,157,25)" fg:x="9200" fg:w="47"/><text x="60.2396%" y="527.50"></text></g><g><title>deno`OUTLINED_FUNCTION_13010 (4 samples, 0.03%)</title><rect x="60.2960%" y="517" width="0.0261%" height="15" fill="rgb(219,209,0)" fg:x="9247" fg:w="4"/><text x="60.5460%" y="527.50"></text></g><g><title>deno`OUTLINED_FUNCTION_19360 (5 samples, 0.03%)</title><rect x="60.3286%" y="517" width="0.0326%" height="15" fill="rgb(240,116,54)" fg:x="9252" fg:w="5"/><text x="60.5786%" y="527.50"></text></g><g><title>deno`OUTLINED_FUNCTION_22443 (10 samples, 0.07%)</title><rect x="60.3612%" y="517" width="0.0652%" height="15" fill="rgb(216,10,36)" fg:x="9257" fg:w="10"/><text x="60.6112%" y="527.50"></text></g><g><title>deno`OUTLINED_FUNCTION_30872 (2 samples, 0.01%)</title><rect x="60.4330%" y="517" width="0.0130%" height="15" fill="rgb(222,72,44)" fg:x="9268" fg:w="2"/><text x="60.6830%" y="527.50"></text></g><g><title>deno`OUTLINED_FUNCTION_457 (15 samples, 0.10%)</title><rect x="60.4460%" y="517" width="0.0978%" height="15" fill="rgb(232,159,9)" fg:x="9270" fg:w="15"/><text x="60.6960%" y="527.50"></text></g><g><title>deno`OUTLINED_FUNCTION_8290 (4 samples, 0.03%)</title><rect x="60.5438%" y="517" width="0.0261%" height="15" fill="rgb(210,39,32)" fg:x="9285" fg:w="4"/><text x="60.7938%" y="527.50"></text></g><g><title>deno`OUTLINED_FUNCTION_9012 (2 samples, 0.01%)</title><rect x="60.5764%" y="517" width="0.0130%" height="15" fill="rgb(216,194,45)" fg:x="9290" fg:w="2"/><text x="60.8264%" y="527.50"></text></g><g><title>deno`httparse::iter::Bytes::slice_skip (5 samples, 0.03%)</title><rect x="60.5960%" y="517" width="0.0326%" height="15" fill="rgb(218,18,35)" fg:x="9293" fg:w="5"/><text x="60.8460%" y="527.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (48 samples, 0.31%)</title><rect x="60.6286%" y="517" width="0.3130%" height="15" fill="rgb(207,83,51)" fg:x="9298" fg:w="48"/><text x="60.8786%" y="527.50"></text></g><g><title>deno`httparse::parse_version (3 samples, 0.02%)</title><rect x="60.9416%" y="517" width="0.0196%" height="15" fill="rgb(225,63,43)" fg:x="9346" fg:w="3"/><text x="61.1916%" y="527.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (165 samples, 1.08%)</title><rect x="59.9113%" y="533" width="1.0759%" height="15" fill="rgb(207,57,36)" fg:x="9188" fg:w="165"/><text x="60.1613%" y="543.50"></text></g><g><title>deno`httparse::skip_empty_lines (4 samples, 0.03%)</title><rect x="60.9611%" y="517" width="0.0261%" height="15" fill="rgb(216,99,33)" fg:x="9349" fg:w="4"/><text x="61.2111%" y="527.50"></text></g><g><title>deno`httparse::parse_headers_iter_uninit (2 samples, 0.01%)</title><rect x="60.9937%" y="533" width="0.0130%" height="15" fill="rgb(225,42,16)" fg:x="9354" fg:w="2"/><text x="61.2437%" y="543.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (5 samples, 0.03%)</title><rect x="61.0068%" y="533" width="0.0326%" height="15" fill="rgb(220,201,45)" fg:x="9356" fg:w="5"/><text x="61.2568%" y="543.50"></text></g><g><title>deno`tokio::runtime::enter::enter (2 samples, 0.01%)</title><rect x="61.0459%" y="533" width="0.0130%" height="15" fill="rgb(225,33,4)" fg:x="9362" fg:w="2"/><text x="61.2959%" y="543.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (21 samples, 0.14%)</title><rect x="61.0589%" y="533" width="0.1369%" height="15" fill="rgb(224,33,50)" fg:x="9364" fg:w="21"/><text x="61.3089%" y="543.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (12 samples, 0.08%)</title><rect x="61.1176%" y="517" width="0.0782%" height="15" fill="rgb(246,198,51)" fg:x="9373" fg:w="12"/><text x="61.3676%" y="527.50"></text></g><g><title>deno`tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (5 samples, 0.03%)</title><rect x="61.2024%" y="533" width="0.0326%" height="15" fill="rgb(205,22,4)" fg:x="9386" fg:w="5"/><text x="61.4524%" y="543.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (52 samples, 0.34%)</title><rect x="61.2350%" y="533" width="0.3391%" height="15" fill="rgb(206,3,8)" fg:x="9391" fg:w="52"/><text x="61.4850%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (4,300 samples, 28.04%)</title><rect x="61.5741%" y="533" width="28.0386%" height="15" fill="rgb(251,23,15)" fg:x="9443" fg:w="4300"/><text x="61.8241%" y="543.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>libsystem_kernel.dylib`kevent (1,146 samples, 7.47%)</title><rect x="89.6127%" y="533" width="7.4726%" height="15" fill="rgb(252,88,28)" fg:x="13743" fg:w="1146"/><text x="89.8627%" y="543.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (6 samples, 0.04%)</title><rect x="97.0983%" y="517" width="0.0391%" height="15" fill="rgb(212,127,14)" fg:x="14891" fg:w="6"/><text x="97.3483%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.02%)</title><rect x="97.1375%" y="517" width="0.0196%" height="15" fill="rgb(247,145,37)" fg:x="14897" fg:w="3"/><text x="97.3875%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (3 samples, 0.02%)</title><rect x="97.1570%" y="517" width="0.0196%" height="15" fill="rgb(209,117,53)" fg:x="14900" fg:w="3"/><text x="97.4070%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (4 samples, 0.03%)</title><rect x="97.2222%" y="501" width="0.0261%" height="15" fill="rgb(212,90,42)" fg:x="14910" fg:w="4"/><text x="97.4722%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="97.4896%" y="485" width="0.0130%" height="15" fill="rgb(218,164,37)" fg:x="14951" fg:w="2"/><text x="97.7396%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (16 samples, 0.10%)</title><rect x="97.6069%" y="469" width="0.1043%" height="15" fill="rgb(246,65,34)" fg:x="14969" fg:w="16"/><text x="97.8569%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="97.7113%" y="469" width="0.0130%" height="15" fill="rgb(231,100,33)" fg:x="14985" fg:w="2"/><text x="97.9613%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (77 samples, 0.50%)</title><rect x="97.2548%" y="501" width="0.5021%" height="15" fill="rgb(228,126,14)" fg:x="14915" fg:w="77"/><text x="97.5048%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (38 samples, 0.25%)</title><rect x="97.5091%" y="485" width="0.2478%" height="15" fill="rgb(215,173,21)" fg:x="14954" fg:w="38"/><text x="97.7591%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (5 samples, 0.03%)</title><rect x="97.7243%" y="469" width="0.0326%" height="15" fill="rgb(210,6,40)" fg:x="14987" fg:w="5"/><text x="97.9743%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (125 samples, 0.82%)</title><rect x="97.0853%" y="533" width="0.8151%" height="15" fill="rgb(212,48,18)" fg:x="14889" fg:w="125"/><text x="97.3353%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (111 samples, 0.72%)</title><rect x="97.1766%" y="517" width="0.7238%" height="15" fill="rgb(230,214,11)" fg:x="14903" fg:w="111"/><text x="97.4266%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.14%)</title><rect x="97.7634%" y="501" width="0.1369%" height="15" fill="rgb(254,105,39)" fg:x="14993" fg:w="21"/><text x="98.0134%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.03%)</title><rect x="97.9460%" y="517" width="0.0261%" height="15" fill="rgb(245,158,5)" fg:x="15021" fg:w="4"/><text x="98.1960%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.03%)</title><rect x="97.9721%" y="517" width="0.0326%" height="15" fill="rgb(249,208,11)" fg:x="15025" fg:w="5"/><text x="98.2221%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (2 samples, 0.01%)</title><rect x="98.2981%" y="485" width="0.0130%" height="15" fill="rgb(210,39,28)" fg:x="15075" fg:w="2"/><text x="98.5481%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.03%)</title><rect x="98.3112%" y="485" width="0.0261%" height="15" fill="rgb(211,56,53)" fg:x="15077" fg:w="4"/><text x="98.5612%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (15 samples, 0.10%)</title><rect x="98.4611%" y="469" width="0.0978%" height="15" fill="rgb(226,201,30)" fg:x="15100" fg:w="15"/><text x="98.7111%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (6 samples, 0.04%)</title><rect x="98.5589%" y="469" width="0.0391%" height="15" fill="rgb(239,101,34)" fg:x="15115" fg:w="6"/><text x="98.8089%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (149 samples, 0.97%)</title><rect x="97.9004%" y="533" width="0.9716%" height="15" fill="rgb(226,209,5)" fg:x="15014" fg:w="149"/><text x="98.1504%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (133 samples, 0.87%)</title><rect x="98.0047%" y="517" width="0.8672%" height="15" fill="rgb(250,105,47)" fg:x="15030" fg:w="133"/><text x="98.2547%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (126 samples, 0.82%)</title><rect x="98.0503%" y="501" width="0.8216%" height="15" fill="rgb(230,72,3)" fg:x="15037" fg:w="126"/><text x="98.3003%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (82 samples, 0.53%)</title><rect x="98.3372%" y="485" width="0.5347%" height="15" fill="rgb(232,218,39)" fg:x="15081" fg:w="82"/><text x="98.5872%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (42 samples, 0.27%)</title><rect x="98.5981%" y="469" width="0.2739%" height="15" fill="rgb(248,166,6)" fg:x="15121" fg:w="42"/><text x="98.8481%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.03%)</title><rect x="98.8785%" y="533" width="0.0261%" height="15" fill="rgb(247,89,20)" fg:x="15164" fg:w="4"/><text x="99.1285%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (6 samples, 0.04%)</title><rect x="98.9045%" y="533" width="0.0391%" height="15" fill="rgb(248,130,54)" fg:x="15168" fg:w="6"/><text x="99.1545%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="98.9437%" y="533" width="0.0196%" height="15" fill="rgb(234,196,4)" fg:x="15174" fg:w="3"/><text x="99.1937%" y="543.50"></text></g><g><title>deno`deno_flash::run_server (6,462 samples, 42.14%)</title><rect x="56.8532%" y="549" width="42.1362%" height="15" fill="rgb(250,143,31)" fg:x="8719" fg:w="6462"/><text x="57.1032%" y="559.50">deno`deno_flash::run_server</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="98.9697%" y="533" width="0.0196%" height="15" fill="rgb(211,110,34)" fg:x="15178" fg:w="3"/><text x="99.2197%" y="543.50"></text></g><g><title>deno`http::header::name::HeaderName::from_bytes (3 samples, 0.02%)</title><rect x="98.9958%" y="549" width="0.0196%" height="15" fill="rgb(215,124,48)" fg:x="15182" fg:w="3"/><text x="99.2458%" y="559.50"></text></g><g><title>deno`httparse::Request::parse_with_config_and_uninit_headers (4 samples, 0.03%)</title><rect x="99.0154%" y="549" width="0.0261%" height="15" fill="rgb(216,46,13)" fg:x="15185" fg:w="4"/><text x="99.2654%" y="559.50"></text></g><g><title>deno`tokio::park::thread::CachedParkThread::get_unpark (2 samples, 0.01%)</title><rect x="99.0415%" y="549" width="0.0130%" height="15" fill="rgb(205,184,25)" fg:x="15189" fg:w="2"/><text x="99.2915%" y="559.50"></text></g><g><title>deno`tokio::runtime::enter::enter (2 samples, 0.01%)</title><rect x="99.0610%" y="549" width="0.0130%" height="15" fill="rgb(228,1,10)" fg:x="15192" fg:w="2"/><text x="99.3110%" y="559.50"></text></g><g><title>deno`tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::try_recv (6 samples, 0.04%)</title><rect x="99.0741%" y="549" width="0.0391%" height="15" fill="rgb(213,116,27)" fg:x="15194" fg:w="6"/><text x="99.3241%" y="559.50"></text></g><g><title>deno`tokio::sync::task::atomic_waker::AtomicWaker::wake (17 samples, 0.11%)</title><rect x="99.1132%" y="549" width="0.1109%" height="15" fill="rgb(241,95,50)" fg:x="15200" fg:w="17"/><text x="99.3632%" y="559.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.09%)</title><rect x="99.2240%" y="549" width="0.0913%" height="15" fill="rgb(238,48,32)" fg:x="15217" fg:w="14"/><text x="99.4740%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="99.3284%" y="549" width="0.0326%" height="15" fill="rgb(235,113,49)" fg:x="15233" fg:w="5"/><text x="99.5784%" y="559.50"></text></g><g><title>deno`std::sys::unix::thread::Thread::new::thread_start (6,594 samples, 43.00%)</title><rect x="56.5662%" y="613" width="42.9969%" height="15" fill="rgb(205,127,43)" fg:x="8675" fg:w="6594"/><text x="56.8162%" y="623.50">deno`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>deno`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,594 samples, 43.00%)</title><rect x="56.5662%" y="597" width="42.9969%" height="15" fill="rgb(250,162,2)" fg:x="8675" fg:w="6594"/><text x="56.8162%" y="607.50">deno`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>deno`std::sys_common::backtrace::__rust_begin_short_backtrace (6,594 samples, 43.00%)</title><rect x="56.5662%" y="581" width="42.9969%" height="15" fill="rgb(220,13,41)" fg:x="8675" fg:w="6594"/><text x="56.8162%" y="591.50">deno`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>deno`tokio::runtime::task::raw::poll (6,594 samples, 43.00%)</title><rect x="56.5662%" y="565" width="42.9969%" height="15" fill="rgb(249,221,25)" fg:x="8675" fg:w="6594"/><text x="56.8162%" y="575.50">deno`tokio::runtime::task::raw::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.20%)</title><rect x="99.3675%" y="549" width="0.1956%" height="15" fill="rgb(215,208,19)" fg:x="15239" fg:w="30"/><text x="99.6175%" y="559.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AssembleCode (2 samples, 0.01%)</title><rect x="99.5631%" y="517" width="0.0130%" height="15" fill="rgb(236,175,2)" fg:x="15269" fg:w="2"/><text x="99.8131%" y="527.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleCode (2 samples, 0.01%)</title><rect x="99.5631%" y="501" width="0.0130%" height="15" fill="rgb(241,52,2)" fg:x="15269" fg:w="2"/><text x="99.8131%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::CodeGenerator::AssembleInstruction (2 samples, 0.01%)</title><rect x="99.5631%" y="485" width="0.0130%" height="15" fill="rgb(248,140,14)" fg:x="15269" fg:w="2"/><text x="99.8131%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (3 samples, 0.02%)</title><rect x="99.5762%" y="469" width="0.0196%" height="15" fill="rgb(253,22,42)" fg:x="15271" fg:w="3"/><text x="99.8262%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (3 samples, 0.02%)</title><rect x="99.5762%" y="453" width="0.0196%" height="15" fill="rgb(234,61,47)" fg:x="15271" fg:w="3"/><text x="99.8262%" y="463.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::CreateGraph (4 samples, 0.03%)</title><rect x="99.5762%" y="517" width="0.0261%" height="15" fill="rgb(208,226,15)" fg:x="15271" fg:w="4"/><text x="99.8262%" y="527.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::InliningPhase&gt; (4 samples, 0.03%)</title><rect x="99.5762%" y="501" width="0.0261%" height="15" fill="rgb(217,221,4)" fg:x="15271" fg:w="4"/><text x="99.8262%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::InliningPhase::Run (4 samples, 0.03%)</title><rect x="99.5762%" y="485" width="0.0261%" height="15" fill="rgb(212,174,34)" fg:x="15271" fg:w="4"/><text x="99.8262%" y="495.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::BranchConditionDuplicationPhase&gt; (2 samples, 0.01%)</title><rect x="99.6022%" y="501" width="0.0130%" height="15" fill="rgb(253,83,4)" fg:x="15275" fg:w="2"/><text x="99.8522%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::BranchConditionDuplicationPhase::Run (2 samples, 0.01%)</title><rect x="99.6022%" y="485" width="0.0130%" height="15" fill="rgb(250,195,49)" fg:x="15275" fg:w="2"/><text x="99.8522%" y="495.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ComputeSchedulePhase&gt; (2 samples, 0.01%)</title><rect x="99.6153%" y="501" width="0.0130%" height="15" fill="rgb(241,192,25)" fg:x="15277" fg:w="2"/><text x="99.8653%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (2 samples, 0.01%)</title><rect x="99.6153%" y="485" width="0.0130%" height="15" fill="rgb(208,124,10)" fg:x="15277" fg:w="2"/><text x="99.8653%" y="495.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::DecompressionOptimizationPhase&gt; (3 samples, 0.02%)</title><rect x="99.6348%" y="501" width="0.0196%" height="15" fill="rgb(222,33,0)" fg:x="15280" fg:w="3"/><text x="99.8848%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizationPhase::Run (3 samples, 0.02%)</title><rect x="99.6348%" y="485" width="0.0196%" height="15" fill="rgb(234,209,28)" fg:x="15280" fg:w="3"/><text x="99.8848%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizer::Reduce (3 samples, 0.02%)</title><rect x="99.6348%" y="469" width="0.0196%" height="15" fill="rgb(224,11,23)" fg:x="15280" fg:w="3"/><text x="99.8848%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizer::MarkNodeInputs (3 samples, 0.02%)</title><rect x="99.6348%" y="453" width="0.0196%" height="15" fill="rgb(232,99,1)" fg:x="15280" fg:w="3"/><text x="99.8848%" y="463.50"></text></g><g><title>deno`v8::internal::compiler::DecompressionOptimizer::MaybeMarkAndQueueForRevisit (2 samples, 0.01%)</title><rect x="99.6414%" y="437" width="0.0130%" height="15" fill="rgb(237,95,45)" fg:x="15281" fg:w="2"/><text x="99.8914%" y="447.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EarlyOptimizationPhase&gt; (2 samples, 0.01%)</title><rect x="99.6544%" y="501" width="0.0130%" height="15" fill="rgb(208,109,11)" fg:x="15283" fg:w="2"/><text x="99.9044%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::EarlyOptimizationPhase::Run (2 samples, 0.01%)</title><rect x="99.6544%" y="485" width="0.0130%" height="15" fill="rgb(216,190,48)" fg:x="15283" fg:w="2"/><text x="99.9044%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.01%)</title><rect x="99.6544%" y="469" width="0.0130%" height="15" fill="rgb(251,171,36)" fg:x="15283" fg:w="2"/><text x="99.9044%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.01%)</title><rect x="99.6544%" y="453" width="0.0130%" height="15" fill="rgb(230,62,22)" fg:x="15283" fg:w="2"/><text x="99.9044%" y="463.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (2 samples, 0.01%)</title><rect x="99.6544%" y="437" width="0.0130%" height="15" fill="rgb(225,114,35)" fg:x="15283" fg:w="2"/><text x="99.9044%" y="447.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EffectControlLinearizationPhase&gt; (2 samples, 0.01%)</title><rect x="99.6674%" y="501" width="0.0130%" height="15" fill="rgb(215,118,42)" fg:x="15285" fg:w="2"/><text x="99.9174%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::EffectControlLinearizationPhase::Run (2 samples, 0.01%)</title><rect x="99.6674%" y="485" width="0.0130%" height="15" fill="rgb(243,119,21)" fg:x="15285" fg:w="2"/><text x="99.9174%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::Scheduler::ComputeSchedule(v8::internal::Zone*, v8::internal::compiler::Graph*, v8::base::Flags (2 samples, 0.01%)</title><rect x="99.6674%" y="469" width="0.0130%" height="15" fill="rgb(252,177,53)" fg:x="15285" fg:w="2"/><text x="99.9174%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysis::Reduce (3 samples, 0.02%)</title><rect x="99.6805%" y="453" width="0.0196%" height="15" fill="rgb(237,209,29)" fg:x="15287" fg:w="3"/><text x="99.9305%" y="463.50"></text></g><g><title>deno`v8::internal::compiler::VariableTracker::Scope::Scope (2 samples, 0.01%)</title><rect x="99.6870%" y="437" width="0.0130%" height="15" fill="rgb(212,65,23)" fg:x="15288" fg:w="2"/><text x="99.9370%" y="447.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::EscapeAnalysisPhase&gt; (4 samples, 0.03%)</title><rect x="99.6805%" y="501" width="0.0261%" height="15" fill="rgb(230,222,46)" fg:x="15287" fg:w="4"/><text x="99.9305%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::EscapeAnalysisPhase::Run (4 samples, 0.03%)</title><rect x="99.6805%" y="485" width="0.0261%" height="15" fill="rgb(215,135,32)" fg:x="15287" fg:w="4"/><text x="99.9305%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::EffectGraphReducer::ReduceFrom (4 samples, 0.03%)</title><rect x="99.6805%" y="469" width="0.0261%" height="15" fill="rgb(246,101,22)" fg:x="15287" fg:w="4"/><text x="99.9305%" y="479.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LateOptimizationPhase&gt; (4 samples, 0.03%)</title><rect x="99.7066%" y="501" width="0.0261%" height="15" fill="rgb(206,107,13)" fg:x="15291" fg:w="4"/><text x="99.9566%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::LateOptimizationPhase::Run (4 samples, 0.03%)</title><rect x="99.7066%" y="485" width="0.0261%" height="15" fill="rgb(250,100,44)" fg:x="15291" fg:w="4"/><text x="99.9566%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (4 samples, 0.03%)</title><rect x="99.7066%" y="469" width="0.0261%" height="15" fill="rgb(231,147,38)" fg:x="15291" fg:w="4"/><text x="99.9566%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (4 samples, 0.03%)</title><rect x="99.7066%" y="453" width="0.0261%" height="15" fill="rgb(229,8,40)" fg:x="15291" fg:w="4"/><text x="99.9566%" y="463.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (3 samples, 0.02%)</title><rect x="99.7131%" y="437" width="0.0196%" height="15" fill="rgb(221,135,30)" fg:x="15292" fg:w="3"/><text x="99.9631%" y="447.50"></text></g><g><title>deno`v8::internal::compiler::ValueNumberingReducer::Reduce (2 samples, 0.01%)</title><rect x="99.7196%" y="421" width="0.0130%" height="15" fill="rgb(249,193,18)" fg:x="15293" fg:w="2"/><text x="99.9696%" y="431.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::Reduce (4 samples, 0.03%)</title><rect x="99.7457%" y="437" width="0.0261%" height="15" fill="rgb(209,133,39)" fg:x="15297" fg:w="4"/><text x="99.9957%" y="447.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::LoadEliminationPhase&gt; (7 samples, 0.05%)</title><rect x="99.7327%" y="501" width="0.0456%" height="15" fill="rgb(232,100,14)" fg:x="15295" fg:w="7"/><text x="99.9827%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::LoadEliminationPhase::Run (7 samples, 0.05%)</title><rect x="99.7327%" y="485" width="0.0456%" height="15" fill="rgb(224,185,1)" fg:x="15295" fg:w="7"/><text x="99.9827%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (7 samples, 0.05%)</title><rect x="99.7327%" y="469" width="0.0456%" height="15" fill="rgb(223,139,8)" fg:x="15295" fg:w="7"/><text x="99.9827%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (6 samples, 0.04%)</title><rect x="99.7392%" y="453" width="0.0391%" height="15" fill="rgb(232,213,38)" fg:x="15296" fg:w="6"/><text x="99.9892%" y="463.50"></text></g><g><title>deno`v8::internal::compiler::GraphTrimmer::TrimGraph (2 samples, 0.01%)</title><rect x="99.7913%" y="469" width="0.0130%" height="15" fill="rgb(207,94,22)" fg:x="15304" fg:w="2"/><text x="100.0413%" y="479.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::StoreStoreEliminationPhase&gt; (3 samples, 0.02%)</title><rect x="99.7913%" y="501" width="0.0196%" height="15" fill="rgb(219,183,54)" fg:x="15304" fg:w="3"/><text x="100.0413%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::StoreStoreEliminationPhase::Run (3 samples, 0.02%)</title><rect x="99.7913%" y="485" width="0.0196%" height="15" fill="rgb(216,185,54)" fg:x="15304" fg:w="3"/><text x="100.0413%" y="495.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::TypedLoweringPhase&gt; (2 samples, 0.01%)</title><rect x="99.8109%" y="501" width="0.0130%" height="15" fill="rgb(254,217,39)" fg:x="15307" fg:w="2"/><text x="100.0609%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::TypedLoweringPhase::Run (2 samples, 0.01%)</title><rect x="99.8109%" y="485" width="0.0130%" height="15" fill="rgb(240,178,23)" fg:x="15307" fg:w="2"/><text x="100.0609%" y="495.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceNode (2 samples, 0.01%)</title><rect x="99.8109%" y="469" width="0.0130%" height="15" fill="rgb(218,11,47)" fg:x="15307" fg:w="2"/><text x="100.0609%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::GraphReducer::ReduceTop (2 samples, 0.01%)</title><rect x="99.8109%" y="453" width="0.0130%" height="15" fill="rgb(218,51,51)" fg:x="15307" fg:w="2"/><text x="100.0609%" y="463.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::ForwardStateTo (3 samples, 0.02%)</title><rect x="99.8500%" y="437" width="0.0196%" height="15" fill="rgb(238,126,27)" fg:x="15313" fg:w="3"/><text x="100.1000%" y="447.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::AllocateGeneralRegistersPhase&lt;v8::internal::compiler::LinearScanAllocator&gt; &gt; (8 samples, 0.05%)</title><rect x="99.8435%" y="469" width="0.0522%" height="15" fill="rgb(249,202,22)" fg:x="15312" fg:w="8"/><text x="100.0935%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::LinearScanAllocator::AllocateRegisters (8 samples, 0.05%)</title><rect x="99.8435%" y="453" width="0.0522%" height="15" fill="rgb(254,195,49)" fg:x="15312" fg:w="8"/><text x="100.0935%" y="463.50"></text></g><g><title>deno`void std::__1::__tree_remove&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (2 samples, 0.01%)</title><rect x="99.8826%" y="437" width="0.0130%" height="15" fill="rgb(208,123,14)" fg:x="15318" fg:w="2"/><text x="100.1326%" y="447.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (57 samples, 0.37%)</title><rect x="99.5631%" y="581" width="0.3717%" height="15" fill="rgb(224,200,8)" fg:x="15269" fg:w="57"/><text x="99.8131%" y="591.50"></text></g><g><title>deno`v8::internal::OptimizingCompileDispatcher::CompileNext (57 samples, 0.37%)</title><rect x="99.5631%" y="565" width="0.3717%" height="15" fill="rgb(217,61,36)" fg:x="15269" fg:w="57"/><text x="99.8131%" y="575.50"></text></g><g><title>deno`v8::internal::OptimizedCompilationJob::ExecuteJob (57 samples, 0.37%)</title><rect x="99.5631%" y="549" width="0.3717%" height="15" fill="rgb(206,35,45)" fg:x="15269" fg:w="57"/><text x="99.8131%" y="559.50"></text></g><g><title>deno`v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (57 samples, 0.37%)</title><rect x="99.5631%" y="533" width="0.3717%" height="15" fill="rgb(217,65,33)" fg:x="15269" fg:w="57"/><text x="99.8131%" y="543.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::OptimizeGraph (51 samples, 0.33%)</title><rect x="99.6022%" y="517" width="0.3326%" height="15" fill="rgb(222,158,48)" fg:x="15275" fg:w="51"/><text x="99.8522%" y="527.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::SelectInstructions (16 samples, 0.10%)</title><rect x="99.8305%" y="501" width="0.1043%" height="15" fill="rgb(254,2,54)" fg:x="15310" fg:w="16"/><text x="100.0805%" y="511.50"></text></g><g><title>deno`v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (15 samples, 0.10%)</title><rect x="99.8370%" y="485" width="0.0978%" height="15" fill="rgb(250,143,38)" fg:x="15311" fg:w="15"/><text x="100.0870%" y="495.50"></text></g><g><title>deno`auto v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::ResolveControlFlowPhase&gt; (2 samples, 0.01%)</title><rect x="99.9218%" y="469" width="0.0130%" height="15" fill="rgb(248,25,0)" fg:x="15324" fg:w="2"/><text x="100.1718%" y="479.50"></text></g><g><title>deno`v8::internal::compiler::LiveRangeConnector::ResolveControlFlow (2 samples, 0.01%)</title><rect x="99.9218%" y="453" width="0.0130%" height="15" fill="rgb(206,152,27)" fg:x="15324" fg:w="2"/><text x="100.1718%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (6 samples, 0.04%)</title><rect x="99.9478%" y="565" width="0.0391%" height="15" fill="rgb(240,77,30)" fg:x="15328" fg:w="6"/><text x="100.1978%" y="575.50"></text></g><g><title>all (15,336 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(231,5,3)" fg:x="0" fg:w="15336"/><text x="0.2500%" y="671.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (6,661 samples, 43.43%)</title><rect x="56.5662%" y="645" width="43.4338%" height="15" fill="rgb(207,226,32)" fg:x="8675" fg:w="6661"/><text x="56.8162%" y="655.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (6,661 samples, 43.43%)</title><rect x="56.5662%" y="629" width="43.4338%" height="15" fill="rgb(222,207,47)" fg:x="8675" fg:w="6661"/><text x="56.8162%" y="639.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>deno`v8::base::ThreadEntry (67 samples, 0.44%)</title><rect x="99.5631%" y="613" width="0.4369%" height="15" fill="rgb(229,115,45)" fg:x="15269" fg:w="67"/><text x="99.8131%" y="623.50"></text></g><g><title>deno`v8::platform::DefaultWorkerThreadsTaskRunner::WorkerThread::Run (67 samples, 0.44%)</title><rect x="99.5631%" y="597" width="0.4369%" height="15" fill="rgb(224,191,6)" fg:x="15269" fg:w="67"/><text x="99.8131%" y="607.50"></text></g><g><title>deno`v8::platform::DelayedTaskQueue::GetNext (8 samples, 0.05%)</title><rect x="99.9478%" y="581" width="0.0522%" height="15" fill="rgb(230,227,24)" fg:x="15328" fg:w="8"/><text x="100.1978%" y="591.50"></text></g></svg></svg>