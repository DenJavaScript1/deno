# Copyright 2018-2019 the Deno authors. All rights reserved. MIT license.
import("//build/toolchain/cc_wrapper.gni")
import("//build_extra/flatbuffers/flatbuffer.gni")
import("//build_extra/flatbuffers/rust/rust_flatbuffer.gni")
import("//build_extra/rust/rust.gni")
import("//third_party/v8/gni/v8.gni")
import("//third_party/v8/snapshot_toolchain.gni")
import("//libdeno/deno.gni")

main_extern = [
  "$rust_build:ansi_term",
  "$rust_build:atty",
  "$rust_build:dirs",
  "$rust_build:flatbuffers",
  "$rust_build:futures",
  "$rust_build:getopts",
  "$rust_build:http",
  "$rust_build:hyper",
  "$rust_build:hyper_rustls",
  "$rust_build:lazy_static",
  "$rust_build:libc",
  "$rust_build:log",
  "$rust_build:rand",
  "$rust_build:regex",
  "$rust_build:remove_dir_all",
  "$rust_build:ring",
  "$rust_build:rustyline",
  "$rust_build:serde_json",
  "$rust_build:source_map_mappings",
  "$rust_build:tempfile",
  "$rust_build:tokio",
  "$rust_build:tokio_executor",
  "$rust_build:tokio_fs",
  "$rust_build:tokio_io",
  "$rust_build:tokio_process",
  "$rust_build:tokio_threadpool",
  "$rust_build:url",
]
if (is_win) {
  main_extern += [ "$rust_build:winapi" ]
}

ts_sources = [
  "main.ts",
  "../../js/assets.ts",
  "../../js/blob.ts",
  "../../js/buffer.ts",
  "../../js/chmod.ts",
  "../../js/console_table.ts",
  "../../js/compiler.ts",
  "../../js/console.ts",
  "../../js/copy_file.ts",
  "../../js/custom_event.ts",
  "../../js/deno.ts",
  "../../js/dir.ts",
  "../../js/dispatch.ts",
  "../../js/dom_types.ts",
  "../../js/errors.ts",
  "../../js/event.ts",
  "../../js/event_target.ts",
  "../../js/fetch.ts",
  "../../js/format_error.ts",
  "../../js/dom_file.ts",
  "../../js/file_info.ts",
  "../../js/files.ts",
  "../../js/flatbuffers.ts",
  "../../js/form_data.ts",
  "../../js/globals.ts",
  "../../js/headers.ts",
  "../../js/io.ts",
  "../../js/libdeno.ts",
  "../../js/lib.web_assembly.d.ts",
  "../../js/location.ts",
  "../../js/main.ts",
  "../../js/make_temp_dir.ts",
  "../../js/metrics.ts",
  "../../js/mkdir.ts",
  "../../js/mock_builtin.js",
  "../../js/net.ts",
  "../../js/os.ts",
  "../../js/platform.ts",
  "../../js/plugins.d.ts",
  "../../js/process.ts",
  "../../js/read_dir.ts",
  "../../js/read_file.ts",
  "../../js/read_link.ts",
  "../../js/remove.ts",
  "../../js/rename.ts",
  "../../js/repl.ts",
  "../../js/resources.ts",
  "../../js/stat.ts",
  "../../js/symlink.ts",
  "../../js/text_encoding.ts",
  "../../js/timers.ts",
  "../../js/truncate.ts",
  "../../js/types.ts",
  "../../js/url.ts",
  "../../js/url_search_params.ts",
  "../../js/util.ts",
  "../../js/workers.ts",
  "../../js/write_file.ts",
  "../../js/performance.ts",
  "../../js/version.ts",
  "../../tsconfig.json",

  # Listing package.json and yarn.lock as sources ensures the bundle is rebuilt
  # when npm packages are added/removed or their contents changes.
  "../../package.json",
  "../../third_party/yarn.lock",
]

rust_executable("tsc") {
  source_root = "main.rs"
  extern = main_extern
  deps = [
    "//:deno_deps",
    ":snapshot_tsc",
  ]

  crate_version = "0.0.0"
}

rust_test("test_tsc") {
  source_root = "main.rs"
  extern = main_extern
  deps = [
    "//:deno_deps",
    ":snapshot_tsc",
  ]

  # Extract version from Cargo.toml
  crate_version = "0.0.0"
}

run_node("tsc_bundle") {
  out_dir = "$target_gen_dir/bundle/"
  sources = ts_sources
  outputs = [
    out_dir + "main.js",
    out_dir + "main.js.map",
  ]
  inputs = [
    "main.ts",
    "//rollup.config.js",
  ]
  depfile = out_dir + "main.d"
  deps = [
    "//:msg_ts"
  ]
  args = [
    rebase_path("../../third_party/node_modules/rollup/bin/rollup", root_build_dir),
    "-c",
    rebase_path("../../rollup.config.js", root_build_dir),
    "-i",
    rebase_path(inputs[0], root_build_dir),
    "-o",
    rebase_path(outputs[0], root_build_dir),
    "--sourcemapFile",
    rebase_path("."),
    "--silent",
  ]
}

snapshot("snapshot_tsc") {
  source_root = "$target_gen_dir/bundle/main.js"
  deps = [
    ":tsc_bundle",
  ]
}
