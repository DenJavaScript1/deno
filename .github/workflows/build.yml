name: Build and test

on: [push]

jobs:
  build:
    name: Build and test for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      # Checkout the repository
      - name: Enable symlinks (windows)
        if: startsWith(matrix.os, 'windows')
        run: git config --global core.symlinks true
      - name: Checkout the repository
        uses: actions/checkout@v1
        with:
          submodules: true

      # Setup compilers
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Setup rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: "1.37.0"
      - name: Install rust components
        run: |
          rustup component add clippy
          rustup component add rustfmt
      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: "2.7.16"
          architecture: x64
      - name: Setup python package dir
        if: startsWith(matrix.os, 'windows')
        run: setx PYTHONPATH "third_party\python_packages" /m
      - name: Check versions
        run: |
          node -v
          python --version
          rustc --version
          cargo --version

      # Setup
      - name: Run setup script (unix)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macOS')
        run: ./tools/setup.py
      - name: Run setup script (windows)
        if: startsWith(matrix.os, 'windows')
        env:
          GYP_MSVS_OVERRIDE_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise
        run: |
          "python %cd%\\tools\\setup.py"

      # Start sscache
      - name: Start sccache (linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: "`pwd`/prebuilt/linux64/sccache --start-server"
      - name: Start sccache (macos)
        if: startsWith(matrix.os, 'macos')
        run: "`pwd`/prebuilt/mac/sccache --start-server"
      - name: Start sccache (windows)
        if: startsWith(matrix.os, 'windows')
        run: "%cd%\\prebuilt\\win\\sccache.exe --start-server"

      # Linting
      - name: Run lint script (unix)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        run: ./tools/lint.py
      - name: Run lint script (windows)
        if: startsWith(matrix.os, 'windows')
        env:
          GYP_MSVS_OVERRIDE_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise
        run: "python %cd%\\tools\\lint.py"

      # Building
      - name: Run build script (unix)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        run: ./tools/build.py
      - name: Run build script (windows)
        if: startsWith(matrix.os, 'windows')
        env:
          GYP_MSVS_OVERRIDE_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise
        run: python "%cd%\\tools\\build.py"

      # Formatting test
      - name: Run test format script (unix)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        run: ./tools/test_format.py
      - name: Run test format script (windows)
        if: startsWith(matrix.os, 'windows')
        env:
          GYP_MSVS_OVERRIDE_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise
        run: "python %cd%\\tools\\test_format.py"

      # Test
      - name: Run tests (unix)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        env:
          DENO_BUILD_MODE: release
        run: ./tools/test.py
      - name: Run tests (windows)
        if: startsWith(matrix.os, 'windows')
        env:
          DENO_BUILD_MODE: release
          GYP_MSVS_OVERRIDE_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise
        run: "python %cd%\\tools\\test.py"

      # Upload artifacts
      - name: Upload linux and macOS artifacts
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macOS')
        with:
          name: deno
          path: target/release/deno
      - name: Upload windows artifacts
        uses: actions/upload-artifact@master
        if: startsWith(matrix.os, 'windows')
        with:
          name: deno
          path: target\release\deno.exe
