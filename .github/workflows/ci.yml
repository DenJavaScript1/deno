name: ci

on: [push, pull_request_target]

jobs:
  build:
    name: build / ${{ matrix.kind }} / ${{ runner.os }}
    if: github.event_name == 'push' || !startsWith(github.event.pull_request.head.label, 'denoland:')
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: true
      matrix:
        kind: ["debug", "release"]
        os:
          - ${{ github.repository == 'denoland/deno' && 'ubuntu-latest-xl' || 'ubuntu-18.04' }}
          - windows-2019
          - macos-10.15

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
      CARGO_TERM_COLOR: always

    outputs:
      commit: ${{ steps.commit.outputs.hash }}
      tag: ${{ steps.ref.outputs.tag }}

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 5
          submodules: true

      - name: Get commit hash
        id: commit
        run: echo "::set-output name=hash::$(git rev-parse HEAD)"

      - name: Get commit tag
        if: matrix.kind == 'release' && startsWith(github.ref, 'refs/tags/')
        id: ref
        run: echo "::set-output name=tag::$(echo ${GITHUB_REF#refs/*/})"

      - name: Create source tarball
        if: runner.os == 'Linux' && matrix.kind == 'release'
        run: tar --exclude=.cargo_home --exclude=".git*" --exclude=target --exclude=third_party/prebuilt -czvf deno_src.tar.gz -C .. deno

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.50.0

      - name: Configure canary build
        if: github.repository == 'denoland/deno' && github.ref == 'refs/heads/master'
        shell: bash
        run: echo 'DENO_CANARY=true' >> $GITHUB_ENV

      - name: Build (${{ matrix.kind }})
        uses: actions-rs/cargo@v1
        with:
          use-cross: false
          command: build
          args: --locked --all-targets ${{ matrix.kind == 'release' && '--release -vv' }}

      - name: Prep linux release
        if: matrix.kind == 'release' && runner.os == 'Linux'
        working-directory: target/release
        run: |
          zip -r deno-x86_64-unknown-linux-gnu.zip deno
          zip -r denort-x86_64-unknown-linux-gnu.zip denort
          ./deno types > lib.deno.d.ts

      - name: Prep mac release
        if: matrix.kind == 'release' && runner.os == 'macOS'
        working-directory: target/release
        run: |
          zip -r deno-x86_64-apple-darwin.zip deno
          zip -r denort-x86_64-apple-darwin.zip denort

      - name: Prep windows release
        if: matrix.kind == 'release' && runner.os == 'Windows'
        working-directory: target/release
        run: |
          Compress-Archive -CompressionLevel Optimal -Force -Path deno.exe -DestinationPath deno-x86_64-pc-windows-msvc.zip
          Compress-Archive -CompressionLevel Optimal -Force -Path denort.exe -DestinationPath denort-x86_64-pc-windows-msvc.zip

      - name: Upload Artifacts
        if: matrix.kind == 'release'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            target/release/deno-x86_64-unknown-linux-gnu.zip
            target/release/deno-x86_64-pc-windows-msvc.zip
            target/release/deno-x86_64-apple-darwin.zip
            target/release/denort-x86_64-unknown-linux-gnu.zip
            target/release/denort-x86_64-pc-windows-msvc.zip
            target/release/denort-x86_64-apple-darwin.zip
            target/release/deno_src.tar.gz
            target/release/lib.deno.d.ts
          retention-days: 7
