name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.toolchain }} ${{ matrix.incremental }} ${{ matrix.profile }} ${{ matrix.os }}
    if: |
      github.event_name == 'push' ||
      !startsWith(github.event.pull_request.head.label, 'denoland:')
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      matrix:
        include:
          - os: ubuntu-latest-xl
            toolchain: gnu
            profile: release
            incremental: false
          - os: ubuntu-latest-xl
            toolchain: gnu
            profile: release
            incremental: true
          - os: ubuntu-latest-xl
            toolchain: llvm
            profile: release
            incremental: false
          - os: ubuntu-latest-xl
            toolchain: llvm
            profile: release
            incremental: true
          - os: ubuntu-latest
            toolchain: gnu
            profile: release
            incremental: false
          - os: ubuntu-latest
            toolchain: gnu
            profile: release
            incremental: true
          - os: ubuntu-latest
            toolchain: llvm
            profile: release
            incremental: false
          - os: ubuntu-latest
            toolchain: llvm
            profile: release
            incremental: true
      fail-fast: false

    steps:
      - name: Configure git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          # Use depth > 1, because sometimes we need to rebuild main and if
          # other commits have landed it will become impossible to rebuild if
          # the checkout is too shallow.
          fetch-depth: 5
          submodules: recursive

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: 1.52.1

      - name: Crazy trick to make cargo faster
        run: |-
          if [ ! -d ~/.cargo/registry/index/github.com-1ecc6299db9ec823 ]
          then
            git clone --depth 1 --no-checkout                             \
                      https://github.com/rust-lang/crates.io-index        \
                      ~/.cargo/registry/index/github.com-1ecc6299db9ec823
          fi

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Set up Ubuntu 18.04 sysroot (gnu toolchain)
        if: matrix.toolchain == 'gnu'
        run: |-
          sudo apt-get update
          sudo apt-get install debootstrap

          # Note: git, nc, strace, and time, are needed to run the benchmarks.
          sudo debootstrap                                                     \
                 --include=ca-certificates,curl,git,netcat-openbsd,strace,time \
                 --variant=buildd bionic /sysroot                              \
                 http://azure.archive.ubuntu.com/ubuntu

          sudo mount --rbind /dev /sysroot/dev
          sudo mount --rbind /sys /sysroot/sys
          sudo mount --rbind /home /sysroot/home
          sudo mount -t proc /proc /sysroot/proc

          sudo cp /etc/passwd /etc/shadow /etc/group /etc/gshadow \
                  /sysroot/etc

          # Make rust available inside the chroot environment.
          sudo mkdir -p /sysroot/usr/share/rust
          sudo mount --rbind /usr/share/rust /sysroot/usr/share/rust

          # Make node (needed to run the benchmarks) available.
          sudo ln --target /sysroot/usr/bin "$(which node)"

          cat >> ~/.bash_profile << ___
            cd "$(pwd)"

            # Add cargo, rustc, and deno to $PATH.
            source /usr/share/rust/.cargo/env
            export PATH="$PATH:$(pwd)/target/release"

            export CARGO_PROFILE_BENCH_INCREMENTAL=${{ matrix.incremental }}
            export CARGO_PROFILE_BENCH_LTO=true
            export CARGO_PROFILE_RELEASE_INCREMENTAL=${{ matrix.incremental }}
            export CARGO_PROFILE_RELEASE_LTO=true
            [ "${{ matrix.incremental }}" == "true" ] && export RUSTC_FORCE_INCREMENTAL=1
            export RUSTFLAGS="-D warnings"

            # Configure miscellaneous other flags.
            export CARGO_TERM_COLOR=always
            export CI=true
            export DENO_CANARY=true
          ___

      - name: Set up Ubuntu 18.04 sysroot (llvm toolchain)
        if: matrix.toolchain == 'llvm'
        run: |-
          sudo apt-get update
          sudo apt-get install debootstrap

          # Note: git, nc, strace, and time, are needed to run the benchmarks.
          sudo debootstrap                                                     \
                 --include=ca-certificates,curl,git,netcat-openbsd,strace,time \
                 --no-merged-usr --variant=minbase bionic /sysroot             \
                 http://azure.archive.ubuntu.com/ubuntu
          sudo mount --rbind /dev /sysroot/dev
          sudo mount --rbind /sys /sysroot/sys
          sudo mount --rbind /home /sysroot/home
          sudo mount -t proc /proc /sysroot/proc

          sudo ln --force --target /sysroot/etc                   \
                  /etc/passwd /etc/shadow /etc/group /etc/gshadow

          # Install clang-12 and lld-12 into the chroot environment.
          echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main" |
            sudo dd of=/sysroot/etc/apt/sources.list.d/llvm-toolchain-bionic-12.list
          curl https://apt.llvm.org/llvm-snapshot.gpg.key |
            gpg --dearmor |
            sudo dd of=/sysroot/etc/apt/trusted.gpg.d/llvm-snapshot.gpg
          sudo chroot /sysroot apt update -y
          sudo chroot /sysroot apt install --no-install-recommends -y \
                                           clang-12 lld-12

          # Make rust available inside the chroot environment.
          sudo mkdir -p /sysroot/usr/share/rust
          sudo mount --rbind /usr/share/rust /sysroot/usr/share/rust

          # Make node (needed to run the benchmarks) available.
          sudo ln --target /sysroot/usr/bin "$(which node)"

          cat >> ~/.bash_profile << ___
            cd "$(pwd)"

            # Add cargo, rustc, and deno to $PATH.
            source /usr/share/rust/.cargo/env
            export PATH="$PATH:$(pwd)/target/release"

            # Set build configuration for rust source files.
            export CARGO_PROFILE_BENCH_INCREMENTAL=${{ matrix.incremental }}
            export CARGO_PROFILE_BENCH_LTO=false
            export CARGO_PROFILE_RELEASE_INCREMENTAL=${{ matrix.incremental }}
            export CARGO_PROFILE_RELEASE_LTO=false
            [ "${{ matrix.incremental }}" == "true" ] && export RUSTC_FORCE_INCREMENTAL=1
            export RUSTFLAGS="
              -C linker-plugin-lto=true
              -C linker=clang-12
              -C link-arg=-fuse-ld=lld-12
              -C link-arg=-Wl,--thinlto-cache-dir=$(pwd)/target/release/lto-cache
              -C link-arg=-Wl,--thinlto-cache-policy,cache_size_bytes=700m
              -D warnings
            "
            export RUSTDOCFLAGS="\$RUSTFLAGS"

            # Set build configuration for c source files.
            export CC=clang-12         # Compile c source files with clang.
            export CCFLAGs=-flto=thin  # Tell clang to produce llvm bitcode.

            # Set miscellaneous other environment variables.
            export CARGO_TERM_COLOR=always
            export CI=true
            export DENO_CANARY=true
          ___

      - name: Full build (in sysroot)
        run: |-
          sudo chroot /sysroot                                        \
               su -l "$(whoami)"                                      \
                  -c "cargo build --release --locked --all-targets && \
                      cargo test --release --locked --no-run"

      - name: Incremental build 0xE (in sysroot)
        run: |-
          touch ./extensions/broadcast_channel/01_broadcast_channel.js
          sudo chroot /sysroot                                        \
               su -l "$(whoami)"                                      \
                  -c "cargo build --release --locked --all-targets && \
                      cargo test --release --locked --no-run"

      - name: Incremental build A (in sysroot)
        run: |-
          git ls-files -c --recurse-submodules -z | xargs -0 touch -h
          sudo chroot /sysroot                                        \
               su -l "$(whoami)"                                      \
                  -c "cargo build --release --locked --all-targets && \
                      cargo test --release --locked --no-run"

      - name: Incremental build B (in sysroot)
        run: |-
          git ls-files -c --recurse-submodules -z | xargs -0 touch -h
          (find target -type f -not -path 'target/release/lto-cache/*' -not -path 'target/release/incremental/*' -delete || true)
          sudo chroot /sysroot                                        \
               su -l "$(whoami)"                                      \
                  -c "cargo build --release --locked --all-targets && \
                      cargo test --release --locked --no-run"

      - name: Test (in sysroot)
        run: |-
          sudo chroot /sysroot                       \
               su -l "$(whoami)"                     \
                  -c "cargo test --release --locked"

      - name: Bench (in sysroot)
        run: |-
          sudo chroot /sysroot              \
               su -l "$(whoami)"            \
                  -c "cargo bench --locked"

      - name: Run web platform tests
        run: |
          ./test_util/wpt/wpt make-hosts-file | sudo tee --append /etc/hosts
          ./target/release/deno run --allow-env --allow-net --allow-read     \
                                    --allow-run --allow-write --unstable     \
                                    ./tools/wpt.ts setup
          ./target/release/deno run --allow-env --allow-net --allow-read     \
                                    --allow-run --allow-write --unstable     \
                                    ./tools/wpt.ts run --no-build --quiet    \
                                                       --release             \
                                                       --json=wpt.json       \
                                                       --wptreport=wptreport.json

      - name: Print sizes
        run: |
          du -h -t 10m target/release
          du -h -a target/release/deno
