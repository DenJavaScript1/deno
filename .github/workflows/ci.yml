# THIS FILE IS AUTO-GENERATED. DO NOT EDIT.
# This CI configuration is generated by ./tools/ci/generate.ts.

name: ci
"on":
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main
concurrency:
  group: "${{ github.workflow }}-${{ !contains(github.event.pull_request.labels.*.name, 'test-flaky-ci') && github.head_ref || github.run_id }}"
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: "-D warnings"
jobs:
  lint:
    name: lint
    runs-on: "${{ github.repository == 'denoland/deno' && 'ubuntu-20.04-xl' || 'ubuntu-20.04' }}"
    timeout-minutes: 90
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Clone submodule ./third_party
        run: git submodule update --init --recursive --depth=1 -- ./third_party
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Install Rust
        run: |-
          cargo --version
          rustc --version
          rustfmt --version
          cargo-fmt --version
          cargo-clippy --version
      - name: Check formatting
        run: deno run --allow-write --allow-read --allow-run --unstable ./tools/format.js --check
      - name: Cache Rust
        uses: Swatinem/rust-cache@v1
        with:
          key: debug
      - name: Lint
        run: deno run --allow-write --allow-read --allow-run --unstable ./tools/lint.js
  build-debug-linux:
    name: build/linux (debug)
    runs-on: "${{ github.repository == 'denoland/deno' && 'ubuntu-20.04-xl' || 'ubuntu-20.04' }}"
    timeout-minutes: 120
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Install Rust
        run: |-
          cargo --version
          rustc --version
          rustfmt --version
          cargo-fmt --version
          cargo-clippy --version
      - name: Cache Rust
        uses: Swatinem/rust-cache@v1
        with:
          key: debug
      - name: Build
        shell: bash
        run: |-
          mkdir -p target/debug
            cargo build  --locked --all-targets --tests --message-format=json > target/debug/cargo_build_manifest.json
        env:
          CARGO_PROFILE_DEV_DEBUG: 0
      - name: Package artifacts
        run: deno run --allow-read --allow-run --unstable ./tools/ci/package.js debug
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-debug-linux
          path: |-
            artifacts_1.tar.gz
            artifacts_2.tar.gz
            artifacts_3.tar.gz
            artifacts_4.tar.gz
  test-debug-linux:
    name: "test/linux (debug, shard ${{ matrix.shard }})"
    runs-on: "${{ github.repository == 'denoland/deno' && 'ubuntu-20.04-xl' || 'ubuntu-20.04' }}"
    timeout-minutes: 90
    needs:
      - build-debug-linux
    strategy:
      matrix:
        shard:
          - 1
      fail-fast: false
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Clone submodule ./third_party
        run: git submodule update --init --recursive --depth=1 -- ./third_party
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-debug-linux
      - name: Unpack artifacts
        run: |-
          tar -xpf artifacts_1.tar.gz
          tar -xpf artifacts_2.tar.gz
          tar -xpf artifacts_3.tar.gz
          tar -xpf artifacts_4.tar.gz
      - name: Run tests
        run: "deno run --allow-read --allow-run ./tools/ci/test.js debug ${{ matrix.shard }} 1"
  build-release-linux:
    name: build/linux (release)
    runs-on: "${{ github.repository == 'denoland/deno' && 'ubuntu-20.04-xl' || 'ubuntu-20.04' }}"
    timeout-minutes: 120
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Install Rust
        run: |-
          cargo --version
          rustc --version
          rustfmt --version
          cargo-fmt --version
          cargo-clippy --version
      - name: Cache Rust
        uses: Swatinem/rust-cache@v1
        with:
          key: release
      - name: Build
        shell: bash
        run: |-
          mkdir -p target/release
            cargo build --release --locked --all-targets --tests --message-format=json > target/release/cargo_build_manifest.json
      - name: Package artifacts
        run: deno run --allow-read --allow-run --unstable ./tools/ci/package.js release
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-release-linux
          path: |-
            artifacts_1.tar.gz
            artifacts_2.tar.gz
            artifacts_3.tar.gz
            artifacts_4.tar.gz
  test-release-linux:
    name: "test/linux (release, shard ${{ matrix.shard }})"
    runs-on: "${{ github.repository == 'denoland/deno' && 'ubuntu-20.04-xl' || 'ubuntu-20.04' }}"
    timeout-minutes: 90
    needs:
      - build-release-linux
    strategy:
      matrix:
        shard:
          - 1
      fail-fast: false
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Clone submodule ./third_party
        run: git submodule update --init --recursive --depth=1 -- ./third_party
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-release-linux
      - name: Unpack artifacts
        run: |-
          tar -xpf artifacts_1.tar.gz
          tar -xpf artifacts_2.tar.gz
          tar -xpf artifacts_3.tar.gz
          tar -xpf artifacts_4.tar.gz
      - name: Run tests
        run: "deno run --allow-read --allow-run ./tools/ci/test.js release ${{ matrix.shard }} 1"
  wpt-release-linux:
    name: "wpt/linux (release, shard ${{ matrix.shard }})"
    runs-on: "${{ github.repository == 'denoland/deno' && 'ubuntu-20.04-xl' || 'ubuntu-20.04' }}"
    timeout-minutes: 90
    strategy:
      matrix:
        shard:
          - 1
          - 2
          - 3
      fail-fast: false
    needs:
      - build-release-linux
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Clone submodule ./test_util/wpt
        run: git submodule update --init --recursive --depth=1 -- ./test_util/wpt
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-release-linux
      - name: Unpack artifacts
        run: |-
          tar -xpf artifacts_1.tar.gz
          tar -xpf artifacts_2.tar.gz
          tar -xpf artifacts_3.tar.gz
          tar -xpf artifacts_4.tar.gz
      - name: Set up WPT runner
        run: deno run -A --unstable ./tools/wpt.ts setup
      - name: Set up hosts file
        run: ./wpt make-hosts-file | sudo tee -a /etc/hosts
        working-directory: ./test_util/wpt/
      - name: Run Web Platform Tests
        run: "deno run -A --unstable ./tools/wpt.ts run --quiet --binary=./target/release/deno --shard=${{ matrix.shard }}/3"
  build-debug-macos:
    name: build/macos (debug)
    runs-on: macos-11
    timeout-minutes: 120
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Install Rust
        run: |-
          cargo --version
          rustc --version
          rustfmt --version
          cargo-fmt --version
          cargo-clippy --version
      - name: Cache Rust
        uses: Swatinem/rust-cache@v1
        with:
          key: debug
      - name: Build
        shell: bash
        run: |-
          mkdir -p target/debug
            cargo build  --locked --all-targets --tests --message-format=json > target/debug/cargo_build_manifest.json
        env:
          CARGO_PROFILE_DEV_DEBUG: 0
      - name: Package artifacts
        run: deno run --allow-read --allow-run --unstable ./tools/ci/package.js debug
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-debug-macos
          path: |-
            artifacts_1.tar.gz
            artifacts_2.tar.gz
            artifacts_3.tar.gz
            artifacts_4.tar.gz
  test-debug-macos:
    name: "test/macos (debug, shard ${{ matrix.shard }})"
    runs-on: macos-11
    timeout-minutes: 90
    needs:
      - build-debug-macos
    strategy:
      matrix:
        shard:
          - 1
          - 2
          - 3
      fail-fast: false
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Clone submodule ./third_party
        run: git submodule update --init --recursive --depth=1 -- ./third_party
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-debug-macos
      - name: Unpack artifacts
        run: |-
          gtar -xpf artifacts_1.tar.gz
          gtar -xpf artifacts_2.tar.gz
          gtar -xpf artifacts_3.tar.gz
          gtar -xpf artifacts_4.tar.gz
      - name: File info
        run: file target/debug/* target/debug/deps/*
      - name: Run tests
        run: "deno run --allow-read --allow-run ./tools/ci/test.js debug ${{ matrix.shard }} 3"
  build-release-macos:
    name: build/macos (release)
    runs-on: macos-11
    timeout-minutes: 120
    if: "(github.repository == 'denoland/deno' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')))"
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Install Rust
        run: |-
          cargo --version
          rustc --version
          rustfmt --version
          cargo-fmt --version
          cargo-clippy --version
      - name: Cache Rust
        uses: Swatinem/rust-cache@v1
        with:
          key: release
      - name: Build
        shell: bash
        run: |-
          mkdir -p target/release
            cargo build --release --locked --all-targets --tests --message-format=json > target/release/cargo_build_manifest.json
      - name: Package artifacts
        run: deno run --allow-read --allow-run --unstable ./tools/ci/package.js release
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-release-macos
          path: |-
            artifacts_1.tar.gz
            artifacts_2.tar.gz
            artifacts_3.tar.gz
            artifacts_4.tar.gz
  test-release-macos:
    name: "test/macos (release, shard ${{ matrix.shard }})"
    runs-on: macos-11
    timeout-minutes: 90
    needs:
      - build-release-macos
    strategy:
      matrix:
        shard:
          - 1
          - 2
          - 3
      fail-fast: false
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Clone submodule ./third_party
        run: git submodule update --init --recursive --depth=1 -- ./third_party
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-release-macos
      - name: Unpack artifacts
        run: |-
          gtar -xpf artifacts_1.tar.gz
          gtar -xpf artifacts_2.tar.gz
          gtar -xpf artifacts_3.tar.gz
          gtar -xpf artifacts_4.tar.gz
      - name: File info
        run: file target/release/* target/release/deps/*
      - name: Run tests
        run: "deno run --allow-read --allow-run ./tools/ci/test.js release ${{ matrix.shard }} 3"
  build-debug-windows:
    name: build/windows (debug)
    runs-on: "${{ github.repository == 'denoland/deno' && 'windows-2019-xl' || 'windows-2019' }}"
    timeout-minutes: 120
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Use GNU tar
        shell: cmd
        run: 'echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"'
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Install Rust
        run: |-
          cargo --version
          rustc --version
          rustfmt --version
          cargo-fmt --version
          cargo-clippy --version
      - name: Cache Rust
        uses: Swatinem/rust-cache@v1
        with:
          key: debug
      - name: Build
        shell: bash
        run: |-
          mkdir -p target/debug
            cargo build  --locked --all-targets --tests --message-format=json > target/debug/cargo_build_manifest.json
        env:
          CARGO_PROFILE_DEV_DEBUG: 0
      - name: Package artifacts
        run: deno run --allow-read --allow-run --unstable ./tools/ci/package.js debug
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-debug-windows
          path: |-
            artifacts_1.tar.gz
            artifacts_2.tar.gz
            artifacts_3.tar.gz
            artifacts_4.tar.gz
  test-debug-windows:
    name: "test/windows (debug, shard ${{ matrix.shard }})"
    runs-on: "${{ github.repository == 'denoland/deno' && 'windows-2019-xl' || 'windows-2019' }}"
    timeout-minutes: 90
    needs:
      - build-debug-windows
    strategy:
      matrix:
        shard:
          - 1
          - 2
          - 3
      fail-fast: false
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Clone submodule ./third_party
        run: git submodule update --init --recursive --depth=1 -- ./third_party
      - name: Use GNU tar
        shell: cmd
        run: 'echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"'
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-debug-windows
      - name: Unpack artifacts
        run: |-
          tar -xpf artifacts_1.tar.gz
          tar -xpf artifacts_2.tar.gz
          tar -xpf artifacts_3.tar.gz
          tar -xpf artifacts_4.tar.gz
      - name: Run tests
        run: "deno run --allow-read --allow-run ./tools/ci/test.js debug ${{ matrix.shard }} 3"
  build-release-windows:
    name: build/windows (release)
    runs-on: "${{ github.repository == 'denoland/deno' && 'windows-2019-xl' || 'windows-2019' }}"
    timeout-minutes: 120
    if: "(github.repository == 'denoland/deno' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')))"
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Use GNU tar
        shell: cmd
        run: 'echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"'
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Install Rust
        run: |-
          cargo --version
          rustc --version
          rustfmt --version
          cargo-fmt --version
          cargo-clippy --version
      - name: Cache Rust
        uses: Swatinem/rust-cache@v1
        with:
          key: release
      - name: Build
        shell: bash
        run: |-
          mkdir -p target/release
            cargo build --release --locked --all-targets --tests --message-format=json > target/release/cargo_build_manifest.json
      - name: Package artifacts
        run: deno run --allow-read --allow-run --unstable ./tools/ci/package.js release
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-release-windows
          path: |-
            artifacts_1.tar.gz
            artifacts_2.tar.gz
            artifacts_3.tar.gz
            artifacts_4.tar.gz
  test-release-windows:
    name: "test/windows (release, shard ${{ matrix.shard }})"
    runs-on: "${{ github.repository == 'denoland/deno' && 'windows-2019-xl' || 'windows-2019' }}"
    timeout-minutes: 90
    needs:
      - build-release-windows
    strategy:
      matrix:
        shard:
          - 1
          - 2
          - 3
      fail-fast: false
    steps:
      - name: Configure Git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
      - name: Clone submodule ./test_util/std
        run: git submodule update --init --recursive --depth=1 -- ./test_util/std
      - name: Clone submodule ./third_party
        run: git submodule update --init --recursive --depth=1 -- ./third_party
      - name: Use GNU tar
        shell: cmd
        run: 'echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"'
      - name: Install Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.28.3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-release-windows
      - name: Unpack artifacts
        run: |-
          tar -xpf artifacts_1.tar.gz
          tar -xpf artifacts_2.tar.gz
          tar -xpf artifacts_3.tar.gz
          tar -xpf artifacts_4.tar.gz
      - name: Run tests
        run: "deno run --allow-read --allow-run ./tools/ci/test.js release ${{ matrix.shard }} 3"
  upload_canary:
    name: upload_canary
    runs-on: "${{ github.repository == 'denoland/deno' && 'ubuntu-20.04-xl' || 'ubuntu-20.04' }}"
    timeout-minutes: 10
    if: "(github.repository == 'denoland/deno' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')))"
    needs:
      - build-release-linux
      - build-release-macos
      - build-release-windows
    steps:
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: denoland
          service_account_key: "${{ secrets.GCP_SA_KEY }}"
          export_default_credentials: true
      - name: Create canary version manifest
        run: "echo ${{ github.sha }} > canary-latest.txt"
      - name: Download artifacts (linux)
        uses: actions/download-artifact@v3
        with:
          name: build-release-linux
          path: linux/
      - name: Unpack artifacts (linux)
        run: |-
          tar -xpf linux/artifacts_1.tar.gz -C linux
          tar -xpf linux/artifacts_2.tar.gz -C linux
          tar -xpf linux/artifacts_3.tar.gz -C linux
          tar -xpf linux/artifacts_4.tar.gz -C linux
      - name: Create zip (linux)
        run: cd linux/target/release && zip -r ../../../deno-x86_64-unknown-linux-gnu.zip deno
      - name: Upload zip to dl.deno.land (linux)
        run: 'gsutil -h "Cache-Control: public, max-age=3600" cp deno-x86_64-unknown-linux-gnu.zip gs://dl.deno.land/canary/${{ github.sha }}/'
      - name: Download artifacts (macos)
        uses: actions/download-artifact@v3
        with:
          name: build-release-macos
          path: macos/
      - name: Unpack artifacts (macos)
        run: |-
          gtar -xpf macos/artifacts_1.tar.gz -C macos
          gtar -xpf macos/artifacts_2.tar.gz -C macos
          gtar -xpf macos/artifacts_3.tar.gz -C macos
          gtar -xpf macos/artifacts_4.tar.gz -C macos
      - name: Create zip (macos)
        run: cd macos/target/release && zip -r ../../../deno-x86_64-apple-darwin.zip deno
      - name: Upload zip to dl.deno.land (macos)
        run: 'gsutil -h "Cache-Control: public, max-age=3600" cp deno-x86_64-apple-darwin.zip gs://dl.deno.land/canary/${{ github.sha }}/'
      - name: Download artifacts (windows)
        uses: actions/download-artifact@v3
        with:
          name: build-release-windows
          path: windows/
      - name: Unpack artifacts (windows)
        run: |-
          tar -xpf windows/artifacts_1.tar.gz -C windows
          tar -xpf windows/artifacts_2.tar.gz -C windows
          tar -xpf windows/artifacts_3.tar.gz -C windows
          tar -xpf windows/artifacts_4.tar.gz -C windows
      - name: Create zip (windows)
        run: cd windows/target/release && zip -r ../../../deno-x86_64-pc-windows-msvc.zip deno.exe
      - name: Upload zip to dl.deno.land (windows)
        run: 'gsutil -h "Cache-Control: public, max-age=3600" cp deno-x86_64-pc-windows-msvc.zip gs://dl.deno.land/canary/${{ github.sha }}/'
      - name: Upload canary version manifest
        run: 'gsutil -h "Cache-Control: no-cache" cp canary-latest.txt gs://dl.deno.land/canary-latest.txt'
